/exec)git remote --verbose|C:\portfolio\_fastapi\fastapi-shop-app
origin	https://github.com/Olukeye/fastapi-shop-app (fetch)
origin	https://github.com/Olukeye/fastapi-shop-app (push)

C:\portfolio\_fastapi\fastapi-shop-app,d
    /ketik)wsl docker-compose up
    **>dc,pg
    run.bat,f(n=uvicorn --host 0.0.0.0 --port 8000 main:app)
    /ketik)dir
***********************************
Procfile
***********************************
web: uvicorn app.main:app --port $PORT --host 0.0.0.0 --timeout-keep-alive 1200
***********************************
Dockerfile
***********************************
FROM python:3.9.7
WORKDIR /usr/src/app
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY . . 
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
----------------------------------- docker-compose.yml
version: '3'
services:
  api:
    build: .
    ports:
      - 8000:8000
    env_file:
      - ./.env
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=shongokeye
      - POSTGRES_DB=bill
      
    volumes:
      - postgres-db:/var/lib/postgresql/data

volumes:
  postgres-db:
***********************************
flutterwave
***********************************
from typing import Dict
import requests
import pprint

def send_to_flutterwave(endpoint: str=None, data: Dict={}):
    url = "https://api.flutterwave.com/v3/bill-categories" + str(endpoint)

    headers = {
        'Authorization': ''
    }

    parameters: {
    "id": 1,
    }

    response  = requests.get(url, headers=headers)

    return response.json()

print(send_to_flutterwave())
# def call_fluf():
#     data: {
#         'country': 'NG',
#         'customer': '+2348037705238',
#         'amount': '100',
#         'recurrence': 'ONCE',
#         'type': 'AIRTIME',
#         'reference': '9300049404444',
#         'biller_name': 'DSTV, MTN VTU, TIGO VTU, VODAFONE VTU, VODAFONE POSTPAID PAYMENT'
#     }
#     return send_to_flutterwave(endpoint="", data=data)
***********************************
.env
***********************************
database_hostname=localhost
database_port=5432
database_password=rahasia
database_name=tempdb
database_username=usef
secret_key=123;lkh;lkjasldk
algorithm=sha-256
access_token_expire_minute=1
***********************************
alembic/env.py
***********************************
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

from  db.database import  Base
from  setttings.config import settings
config = context.config
config.set_main_option(
    "sqlalchemy.url",
    f"postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}"
)
if config.config_file_name is not None:
    fileConfig(config.config_file_name)
# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = Base.metadata
***********************************
main
***********************************
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware

from routes import user, auth, business, product, category, order

app = FastAPI()
origins = ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
async def catch_exception_middleware(request: Request, call_next):
    try:
        response = await call_next(request)
        return response
    except Exception as e:
        return JSONResponse(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, content=jsonable_encoder({"details": str(e)}))

app.middleware('http')(catch_exception_middleware)

app.include_router(user.router)
app.include_router(auth.router)
app.include_router(business.router)
app.include_router(product.router)
app.include_router(category.router)
app.include_router(order.router)

@app.get("/")
async def root():
    return {"message": "hello World!"}
***********************************
settings
***********************************
from pydantic import BaseSettings

class Settings(BaseSettings):
    database_hostname: str
    database_port: str
    database_password: str
    database_name: str
    database_username: str
    secret_key: str
    algorithm: str
    access_token_expire_minute: int
    # email: str
    # email_password: str
    # flw_secret_key: str
    # flw_encryption_key: str
    # flw_public_key: str
    
    class Config:
        env_file = ".env"

settings = Settings()
***********************************
from utils import oauth2, hashVerify
from models.user import User
from db.database import get_db
***********************************
from datetime import  datetime, date, timedelta

def create_customised_datetime():
    today = datetime.now()
    date_time = today.strftime("%d/%m/%Y, %H:%M:%S")
    return date_time
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash(password):
    return pwd_context.hash(password)

def verify(password, hashed_password):
    return pwd_context.verify(password, hashed_password)

from models.user import create_new_user, get_user_by_id, update_user, User, get_user_by_email, get_user_by_username
from models.business import create_new_business, get_all_business, update_business, get_a_business
from models.category import create_category
from models.product import create_new_product, get_allProducts, get_single_product, update_product, delete_product
from models.orders import create_order
from fastapi import Depends, HTTPException, status
from datetime import datetime, timedelta
from jose import JWTError, jwt
from fastapi.security import OAuth2PasswordBearer
from pydantic_schemas.token import TokenData
from sqlalchemy.orm import Session
from models.user import User
from db.database import get_db
from setttings.config import settings

oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')

SECRET_KEY = settings.secret_key
ALGORITHM = settings.algorithm
ACCESS_TOKEN_EXPIRE_MINUTE = settings. access_token_expire_minute

# Login access for registered user
def access_token(data: dict):
    to_encode = data.copy()
    expireIn = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTE)
    to_encode.update({"exp": expireIn})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, ALGORITHM)
    return encoded_jwt

def verify_access_token(token, credentials_exception):
    try:
        payload = jwt.decode(token, SECRET_KEY, ALGORITHM)
        id = payload.get("users_id")
        if not id:
            raise credentials_exception
        token_data = TokenData(id=id)
    except JWTError:
        raise credentials_exception
    return token_data

# Verify a user if logged in before they can perform any action
def get_current_user(token = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
        detail=f"Time Out!.Re-Login Please", headers={"WWW-Authenticate": "Bearer"})
    token = verify_access_token(token, credentials_exception)
    user = db.query(User).filter(User.id == token.id).first()
    return user

def get_user_status(current_user: User = Depends(get_current_user)):
    if not current_user.status:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

def if_user_is_admin(current_user: User = Depends(get_user_status)):
    if not current_user.role:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="You have no permission to Create a business yet!! ")    
    return current_user

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from setttings.config import settings

# import pyodbc 
# import sqlalchemy as sa
# engine = create_engine(f'mssql+pymssql://{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}?{settings.driver}')
SQLALCHEMY_DATABASE_URL = f"postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
# session = SessionLocal()
Base = declarative_base()
 # Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
***********************************
models
***********************************
from sqlalchemy import Column, Integer, String, Boolean, BigInteger, ForeignKey
from pydantic_schemas.business import CreateBis, BusOpt, UpdateBizz
from utils.date_stuff import create_customised_datetime
from sqlalchemy.sql.expression import text
# from sqlalchemy_utils import URLType
from sqlalchemy.orm import relationship
from db.database import get_db, Base
from sqlalchemy.orm import Session
from models.user import User
from typing import Dict, Optional


class Business(Base):
    __tablename__ = "businesses"
    id = Column(BigInteger, primary_key=True, nullable=False)
    name = Column(String, unique=True, nullable=False)
    state = Column(String, nullable=False)
    city = Column(String, nullable=False)
    description = Column(String, nullable=False)
    # url = Column(URLType, nullable=True)
    created_at = Column(String, nullable=False, server_default=text('now()'))
    updated_at = Column(String, nullable=False, server_default=text('now()'))
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    user = relationship("User")
    
    

def create_new_business(db: Session, user:int,  reg:CreateBis):
    
    newBusiness = Business(name=reg.name, state=reg.state, city=reg.city, description=reg.description,
                            created_at=create_customised_datetime(), updated_at=create_customised_datetime(), user=user)
    
    db.add(newBusiness)
    db.commit()
    db.refresh(newBusiness)
    
    return newBusiness



def get_all_business(db: Session,  limit: int =10, skip: int=0, search: Optional[str] = ""):
    
    get_all = db.query(Business).filter(Business.name.contains(search)).limit(limit).offset(skip).all()
    
    return get_all


def get_a_business(db: Session, id: int):
    
    singleBusiness = db.query(Business).filter(Business.id == id).first()
    
    return singleBusiness 
    
    
def update_business(id: int, edit:UpdateBizz, db: Session, values: Dict={}):
    
    values["updated_at"] = json.dumps(create_customised_datetime())
    
    updated = db.query(Business).filter(Business.id == id)
    
    updated.update(values)
    db.commit()
    
    return updated.first()
from sqlalchemy import Column, Integer, String, Boolean, BigInteger, ForeignKey
from pydantic_schemas.category import CreateCate
from utils.date_stuff import create_customised_datetime
from sqlalchemy.sql.expression import text
from sqlalchemy.orm import relationship
from db.database import get_db, Base
from sqlalchemy.orm import Session
from typing import Dict, Optional


class Category(Base):
    __tablename__ = 'categories'

    id = Column(BigInteger, primary_key=True)
    name = Column(String, unique=True, nullable=False)
    slug = Column(String, unique=True, nullable=False)
    business_id = Column(BigInteger, ForeignKey("businesses.id",  ondelete="CASCADE"), nullable=False)
    created_at = Column(String, server_default=text('now()'))
    updated_at = Column(String, server_default=text('now()'))
    

def create_category(db: Session, cat: CreateCate):
    categ = Category(name=cat.name, slug=cat.slug, business_id=cat.business_id,
    created_at=create_customised_datetime(),updated_at=create_customised_datetime())
    db.add(categ)
    db.commit()
    db.refresh(categ)
    return categ
from sqlalchemy import Column, Integer, String, Boolean, BigInteger, ForeignKey, Integer
from pydantic_schemas.order import CreateOrderModel
from utils.date_stuff import create_customised_datetime
from sqlalchemy.sql.expression import text
from sqlalchemy.orm import relationship
from db.database import Base
from sqlalchemy.orm import Session
from typing import Dict, Optional


class Order(Base):
    __tablename__ = "orders"
    id = Column(BigInteger, primary_key=True,  nullable=False)
    user_id = Column(BigInteger, ForeignKey("users.id"))
    product_id = Column(BigInteger, ForeignKey('products.id'))
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    email = Column(String, nullable=True)
    address = Column(String, nullable=True)
    zipcode = Column(Integer, nullable=True)
    city = Column(String, nullable=True)
    phone = Column(Integer, nullable=True)
    price = Column(Integer, nullable=False)
    quantity = Column(Integer,  nullable=False)
    created_at = Column(String, nullable=False)
    updated_at = Column(String, nullable=False)
    

    
def create_order(db: Session, order:CreateOrderModel):
    new_order = Order(user_id=order.user_id, product_id=order.product_id, first_name=order.first_name, last_name=order.email, address=order.address,
    zipcode=order.zipcode, city=order.city, phone=order.phone, price=order.price, quantity=order.quantity,created_at=create_customised_datetime(), updated_at=None)
    db.add(new_order)
    db.commit()
    db.refresh(new_order)
    return new_order
from sqlalchemy import Column, Integer, String, Boolean, BigInteger, ForeignKey, func
from utils.date_stuff import create_customised_datetime
from sqlalchemy.sql.expression import text
# from sqlalchemy_utils import URLType
from sqlalchemy.orm import relationship
from models.business import Business
from models.category import Category
from db.database import get_db, Base
from pydantic_schemas.product import *
from typing import Optional, Dict
from sqlalchemy.orm import Session
# from helper import handle_file_upload


class Product(Base):
    __tablename__ = "products"
    id = Column(BigInteger, primary_key=True, nullable=False)
    name = Column(String, nullable=False)
    state = Column(String, nullable=False)
    city = Column(String, nullable=False)
    slug = Column(String, unique=True, nullable=False)
    description = Column(String, nullable=False)
    price = Column(Integer, nullable=False)
    # image = Column(URLType)
    category_id = Column(BigInteger, ForeignKey("categories.id",  ondelete="CASCADE"), nullable=False)
    created_at = Column(String, server_default=text('now()'))
    updated_at = Column(String, server_default=text('now()'))



def create_new_product(db: Session, prod:ProdCreate):
    newProd = Product(name=prod.name, state=prod.state, city=prod.city, slug=prod.slug, description=prod.description, price=prod.price,
    category_id=prod.category_id, created_at=create_customised_datetime(), updated_at=None)
    db.add(newProd)
    db.commit()
    db.refresh(newProd)
    return newProd


def get_allProducts(db: Session, skip: int = 0, limit:int =10,  search: Optional[str] = ""):
    products = db.query(Product).filter(Product.name.contains(search)).limit(limit).offset(skip).all()
    return products


def get_single_product(id: int, db: Session):
    product = db.query(Product).filter(Product.id == id).first()
    return product


def update_product(id: int, edit: ProdUpdate, db: Session, values: Dict={}):
    values["updated_at"] = create_customised_datetime()
    editProduct = db.query(Product).filter(Product.id == id)
    editProduct.update(values)
    db.commit()
    return editProduct.first()


def delete_product(id: int, db: Session, user: int):
    delProd = db.query(Product).filter(Product.id == id)
    destroy = delProd.first()
    delProd.delete()
    db.commit()
    return  destroy
from sqlalchemy import Column, Integer, String, Boolean, BigInteger
from pydantic_schemas.user import CreateUser, User, UserOpt, UserUpdate
from utils.date_stuff import create_customised_datetime
from sqlalchemy.sql.expression import text
from sqlalchemy.orm import Session
from db.database import get_db, Base
from typing import Dict


class User(Base):
    __tablename__= "users"
    id = Column(BigInteger, primary_key=True, nullable=False)
    username = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)
    verified = Column(Boolean, server_default="False", nullable=False)
    status = Column(String, nullable=False)
    role = Column(String, nullable=False)
    created_at = Column(String, nullable=False)
    updated_at = Column(String, nullable=False)


def create_new_user(db: Session, user: CreateUser):
    
    newUser = User(username=user.username, email=user.email, password=user.password, verified=user.verified,
                   role=user.role, status=user.status ,created_at=create_customised_datetime(), updated_at=create_customised_datetime())
    
    db.add(newUser)
    db.commit()
    db.refresh(newUser)
    
    return newUser

def get_user_by_id(db: Session, id: int):
    user = db.query(User).filter(User.id == id).first()
    return user
    

def get_user_by_username(db: Session, username:str=None):
    user = db.query(User).filter(User.username == username).first()
    return user

def get_user_by_email(db: Session, email:str=None):
    user = db.query(User).filter(User.email == email).first()
    return user


def update_user(db: Session, user:User, id: int, values: Dict={}):
    values['updated_at'] = create_customised_datetime()
    user_update = db.query(User).filter(User.id == id)
    
    user_update.update(values)
    db.commit()
    
    return user_update.first()

***********************************
schemas
***********************************
from pydantic import BaseModel,EmailStr, constr
from utils.date_stuff import create_customised_datetime
from pydantic.types import conint
from typing import Optional
from .user import UserOpt


class Business(BaseModel):
    name: Optional[str] = None
    state: Optional[str] = None
    city: Optional[str] = None
    description: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    
    
class CreateBis(Business):
    pass

class UserOpt(BaseModel):
    id: int
    username: str
    email: EmailStr
    # verified: str
    class Config:
        orm_mode = True


class BusOpt(Business):
    id: int
    user: UserOpt
    class Config:
        orm_mode = True
        
class UpdateBizz(BaseModel):
    name: Optional[str] = None
    state: Optional[str] = None
    city: Optional[str] = None
    description: Optional[str] = None
    
    class Config:
        orm_mode = True
from pydantic import BaseModel,EmailStr, constr
from utils.date_stuff import create_customised_datetime
from pydantic.types import conint
from typing import Optional


class Category(BaseModel):
    name: str
    slug: str
    business_id: int
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    
    
    
class CreateCate(Category):
    pass

class CatOpt(BaseModel):
    name: str
    slug: str
    created_at: str = create_customised_datetime()
    class Config:
        orm_mode = True
from pydantic import BaseModel,EmailStr, constr
from utils.date_stuff import create_customised_datetime
from pydantic.types import conint
from typing import Optional


class Order(BaseModel):
    user_id:int
    product_id:int
    first_name:Optional[str] = None
    last_name:Optional[str] = None
    email :Optional[str] = None
    address :Optional[str] = None
    zipcode :Optional[int] = None
    city :Optional[str] = None
    phone :Optional[int] = None
    price :Optional[int] = None
    quantity :Optional[int] = None
    
class CreateOrderModel(Order):
    pass
from fastapi import FastAPI,File, UploadFile
from pydantic import BaseModel,EmailStr, constr
from utils.date_stuff import create_customised_datetime
from pydantic.types import conint
from typing import Optional, List
from .category import CatOpt, Category


class Product(BaseModel):
    name: Optional[str] = None 
    state: Optional[str] = None 
    city: Optional[str] = None 
    slug: Optional[str] = None 
    description: Optional[str] = None 
    price: Optional[float] = None 
    # image: Optional[str] = None
    category_id: int 
    created_at: str = create_customised_datetime()
    updated_at: str = create_customised_datetime()
    
class ProdCreate(Product):
    pass
        
class CatOpt(BaseModel):
    id:int
    name: str
    created_at: str = create_customised_datetime()
    
    class Config:
        orm_mode = True
        
        
class ProdOpt(BaseModel):
    name: str
    state: str
    city: str
    slug: str
    description:str
    price:float
    category_id: int
    # category: CatOpt
    created_at: str = create_customised_datetime()
    updated_at: str=  create_customised_datetime()
    
    class Config:
        orm_mode = True
        
        
class AllProd(BaseModel):
    Product: ProdOpt
    categories: CatOpt 
    
    class Config:
        orm_mode = True


class ProdUpdate(BaseModel):
    name: str
    description: Optional[str] = None
    price:Optional[float] = None
    # image:str
    updated_at: Optional[str] = None
    
    class Config:
        orm_mode = True
from pydantic import BaseModel
from typing import Optional


class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    id: Optional[str] = None
from pydantic import BaseModel,EmailStr, constr
from utils.date_stuff import create_customised_datetime
from pydantic.types import conint
from datetime import datetime
from decimal import Decimal
from typing import Optional


class User(BaseModel):
    username: str
    email: EmailStr
    password: constr(min_length=6, max_length=30)
    verified: Optional[bool]
    status: Optional[str] =  None
    role: Optional[str] = None
class CreateUser(User):
     pass
 
class UserOpt(BaseModel):
    id: int
    username: str
    email: EmailStr
    verified: str

    class Config:
        orm_mode = True

class UserUpdate(BaseModel):
    username: Optional[str]
    email: Optional[EmailStr]
    
    class Config:
        orm_mode = True
***********************************
repositories
***********************************
from fastapi import Response, status, HTTPException, Depends
from utils.model import create_new_business, get_all_business, update_business, get_a_business
from pydantic_schemas.business import *
from sqlalchemy.orm import Session
from typing import Dict

def create_business(db: Session, user:int, reg:CreateBis):
    return create_new_business(db=db, user=user, reg=reg)

def singleBusiness(id: int, db: Session):
    business = get_a_business(db=db, id=id)
    if not business:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Business not found!")    
    return business

def allBusiness(db: Session):
    return get_all_business(db=db)

def updateBusiness(id: int, user:int,  edit: UpdateBizz, db: Session, values: Dict={}):
   update = update_business(id=id, db=db, edit=edit ,values=values)
   if not update:
        raise HTTPException(status_code = status.HTTP_403_FORBIDDEN, detail = f"You can't perform this action!")
   elif update.user_id != user.id:
        raise HTTPException(status_code = status.HTTP_403_FORBIDDEN, detail = f"Sorry you didn't create this!")    
   return update
from fastapi import Response, status, HTTPException, Depends
from utils.model import create_category
from pydantic_schemas.category import *
from sqlalchemy.orm import Session
from typing import Dict

def category(db: Session, cat:CreateCate):
    return create_category(db=db, cat=cat)

from fastapi import Response, status, HTTPException, Depends
from utils.model import create_order
from pydantic_schemas.order import *
from sqlalchemy.orm import Session
from typing import Dict

def create_new_oder(db: Session, order:CreateOrderModel):
    data = create_order(db=db, order=order)
    return {
        "status":True,
        "message":"Success",
        "order": data
    }

from fastapi import Response, status, HTTPException, Depends, File, UploadFile
from utils.oauth2 import get_current_user, if_user_is_admin
from utils.model import *
from pydantic_schemas.product import *
from sqlalchemy.orm import Session
from db.database import get_db
from typing import Dict

def allProduct(db: Session):
    return get_allProducts(db=db)

def newProduct(db: Session, prod:ProdCreate):
    return create_new_product(db=db, prod=prod)

def singleProduct(id: int, db: Session):
    products = get_single_product(id=id, db=db)
    if not products:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, detail=f"Product not found!")
    return products

def updateProduct(id: int, edit: ProdUpdate, db: Session, values: Dict={}):
    edited = update_product(id=id, db=db, edit=edit, values=values)
    if not edited:
        raise HTTPException(status_code = status.HTTP_403_FORBIDDEN, detail = f"You can't perform this action!")
    return edited

def deleteProduct(id: int, db: Session, user: int):
    destroy = delete_product(id=id, user=user, db=db)
    if not destroy:
        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND,  detail=f"Product id:{id} does not exist!")
    return destroy

from fastapi import Response, status, HTTPException, Depends
from utils.model import create_new_user, get_user_by_id, update_user, get_user_by_email, get_user_by_username
from utils.oauth2 import get_current_user, verify_access_token
from pydantic_schemas.user import *
from utils.hashVerify import hash
from sqlalchemy.orm import Session
from db.database import get_db
# from mails.email import send_email
from typing import Dict


def register(db: Session, user:User):  
    hashed_password = hash(user.password)
    user.password = hashed_password
    # return send_email([user.email], user)
    return create_new_user(db=db, user=user)

def singleUser(db: Session, id:int):
    user = get_user_by_id(db=db, id=id)
    if user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail= "User not found!")    
    return user

def updatUser(db: Session, user:UserUpdate, id: int, values: Dict={}):
    updated = update_user(db=db, user=user, id=id, values=values)
    if updated  is None:
        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, detail= "You can't perform this action!!")
    return updated 

async def verification(token: str):
    user = await verify_access_token(token, credentials_exception)
    if user and not user.verified:
        user.verified = True
        await user.save()    
    return user
***********************************
app.include_router(user.router)
***********************************
from fastapi import FastAPI, Response, Request, status, HTTPException, Depends, APIRouter, File, UploadFile
from fastapi.responses import HTMLResponse
# templates
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
# from mails.email import send_email

from pydantic_schemas.user import CreateUser, User, UserOpt, UserUpdate
from repositories.userRepo import register, singleUser, updatUser #verification
from utils.oauth2 import get_current_user, verify_access_token
from db.database import get_db

router = APIRouter(tags = ['User'])
@router.post('/Register', status_code=status.HTTP_201_CREATED, response_model=UserOpt)
async def new_user(user: User,  db: Session = Depends(get_db)):
    # send_email([user.email], user)
    return register(db=db,  user=user)
@router.get("/user/{id}", response_model=UserOpt)
async def get_user(id:int, db: Session=Depends(get_db), current_user:User= Depends(get_current_user)):
    return singleUser(db=db, id=id)
@router.put("/user/{id}", response_model=UserOpt)
async def update(id:int, user:UserUpdate, db: Session = Depends(get_db), current_user:User= Depends(get_current_user)):
    return updatUser(db=db, user=user, id=id, values=dict(user))
# templates= Jinja2Templates(directory='templates')
# @router.get("/verification", response_class=HTMLResponse)
# async def verification_email(request: Request, token: str):
#    return verification(token)        
#    return templates.TemplateResponse("verification.html", {"reqest": request, "username": user.username})

***********************************
app.include_router(auth.router)
***********************************
from fastapi import APIRouter, Depends, status, HTTPException, Response
from fastapi.security.oauth2 import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from pydantic_schemas.token import Token
from utils import oauth2, hashVerify
from models.user import User
from db.database import get_db

router = APIRouter(tags = ['Login'])
@router.post('/login', response_model=Token)
async def login_user(user_info: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(User).filter(User.email == user_info.username).first()
    if not user:
        raise HTTPException(status_code= status.HTTP_403_FORBIDDEN, detail=f"Invalid Credentials!")
    if not hashVerify.verify(user_info.password, user.password):
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f"Invalid Password")
    token = oauth2.access_token(data={"users_id": user.id})
    return {"access_token": token, "token_type":"bearer"}
***********************************
app.include_router(business.router)
***********************************
from fastapi import FastAPI, Response, requests, status, HTTPException, Depends, APIRouter, File, UploadFile
from pydantic_schemas.business import CreateBis, Business, BusOpt, UpdateBizz
from sqlalchemy.orm import Session
from typing import List
from repositories.busisnessRepo import create_business,  allBusiness, updateBusiness, singleBusiness
from utils.oauth2 import get_current_user, if_user_is_admin
from db.database import get_db
router = APIRouter(tags = ['Business'])

@router.get("/allbusiness",status_code=status.HTTP_200_OK, response_model=List[BusOpt])
async def get_all(db: Session = Depends(get_db), user:int =Depends(get_current_user)):
    return allBusiness(db=db)

@router.post("/business", status_code=status.HTTP_201_CREATED, response_model=BusOpt)
async def new_business(reg:CreateBis, db: Session = Depends(get_db), user:int = Depends(if_user_is_admin)):
    # with open("media/"+file.filename, "wb") as image:
    #      shutil.copyfileobj(file.file, image)
    # url = str("media/"+file.filename)    
    return create_business(db=db, user=user, reg=reg)

@router.get("/siglebusiness/{id}",status_code=status.HTTP_200_OK, response_model=BusOpt)
async def single_business(id: int, db: Session = Depends(get_db), user: int = Depends(get_current_user)):
    return singleBusiness(id=id, db=db)

@router.put("/updateBusiness/{id}",status_code=status.HTTP_200_OK)
async def business_update(id: int, edit:UpdateBizz, db: Session = Depends(get_db), user: int =Depends(if_user_is_admin)):
    return updateBusiness(id=id, edit=edit, db=db, user=user, values=dict(edit))
***********************************
app.include_router(product.router)
***********************************
from fastapi import FastAPI, Response, requests, status, HTTPException, Depends, APIRouter, File, UploadFile
from pydantic_schemas.product import *
from repositories.productRepo import newProduct, allProduct, singleProduct, updateProduct, deleteProduct
from pydantic_schemas.product import *
from utils.oauth2 import get_current_user, if_user_is_admin
from sqlalchemy.orm import Session
from db.database import get_db
from typing import List
import shutil
router = APIRouter(tags = ['Product'])

@router.get("/allProduct")
async def get_Products(db: Session = Depends(get_db), user: int = Depends(get_current_user)):
    return allProduct(db=db)

@router.post("/product",status_code=status.HTTP_201_CREATED, response_model=ProdOpt)
async def createProduct(prod:ProdCreate, db: Session = Depends(get_db), user: int = Depends(if_user_is_admin)):
    # with open("media/"+file.filename, "wb") as image:
    #    shutil.copyfileobj(file.file, image)
    # url = str("media/"+file.filename)    
    return newProduct(db=db, prod=prod)

@router.get("/singleProduct/{id}")
async def single_product(id: int, db: Session = Depends(get_db), user: int = Depends(get_current_user)):
    return singleProduct(id=id, db=db)

@router.delete("/deleteProduct/{id}", status_code = status.HTTP_204_NO_CONTENT)
async def delete_prod(id: int, db: Session = Depends(get_db), user: int = Depends(if_user_is_admin)):
    return deleteProduct(id=id, user=user, db=db)

@router.put("/editproduct/{id}", status_code=status.HTTP_200_OK)
async def update_product(id: int, edit: ProdUpdate, db: Session = Depends(get_db), user: int = Depends(if_user_is_admin)):
    return updateProduct(id=id, db=db, edit=edit, values=dict(edit))
***********************************
app.include_router(category.router)
***********************************
from fastapi import FastAPI, Response, requests, status, HTTPException, Depends, APIRouter, File, UploadFile
from pydantic_schemas.category import CreateCate
from repositories.categoryRepo import category
from utils.oauth2 import if_user_is_admin
from sqlalchemy.orm import Session
from db.database import get_db
from typing import List
router = APIRouter(tags = ['Category'])

@router.post("/newCat")
async def newCategory(cat:CreateCate, db: Session = Depends(get_db), user: int = Depends(if_user_is_admin)):
    return category(db=db, cat=cat)
***********************************
app.include_router(order.router)
***********************************
from fastapi import FastAPI, Response, requests, status, HTTPException, Depends, APIRouter, File, UploadFile
from pydantic_schemas.order import *
from repositories.orderRepo import create_new_oder
from pydantic_schemas.order import *
from utils.oauth2 import get_current_user
from sqlalchemy.orm import Session
from db.database import get_db
from typing import List
import shutil

router = APIRouter(tags = ['Order'])

@router.post("/order")
async def new_order( order:CreateOrderModel, db: Session = Depends(get_db), user:int=Depends(get_current_user)):
    return create_new_oder(db=db, order=order)
