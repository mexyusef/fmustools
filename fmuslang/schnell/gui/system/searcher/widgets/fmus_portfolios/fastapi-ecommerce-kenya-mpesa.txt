from sqlalchemy import Column, Integer, String
from typing import List
from pydantic import BaseModel
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# SQLALCHEMY_DATABASE_URL = "mysql+mysqlconnector://root:@localhost:3306/restapi"

# engine = create_engine(
#     SQLALCHEMY_DATABASE_URL,echo=True
# )

engine = create_engine("mysql+mysqlconnector://root@localhost:3306/restapi",echo = True)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

################################################# model

class UserInfo(Base):
    __tablename__ = "user_info"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True)
    password = Column(String)
    fullname = Column(String, unique=True)

class ItemInfo(Base):
    __tablename__ = "item_info"

    id = Column(Integer, primary_key=True, index=True)
    itemname = Column(String, unique=True)
    itemprice = Column(Integer)

class CartInfo(Base):
    __tablename__ = "cart_info"

    id = Column(Integer, primary_key=True, index=True)
    ownername = Column(Integer, unique=True)
    itemname = Column(String, unique=True)
    itemprice = Column(Integer)

################################################# schema

class UserInfoBase(BaseModel):
    username:str
    fullname:str

class UserCreate(UserInfoBase):
    password:str

class UserInfo(UserInfoBase):
    id:int

    class Config:
        orm_mode = True

class UserLogin(BaseModel):
    username:str
    password:str

class ItemInfo(BaseModel):
    itemname:str
    itemprice:int

class ItemAInfo(ItemInfo):
    id:int

    class Config:
        orm_mode = True

class CartOwnerInfo(BaseModel):
    username:str

class CartInfo(BaseModel):
    itemname:str
    itemprice:int

class CartItemAInfo(CartInfo):
    id:int
    class Config:
        orm_mode = True

class UserPayment(BaseModel):
    phonenumber:int
    total:int

Base.metadata.create_all(bind=engine)

app = FastAPI()

################################################# route
from sqlalchemy.orm import Session
import bcrypt
import requests
from requests.auth import HTTPBasicAuth
import json
from datetime import datetime
import base64

def get_user_by_username(db: Session, username: str):
    return db.query(models.UserInfo).filter(models.UserInfo.username == username).first()

def create_user(db: Session, user: schemas.UserCreate):
    hashed_password = bcrypt.hashpw(user.password.encode('utf-8'), bcrypt.gensalt())
    db_user = models.UserInfo(username=user.username, password=hashed_password, fullname=user.fullname)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def get_Login(db: Session, username: str, password:str):
    db_user = db.query(models.UserInfo).filter(models.UserInfo.username == username).first()
    print(username,password)
    passw = bcrypt.checkpw(password.encode('utf-8'), db_user.password.encode('utf-8')) 
    return passw

def get_item_by_id(db: Session, id: int):
    return db.query(models.ItemInfo).filter(models.ItemInfo.id == id).first()

def add_table(db: Session, item: schemas.ItemInfo):
    db_item = models.ItemInfo(itemname=item.itemname,itemprice=item.itemprice)
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item

def delete_item_by_id(db: Session, id: int):
    delitem = db.query(models.ItemInfo).filter(models.ItemInfo.id == id).first()
    if delitem is None:
        return
    db.delete(delitem)
    db.commit()
    return delitem

def add_to_cart(db: Session, username: str, items:models.CartInfo):
    user = db.query(models.UserInfo).filter(models.UserInfo.username == username).first()
    db_cart = models.CartInfo(ownername=user.id,itemname=items.itemname,itemprice=items.itemprice)
    db.add(db_cart)
    db.commit()
    db.refresh(db_cart)
    return db_cart

def delete_cart_item_by_id(db: Session, id: int):
    delitem = db.query(models.CartInfo).filter(models.CartInfo.id == id).first()
    if delitem is None:
        return
    db.delete(delitem)
    db.commit()
    return delitem

# Mpesa processing function(Not Complete Yet)
def payment(db:Session, phone_number:int,total:int):
    consumer_key = 'consumer_key'
    consumer_secret = 'consumer_secret'
    api_URL = 'https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials'

    r = requests.get(api_URL, auth=HTTPBasicAuth(consumer_key, consumer_secret))
    mpesa_access_token = json.loads(r.text)
    validated_mpesa_access_token = mpesa_access_token['access_token']

    lipa_time = datetime.now().strftime('%Y%m%d%H%M%S')
    Business_short_code = 'short_code' # replace with the business short code
    passkey = "pass_key"
    data_to_encode = Business_short_code + passkey + lipa_time
    online_password = base64.b64encode(data_to_encode.encode())
    decode_password = online_password.decode('utf-8')

    access_token = validated_mpesa_access_token
    api_url = "https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest"
    headers = {"Authorization": "Bearer %s" % access_token}
    request = {
        "BusinessShortCode": Business_short_code,
        "Password": decode_password,
        "Timestamp": lipa_time,
        "TransactionType": "CustomerPayBillOnline",
        "Amount": total,
        "PartyA": phone_number,
        "PartyB": Business_short_code,
        "PhoneNumber": phone_number,
        "CallBackURL": "https://127.0.0.1:8000/callback", # Mpesa Callback
        "AccountReference": "User Payment",
        "TransactionDesc": "Testing stk push"
    }
    response = requests.post(api_url, json=request, headers=headers)
    return response.text

#################################################


def get_db():
    db = None
    try:
        db = SessionLocal()
        yield db
    finally:
        db.close()

# register API
@app.post("/register", response_model=schemas.UserInfo)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_username(db, username=user.username)
    if db_user:
        raise HTTPException(status_code=400, detail="Username already registered")
    return crud.create_user(db=db, user=user)

# login API
@app.post("/login")
def login_user(user:schemas.UserLogin, db:Session = Depends(get_db)):
    db_user = crud.get_Login(db, username=user.username, password=user.password)
    if db_user == False :
        raise HTTPException(status_code=400, detail="Wrong username/password")
    return {"message":"User found"}

# get user by username API
@app.get("/get_user/{username}", response_model=schemas.UserInfo)
def get_user(username, db:Session = Depends(get_db)):
    db_user = crud.get_user_by_username(db, username=username)
    return db_user

# add items to DB API
@app.post("/add_item", response_model=schemas.ItemInfo)
def add_item(item: schemas.ItemInfo, db: Session = Depends(get_db)):
    db_item = crud.add_table(db=db, item=item)
    if db_item:
        raise HTTPException(status_code=200, detail="item registered")
    return 

# get item by id API
@app.get("/get_item/{id}", response_model=schemas.ItemAInfo)
def get_user(id, db:Session = Depends(get_db)):
    db_item = crud.get_item_by_id(db, id=id)
    if db_item is None:
        raise HTTPException(status_code=400, detail="No item found")
    return db_item

# delete item by id API
@app.delete("/del_item/{id}", response_model=schemas.ItemAInfo)
def del_user(id, db:Session = Depends(get_db)):
    db_item = crud.delete_item_by_id(db, id=id)
    if db_item:
        raise HTTPException(status_code=200, detail="Item found to delete")
    else:
        raise HTTPException(status_code=400, detail="Item Not found to delete")
    return

# add to cart by username and the items to be added API
@app.post("/add_to_cart/{username}", response_model=schemas.CartOwnerInfo)
def add_item(username, items:schemas.CartInfo, db: Session = Depends(get_db)):
    db_cart = crud.add_to_cart(db=db, username=username,items=items)
    if db_cart:
        raise HTTPException(status_code=200, detail="item registered to cart")
    return 

# delete items in the cart by id API
@app.delete("/del_cart_item/{id}", response_model=schemas.CartItemAInfo)
def del_user(id, db:Session = Depends(get_db)):
    db_item = crud.delete_cart_item_by_id(db, id=id)
    if db_item:
        raise HTTPException(status_code=200, detail="Item found to delete")
    else:
        raise HTTPException(status_code=400, detail="Item Not found to delete")
    return

# mpesa payment API
@app.post("/payment")
def add_item(userphone:schemas.UserPayment, db: Session = Depends(get_db)):
    user_payment = crud.payment(db=db, phone_number=userphone.phonenumber,total=userphone.total)
    if user_payment:
        raise HTTPException(status_code=200, detail="payment Started")
    return 

# mpesa Callback API
@app.post("/callback")
def mpesa_callback(db: Session = Depends(get_db)):
    return {'success':"Payment was made successfully"}

#  if __name__ == "__main__":
#      uvicorn.run(app, host="127.0.0.1", port=8081)
