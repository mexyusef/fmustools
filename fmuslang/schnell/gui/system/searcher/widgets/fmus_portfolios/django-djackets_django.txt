C:\portfolio\_django\djackets_django\
Commands

Install software on server

	sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx
	sudo apt install certbot python3-certbot-nginx

Add user group and user
	sudo groupadd --system webapps
	sudo useradd --system --gid webapps --shell /bin/bash --home /webapps/djackets djackets

Install Python packages from local server
	pip install -r req.txt

Install other Python packages
	pip install psycopg2-binary
	pip install gunicorn

Create zipfile of the project
	zip -r djackets_django.zip djackets_django

Install unzip on the server
	apt install unzip

Make the gunicorn_script file executable
	chmod +x environment_3_8_2/bin/gunicorn_start

Change the owner ship of this folder and all its children
	chown -R djackets:webapps .

Install Supervisor (reread, update and restart)
	apt install supervisor
	supervisorctl reread
	supervisorctl update
	supervisorctl restart djackets_django

Make a symbolic link 
	ln -s ../sites-available/apidjackets.codewithstein.com .

Get the SSL / HTTPS certificate for the domain
	sudo certbot -d djackets.codewithstein.com

Restart Nginx
	service nginx restart

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'djackets_django.settings')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'djoser',

    'product',
    'order'
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
]

ROOT_URLCONF = 'djackets_django.urls'
WSGI_APPLICATION = 'djackets_django.wsgi.application'

#################################################
from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/', include('djoser.urls')),
    path('api/v1/', include('djoser.urls.authtoken')),
    path('api/v1/', include('product.urls')),
    path('api/v1/', include('order.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

#################################################C:\portfolio\_django\djackets_django\extras\apidjackets.nginx.conf
upstream djackets_app_server {
	server unix:/webapps/djackets/environment_3_8_2/run/gunicorn.sock fail_timeout=0;
}

server {
	listen 80;
	server_name apidjackets.codewithstein.com;
	return 301 https://apidjackets.codewithstein.com$request_uri;
}

server {
	listen 443 ssl;
	server_name apidjackets.codewithstein.com;

	client_max_body_size 4G;

	access_log /webapps/djackets/environment_3_8_2/logs/nginx-django-access.log;
	error_log /webapps/djackets/environment_3_8_2/logs/nginx-django-error.log;

	ssl_certificate /etc/letsencrypt/live/apidjackets.codewithstein.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/apidjackets.codewithstein.com/privkey.pem;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

	location /static/ {
		alias /webapps/djackets//environment_3_8_2/djackets/static/;
	}

	location /media/ {
		alias /webapps/djackets/djackets_django/media/;
	}

	location / {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		proxy_set_header Host $http_host;

		proxy_redirect off;

		if (!-f $request_filename) {
			proxy_pass http://djackets_app_server;
		}
	}
}

#################################################C:\portfolio\_django\djackets_django\extras\djackets.conf
Below is the supervisor config file, located at: /etc/supervisor/conf/djackets.conf

[program:djackets_django]
command = /webapps/djackets/environment_3_8_2/bin/gunicorn_start
user = djackets
stdout_logfile = /webapps/djackets/environment_3_8_2/logs/supervisor.log
redirect_stderr = true
environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8

#################################################C:\portfolio\_django\djackets_django\extras\djackets.nginx.conf
server {
	listen 80;
	server_name djackets.codewithstein.com;
	return 301 https://djackets.codewithstein.com$request_uri;
}

server {
	listen 443 ssl;
	server_name djackets.codewithstein.com;

	client_max_body_size 4G;

	error_log  /webapps/djackets/environment_3_8_2/logs/nginx-vue-error.log;
	access_log /webapps/djackets/environment_3_8_2/logs/nginx-vue-access.log;

	ssl_certificate /etc/letsencrypt/live/djackets.codewithstein.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/djackets.codewithstein.com/privkey.pem;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

	charset utf-8;
	root /webapps/djackets/djackets_vue/dist;
	index index.html index.htm;

	location / {
		root /webapps/djackets/djackets_vue/dist;
		try_files $uri /index.html;
	}
}

#################################################C:\portfolio\_django\djackets_django\extras\gunicorn_start
#!/bin/sh

NAME='djackets_django'
DJANGODIR=/webapps/djackets/djackets_django
SOCKFILE=/webapps/djackets/environment_3_8_2/run/gunicorn.sock
USER=djackets
GROUP=webapps
NUM_WORKERS=3
DJANGO_SETTINGS_MODULE=djackets_django.settingsprod
DJANGO_WSGI_MODULE=djackets_django.wsgi
TIMEOUT=120

cd $DJANGODIR
source ../environment_3_8_2/bin/activate
export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=$DJANGODIR:$PYTHONPATH

RUNDIR=$(dirname $SOCKFILE)
test -d $RUNDIR || mkdir -p $RUNDIR

exec ../environment_3_8_2/bin/gunicorn ${DJANGO_WSGI_MODULE}:application \
--name $NAME \
--workers $NUM_WORKERS \
--timeout $TIMEOUT \
--user=$USER --group=$GROUP \
--bind=unix:$SOCKFILE \
--log-level=debug \
--log-file=-

################################################# order/admin.py
from django.contrib import admin

from .models import Order, OrderItem

admin.site.register(Order)
################################################# order/models.py
from django.contrib.auth.models import User
from django.db import models

from product.models import Product

class Order(models.Model):
    user = models.ForeignKey(User, related_name='orders', on_delete=models.CASCADE)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    address = models.CharField(max_length=100)
    zipcode = models.CharField(max_length=100)
    place = models.CharField(max_length=100)
    phone = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    paid_amount = models.DecimalField(max_digits=8, decimal_places=2, blank=True, null=True)
    stripe_token = models.CharField(max_length=100)

    class Meta:
        ordering = ['-created_at',]
    
    def __str__(self):
        return self.first_name

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='items', on_delete=models.CASCADE)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    quantity = models.IntegerField(default=1)

    def __str__(self):
        return '%s' % self.id
################################################# order/serializers.py
from rest_framework import serializers

from .models import Order, OrderItem

from product.serializers import ProductSerializer

class MyOrderItemSerializer(serializers.ModelSerializer):    
    product = ProductSerializer()

    class Meta:
        model = OrderItem
        fields = (
            "price",
            "product",
            "quantity",
        )

class MyOrderSerializer(serializers.ModelSerializer):
    items = MyOrderItemSerializer(many=True)

    class Meta:
        model = Order
        fields = (
            "id",
            "first_name",
            "last_name",
            "email",
            "address",
            "zipcode",
            "place",
            "phone",
            "stripe_token",
            "items",
            "paid_amount"
        )

class OrderItemSerializer(serializers.ModelSerializer):    
    class Meta:
        model = OrderItem
        fields = (
            "price",
            "product",
            "quantity",
        )

class OrderSerializer(serializers.ModelSerializer):
    items = OrderItemSerializer(many=True)

    class Meta:
        model = Order
        fields = (
            "id",
            "first_name",
            "last_name",
            "email",
            "address",
            "zipcode",
            "place",
            "phone",
            "stripe_token",
            "items",
        )
    
    def create(self, validated_data):
        items_data = validated_data.pop('items')
        order = Order.objects.create(**validated_data)

        for item_data in items_data:
            OrderItem.objects.create(order=order, **item_data)
            
        return order
################################################# order/urls.py
from django.urls import path

from order import views

urlpatterns = [
    path('checkout/', views.checkout),
    path('orders/', views.OrdersList.as_view()),
]
################################################# order/views.py
import stripe

from django.conf import settings
from django.contrib.auth.models import User
from django.http import Http404
from django.shortcuts import render

from rest_framework import status, authentication, permissions
from rest_framework.decorators import api_view, authentication_classes, permission_classes
from rest_framework.views import APIView
from rest_framework.response import Response

from .models import Order, OrderItem
from .serializers import OrderSerializer, MyOrderSerializer

@api_view(['POST'])
@authentication_classes([authentication.TokenAuthentication])
@permission_classes([permissions.IsAuthenticated])
def checkout(request):
    serializer = OrderSerializer(data=request.data)

    if serializer.is_valid():
        stripe.api_key = settings.STRIPE_SECRET_KEY
        paid_amount = sum(item.get('quantity') * item.get('product').price for item in serializer.validated_data['items'])

        try:
            charge = stripe.Charge.create(
                amount=int(paid_amount * 100),
                currency='USD',
                description='Charge from Djackets',
                source=serializer.validated_data['stripe_token']
            )

            serializer.save(user=request.user, paid_amount=paid_amount)

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        except Exception:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class OrdersList(APIView):
    authentication_classes = [authentication.TokenAuthentication]
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, format=None):
        orders = Order.objects.filter(user=request.user)
        serializer = MyOrderSerializer(orders, many=True)
        return Response(serializer.data)
################################################# product/admin.py
from django.contrib import admin

from .models import Category, Product

admin.site.register(Category)
admin.site.register(Product)
################################################# product/models.py
from io import BytesIO
from PIL import Image

from django.core.files import File
from django.db import models

class Category(models.Model):
    name = models.CharField(max_length=255)
    slug = models.SlugField()

    class Meta:
        ordering = ('name',)
    
    def __str__(self):
        return self.name
    
    def get_absolute_url(self):
        return f'/{self.slug}/'

class Product(models.Model):
    category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    slug = models.SlugField()
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=6, decimal_places=2)
    image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)
    date_added = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ('-date_added',)
    
    def __str__(self):
        return self.name
    
    def get_absolute_url(self):
        return f'/{self.category.slug}/{self.slug}/'
    
    def get_image(self):
        if self.image:
            return 'http://127.0.0.1:8000' + self.image.url
        return ''
    
    def get_thumbnail(self):
        if self.thumbnail:
            return 'http://127.0.0.1:8000' + self.thumbnail.url
        else:
            if self.image:
                self.thumbnail = self.make_thumbnail(self.image)
                self.save()

                return 'http://127.0.0.1:8000' + self.thumbnail.url
            else:
                return ''
    
    def make_thumbnail(self, image, size=(300, 200)):
        img = Image.open(image)
        img.convert('RGB')
        img.thumbnail(size)

        thumb_io = BytesIO()
        img.save(thumb_io, 'JPEG', quality=85)

        thumbnail = File(thumb_io, name=image.name)

        return thumbnail
################################################# product/serializers.py
from rest_framework import serializers

from .models import Category, Product

class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = (
            "id",
            "name",
            "get_absolute_url",
            "description",
            "price",
            "get_image",
            "get_thumbnail"
        )

class CategorySerializer(serializers.ModelSerializer):
    products = ProductSerializer(many=True)

    class Meta:
        model = Category
        fields = (
            "id",
            "name",
            "get_absolute_url",
            "products",
        )
################################################# product/urls.py
from django.urls import path, include

from product import views

urlpatterns = [
    path('latest-products/', views.LatestProductsList.as_view()),
    path('products/search/', views.search),
    path('products/<slug:category_slug>/<slug:product_slug>/', views.ProductDetail.as_view()),
    path('products/<slug:category_slug>/', views.CategoryDetail.as_view()),
]
################################################# product/views.py
from django.db.models import Q
from django.http import Http404

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view

from .models import Product, Category
from .serializers import ProductSerializer, CategorySerializer

class LatestProductsList(APIView):
    def get(self, request, format=None):
        products = Product.objects.all()[0:4]
        serializer = ProductSerializer(products, many=True)
        return Response(serializer.data)

class ProductDetail(APIView):
    def get_object(self, category_slug, product_slug):
        try:
            return Product.objects.filter(category__slug=category_slug).get(slug=product_slug)
        except Product.DoesNotExist:
            raise Http404
    
    def get(self, request, category_slug, product_slug, format=None):
        product = self.get_object(category_slug, product_slug)
        serializer = ProductSerializer(product)
        return Response(serializer.data)

class CategoryDetail(APIView):
    def get_object(self, category_slug):
        try:
            return Category.objects.get(slug=category_slug)
        except Category.DoesNotExist:
            raise Http404
    
    def get(self, request, category_slug, format=None):
        category = self.get_object(category_slug)
        serializer = CategorySerializer(category)
        return Response(serializer.data)

@api_view(['POST'])
def search(request):
    query = request.data.get('query', '')

    if query:
        products = Product.objects.filter(Q(name__icontains=query) | Q(description__icontains=query))
        serializer = ProductSerializer(products, many=True)
        return Response(serializer.data)
    else:
        return Response({"products": []})

#################################################
