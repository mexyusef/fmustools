
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crashblog.settings')
################################################# crashblog.settings
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',
    'core.apps.CoreConfig',
    'blog.apps.BlogConfig'
]
ROOT_URLCONF = 'crashblog.urls'
WSGI_APPLICATION = 'crashblog.wsgi.application'

#################################################C:\portfolio\_django\crashblog\crashblog\sitemaps.py
from django.contrib.sitemaps import Sitemap
from django.shortcuts import reverse

from blog.models import Category, Post

class CategorySitemap(Sitemap):
    def items(self):
        return Category.objects.all()

class PostSitemap(Sitemap):
    def items(self):
        return Post.objects.filter(status=Post.ACTIVE)
    
    def lastmod(self, obj):
        return obj.created_at
#################################################C:\portfolio\_django\crashblog\crashblog\urls.py
from django.conf import settings
from django.conf.urls.static import static
from django.contrib import sitemaps
from django.contrib.sitemaps.views import sitemap
from django.contrib import admin
from django.urls import path, include

from .sitemaps import CategorySitemap, PostSitemap

from core.views import frontpage, about, robots_txt

sitemaps = {'category': CategorySitemap, 'post': PostSitemap}

urlpatterns = [
    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}),
    path('robots.txt', robots_txt, name='robots_txt'),
    path('admin/', admin.site.urls),
    path('about/', about, name='about'),
    path('', include('blog.urls')),
    path('', frontpage, name='frontpage'),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
################################################# core
== views.py
from django.http.response import HttpResponse
from django.http import HttpResponse
from django.shortcuts import render

from blog.models import Post

def frontpage(request):
    posts = Post.objects.filter(status=Post.ACTIVE)

    return render(request, 'core/frontpage.html', {'posts': posts})

def about(request):
    return render(request, 'core/about.html')

def robots_txt(request):
    text = [
        "User-Agent: *",
        "Disallow: /admin/",
    ]
    return HttpResponse("\n".join(text), content_type="text/plain")
== templates/core/about.html
{% extends 'core/base.html' %}

{% block title %}About | {% endblock %}

{% block content %}
    <h1>About</h1>
{% endblock %}
== templates/core/base.html
<!DOCTYPE html>

<html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">

        <title>{% block title %}{% endblock %}Crash blog</title>

        <link rel="stylesheet" href="https://unpkg.com/bulma@0.9.2/css/bulma.min.css">
        <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">

        <style>
            nav.navbar {
                height: 6rem !important;
                box-shadow: 0 1px 3px 0 rgba(0, 0, 0, .1), 0 1px 2px 0 rgba(0, 0, 0, .06) !important;
            }
        </style>
    </head>

    <body>
        <nav class="navbar">
            <div class="container">
                <div class="navbar-brand">
                    <a class="navbar-item" href="/">
                        <strong>Crash blog</strong>
                    </a>
                    <span class="navbar-burger burger" data-target="navbarMenu">
                        <span></span>
                        <span></span>
                        <span></span>
                    </span>
                </div>

                <div id="navbarMenu" class="navbar-menu">
                    <div class="navbar-end">
                        <div class="navbar-item">
                            <form method="get" action="{% url 'search' %}">
                                <div class="control has-icons-left">
                                    <input class="input is-rounded" name="query" type="text" placeholder="Search">
                                    <span class="icon is-left">
                                        <i class="fa fa-search"></i>
                                    </span>
                                </div>
                            </form>
                        </div>

                        <a href="/" class="navbar-item is-active is-size-5 has-text-weight-semibold">
                            Home
                        </a>
                        <a href="{% url 'about' %}" class="navbar-item is-size-5 has-text-weight-semibold">
                            About
                        </a>
                    </div>
                </div>
            </div>
        </nav>

        <section class="section">
            <div class="container">
                {% block content %}
                {% endblock %}
            </div>
        </section>

        <footer class="footer">
            <div class="content has-text-centered">
                <p>
                    Copyright (c) 2021 - Crash blog
                </p>
            </div>
        </footer>
    </body>
</html>
== templates/core/frontpage.html
{% extends 'core/base.html' %}

{% block title %}Home | {% endblock %}

{% block content %}
    <section class="hero">
        <div class="hero-body">
            <div class="container">
                <section class="section">
                    <div class="columns">
                        <div class="column is-8 is-offset-2">
                            {% for post in posts %}
                                <div class="content is-medium">
                                    <a href="{% url 'post_detail' post.category.slug post.slug %}">
                                        {% if post.image %}
                                            <figure class="image">
                                                <img src="{{ post.image.url }}">
                                            </figure>
                                        {% endif %}

                                        <h2 class="subtitle is-4">{{ post.created_at|timesince }} ago</h2>
                                        <h1 class="title">{{ post.title }}</h1>
                                        <p>{{ post.intro }}</p>
                                    </a>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </section>
{% endblock %}
################################################# serverfiles
== C:\portfolio\_django\crashblog\serverfiles\gunicorn_start
[program:crashblog]
command = /webapps/crashblog/environment_3_8_2/bin/gunicorn_start
user = crashblog
stdout_logfile = /webapps/crashblog/environment_3_8_2/logs/supervisor.log
redirect_stderr = true
environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8
root@ubuntu-djackets:~# cat /webapps/crashblog/environment_3_8_2/bin/gunicorn_start
#!/bin/sh

NAME='crashblog'
DJANGODIR=/webapps/crashblog/environment_3_8_2/crashblog
SOCKFILE=/webapps/crashblog/environment_3_8_2/run/gunicorn.sock
USER=crashblog
GROUP=webapps
NUM_WORKERS=3
DJANGO_SETTINGS_MODULE=crashblog.settingsprod
DJANGO_WSGI_MODULE=crashblog.wsgi
TIMEOUT=120

cd $DJANGODIR
source ../environment_3_8_2/bin/activate
export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=$DJANGODIR:$PYTHONPATH

RUNDIR=$(dirname $SOCKFILE)
test -d $RUNDIR || mkdir -p $RUNDIR

exec ../bin/gunicorn ${DJANGO_WSGI_MODULE}:application \
--name $NAME \
--workers $NUM_WORKERS \
--timeout $TIMEOUT \
--user=$USER --group=$GROUP \
--bind=unix:$SOCKFILE \
--log-level=debug \
--log-file=-

== C:\portfolio\_django\crashblog\serverfiles\nginx_crashblog.conf
upstream crashblog_app_server {
    server unix:/webapps/crashblog/environment_3_8_2/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name crashblog.codewithstein.com;

    access_log /webapps/crashblog/environment_3_8_2/logs/nginx-django-access.log;
    error_log /webapps/crashblog/environment_3_8_2/logs/nginx-django-error.log;

    location /static/ {
        alias /webapps/crashblog/environment_3_8_2/crashblog/static/;
    }

    location /media/ {
        alias /webapps/crashblog/environment_3_8_2/crashblog/media/;
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_set_header Host $http_host;

        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://crashblog_app_server;
        }
    }
}

== C:\portfolio\_django\crashblog\serverfiles\supervisor_crashblog.conf
[program:crashblog]
command = /webapps/crashblog/environment_3_8_2/bin/gunicorn_start
user = crashblog
stdout_logfile = /webapps/crashblog/environment_3_8_2/logs/supervisor.log
redirect_stderr = true
environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8

################################################# apps/blog
== admin.py
from django.contrib import admin

from .models import Post, Category, Comment

class CommentItemInline(admin.TabularInline):
    model = Comment
    raw_id_fields = ['post']

class PostAdmin(admin.ModelAdmin):
    search_fields = ['title', 'intro', 'body']
    list_display = ['title', 'slug', 'category', 'created_at', 'status']
    list_filter = ['category', 'created_at', 'status']
    inlines = [CommentItemInline]
    prepopulated_fields = {'slug': ('title',)}

class CategoryAdmin(admin.ModelAdmin):
    search_fields = ['title']
    list_display = ['title']
    prepopulated_fields = {'slug': ('title',)}

class CommentAdmin(admin.ModelAdmin):
    list_display = ['name', 'post', 'created_at']

admin.site.register(Post, PostAdmin)
admin.site.register(Category, CategoryAdmin)
admin.site.register(Comment, CommentAdmin)
== forms.py
from django import forms

from .models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ('name', 'email', 'body')
== models.py
from django.db import models

class Category(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField()

    class Meta:
        ordering = ('title',)
        verbose_name_plural = 'Categories'

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return '/%s/' % self.slug

class Post(models.Model):
    ACTIVE = 'active'
    DRAFT = 'draft'

    CHOICES_STATUS = (
        (ACTIVE, 'Active'),
        (DRAFT, 'Draft')
    )

    category = models.ForeignKey(Category, related_name='posts', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField()
    intro = models.TextField()
    body = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=10, choices=CHOICES_STATUS, default=ACTIVE)
    image = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        ordering = ('-created_at',)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return '/%s/%s/' % (self.category.slug, self.slug)

class Comment(models.Model):
    post = models.ForeignKey(Post, related_name='comments', on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    email = models.EmailField()
    body = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name
== urls.py
from django.urls import path

from . import views

urlpatterns = [
    path('search/', views.search, name='search'),
    path('<slug:category_slug>/<slug:slug>/', views.detail, name='post_detail'),
    path('<slug:slug>/', views.category, name='category_detail')
]
== views.py
from django.db.models import Q
from django.shortcuts import get_object_or_404, redirect, render

from .forms import CommentForm
from .models import Post, Category

def detail(request, category_slug, slug):
    post = get_object_or_404(Post, slug=slug, status=Post.ACTIVE)

    if request.method == 'POST':
        form = CommentForm(request.POST)

        if form.is_valid():
            comment = form.save(commit=False)
            comment.post = post
            comment.save()

            return redirect('post_detail', slug=slug)
    else:
        form = CommentForm()

    return render(request, 'blog/detail.html', {'post': post, 'form': form})

def category(request, slug):
    category = get_object_or_404(Category, slug=slug)
    posts = category.posts.filter(status=Post.ACTIVE)

    return render(request, 'blog/category.html', {'category': category, 'posts': posts})

def search(request):
    query = request.GET.get('query', '')

    posts = Post.objects.filter(status=Post.ACTIVE).filter(Q(title__icontains=query) | Q(intro__icontains=query) | Q(body__icontains=query))

    return render(request, 'blog/search.html', {'posts': posts, 'query': query})
== templates/blog/category.html
{% extends 'core/base.html' %}

{% block title %}{{ category.title }} | {% endblock %}

{% block content %}
    <section class="hero">
        <div class="hero-body">
            <div class="container">
                <section class="section">
                    <div class="columns">
                        <div class="column is-8 is-offset-2">
                            {% for post in posts %}
                                <div class="content is-medium">
                                    <a href="{% url 'post_detail' post.category.slug post.slug %}">
                                        <h2 class="subtitle is-4">{{ post.created_at|timesince }} ago</h2>
                                        <h1 class="title">{{ post.title }}</h1>
                                        <p>{{ post.intro }}</p>
                                    </a>
                                </div>
                            {% empty %}
                                <div class="content">
                                    <p>There is no posts in this category...</p>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </section>
{% endblock %}
== templates/blog/detail.html
{% extends 'core/base.html' %}

{% block title %}{{ post.title }} | {% endblock %}

{% block content %}
<section class="hero">
    <div class="hero-body">
        <div class="container">
            <section class="section">
                {% if post.image %}
                    <figure class="image mb-6">
                        <img src="{{ post.image.url }}">
                    </figure>
                {% endif %}
                
                <div class="columns">
                    <div class="column is-8 is-offset-2">
                        <div class="content is-medium">
                            
                            <h2 class="subtitle is-4">{{ post.created_at|timesince }} ago</h2>
                            <h1 class="title">{{ post.title }}</h1>
                            <p><strong>{{ post.intro }}</strong></p>
                            <p>{{ post.body }}</p>

                            <p><small>Category: <a href="{% url 'category_detail' post.category.slug %}">{{ post.category }}</a></small></p>

                            <hr>

                            <h2 class="subtitle is-4">Comments</h2>

                            <form method="post" class="mb-6">
                                {% csrf_token %}

                                {{ form.as_p }}

                                <div class="field">
                                    <div class="control">
                                        <button class="button is-success">Submit comment</button>
                                    </div>
                                </div>
                            </form>

                            {% for comment in post.comments.all %}
                                <article class="media box">
                                    <div class="media-content">
                                        <strong>{{ comment.name }}</strong> <small>{{ comment.created_at|timesince }} ago</small><br>
                                        {{ comment.body }}
                                    </div>
                                </article>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</section>
{% endblock %}
== templates/blog/search.html
{% extends 'core/base.html' %}

{% block title %}Search | {% endblock %}

{% block content %}
    <section class="hero">
        <div class="hero-body">
            <div class="container">
                <section class="section">
                    <div class="columns">
                        <div class="column is-8 is-offset-2">
                            <div class="content is-medium">
                                <h1>Search results</h1>
                                <h3>Query "{{ query }}"</h3>
                            </div>

                            {% for post in posts %}
                                <div class="content is-medium">
                                    <a href="{% url 'post_detail' post.category.slug post.slug %}">
                                        <h2 class="subtitle is-4">{{ post.created_at|timesince }} ago</h2>
                                        <h1 class="title">{{ post.title }}</h1>
                                        <p>{{ post.intro }}</p>
                                    </a>
                                </div>
                            {% empty %}
                                <div class="content">
                                    <p>No result for the given query...</p>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </section>
{% endblock %}
