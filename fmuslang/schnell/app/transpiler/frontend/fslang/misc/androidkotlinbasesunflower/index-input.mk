--% index/fmus
android-kotlin-sunflower,d(/mk)
	%utama=__FILE__
	android-base,d(/mk)
		.editorconfig,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/.editorconfig)
		.gitignore,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/.gitignore)
		appKeyStorePathFile,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/appKeyStorePathFile)
		build.gradle,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/build.gradle)
		CODEOWNERS,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/CODEOWNERS)
		default-detekt-config.yml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/default-detekt-config.yml)
		Gemfile,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/Gemfile)
		Gemfile.lock,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/Gemfile.lock)
		gradle.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/gradle.properties)
		gradle.properties.secret,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/gradle.properties.secret)
		gradlew,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/gradlew)
		gradlew.bat,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/gradlew.bat)
		local.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/local.properties)
		pre-commit,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/pre-commit)
		pull_request_template.md,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/pull_request_template.md)
		README.md,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/README.md)
		run.bat,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/run.bat)
		settings.gradle,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/settings.gradle)
		.github,d(/mk)
			workflows,d(/mk)
				cicd.yml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/.github/workflows/cicd.yml)
		.gitsecret,d(/mk)
			keys,d(/mk)
				pubring.kbx,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/keys/pubring.kbx)
				pubring.kbx~,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/keys/pubring.kbx~)
				trustdb.gpg,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/keys/trustdb.gpg)
			paths,d(/mk)
				mapping.cfg,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/paths/mapping.cfg)
		.gradle,d(/mk)
			6.5,d(/mk)
				gc.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/gc.properties)
				executionHistory,d(/mk)
					executionHistory.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/executionHistory/executionHistory.lock)
				fileChanges,d(/mk)
				fileContent,d(/mk)
					fileContent.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/fileContent/fileContent.lock)
				fileHashes,d(/mk)
					fileHashes.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/fileHashes/fileHashes.lock)
				javaCompile,d(/mk)
					javaCompile.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/javaCompile/javaCompile.lock)
				vcsMetadata-1,d(/mk)
			buildOutputCleanup,d(/mk)
				buildOutputCleanup.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/buildOutputCleanup/buildOutputCleanup.lock)
				cache.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/buildOutputCleanup/cache.properties)
			checksums,d(/mk)
				checksums.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/checksums/checksums.lock)
			vcs-1,d(/mk)
				gc.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/.gradle/vcs-1/gc.properties)
		app,d(/mk)
			.gitignore,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/.gitignore)
			build.gradle,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/build.gradle)
			google-services.json,f(n=empty)
			KeyStorePathFile,f(n=empty)
			proguard-rules.pro,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/proguard-rules.pro)
			src,d(/mk)
				androidTest,d(/mk)
					java,d(/mk)
						com,d(/mk)
							rootstrap,d(/mk)
								android,d(/mk)
									CustomTestRunner.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/CustomTestRunner.kt)
									tests,d(/mk)
										ProfileActivityTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/ProfileActivityTest.kt)
										SignInActivityTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/SignInActivityTest.kt)
										SignUpActivityTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/SignUpActivityTest.kt)
										utils,d(/mk)
											PrefTests.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/utils/PrefTests.kt)
									utils,d(/mk)
										BaseTests.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/utils/BaseTests.kt)
										MockServer.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/utils/MockServer.kt)
				dev,d(/mk)
					res,d(/mk)
						xml,d(/mk)
							network_security_config.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/dev/res/xml/network_security_config.xml)
				main,d(/mk)
					AndroidManifest.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/AndroidManifest.xml)
					java,d(/mk)
						com,d(/mk)
							rootstrap,d(/mk)
								android,d(/mk)
									App.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/App.kt)
									database,d(/mk)
										AppDataBase.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/database/AppDataBase.kt)
									metrics,d(/mk)
										Analytics.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/Analytics.kt)
										Events.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/Events.kt)
										GoogleAnalytics.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/GoogleAnalytics.kt)
										MetricsEvents.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/MetricsEvents.kt)
										MixPanelAnalytics.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/MixPanelAnalytics.kt)
										base,d(/mk)
											BaseAnalytics.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/base/BaseAnalytics.kt)
											Provider.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/base/Provider.kt)
									models,d(/mk)
										Model.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/models/Model.kt)
									network,d(/mk)
										managers,d(/mk)
											ManagerModule.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/ManagerModule.kt)
											session,d(/mk)
												SessionManager.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/session/SessionManager.kt)
												SessionManagerImpl.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/session/SessionManagerImpl.kt)
											user,d(/mk)
												UserManager.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/user/UserManager.kt)
												UserManagerImpl.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/user/UserManagerImpl.kt)
										models,d(/mk)
											ErrorModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/models/ErrorModel.kt)
											User.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/models/User.kt)
										providers,d(/mk)
											ServiceProviderModule.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/providers/ServiceProviderModule.kt)
										services,d(/mk)
											ApiModule.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/ApiModule.kt)
											ApiService.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/ApiService.kt)
											AuthenticationInterceptor.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/AuthenticationInterceptor.kt)
											HeadersInterceptor.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/HeadersInterceptor.kt)
											ResponseInterceptor.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/ResponseInterceptor.kt)
									ui,d(/mk)
										activity,d(/mk)
											main,d(/mk)
												ProfileActivity.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/ProfileActivity.kt)
												ProfileActivityViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/ProfileActivityViewModel.kt)
												SignInActivity.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignInActivity.kt)
												SignInActivityViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignInActivityViewModel.kt)
												SignUpActivity.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignUpActivity.kt)
												SignUpActivityViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignUpActivityViewModel.kt)
										adapter,d(/mk)
											Adapter.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/adapter/Adapter.kt)
										base,d(/mk)
											BaseActivity.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseActivity.kt)
											BaseFragment.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseFragment.kt)
											BaseView.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseView.kt)
											BaseViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseViewModel.kt)
										custom,d(/mk)
											CustomView.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/custom/CustomView.kt)
											LoadingDialog.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/custom/LoadingDialog.kt)
										view,d(/mk)
											AuthView.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/view/AuthView.kt)
											IView.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/view/IView.kt)
											ProfileView.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/view/ProfileView.kt)
									util,d(/mk)
										ErrorUtil.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/ErrorUtil.kt)
										LoadingDialogUtil.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/LoadingDialogUtil.kt)
										NetworkState.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/NetworkState.kt)
										Prefs.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/Prefs.kt)
										Util.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/Util.kt)
										UtilModule.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/UtilModule.kt)
										dispatcher,d(/mk)
											AppDispatcherProvider.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/dispatcher/AppDispatcherProvider.kt)
											DispatcherProvider.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/dispatcher/DispatcherProvider.kt)
										extensions,d(/mk)
											ActionCallback.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/ActionCallback.kt)
											EditText.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/EditText.kt)
											Gson.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/Gson.kt)
											ImageView.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/ImageView.kt)
											Validations.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/Validations.kt)
											ViewGroup.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/ViewGroup.kt)
										permissions,d(/mk)
											PermissionActivity.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/permissions/PermissionActivity.kt)
											PermissionFragment.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/permissions/PermissionFragment.kt)
											PermissionManager.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/permissions/PermissionManager.kt)
					res,d(/mk)
						drawable,d(/mk)
							background_loader.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/drawable/background_loader.xml)
							ic_launcher_background.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/drawable/ic_launcher_background.xml)
						drawable-v24,d(/mk)
							ic_launcher_foreground.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/drawable-v24/ic_launcher_foreground.xml)
						layout,d(/mk)
							activity_profile.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/activity_profile.xml)
							activity_sign_in.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/activity_sign_in.xml)
							activity_sign_up.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/activity_sign_up.xml)
							fragment_sample.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/fragment_sample.xml)
							view_loading_dialog.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/view_loading_dialog.xml)
						mipmap-anydpi-v26,d(/mk)
							ic_launcher.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml)
							ic_launcher_round.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml)
						mipmap-hdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-hdpi/ic_launcher.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-hdpi/ic_launcher_round.png)
						mipmap-mdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-mdpi/ic_launcher.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-mdpi/ic_launcher_round.png)
						mipmap-xhdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xhdpi/ic_launcher.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png)
						mipmap-xxhdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxhdpi/ic_launcher.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png)
						mipmap-xxxhdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png)
						values,d(/mk)
							colors.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/colors.xml)
							dimens.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/dimens.xml)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/strings.xml)
							styles.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/styles.xml)
						xml,d(/mk)
							network_security_config.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/xml/network_security_config.xml)
				staging,d(/mk)
					res,d(/mk)
						xml,d(/mk)
							network_security_config.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/staging/res/xml/network_security_config.xml)
				test,d(/mk)
					java,d(/mk)
						com,d(/mk)
							rootstrap,d(/mk)
								android,d(/mk)
									SignInActivityViewModelTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/SignInActivityViewModelTest.kt)
									SignUpActivityViewModelTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/SignUpActivityViewModelTest.kt)
									ValidationTests.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/ValidationTests.kt)
									test,d(/mk)
										TestDispatcherProvider.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/test/TestDispatcherProvider.kt)
										UnitTestBase.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/test/UnitTestBase.kt)
		fastlane,d(/mk)
			Appfile,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/fastlane/Appfile)
			Fastfile,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/fastlane/Fastfile)
			Pluginfile,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/fastlane/Pluginfile)
			README.md,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/fastlane/README.md)
		gradle,d(/mk)
			wrapper,d(/mk)
				gradle-wrapper.jar,f(b64=utama=C:/work/oss/andro1/android-kotlin/android-base/gradle/wrapper/gradle-wrapper.jar)
				gradle-wrapper.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/android-base/gradle/wrapper/gradle-wrapper.properties)
		secure,d(/mk)
	sunflower,d(/mk)
		.gitignore,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gitignore)
		ASSETS_LICENSE,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/ASSETS_LICENSE)
		build.gradle,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/build.gradle)
		CONTRIBUTING.md,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/CONTRIBUTING.md)
		gradle.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/gradle.properties)
		gradlew,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/gradlew)
		gradlew.bat,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/gradlew.bat)
		local.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/local.properties)
		README.md,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/README.md)
		run.bat,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/run.bat)
		settings.gradle,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/settings.gradle)
		.github,d(/mk)
			scripts,d(/mk)
				gradlew_recursive.sh,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.github/scripts/gradlew_recursive.sh)
			workflows,d(/mk)
				android.yml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.github/workflows/android.yml)
				copy-branch.yml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.github/workflows/copy-branch.yml)
		.google,d(/mk)
			packaging.yaml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.google/packaging.yaml)
		.gradle,d(/mk)
			6.5,d(/mk)
				gc.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/gc.properties)
				executionHistory,d(/mk)
					executionHistory.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/executionHistory/executionHistory.lock)
				fileChanges,d(/mk)
				fileContent,d(/mk)
					fileContent.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/fileContent/fileContent.lock)
				fileHashes,d(/mk)
					fileHashes.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/fileHashes/fileHashes.lock)
				javaCompile,d(/mk)
					javaCompile.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/javaCompile/javaCompile.lock)
				vcsMetadata-1,d(/mk)
			buildOutputCleanup,d(/mk)
				buildOutputCleanup.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/buildOutputCleanup/buildOutputCleanup.lock)
				cache.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/buildOutputCleanup/cache.properties)
			checksums,d(/mk)
				checksums.lock,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/checksums/checksums.lock)
			vcs-1,d(/mk)
				gc.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/.gradle/vcs-1/gc.properties)
		app,d(/mk)
			.gitignore,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/.gitignore)
			build.gradle,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/build.gradle)
			proguard-rules.pro,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/proguard-rules.pro)
			src,d(/mk)
				androidTest,d(/mk)
					assets,d(/mk)
						plants.json,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/assets/plants.json)
					java,d(/mk)
						com,d(/mk)
							google,d(/mk)
								samples,d(/mk)
									apps,d(/mk)
										sunflower,d(/mk)
											GardenActivityTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/GardenActivityTest.kt)
											MainCoroutineRule.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/MainCoroutineRule.kt)
											PlantDetailFragmentTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/PlantDetailFragmentTest.kt)
											data,d(/mk)
												GardenPlantingDaoTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/data/GardenPlantingDaoTest.kt)
												PlantDaoTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/data/PlantDaoTest.kt)
											utilities,d(/mk)
												LiveDataTestUtil.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/utilities/LiveDataTestUtil.kt)
												MainTestRunner.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/utilities/MainTestRunner.kt)
												TestUtils.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/utilities/TestUtils.kt)
											viewmodels,d(/mk)
												PlantDetailViewModelTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/viewmodels/PlantDetailViewModelTest.kt)
											worker,d(/mk)
												SeedDatabaseWorkerTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/worker/SeedDatabaseWorkerTest.kt)
				main,d(/mk)
					AndroidManifest.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/AndroidManifest.xml)
					assets,d(/mk)
						plants.json,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/assets/plants.json)
					java,d(/mk)
						com,d(/mk)
							google,d(/mk)
								samples,d(/mk)
									apps,d(/mk)
										sunflower,d(/mk)
											GalleryFragment.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/GalleryFragment.kt)
											GardenActivity.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/GardenActivity.kt)
											GardenFragment.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/GardenFragment.kt)
											HomeViewPagerFragment.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/HomeViewPagerFragment.kt)
											MainApplication.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/MainApplication.kt)
											PlantDetailFragment.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/PlantDetailFragment.kt)
											PlantListFragment.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/PlantListFragment.kt)
											adapters,d(/mk)
												BindingAdapters.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/BindingAdapters.kt)
												GalleryAdapter.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/GalleryAdapter.kt)
												GardenPlantingAdapter.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/GardenPlantingAdapter.kt)
												PlantAdapter.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/PlantAdapter.kt)
												PlantDetailBindingAdapters.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/PlantDetailBindingAdapters.kt)
												SunflowerPagerAdapter.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/SunflowerPagerAdapter.kt)
											api,d(/mk)
												UnsplashService.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/api/UnsplashService.kt)
											data,d(/mk)
												AppDatabase.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/AppDatabase.kt)
												Converters.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/Converters.kt)
												GardenPlanting.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/GardenPlanting.kt)
												GardenPlantingDao.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/GardenPlantingDao.kt)
												GardenPlantingRepository.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/GardenPlantingRepository.kt)
												Plant.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/Plant.kt)
												PlantAndGardenPlantings.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/PlantAndGardenPlantings.kt)
												PlantDao.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/PlantDao.kt)
												PlantRepository.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/PlantRepository.kt)
												UnsplashPagingSource.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashPagingSource.kt)
												UnsplashPhoto.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashPhoto.kt)
												UnsplashPhotoUrls.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashPhotoUrls.kt)
												UnsplashRepository.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashRepository.kt)
												UnsplashSearchResponse.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashSearchResponse.kt)
												UnsplashUser.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashUser.kt)
											di,d(/mk)
												DatabaseModule.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/di/DatabaseModule.kt)
												NetworkModule.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/di/NetworkModule.kt)
											utilities,d(/mk)
												Constants.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/utilities/Constants.kt)
												GrowZoneUtil.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/utilities/GrowZoneUtil.kt)
											viewmodels,d(/mk)
												GalleryViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/GalleryViewModel.kt)
												GardenPlantingListViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/GardenPlantingListViewModel.kt)
												PlantAndGardenPlantingsViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/PlantAndGardenPlantingsViewModel.kt)
												PlantDetailViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/PlantDetailViewModel.kt)
												PlantListViewModel.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/PlantListViewModel.kt)
											views,d(/mk)
												MaskedCardView.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/views/MaskedCardView.kt)
											workers,d(/mk)
												SeedDatabaseWorker.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/workers/SeedDatabaseWorker.kt)
					res,d(/mk)
						anim,d(/mk)
							slide_in_left.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_in_left.xml)
							slide_in_right.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_in_right.xml)
							slide_out_left.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_out_left.xml)
							slide_out_right.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_out_right.xml)
						animator,d(/mk)
							show_toolbar.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/animator/show_toolbar.xml)
						drawable,d(/mk)
							garden_tab_selector.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/garden_tab_selector.xml)
							ic_detail_back.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_detail_back.xml)
							ic_detail_back_no_circle.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_detail_back_no_circle.xml)
							ic_detail_share.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_detail_share.xml)
							ic_filter_list_24dp.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_filter_list_24dp.xml)
							ic_launcher_background.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_launcher_background.xml)
							ic_my_garden_active.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_my_garden_active.xml)
							ic_my_garden_inactive.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_my_garden_inactive.xml)
							ic_photo_library.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_photo_library.xml)
							ic_plant_list_active.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_plant_list_active.xml)
							ic_plant_list_inactive.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_plant_list_inactive.xml)
							ic_plus.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_plus.xml)
							plant_list_tab_selector.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/plant_list_tab_selector.xml)
							tab_icon_color_selector.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/tab_icon_color_selector.xml)
						layout,d(/mk)
							activity_garden.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/activity_garden.xml)
							fragment_gallery.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_gallery.xml)
							fragment_garden.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_garden.xml)
							fragment_plant_detail.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_plant_detail.xml)
							fragment_plant_list.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_plant_list.xml)
							fragment_view_pager.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_view_pager.xml)
							list_item_garden_planting.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/list_item_garden_planting.xml)
							list_item_photo.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/list_item_photo.xml)
							list_item_plant.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/list_item_plant.xml)
						menu,d(/mk)
							menu_plant_detail.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/menu/menu_plant_detail.xml)
							menu_plant_list.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/menu/menu_plant_list.xml)
						mipmap-anydpi-v26,d(/mk)
							ic_launcher.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml)
							ic_launcher_round.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml)
						mipmap-hdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher.png)
							ic_launcher_background.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher_background.png)
							ic_launcher_foreground.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher_foreground.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher_round.png)
						mipmap-mdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher.png)
							ic_launcher_background.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher_background.png)
							ic_launcher_foreground.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher_foreground.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher_round.png)
						mipmap-xhdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher.png)
							ic_launcher_background.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher_background.png)
							ic_launcher_foreground.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png)
						mipmap-xxhdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher.png)
							ic_launcher_background.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher_background.png)
							ic_launcher_foreground.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png)
						mipmap-xxxhdpi,d(/mk)
							ic_launcher.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png)
							ic_launcher_background.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher_background.png)
							ic_launcher_foreground.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.png)
							ic_launcher_round.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png)
						navigation,d(/mk)
							nav_garden.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/navigation/nav_garden.xml)
						values,d(/mk)
							anim.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/anim.xml)
							colors.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/colors.xml)
							dimens.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/dimens.xml)
							integers.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/integers.xml)
							shape.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/shape.xml)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/strings.xml)
							styles.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/styles.xml)
						values-bn,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-bn/strings.xml)
						values-ca,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-ca/strings.xml)
						values-de,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-de/strings.xml)
						values-es,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-es/strings.xml)
						values-fr,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-fr/strings.xml)
						values-it,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-it/strings.xml)
						values-ja,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-ja/strings.xml)
						values-night,d(/mk)
							styles.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-night/styles.xml)
						values-night-v21,d(/mk)
							styles.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-night-v21/styles.xml)
						values-ru,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-ru/strings.xml)
						values-sv-rSE,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-sv-rSE/strings.xml)
						values-tr-rTR,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-tr-rTR/strings.xml)
						values-v21,d(/mk)
							styles.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-v21/styles.xml)
						values-v29,d(/mk)
							shape.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-v29/shape.xml)
						values-zh-rCN,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-zh-rCN/strings.xml)
						values-zh-rTW,d(/mk)
							strings.xml,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-zh-rTW/strings.xml)
				test,d(/mk)
					java,d(/mk)
						com,d(/mk)
							google,d(/mk)
								samples,d(/mk)
									apps,d(/mk)
										sunflower,d(/mk)
											data,d(/mk)
												ConvertersTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/data/ConvertersTest.kt)
												GardenPlantingTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/data/GardenPlantingTest.kt)
												PlantTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/data/PlantTest.kt)
											utilities,d(/mk)
												GrowZoneUtilTest.kt,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/utilities/GrowZoneUtilTest.kt)
		gradle,d(/mk)
			wrapper,d(/mk)
				gradle-wrapper.jar,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/gradle/wrapper/gradle-wrapper.jar)
				gradle-wrapper.properties,f(e=utama=C:/work/oss/andro1/android-kotlin/sunflower/gradle/wrapper/gradle-wrapper.properties)
		screenshots,d(/mk)
			icon_background.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/screenshots/icon_background.png)
			icon_foreground.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/screenshots/icon_foreground.png)
			ic_launcher-web.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/screenshots/ic_launcher-web.png)
			jetpack_donut.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/screenshots/jetpack_donut.png)
			phone_my_garden.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/screenshots/phone_my_garden.png)
			phone_plant_detail.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/screenshots/phone_plant_detail.png)
			phone_plant_list.png,f(b64=utama=C:/work/oss/andro1/android-kotlin/sunflower/screenshots/phone_plant_list.png)
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.editorconfig
[*.{kt,kts}]
# Comma-separated list of rules to disable (Since 0.34.0)
# Note that rules in any ruleset other than the standard ruleset will need to be prefixed
# by the ruleset identifier.
disabled_rules=import-ordering,experimental:annotation

--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gitignore
*.iml
.gradle
/local.properties
/gradle.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
/.idea/gradle.xml
/.idea/*
/app/prod/release/*
/fastlane/report.xml
.DS_Store
/build
/captures
.externalNativeBuild
.gitsecret/keys/random_seed
fastlane/report.xml
!*.secret
/secure/key.keystore
/secure/google-api.json
--#

--% C:/work/oss/andro1/android-kotlin/android-base/appKeyStorePathFile
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
--#

--% C:/work/oss/andro1/android-kotlin/android-base/build.gradle
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.5.31'
    ext.hilt_version = '2.39.1'
    repositories {
        google()
        jcenter()
        maven {
            url 'https://maven.fabric.io/public'
        }
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.0'
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.3.1")
}

detekt {
    config = files("$projectDir/default-detekt-config.yml")
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

tasks.getByPath(':app:preBuild').dependsOn installGitHook

task clean(type: Delete) {
    delete rootProject.buildDir
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/CODEOWNERS
# These owners will be the default owners for everything in
# the repo. Unless a later match takes precedence

 *       @ximenaperez @mato2593 @jjszolno @amaury901130

--#

--% C:/work/oss/andro1/android-kotlin/android-base/default-detekt-config.yml
autoCorrect: true
failFast: false

test-pattern: # Configure exclusions for test sources
  active: true
  patterns: # Test file regexes
    - '.*/test/.*'
    - '.*Test.kt'
    - '.*Spec.kt'
  exclude-rule-sets:
    - 'comments'
  exclude-rules:
    - 'NamingRules'
    - 'MagicNumber'
    - 'MaxLineLength'
    - 'LateinitUsage'
    - 'StringLiteralDuplication'
    - 'SpreadOperator'
    - 'TooManyFunctions'

build:
  warningThreshold: 5
  failThreshold: 10
  weights:
    complexity: 2
    formatting: 1
    LongParameterList: 1
    comments: 1

processors:
  active: true
  exclude:
  # - 'FunctionCountProcessor'
  # - 'PropertyCountProcessor'
  # - 'ClassCountProcessor'
  # - 'PackageCountProcessor'
  # - 'KtFileCountProcessor'

console-reports:
  active: true
  exclude:
  #  - 'ProjectStatisticsReport'
  #  - 'ComplexityReport'
  #  - 'NotificationReport'
  #  - 'FindingsReport'
  #  - 'BuildFailureReport'

output-reports:
  active: true
  exclude:
  #  - 'PlainOutputReport'
  #  - 'XmlOutputReport'

comments:
  active: true
  CommentOverPrivateFunction:
    active: false
  CommentOverPrivateProperty:
    active: false
  EndOfSentenceFormat:
    active: false
    endOfSentenceFormat: ([.?!][ \t\n\r\f<])|([.?!]$)
  UndocumentedPublicClass:
    active: false
    searchInNestedClass: true
    searchInInnerClass: true
    searchInInnerObject: true
    searchInInnerInterface: true
  UndocumentedPublicFunction:
    active: false

complexity:
  active: true
  ComplexCondition:
    active: true
    threshold: 3
  ComplexInterface:
    active: false
    threshold: 10
    includeStaticDeclarations: false
  ComplexMethod:
    active: true
    threshold: 10
  LabeledExpression:
    active: false
  LargeClass:
    active: true
    threshold: 150
  LongMethod:
    active: true
    threshold: 20
  LongParameterList:
    active: true
    threshold: 5
    ignoreDefaultParameters: false
  MethodOverloading:
    active: false
    threshold: 5
  NestedBlockDepth:
    active: true
    threshold: 3
  StringLiteralDuplication:
    active: false
    threshold: 2
    ignoreAnnotation: true
    excludeStringsWithLessThan5Characters: true
    ignoreStringsRegex: '$^'
  TooManyFunctions:
    active: true
    thresholdInFiles: 10
    thresholdInClasses: 10
    thresholdInInterfaces: 10
    thresholdInObjects: 10
    thresholdInEnums: 10

empty-blocks:
  active: true
  EmptyCatchBlock:
    active: true
  EmptyClassBlock:
    active: true
  EmptyDefaultConstructor:
    active: true
  EmptyDoWhileBlock:
    active: true
  EmptyElseBlock:
    active: true
  EmptyFinallyBlock:
    active: true
  EmptyForBlock:
    active: true
  EmptyFunctionBlock:
    active: true
  EmptyIfBlock:
    active: true
  EmptyInitBlock:
    active: true
  EmptyKtFile:
    active: true
  EmptySecondaryConstructor:
    active: true
  EmptyWhenBlock:
    active: true
  EmptyWhileBlock:
    active: true

exceptions:
  active: true
  ExceptionRaisedInUnexpectedLocation:
    active: false
    methodNames: 'toString,hashCode,equals,finalize'
  InstanceOfCheckForException:
    active: false
  NotImplementedDeclaration:
    active: false
  PrintStackTrace:
    active: false
  RethrowCaughtException:
    active: false
  ReturnFromFinally:
    active: false
  SwallowedException:
    active: false
  ThrowingExceptionFromFinally:
    active: false
  ThrowingExceptionInMain:
    active: false
  ThrowingExceptionsWithoutMessageOrCause:
    active: false
    exceptions: 'IllegalArgumentException,IllegalStateException,IOException'
  ThrowingNewInstanceOfSameException:
    active: false
  TooGenericExceptionCaught:
    active: true
    exceptions:
      - ArrayIndexOutOfBoundsException
      - Error
      - Exception
      - IllegalMonitorStateException
      - NullPointerException
      - IndexOutOfBoundsException
      - RuntimeException
      - Throwable
  TooGenericExceptionThrown:
    active: true
    exceptions:
      - Error
      - Exception
      - NullPointerException
      - Throwable
      - RuntimeException

naming:
  active: true
  ClassNaming:
    active: true
    classPattern: '[A-Z$][a-zA-Z0-9$]*'
  EnumNaming:
    active: true
    enumEntryPattern: '^[A-Z$][a-zA-Z_$]*$'
  ForbiddenClassName:
    active: false
    forbiddenName: ''
  FunctionMaxLength:
    active: false
    maximumFunctionNameLength: 30
  FunctionMinLength:
    active: false
    minimumFunctionNameLength: 3
  FunctionNaming:
    active: true
    functionPattern: '^([a-z$][a-zA-Z$0-9]*)|(`.*`)$'
  MatchingDeclarationName:
    active: true
  MemberNameEqualsClassName:
    active: false
    ignoreOverriddenFunction: true
  ObjectPropertyNaming:
    active: true
    propertyPattern: '[A-Za-z][_A-Za-z0-9]*'
  PackageNaming:
    active: true
    packagePattern: '^[a-z]+(\.[a-z][a-z0-9]*)*$'
  TopLevelPropertyNaming:
    active: true
    constantPattern: '[A-Z][_A-Z0-9]*'
    propertyPattern: '[a-z][A-Za-z\d]*'
    privatePropertyPattern: '(_)?[a-z][A-Za-z0-9]*'
  VariableMaxLength:
    active: false
    maximumVariableNameLength: 64
  VariableMinLength:
    active: false
    minimumVariableNameLength: 1
  VariableNaming:
    active: true
    variablePattern: '[a-z][A-Za-z0-9]*'
    privateVariablePattern: '(_)?[a-z][A-Za-z0-9]*'

performance:
  active: true
  ForEachOnRange:
    active: true
  SpreadOperator:
    active: true
  UnnecessaryTemporaryInstantiation:
    active: true

potential-bugs:
  active: true
  DuplicateCaseInWhenExpression:
    active: true
  EqualsAlwaysReturnsTrueOrFalse:
    active: false
  EqualsWithHashCodeExist:
    active: true
  ExplicitGarbageCollectionCall:
    active: true
  InvalidRange:
    active: false
  IteratorHasNextCallsNextMethod:
    active: false
  IteratorNotThrowingNoSuchElementException:
    active: false
  LateinitUsage:
    active: false
    excludeAnnotatedProperties: ""
    ignoreOnClassesPattern: ""
  UnconditionalJumpStatementInLoop:
    active: false
  UnreachableCode:
    active: true
  UnsafeCallOnNullableType:
    active: false
  UnsafeCast:
    active: false
  UselessPostfixExpression:
    active: false
  WrongEqualsTypeParameter:
    active: false

style:
  active: true
  CollapsibleIfStatements:
    active: false
  DataClassContainsFunctions:
    active: false
    conversionFunctionPrefix: 'to'
  EqualsNullCall:
    active: false
  ExpressionBodySyntax:
    active: false
  ForbiddenComment:
    active: true
    values: 'TODO:,FIXME:,STOPSHIP:'
  ForbiddenImport:
    active: false
    imports: ''
  FunctionOnlyReturningConstant:
    active: false
    ignoreOverridableFunction: true
    excludedFunctions: 'describeContents'
  LoopWithTooManyJumpStatements:
    active: false
    maxJumpCount: 1
  MagicNumber:
    active: true
    ignoreNumbers: '-1,0,1,2'
    ignoreHashCodeFunction: false
    ignorePropertyDeclaration: false
    ignoreConstantDeclaration: true
    ignoreCompanionObjectPropertyDeclaration: true
    ignoreAnnotation: false
    ignoreNamedArgument: true
    ignoreEnums: false
  MaxLineLength:
    active: true
    maxLineLength: 120
    excludePackageStatements: false
    excludeImportStatements: false
  ModifierOrder:
    active: true
  NestedClassesVisibility:
    active: false
  NewLineAtEndOfFile:
    active: true
  OptionalAbstractKeyword:
    active: true
  OptionalReturnKeyword:
    active: false
  OptionalUnit:
    active: false
  OptionalWhenBraces:
    active: false
  ProtectedMemberInFinalClass:
    active: false
  RedundantVisibilityModifierRule:
    active: false
  ReturnCount:
    active: true
    max: 2
    excludedFunctions: "equals"
  SafeCast:
    active: true
  SerialVersionUIDInSerializableClass:
    active: false
  SpacingBetweenPackageAndImports:
    active: false
  ThrowsCount:
    active: true
    max: 2
  UnnecessaryAbstractClass:
    active: false
  UnnecessaryInheritance:
    active: false
  UnnecessaryParentheses:
    active: false
  UntilInsteadOfRangeTo:
    active: false
  UnusedImports:
    active: false
  UseDataClass:
    active: false
    excludeAnnotatedClasses: ""
  UtilityClassWithPublicConstructor:
    active: false
  WildcardImport:
    active: true
    excludeImports: 'java.util.*,kotlinx.android.synthetic.*'
--#

--% C:/work/oss/andro1/android-kotlin/android-base/Gemfile
source "https://rubygems.org"

gem "fastlane"

plugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')
eval_gemfile(plugins_path) if File.exist?(plugins_path)

--#

--% C:/work/oss/andro1/android-kotlin/android-base/Gemfile.lock
GEM
  remote: https://rubygems.org/
  specs:
    CFPropertyList (3.0.2)
    addressable (2.7.0)
      public_suffix (>= 2.0.2, < 5.0)
    atomos (0.1.3)
    aws-eventstream (1.1.0)
    aws-partitions (1.300.0)
    aws-sdk-core (3.94.0)
      aws-eventstream (~> 1, >= 1.0.2)
      aws-partitions (~> 1, >= 1.239.0)
      aws-sigv4 (~> 1.1)
      jmespath (~> 1.0)
    aws-sdk-kms (1.30.0)
      aws-sdk-core (~> 3, >= 3.71.0)
      aws-sigv4 (~> 1.1)
    aws-sdk-s3 (1.62.0)
      aws-sdk-core (~> 3, >= 3.83.0)
      aws-sdk-kms (~> 1)
      aws-sigv4 (~> 1.1)
    aws-sigv4 (1.1.2)
      aws-eventstream (~> 1.0, >= 1.0.2)
    babosa (1.0.3)
    claide (1.0.3)
    colored (1.2)
    colored2 (3.1.2)
    commander-fastlane (4.4.6)
      highline (~> 1.7.2)
    declarative (0.0.10)
    declarative-option (0.1.0)
    digest-crc (0.5.1)
    domain_name (0.5.20190701)
      unf (>= 0.0.5, < 1.0.0)
    dotenv (2.7.5)
    emoji_regex (1.0.1)
    excon (0.73.0)
    faraday (0.17.3)
      multipart-post (>= 1.2, < 3)
    faraday-cookie_jar (0.0.6)
      faraday (>= 0.7.4)
      http-cookie (~> 1.0.0)
    faraday_middleware (0.13.1)
      faraday (>= 0.7.4, < 1.0)
    fastimage (2.1.7)
    fastlane (2.146.0)
      CFPropertyList (>= 2.3, < 4.0.0)
      addressable (>= 2.3, < 3.0.0)
      aws-sdk-s3 (~> 1.0)
      babosa (>= 1.0.2, < 2.0.0)
      bundler (>= 1.12.0, < 3.0.0)
      colored
      commander-fastlane (>= 4.4.6, < 5.0.0)
      dotenv (>= 2.1.1, < 3.0.0)
      emoji_regex (>= 0.1, < 2.0)
      excon (>= 0.71.0, < 1.0.0)
      faraday (~> 0.17)
      faraday-cookie_jar (~> 0.0.6)
      faraday_middleware (~> 0.13.1)
      fastimage (>= 2.1.0, < 3.0.0)
      gh_inspector (>= 1.1.2, < 2.0.0)
      google-api-client (>= 0.29.2, < 0.37.0)
      google-cloud-storage (>= 1.15.0, < 2.0.0)
      highline (>= 1.7.2, < 2.0.0)
      json (< 3.0.0)
      jwt (~> 2.1.0)
      mini_magick (>= 4.9.4, < 5.0.0)
      multi_xml (~> 0.5)
      multipart-post (~> 2.0.0)
      plist (>= 3.1.0, < 4.0.0)
      public_suffix (~> 2.0.0)
      rubyzip (>= 1.3.0, < 2.0.0)
      security (= 0.1.3)
      simctl (~> 1.6.3)
      slack-notifier (>= 2.0.0, < 3.0.0)
      terminal-notifier (>= 2.0.0, < 3.0.0)
      terminal-table (>= 1.4.5, < 2.0.0)
      tty-screen (>= 0.6.3, < 1.0.0)
      tty-spinner (>= 0.8.0, < 1.0.0)
      word_wrap (~> 1.0.0)
      xcodeproj (>= 1.13.0, < 2.0.0)
      xcpretty (~> 0.3.0)
      xcpretty-travis-formatter (>= 0.0.3)
    fastlane-plugin-increment_version_code (0.4.3)
    gh_inspector (1.1.3)
    google-api-client (0.36.4)
      addressable (~> 2.5, >= 2.5.1)
      googleauth (~> 0.9)
      httpclient (>= 2.8.1, < 3.0)
      mini_mime (~> 1.0)
      representable (~> 3.0)
      retriable (>= 2.0, < 4.0)
      signet (~> 0.12)
    google-cloud-core (1.5.0)
      google-cloud-env (~> 1.0)
      google-cloud-errors (~> 1.0)
    google-cloud-env (1.3.1)
      faraday (>= 0.17.3, < 2.0)
    google-cloud-errors (1.0.0)
    google-cloud-storage (1.26.0)
      addressable (~> 2.5)
      digest-crc (~> 0.4)
      google-api-client (~> 0.33)
      google-cloud-core (~> 1.2)
      googleauth (~> 0.9)
      mini_mime (~> 1.0)
    googleauth (0.12.0)
      faraday (>= 0.17.3, < 2.0)
      jwt (>= 1.4, < 3.0)
      memoist (~> 0.16)
      multi_json (~> 1.11)
      os (>= 0.9, < 2.0)
      signet (~> 0.14)
    highline (1.7.10)
    http-cookie (1.0.3)
      domain_name (~> 0.5)
    httpclient (2.8.3)
    jmespath (1.4.0)
    json (2.3.0)
    jwt (2.1.0)
    memoist (0.16.2)
    mini_magick (4.10.1)
    mini_mime (1.0.2)
    multi_json (1.14.1)
    multi_xml (0.6.0)
    multipart-post (2.0.0)
    nanaimo (0.2.6)
    naturally (2.2.0)
    os (1.1.0)
    plist (3.5.0)
    public_suffix (2.0.5)
    representable (3.0.4)
      declarative (< 0.1.0)
      declarative-option (< 0.2.0)
      uber (< 0.2.0)
    retriable (3.1.2)
    rouge (2.0.7)
    rubyzip (1.3.0)
    security (0.1.3)
    signet (0.14.0)
      addressable (~> 2.3)
      faraday (>= 0.17.3, < 2.0)
      jwt (>= 1.5, < 3.0)
      multi_json (~> 1.10)
    simctl (1.6.8)
      CFPropertyList
      naturally
    slack-notifier (2.3.2)
    terminal-notifier (2.0.0)
    terminal-table (1.8.0)
      unicode-display_width (~> 1.1, >= 1.1.1)
    tty-cursor (0.7.1)
    tty-screen (0.7.1)
    tty-spinner (0.9.3)
      tty-cursor (~> 0.7)
    uber (0.1.0)
    unf (0.1.4)
      unf_ext
    unf_ext (0.0.7.7)
    unicode-display_width (1.7.0)
    word_wrap (1.0.0)
    xcodeproj (1.16.0)
      CFPropertyList (>= 2.3.3, < 4.0)
      atomos (~> 0.1.3)
      claide (>= 1.0.2, < 2.0)
      colored2 (~> 3.1)
      nanaimo (~> 0.2.6)
    xcpretty (0.3.0)
      rouge (~> 2.0.7)
    xcpretty-travis-formatter (1.0.0)
      xcpretty (~> 0.2, >= 0.0.7)

PLATFORMS
  ruby

DEPENDENCIES
  fastlane
  fastlane-plugin-increment_version_code

BUNDLED WITH
   2.1.2

--#

--% C:/work/oss/andro1/android-kotlin/android-base/gradle.properties
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx1536m
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Automatically convert third-party libraries to use AndroidX
android.enableJetifier=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Disable incremental processing because airbnb deeplink 4.1.0 doesn't support it
# Should enable when it is supported
kapt.incremental.apt=false

##Signing configurations
projectKeyAlias = PAlias
projectKeyPassword = KeyPassword
projectStoreFile = KeyStorePathFile
projectStorePassword = KeyStorePassword
--#

--% C:/work/oss/andro1/android-kotlin/android-base/gradle.properties.secret
hQEMA/niOnRiQEakAQf/VMiBKIzO8IN0Iaz9yDkNy3KVkPR71egWg+IsX7TJMEHQBPmaNtOYeeVxg5ZsbgZn50/Px4ps6CSVxtmFlWWuNE+Piopwlmu2/wAQq8tpNnF5Jc+fASM7jKimz5wykeuZpDnJ8xNuWaPYsack3yfVdTi7tWMl8uPf7XY9Ieyb8lI5wMFn/XsRtBAfX9lPwODvz8SmkQLlzThK9nExHLAshlIvK0CJeY+vJwOOiaZNTlm6hd+fVVMUgldLcEqjBvIf8C5NDH3DYt+Yi68dwHA0+yqEFeuOa+U5kiian0gPiLUJHi2LtfRSb7VmdnSxXbp3VohjfsoJuhtECWM+nqE3M9LpASdNDUjazGe4EP5vfXwL7SUWZPSVW/EszII/jxckBR5nKH1xbEQpRhMoCM075tRR68bvumZrGLT4pGNRz52xdrbgzt4vDn29PDFPbiNjUJTGmNTeqStuJwneE2/iSQtX1tgUgr7MYTzbxk5Tdz/FxSshXqnaGXIylmaJXMee1t4V/gv3Y4/6BPcG3a4l/aXm4FwMuCHirkFaYiEC9aYczoqHaMTXuXUAY2B+DKHqVQRt6jX/u3j6jdWu8mrQGAki54BSDFTQtB3DgH904OV7+6J4wZ1hlPI/cY2kZcJWCn44/C4OxCroM0ZhUIUDeaLH8H7NTTmAFukLEqF/cGsoxV6iViBJBqR8Srgwip/KFd8W8F4waTdwgemzz5nYB/Aodk7GJYm+bVfpmENRk49Jjj4xs+DZGdTZJ1UB71bypDp5Jngm/kr4b5+Ekmlw4NeNCF5PAfUzWjwIooIc6gvNYEAY5W8Lf06rjly/y1kACdt2dR64iV6Q4GVHB9Bue8OOktzD+NQqma6P03pzaHxMEZFT+H2Nvg2DdE89Hn3GYUtWtG+Xvi/ptInAi8ImAz2RK6V3xAKE3bMZfZPKRiFWzyNd8aYpo3738VKkK2cHnADPXc3cD17HP1t6iegOheuEQzkok9OuvHD6HF137xX/Wh9gq+tNA/QEsFSfk0GHZLXAcuqIpmim7pjVeW5WOKb4mhP3/OJhcBOs2cilNTw+TNrd0tGX9Y66lH7sw8Q1HABpAJf8bYKndQSt7fj5oppEUIUozosimRzrtbf3FJPoxEYS236to1FPbfyylAWRv+URLEj9b5H0PgjYWjRuw9CLNoPUoLnhC3/Fjas6rUfm2m0uu+QsU+A2mzcUxGkWkdScNzeeaQYypij9UJ+2XqhgkxAzUoW5JyqwOndlz6n5k3zdD2xqhn/eRnzPOAe18MjOQKBJfrRNZhIxkszJA9zq3o00ITUWiI225bHzftUgw4RLuKpL0/hZZ8AUCy/8wzw6+VyONr6iG9OhRRGvLZkEwXnPWRNsxkxRAQHFqkkIC4SeXEkppxB/y4HuQ7we6vtszmKoK3PlFD5FzuioLPXU83WkWA==
--#

--% C:/work/oss/andro1/android-kotlin/android-base/gradlew
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

--#

--% C:/work/oss/andro1/android-kotlin/android-base/gradlew.bat
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windows variants

if not "%OS%" == "Windows_NT" goto win9xME_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

--#

--% C:/work/oss/andro1/android-kotlin/android-base/local.properties
## This file must *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
#Tue Feb 08 13:13:52 ICT 2022
sdk.dir=C\:\\Users\\user\\AppData\\Local\\Android\\Sdk

--#

--% C:/work/oss/andro1/android-kotlin/android-base/pre-commit
#!/bin/bash

echo "Running git pre-commit hook"

./gradlew ktlintFormat
git add .

git stash -q --keep-index

./gradlew ktlint

RESULT=$?

git stash pop -q

# return 1 exit code if running checks fails
[ $RESULT -ne 0 ] && echo "Please fix the remaining issues before commiting" && exit 1
echo "😎" && exit 0
--#

--% C:/work/oss/andro1/android-kotlin/android-base/pull_request_template.md
#### ISSUE[#]
* Issue title

---

#### Description
*

---

#### Tasks
*

---

#### Risk
*

---

#### Notes
*

---

#### Preview
* Screen shots

--#

--% C:/work/oss/andro1/android-kotlin/android-base/README.md
[![Maintainability](https://api.codeclimate.com/v1/badges/0178f2031dec54c86ff9/maintainability)](https://codeclimate.com/repos/5cd1d8c8af2ce517db016a12/maintainability)
[![License](https://img.shields.io/github/license/rootstrap/ios-base.svg)](https://opensource.org/licenses/MIT)

# Android Base

**Android Base** is a boilerplate project created by Rootstrap for new projects using Kotlin 1.3.61. The main objective is helping any new projects jump start into feature development by providing a handful of functionalities.

## Prerequisites
- Android SDK
- Android Studio
- Firebase google-services.json file.
- Change your release key information on the build.gradle:
```
signingConfigs {
    releaseConfig {
        keyAlias setAlias
        keyPassword setPassword
        storeFile file(setStoreFile)
        storePassword setStorePassword
    }
}
```
- Build the project with Android Studio.   

## Installation
1. Clone

2. Build with Android Studio

To manage user and session after sign in/up we store that information in Preferences. The parameters that we save are due to the usage of Device Token Auth for authentication on the server side.

Please Check
```
ResponseInterceptor.kt
AuthenticationInterceptor.kt
```
to handle the server side authentication, in case you need to modify them:

## Usage
- You can use this open source project as a template of your new Android projects.

## Key File encryption

Build signing requires a developer-owned keystore. Location and credentials for it are specified in `gradle.properties`. Likewise submission to Google Play requires a Developer API key in .json format (`google-api.json`).
It is recommended that these files remains outside the source repo

We suggest using [git secret](https://git-secret.io/) as a simple and secure solution for keeping these sensitive files in the repo. See [Config](./secure/Readme.md) for detailed instructions.


## Build and Release with Fastlane

We provide configuration files for automating build, test and submission of the application using [Fastlane](https://docs.fastlane.tools/)

### Requirements

* Ensure JDK 1.8 is installed
* Ensure proper version of Android SDK command line tools is installed
* Install _fastlane_ using
```
[sudo] gem install fastlane -NV
```
or alternatively using `brew cask install fastlane`

### Usage
Lanes for each deployment target example are provided with some basic behavior:
- Each target has two options: `debug_x` and `deploy_x`.
- Each option will:
  - Increment the build number.
  - Run `gradlew clean`
  - Run `gradlew androidDependencies`
  - Build the app (`gradle assemble`) for the target flavor.
- The `deploy` lanes will additionaly submit the APK to the corresponding track in the Play Store.

Check `fastlane/Appfile` and `fastlane/Fastfile` for more information.

## CI/CD configuration with Bitrise (updated on Dec 12th 2021)

We are going to start using a tool called Bitrise to configure de CI/CD pipelines for mobiles apps.

--> For Android apps you can find how to do it in this link: https://www.notion.so/rootstrap/Android-CI-CD-26d4abd4f2454224be8f617110147366

## Continuous Integration with GitHub Actions (DEPRECATED)

We provide an example workflow [cicd.yml](.github/workflows/cicd.yml) including two jobs for running under [GitHub Actions](https://docs.github.com/en/actions), which can be modified according to the specifics of each project:

* `ci`
    * runs upon every push and PR
    * installs Fastlane and runs `debug_dev` lane
* `release`
    * runs upon every push to `develop` or `master`
    * downloads keystore and Google api key from S3 (credentials need to be present in repo Secrets)
    * installs Fastlane and runs `deploy_*` lane depending on branch (`Dev` if in `develop`, `Stsaging` if in `master`) - This could be easily modified to release `Prod` instead 

## Analytics
- Add analytics manager:
    1. Firebase
    2. MixPanel[Optional]

**How use:**
In the Application class -> onCreate
```
Analytics.addProvider(GoogleAnalytics(applicationContext))
Analytics.addProvider(MixPanelAnalytics(applicationContext))
```
or an array of providers
`Analytics.addProviders(arrayOfProviders)`

then use:
`Analytics.track(PageEvents.visit(VISIT_MAIN))`
or for events
`Analytics.track(UserEvents.login())`
in order to track the login event.

- For firebase replace the file: google-services.json with the once for your App and follow the Firebase instructions.
- For MixPanel, you have to replace the API key: 
`<string name="mixpanel_api_key">mixpanel_api_key</string>`

## Code Quality Standards
In order to meet the required code quality standards, this project uses [Ktlint](https://github.com/pinterest/ktlint) and [Detekt](https://github.com/arturbosch/detekt)

## Contributing
Bug reports (please use Issues) and pull requests are welcome on GitHub at [android-base](https://github.com/rootstrap/android-base). This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.

## License
The library is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).

NOTE: Remove the free LICENSE file for private projects or replace it with the corresponding license.

## Credits
**Android Base** is maintained by [Rootstrap](http://www.rootstrap.com) with the help of our [contributors](https://github.com/rootstrap/android-base/contributors).

[<img src="https://s3-us-west-1.amazonaws.com/rootstrap.com/img/rs.png" width="100"/>](http://www.rootstrap.com)


--#

--% C:/work/oss/andro1/android-kotlin/android-base/run.bat
"C:\Program Files\Android\Android Studio\bin\studio64.exe" .
--#

--% C:/work/oss/andro1/android-kotlin/android-base/settings.gradle
include ':app'

--#

--% C:/work/oss/andro1/android-kotlin/android-base/.github/workflows/cicd.yml
name: Continuous Integration

on:
  push:
  pull_request:

env:
  LANG: en_US.UTF-8
  # Notifications
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }}
  SLACK_CHANNEL: '#dev-builds'

jobs:

  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Fastlane and required plugins
      run: |
        sudo gem install bundler -v "$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)"
        bundle install --path vendor/bundle    
    # Runs build with Gradle
    - name: Build with Fastlane
      run: bundle exec fastlane debug_dev
    - name: Send notification of build result
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: '${{github.repository}} Dev build status is ${{ job.status }}'
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      if: always()  


  release:
    if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      # S3
      FOLDER: android-base
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      KEYS_BUCKET: ${{ secrets.AWS_S3_KEYS_BUCKET }}
      # Android Release
      JSON_KEYFILE: google-api.json
      RELEASE_STORE_FILE: key.keystore
      RELEASE_STORE_PASSWORD: ${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}
      RELEASE_KEY_ALIAS: debug
      RELEASE_KEY_PASSWORD: ${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
      # Notifications
      SLACK_URL: ${{ secrets.SLACK_URL }}
      SLACK_CHANNEL: '#dev-builds'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # Downloads certificate, private key and Firebase file
    - name: Download code signing items
      run: | 
        aws s3 cp s3://$KEYS_BUCKET/$FOLDER/ . --recursive
        mv ./android/$RELEASE_STORE_FILE ./app/$RELEASE_STORE_FILE
    - name: Install Fastlane and required plugins
      run: |
        sudo gem install bundler
        bundle install --path vendor/bundle
    # Build with Gradle and submit to Play Store
    - name: Submit Development build with Fastlane
      if: ${{ github.ref == 'refs/heads/develop' }}
      run: bundle exec fastlane deploy_dev
    - name: Submit Staging build with Fastlane
      if: ${{ github.ref == 'refs/heads/master' }}
      run: bundle exec fastlane deploy_staging
    - name: Send notification of build result
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: '${{github.repository}} ${{github.ref}} build submission status is ${{ job.status }}'
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      if: always()  
 

--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/keys/pubring.kbx
AAAAIAEBAAJLQlhmAAAAAF7ffu9e337vAAAAAAAAAAAAAAWUAgEAAAAAAH4AAAUCAAIAHD2E9kNuPkPtR4G3mhW0lNB5x6FmAAAAIAAAAAARyHFI54urU6749EL54jp0YkBGpAAAADwAAAAAAAAAAQAMAAABngAAAB4AAAAAAAIABAAAAAAAAAAAAAAAAAAAAAAAAAAAXt9+7wAAAACZAQ0EXrw6mwEIANugbgYcnGcwO+VoOZ9iUGunneIFLRANtNJQbxPSYeqcy7YD6lc7DF0HObtH1YHWo6qYwDv6uSxqbuH3kJQr55Ow4948szZQjzQXKLzwFQiRitVPmfR22rDQr8qRcMn/445EXKHlSzpGqcQ39ob91Ee0sL0rlyLtUjANc+0JwUah36os7lFc5QjjDlkQfHtD5T0tyC6nAU2k+1lTyzKFdVmLgm17p7yuP9r1A38s/R6NIcBjwI88pwWkjH8pkeKcASudat6dAzahjsYizpFMAg7s3gryJ6z/WOweeuTZXgb8BNOy8RJ1rogtdiU8KamETfFBpkvHd2caFAjJnfl3NIEAEQEAAbAMAABncGcBAAAAAAAAtB5yb290c3RyYXAgPGRldnNAcm9vdHN0cmFwLmNvbT6wDAAAZ3BnAgAAAAAAAIkBVAQTAQgAPhYhBD2E9kNuPkPtR4G3mhW0lNB5x6FmBQJevDqbAhsDBQkDwmcABQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJEBW0lNB5x6FmylgIAI1qhSMeiXNAkMNbd9W8Y7ssO0aOqtoI25/KShCs42xz9COvLDDHnB3cEGWOfATEXgxsxJJqwgypIsMiCM+JyqTPu4EXVbukva2NVYeo+BmCscZu+hmNNtseS3kC5VTB4+Qh6kHHmdTPhz0alAFsWhhx/srrMWfMrJxufSzHGVSnbqsfe1UcTiPYc5rz9pmy0qq89Hk5f0TXvkzhm5TVqy8H193Hv5PxqTXfuEwk29YTOANxgOc5w6cqQsP921ERywe8XzhRk4hrPwNbdJQoUZJNiYh3a4EYHLNbFyePUfv7mDl7Ogn/aNCmPSjSJSoYTolngP4ujrCFx7pR0A9zOGKwBgADZ3BnALkBDQRevDqbAQgAvv1GFpR2uV3UKgBVAseyk6kf+dANH2HCZz8zUl0r9sKceOKZ3/QZ7Su1inCLuoJ0JhUfIjZOGNyIF7IzydMioA609rYT9rOf3sDH9dzNlvKtABGZcaGOQHRGOA5Y1DqiImrM9fdAGHTlQoAHhcB/8GjtZU87b1qvPBRkYOXtMT1vMzmP4RE1dpM7I2vA5dDyT8W4zFDrN2uqT0FZehhk6HNmmD1q0VNvgMrIc7vUI+HWb55+wfQnJ44ypwPP1KFf/wAFgdQ3Pn16etfNMx66ANHYt59qwnpcaA2xQnVvAWNe53e9MRZDfOE6V2OgFogiAkDTGHxQlIgfBSWRkNcvFQARAQABiQE8BBgBCAAmFiEEPYT2Q24+Q+1HgbeaFbSU0HnHoWYFAl68OpsCGwwFCQPCZwAACgkQFbSU0HnHoWaX5QgAwplOwdLAAKJ7qoWiXYbOown0Qg8NzzjTiobsW10cnDs8b/xnMaCHpz4rcpmBndShvS388oPT6w9Jcn/XVVViBnAhiD3aIhy30/BJz2end/TfE4WmUPhLqLYXSF40PRWcuFTSQOeXrnbpPflxNM+JPPAV+7XO4HoJE8aullYq0DNIqY1iU7WyuDNe6PW7VevwnR4Faa1/d4zpNQgbkTj2JLy+w03UeRKktidqZpMjOqzFpph8UN1nkyAU/E4So1wVsqOrdTvdXlps3kqHriL1GdfGgWCJLB3MhsLUvvidhxHahsAnccfE07qN/3GFFV6NIlNmLCxoENEx6MfOUqH1+bAGAANncGcAsWTkqC9KoFmpQ1ZJipjExIM3PtU=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/keys/pubring.kbx~
AAAAIAEBAAJLQlhmAAAAAF7ffu9e337vAAAAAAAAAAA=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/keys/trustdb.gpg
AWdwZwMDAQUBAgAAXt9+7wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gitsecret/paths/mapping.cfg
secure/google-api.json:e494b2376306f39ea643ebe13156e4b885cddb64755a3a3fe4dd5f2807cb9a70
secure/key.keystore:6c70718b97803ac753020362b214a40762dc4ed95c4665648f86758c20ddbae9
gradle.properties:2a428ac440037c87d1001976c703d0ea412dee852aae78d9827f1307c4604545

--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/gc.properties

--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/executionHistory/executionHistory.lock
A5IakXZUGrEjAAAAAAAAAnk=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/fileContent/fileContent.lock
AwvQii+QJG6/AAAAAAAAAAA=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/fileHashes/fileHashes.lock
A/k3cAwjpDqMAAAAAAAAUS0=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/6.5/javaCompile/javaCompile.lock
A72v6y/2WDd7AAAAAAAAMJE=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/buildOutputCleanup/buildOutputCleanup.lock
A3ztCy++vDwfAAAAAAAAFnc=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/buildOutputCleanup/cache.properties
#Tue Feb 08 13:14:07 ICT 2022
gradle.version=6.5

--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/checksums/checksums.lock
AxooWDO3KbYCAAAAAAAABZI=
--#

--% C:/work/oss/andro1/android-kotlin/android-base/.gradle/vcs-1/gc.properties

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/.gitignore
/build

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/build.gradle
apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'dagger.hilt.android.plugin'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.rootstrap.android"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 42
        versionName "1.0"
        testInstrumentationRunner 'com.rootstrap.android.CustomTestRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    signingConfigs {
        releaseConfig {
            keyAlias projectKeyAlias
            keyPassword projectKeyPassword
            storeFile file(projectStoreFile)
            storePassword projectStorePassword
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            signingConfig signingConfigs.releaseConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kapt {
        correctErrorTypes true
    }

    flavorDimensions "server"

    productFlavors {
        dev {
            dimension "server"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            buildConfigField("String", "API_URL", "\"https://rails5-api-base.herokuapp.com/api/v1/\"")
            buildConfigField("String", "SECURE_KEY_ALIAS", "\"$projectKeyAlias\"")
            buildConfigField("String", "SECURE_FILE_NAME", "\"appPreferencesDev\"")
        }

        staging {
            dimension "server"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            buildConfigField("String", "API_URL", "\"https://proj-staging.herokuapp.com/api/\"")
            buildConfigField("String", "SECURE_KEY_ALIAS", "\"$projectKeyAlias\"")
            buildConfigField("String", "SECURE_FILE_NAME", "\"appPreferencesStaging\"")
        }

        prod {
            dimension "server"
            buildConfigField("String", "API_URL", "\"https://proj-production.herokuapp.com/api/\"")
            buildConfigField("String", "SECURE_KEY_ALIAS", "\"$projectKeyAlias\"")
            buildConfigField("String", "SECURE_FILE_NAME", "\"appPreferences\"")
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apk = output.outputFile
            def newName = apk.name.replace(".apk", "-v" + variant.versionName + ".apk")
            newName = newName.replace("-" + variant.buildType.name, "")

            outputFileName = new File("./apks/" + newName)
        }
    }

    configurations {
        ktlint
    }

    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.pinterest.ktlint.Main"
        args "src/**/*.kt"
        // to generate report in checkstyle format prepend following args:
        // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
        // see https://github.com/pinterest/ktlint#usage for more
    }

    check.dependsOn ktlint

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.pinterest.ktlint.Main"
        args "-F", "src/**/*.kt"
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    testOptions {
        unitTests {
            includeAndroidResources = true
            animationsDisabled = true
        }
    }
}

dependencies {
    def room_version = "2.3.0"
    def lifecycle_version = "2.4.0"
    def mockkVersion = '1.12.0'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:2.28.2'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1"
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation "io.mockk:mockk:$mockkVersion"

    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.3.1'

    //---- ROOM ----
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    //---- LIFECYCLE ----]
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    //---- GOOGLE JSON SERIALIZER/DESERIALIZER ----
    implementation 'com.google.code.gson:gson:2.8.6'

    //---- MixPanel ----
    implementation 'com.mixpanel.android:mixpanel-android:5.6.1'

    //---- Firebase ----
    implementation platform('com.google.firebase:firebase-bom:28.4.2')
    implementation 'com.google.firebase:firebase-core:20.0.0'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.5.31'

    //---- Image ----
    implementation group: 'com.github.bumptech.glide', name: 'glide', version: '4.10.0'

    //---- Network ----
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.moshi:moshi-kotlin:1.12.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.5.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'

    //---- Events ----
    implementation 'com.squareup:otto:1.3.8'

    //---- Linters ----
    ktlint "com.pinterest:ktlint:0.35.0"

    //---- Hilt ----
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    //security crypto
    implementation "androidx.security:security-crypto:1.1.0-alpha03"
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/proguard-rules.pro
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/CustomTestRunner.kt
package com.rootstrap.android

import android.app.Application
import android.content.Context
import androidx.test.runner.AndroidJUnitRunner
import dagger.hilt.android.testing.HiltTestApplication

class CustomTestRunner : AndroidJUnitRunner() {

    override fun newApplication(cl: ClassLoader?, name: String?, context: Context?): Application {
        return super.newApplication(cl, HiltTestApplication::class.java.name, context)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/ProfileActivityTest.kt
package com.rootstrap.android.tests

import androidx.test.core.app.ActivityScenario
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.matcher.ViewMatchers.withId
import com.rootstrap.android.R
import com.rootstrap.android.ui.activity.main.ProfileActivity
import com.rootstrap.android.ui.activity.main.SignUpActivity
import com.rootstrap.android.utils.BaseTests
import dagger.hilt.android.testing.HiltAndroidTest
import okhttp3.mockwebserver.Dispatcher
import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.RecordedRequest
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test

@HiltAndroidTest
class ProfileActivityTest : BaseTests() {

    private lateinit var activity: ProfileActivity
    private lateinit var scenario: ActivityScenario<ProfileActivity>

    @Before
    override fun before() {
        super.before()
        setServerDispatch(logoutDispatcher())
        sessionManager.user = testUser()
        scenario = ActivityScenario.launch(ProfileActivity::class.java)
        scenario.onActivity { activity -> this.activity = activity }
    }

    @Test
    fun profileUiTest() {
        stringMatches(
            R.id.welcome_text_view,
            activity.getString(R.string.welcome_message, sessionManager.user?.firstName)
        )
        onView(withId(R.id.sign_out_button)).perform(click())
        assertEquals(null, sessionManager.user)

        // Check if this activity was successful launched
        activity.runOnUiThread {
            val current = currentActivity()
            assertEquals(SignUpActivity::class.java.name, current::class.java.name)
        }
    }

    private fun logoutDispatcher(): Dispatcher {
        return object : Dispatcher() {
            override fun dispatch(request: RecordedRequest): MockResponse {
                return if (request.path!!.contains("users/sign_out"))
                    mockServer.successfulResponse()
                else
                    mockServer.notFoundResponse()
            }
        }
    }

    @After
    override fun after() {
        super.after()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/SignInActivityTest.kt
package com.rootstrap.android.tests

import androidx.test.core.app.ActivityScenario
import com.google.gson.Gson
import com.rootstrap.android.R
import com.rootstrap.android.network.models.UserSerializer
import com.rootstrap.android.ui.activity.main.ProfileActivity
import com.rootstrap.android.ui.activity.main.SignInActivity
import com.rootstrap.android.utils.BaseTests
import dagger.hilt.android.testing.HiltAndroidTest
import okhttp3.mockwebserver.Dispatcher
import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.RecordedRequest
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test

@HiltAndroidTest
class SignInActivityTest : BaseTests() {

    private lateinit var activity: SignInActivity
    private lateinit var scenario: ActivityScenario<SignInActivity>

    @Before
    override fun before() {
        super.before()
        scenario = ActivityScenario.launch(SignInActivity::class.java)
        scenario.onActivity { activity -> this.activity = activity }
    }

    @Test
    fun signInSuccessfulTest() {
        scenario.recreate()
        setServerDispatch(signInDispatcher())
        val testUser = testUser()
        typeText(R.id.email_edit_text, testUser.email)
        typeText(R.id.password_edit_text, testUser.password)
        performClick(R.id.sign_in_button)
        val user = sessionManager.user
        assertEquals(user, testUser)

        activity.runOnUiThread {
            val current = currentActivity()
            assertEquals(ProfileActivity::class.java.name, current::class.java.name)
        }
    }

    private fun signInDispatcher(): Dispatcher {
        return object : Dispatcher() {
            override fun dispatch(request: RecordedRequest): MockResponse {
                return if (request.path!!.contains("users/sign_in")) {
                    val userResponse = UserSerializer(testUser())
                    mockServer.successfulResponse().setBody(
                        Gson().toJson(userResponse)
                    )
                } else
                    mockServer.notFoundResponse()
            }
        }
    }

    @After
    override fun after() {
        super.after()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/SignUpActivityTest.kt
package com.rootstrap.android.tests

import androidx.test.core.app.ActivityScenario
import com.google.gson.Gson
import com.rootstrap.android.R
import com.rootstrap.android.network.models.UserSerializer
import com.rootstrap.android.ui.activity.main.ProfileActivity
import com.rootstrap.android.ui.activity.main.SignInActivity
import com.rootstrap.android.ui.activity.main.SignUpActivity
import com.rootstrap.android.utils.BaseTests
import dagger.hilt.android.testing.HiltAndroidTest
import okhttp3.mockwebserver.Dispatcher
import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.RecordedRequest
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test

@HiltAndroidTest
class SignUpActivityTest : BaseTests() {

    private lateinit var activity: SignUpActivity
    private lateinit var scenario: ActivityScenario<SignUpActivity>

    @Before
    override fun before() {
        super.before()
        scenario = ActivityScenario.launch(SignUpActivity::class.java)
        scenario.onActivity { activity -> this.activity = activity }
    }

    @Test
    fun signUpSuccessfulTest() {
        scenario.recreate()
        setServerDispatch(signUpDispatcher())
        val testUser = testUser()
        scrollAndTypeText(R.id.first_name_edit_text, testUser.firstName)
        scrollAndTypeText(R.id.last_name_edit_text, testUser.lastName)
        scrollAndTypeText(R.id.email_edit_text, testUser.email)
        scrollAndTypeText(R.id.password_edit_text, testUser.password)
        scrollAndPerformClick(R.id.sign_up_button)
        val user = sessionManager.user
        assertEquals(user, testUser)

        activity.runOnUiThread {
            val current = currentActivity()
            assertEquals(ProfileActivity::class.java.name, current::class.java.name)
        }
    }

    @Test
    fun checkCTASignIn() {
        scenario.recreate()
        scrollAndPerformClick(R.id.sign_in_text_view)
        activity.runOnUiThread {
            val current = currentActivity()
            assertEquals(SignInActivity::class.java.name, current::class.java.name)
        }
    }

    private fun signUpDispatcher(): Dispatcher {
        return object : Dispatcher() {
            override fun dispatch(request: RecordedRequest): MockResponse {
                return if (request.path!!.contains("users")) {
                    val userResponse = UserSerializer(testUser())
                    mockServer.successfulResponse().setBody(
                        Gson().toJson(userResponse)
                    )
                } else
                    mockServer.notFoundResponse()
            }
        }
    }

    @After
    override fun after() {
        super.after()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/tests/utils/PrefTests.kt
package com.rootstrap.android.tests.utils

import android.content.SharedPreferences
import androidx.security.crypto.EncryptedSharedPreferences
import com.rootstrap.android.util.Prefs
import dagger.hilt.android.testing.HiltAndroidRule
import dagger.hilt.android.testing.HiltAndroidTest
import org.junit.Assert
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import java.util.* // ktlint-disable no-wildcard-imports
import javax.inject.Inject

@HiltAndroidTest
class PrefTests {
    @get:Rule
    var hiltRule = HiltAndroidRule(this)

    @Inject
    lateinit var prefs: Prefs

    @Inject
    lateinit var preferences: SharedPreferences

    @Before
    fun init() {
        hiltRule.inject()
    }

    @Test
    fun savingSecureDataPrefs() {
        val uid = UUID.randomUUID().toString()
        prefs.uid = uid

        Assert.assertTrue(preferences is EncryptedSharedPreferences)
        Assert.assertEquals(prefs.uid, uid)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/utils/BaseTests.kt
package com.rootstrap.android.utils

import android.app.Activity
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.typeText
import androidx.test.espresso.action.ViewActions.scrollTo
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.action.ViewActions.clearText
import androidx.test.espresso.action.ViewActions.closeSoftKeyboard
import androidx.test.espresso.assertion.ViewAssertions
import androidx.test.espresso.matcher.ViewMatchers
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.internal.runner.junit4.AndroidJUnit4ClassRunner
import androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry
import androidx.test.runner.lifecycle.Stage
import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.network.models.User
import com.rootstrap.android.network.providers.ServiceProviderModule
import dagger.hilt.android.testing.HiltAndroidRule
import okhttp3.mockwebserver.Dispatcher
import org.junit.Rule
import org.junit.runner.RunWith
import javax.inject.Inject

@RunWith(AndroidJUnit4ClassRunner::class)
open class BaseTests {

    @Inject lateinit var sessionManager: SessionManager

    var mockServer: MockServer = MockServer

    @get:Rule
    var hiltRule = HiltAndroidRule(this)

    open fun setServerDispatch(dispatcher: Dispatcher) {
        mockServer.server().dispatcher = dispatcher
    }

    open fun before() {
        mockServer.startServer()
        ServiceProviderModule.URL_API = mockServer.server().url("/").toString()
        hiltRule.inject()
    }

    open fun after() {
        mockServer.stopServer()
    }

    open fun testUser() = User(
        "9032",
        "user123@mail.com",
        "Richard",
        "Richard",
        "99090909",
        "asdasdasdasda",
        "Richard"
    )

    open fun scrollAndTypeText(id: Int, text: String) {
        onView(withId(id)).perform(
            scrollTo(),
            click(),
            clearText(),
            typeText(text),
            closeSoftKeyboard()
        )
    }

    open fun typeText(id: Int, text: String) {
        onView(withId(id)).perform(click(), clearText(), typeText(text), closeSoftKeyboard())
    }

    open fun scrollAndPerformClick(viewId: Int) {
        onView(withId(viewId)).perform(scrollTo(), click())
    }

    open fun performClick(viewId: Int) {
        onView(withId(viewId)).perform(click())
    }

    open fun stringMatches(viewId: Int, value: String) {
        onView(withId(viewId)).check(
            ViewAssertions.matches(
                ViewMatchers.withText(
                    value
                )
            )
        )
    }

    open fun currentActivity(): Activity {
        // Get the activity that currently started
        val activities =
            ActivityLifecycleMonitorRegistry.getInstance().getActivitiesInStage(Stage.RESUMED)
        return activities.first()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/androidTest/java/com/rootstrap/android/utils/MockServer.kt
package com.rootstrap.android.utils

import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.MockWebServer
import java.io.IOException

object MockServer {

    private val MOCK_WEB_SERVER_PORT = 8000

    private var mockServer = MockWebServer()

    fun stopServer() {
        try {
            mockServer.shutdown()
            mockServer = MockWebServer()
        } catch (ignored: IOException) {
        }
    }

    fun startServer() {
        try {
            mockServer.start(MOCK_WEB_SERVER_PORT)
        } catch (ignored: IOException) {
        }
    }

    fun server(): MockWebServer {
        return mockServer
    }

    fun successfulResponse() = MockResponse()
        .setResponseCode(200)
        .addHeader("Content-Type", "application/json; charset=utf-8")
        .addHeader("Connection", "close")
        .addHeader("Cache-Control", "no-cache")
        .setBody("{ }")

    fun notFoundResponse() = MockResponse()
        .addHeader("Connection", "close")
        .setResponseCode(404)
        .setBody("{ }")

    fun unauthorizedResponse() = MockResponse()
        .addHeader("Connection", "close")
        .setResponseCode(401)
        .setBody("{ }")
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/dev/res/xml/network_security_config.xml
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">localhost</domain>
    </domain-config>
</network-security-config>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.rootstrap.android">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.CAMERA" />

    <application
        android:name=".App"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:networkSecurityConfig="@xml/network_security_config"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">

        <activity
            android:name=".ui.activity.main.SignUpActivity"
            android:screenOrientation="portrait"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name=".ui.activity.main.ProfileActivity"
            android:screenOrientation="portrait" />

        <activity
            android:name=".ui.activity.main.SignInActivity"
            android:screenOrientation="portrait" />

    </application>
</manifest>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/App.kt
package com.rootstrap.android

import android.app.Application
import com.rootstrap.android.metrics.Analytics
import com.rootstrap.android.metrics.GoogleAnalytics
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class App : Application() {

    override fun onCreate() {
        super.onCreate()

        Analytics.addProvider(GoogleAnalytics(this))
        // You need the api key in order to use MixPanel
        // Analytics.addProvider(MixPanelAnalytics(this))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/database/AppDataBase.kt
package com.rootstrap.android.database

class AppDataBase {
    // TODO
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/Analytics.kt
package com.rootstrap.android.metrics

import com.rootstrap.android.metrics.base.BaseAnalytics
import com.rootstrap.android.metrics.base.Provider
import com.rootstrap.android.metrics.base.TrackEvent
import com.rootstrap.android.metrics.base.UserProperty

object Analytics : BaseAnalytics {
    var providers: ArrayList<Provider> = ArrayList()

    override fun addProviders(providers: ArrayList<Provider>) {
        this.providers = providers
    }

    override fun addProvider(provider: Provider) {
        provider.let {
            providers.add(it)
            it.identifyUser()
        }
    }

    override fun addOrEditProperty(property: UserProperty) {
        providers.forEach { it.addOrEditUserSuperProperty(property) }
    }

    override fun addOrEditProperties(properties: List<UserProperty>) {
        providers.forEach {
            properties.forEach { property ->
                it.addOrEditUserSuperProperty(property)
            }
        }
    }

    override fun identifyUser() {
        providers.forEach { it.identifyUser() }
    }

    override fun track(event: TrackEvent) {
        providers.forEach { it.track(event) }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/Events.kt
package com.rootstrap.android.metrics

import com.rootstrap.android.metrics.base.TrackEvent

class UserEvents {
    companion object {
        /**
         * Analytics login event
         * @param data [Any] Optional
         * **/
        fun login(data: Any? = null): TrackEvent {
            // You can do something before create the event for example
            // create a super property with the current user info
            // appAnalytics.addOrEditProperty(UserProperty("user_name", "Fulano"))
            // the same for the other events
            Analytics.identifyUser()
            return TrackEvent(LOGIN, data)
        }

        /**
         * Analytics logout event
         * @param data [Any] Optional
         * **/
        fun logout(data: Any? = null) = TrackEvent(LOGOUT, data)

        /**
         * Analytics signup event
         * @param data [Any] Optional
         * **/
        fun signup(data: Any? = null) = TrackEvent(SIGNUP, data)
    }
}

class PageEvents {
    companion object {
        /**
         * Analytics visit page event
         * @param data [Any] Optional
         * **/
        fun visit(page: String, data: Any? = null) = TrackEvent(page, data)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/GoogleAnalytics.kt
package com.rootstrap.android.metrics

import android.content.Context
import com.google.firebase.analytics.FirebaseAnalytics
import com.rootstrap.android.metrics.base.Provider
import com.rootstrap.android.metrics.base.TrackEvent
import com.rootstrap.android.metrics.base.UserProperty
import org.json.JSONException

/**
 * Reference: https://firebase.google.com/docs/analytics/android/start
 * */
class GoogleAnalytics(context: Context) : Provider {
    var analytic: FirebaseAnalytics = FirebaseAnalytics.getInstance(context)

    /**
     * Track any event in the app
     * @param event App Event to track
     * */
    override fun track(event: TrackEvent) {
        analytic.let {
            if (event.eventName.isNotEmpty()) {
                event.eventData?.let { _ ->
                    try {
                        it.logEvent(event.eventName, event.actionDataToBundle())
                    } catch (e: JSONException) {
                        it.logEvent(event.eventName, null)
                        e.printStackTrace()
                    }
                } ?: it.logEvent(event.eventName, null)
            }
        }
    }

    /**
     * Reset analytic
     */
    override fun reset() {
        analytic.resetAnalyticsData()
    }

    /**
     * Initialize google analytics user and default data
     * analytic.setUserId(userId)
     * */
    override fun identifyUser() {
        // TODO see the comments ↑↑↑
    }

    /**
     * @param userProperty
     * Sample
     * UserProperty("Type","Admin")
     * UserProperty("Type","Customer")
     * UserProperty("Type","Anonymous")
     * https://firebase.google.com/docs/analytics/android/properties
     * */
    override fun addOrEditUserSuperProperty(userProperty: UserProperty) {
        analytic.setUserProperty(userProperty.propertyName, userProperty.propertyValue)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/MetricsEvents.kt
package com.rootstrap.android.metrics

// sample events
const val LOGIN = "logIn"
const val LOGOUT = "logOut"
const val SIGNUP = "signUp"
const val VISIT_SIGN_IN = "visit_sign_in"
const val VISIT_PROFILE = "visit_profile"
const val VISIT_SIGN_UP = "visit_sign_up"

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/MixPanelAnalytics.kt
package com.rootstrap.android.metrics

import android.content.Context

import com.mixpanel.android.mpmetrics.MixpanelAPI
import com.rootstrap.android.R
import com.rootstrap.android.metrics.base.Provider
import com.rootstrap.android.metrics.base.TrackEvent
import com.rootstrap.android.metrics.base.UserProperty
import org.json.JSONException

/**
 * Mix panel android reference: https://developer.mixpanel.com/docs/android
 * */
class MixPanelAnalytics(context: Context) : Provider {
    var analytic: MixpanelAPI =
        MixpanelAPI.getInstance(context, context.getString(R.string.mixpanel_api_key))

    /**
     * Track any event in the app
     * @param event Action to track
     * */
    override fun track(event: TrackEvent) {
        analytic.let {
            if (event.eventName.isNotEmpty()) {
                event.eventData?.let { _ ->
                    try {
                        it.track(event.eventName, event.actionDataToJsonObject())
                    } catch (e: JSONException) {
                        it.track(event.eventName)
                        e.printStackTrace()
                    }
                } ?: it.track(event.eventName)
            }
        }
    }

    /**
     * Reset analytic
     */
    override fun reset() {
        analytic.reset()
    }

    /**
     * Initialize mixpanel user and default data
     *  analytic.identify(user.id)
     *  analytic.alias(user.id, null)
     *  val people = analytic.people
     *  people.identify(user.Id)
     *  people.set("\$first_name", user.username)
     *  people.set("\$email", user.email())
     *  analytic!!.flush()
     * */
    override fun identifyUser() {
        // TODO see the comments ↑↑↑
    }

    /**
     * @param userProperty
     * Sample
     * UserProperty("Type","Admin")
     * UserProperty("Type","Customer")
     * UserProperty("Type","Anonymous")
     * https://help.mixpanel.com/hc/en-us/articles/360001355526
     * */
    override fun addOrEditUserSuperProperty(userProperty: UserProperty) {
        analytic.registerSuperProperties(userProperty.toJsonObject())
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/base/BaseAnalytics.kt
package com.rootstrap.android.metrics.base

/**
 * Add custom metrics
 * */
interface BaseAnalytics {
    fun addProvider(provider: Provider)
    fun addProviders(providers: ArrayList<Provider>)
    fun identifyUser()
    fun track(event: TrackEvent)
    fun addOrEditProperty(property: UserProperty)
    fun addOrEditProperties(properties: List<UserProperty>)
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/metrics/base/Provider.kt
package com.rootstrap.android.metrics.base

import android.os.Bundle
import com.google.gson.Gson
import org.json.JSONException
import org.json.JSONObject

interface Provider {

    fun track(event: TrackEvent)

    fun reset()

    fun identifyUser()

    fun addOrEditUserSuperProperty(userProperty: UserProperty)
}

class UserProperty(val propertyName: String, val propertyValue: String) {
    fun toJsonObject(): JSONObject {
        return JSONObject(Gson().toJson(this))
    }
}

class TrackEvent(val eventName: String, val eventData: Any? = null) {
    fun actionDataToJsonObject(): JSONObject {
        return JSONObject(Gson().toJson(eventData))
    }

    @Throws(JSONException::class)
    fun actionDataToBundle(): Bundle {
        val jsonObject = actionDataToJsonObject()
        val bundle = Bundle()
        val iterator = jsonObject.keys()

        while (iterator.hasNext()) {
            val key = iterator.next() as String
            val value = jsonObject.getString(key)
            bundle.putString(key, value)
        }

        return bundle
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/models/Model.kt
package com.rootstrap.android.models

class Model

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/ManagerModule.kt
package com.rootstrap.android.network.managers

import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.network.managers.session.SessionManagerImpl
import com.rootstrap.android.network.managers.user.UserManager
import com.rootstrap.android.network.managers.user.UserManagerImpl
import dagger.Binds
import dagger.Module
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
abstract class ManagerModule {

    @Binds
    @Singleton
    abstract fun bindSessionManager(sessionManagerImpl: SessionManagerImpl): SessionManager

    @Binds
    @Singleton
    abstract fun bindUserManager(userManagerImplImpl: UserManagerImpl): UserManager
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/session/SessionManager.kt
package com.rootstrap.android.network.managers.session

import com.rootstrap.android.network.models.User

interface SessionManager {
    var user: User?
    fun addAuthenticationHeaders(accessToken: String, client: String, uid: String)
    fun signOut()
    fun signIn(user: User)
    fun isUserSignedIn(): Boolean
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/session/SessionManagerImpl.kt
package com.rootstrap.android.network.managers.session

import com.rootstrap.android.network.models.User
import com.rootstrap.android.util.Prefs
import javax.inject.Inject

class SessionManagerImpl @Inject constructor(private val prefs: Prefs) : SessionManager {

    override var user: User? = prefs.user
        set(value) {
            field = value
            prefs.user = value
        }

    override fun addAuthenticationHeaders(accessToken: String, client: String, uid: String) {
        prefs.accessToken = accessToken
        prefs.client = client
        prefs.uid = uid
    }

    override fun signOut() {
        user = null
        prefs.clear()
    }

    override fun signIn(user: User) {
        this.user = user
        prefs.user = user
        prefs.signedIn = true
    }

    override fun isUserSignedIn(): Boolean {
        return (user != null && prefs.signedIn)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/user/UserManager.kt
package com.rootstrap.android.network.managers.user

import com.rootstrap.android.network.models.User
import com.rootstrap.android.network.models.UserSerializer
import com.rootstrap.android.util.extensions.Data

interface UserManager {
    suspend fun signUp(user: User): Result<Data<UserSerializer>>
    suspend fun signIn(user: User): Result<Data<UserSerializer>>
    suspend fun signOut(): Result<Data<Void>>
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/managers/user/UserManagerImpl.kt
package com.rootstrap.android.network.managers.user

import com.rootstrap.android.network.models.User
import com.rootstrap.android.network.models.UserSerializer
import com.rootstrap.android.network.services.ApiService
import com.rootstrap.android.util.extensions.ActionCallback
import com.rootstrap.android.util.extensions.Data
import javax.inject.Inject

/**
 * Singleton class
 * */
class UserManagerImpl @Inject constructor(private val service: ApiService) : UserManager {

    override suspend fun signUp(user: User): Result<Data<UserSerializer>> =
        ActionCallback.call(service.signUp(UserSerializer(user)))

    override suspend fun signIn(user: User): Result<Data<UserSerializer>> =
        ActionCallback.call(service.signIn(UserSerializer(user)))

    override suspend fun signOut(): Result<Data<Void>> =
        ActionCallback.call(service.signOut())
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/models/ErrorModel.kt
package com.rootstrap.android.network.models

import com.squareup.moshi.Json

data class ErrorModel(
    @Json(name = "errors") val errors: Any?,
    @Json(name = "error") val error: String?
)

data class ErrorModelSerializer(val error: ErrorModel)

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/models/User.kt
package com.rootstrap.android.network.models

import com.squareup.moshi.Json

data class User(
    @Json(name = "id") val id: String = "",
    @Json(name = "email") var email: String = "",
    @Json(name = "first_name") var firstName: String = "",
    @Json(name = "last_name") var lastName: String = "",
    @Json(name = "phone_number") var phone: String = "",
    @Json(name = "password") val password: String = "",
    @Json(name = "username") val username: String = ""
)

data class UserSerializer(@Json(name = "user") val user: User)

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/providers/ServiceProviderModule.kt
package com.rootstrap.android.network.providers

import com.rootstrap.android.BuildConfig
import com.rootstrap.android.network.services.AuthenticationInterceptor
import com.rootstrap.android.network.services.HeadersInterceptor
import com.rootstrap.android.network.services.ResponseInterceptor
import com.squareup.moshi.Moshi
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import dagger.hilt.components.SingletonComponent
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
class ServiceProviderModule {

    @Provides
    @Singleton
    fun provideOkHttpClient(
        authenticationInterceptor: AuthenticationInterceptor,
        responseInterceptor: ResponseInterceptor
    ): OkHttpClient {
        val httpInterceptorLevel = if (BuildConfig.DEBUG) HttpLoggingInterceptor.Level.BODY
            else HttpLoggingInterceptor.Level.BASIC

        return OkHttpClient.Builder()
                .addInterceptor(HeadersInterceptor())
                .addInterceptor(authenticationInterceptor)
                .addInterceptor(responseInterceptor)
                .addInterceptor(HttpLoggingInterceptor().setLevel(httpInterceptorLevel))
                .build()
    }

    @Provides
    @Singleton
    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
        val url = URL_API ?: BuildConfig.API_URL
        val moshi = Moshi.Builder()
            .add(KotlinJsonAdapterFactory())
            .build()
        return Retrofit.Builder()
                .baseUrl(url)
                .addConverterFactory(MoshiConverterFactory.create(moshi).withNullSerialization())
                .client(okHttpClient)
                .build()
    }

    companion object {
        var URL_API: String? = null
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/ApiModule.kt
package com.rootstrap.android.network.services

import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import retrofit2.Retrofit

@Module
@InstallIn(SingletonComponent::class)
class ApiModule {

    @Provides
    fun provideApiService(retrofit: Retrofit): ApiService {
        return retrofit.create(ApiService::class.java)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/ApiService.kt
package com.rootstrap.android.network.services

import com.rootstrap.android.network.models.UserSerializer
import retrofit2.Call
import retrofit2.http.Body
import retrofit2.http.DELETE
import retrofit2.http.POST

interface ApiService {

    @POST("users/")
    fun signUp(@Body user: UserSerializer): Call<UserSerializer>

    @POST("users/sign_in")
    fun signIn(@Body user: UserSerializer): Call<UserSerializer>

    @DELETE("users/sign_out")
    fun signOut(): Call<Void>
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/AuthenticationInterceptor.kt
package com.rootstrap.android.network.services

import com.rootstrap.android.util.Prefs
import okhttp3.Interceptor
import okhttp3.Response
import java.io.IOException
import javax.inject.Inject

class AuthenticationInterceptor @Inject constructor(private val prefs: Prefs) : Interceptor {

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val builder = chain.request().newBuilder()

        if (hasHeaders()) {
            builder
                .addHeader(prefs.ACCESS_TOKEN, prefs.accessToken)
                .addHeader(prefs.CLIENT, prefs.client)
                .addHeader(prefs.UID, prefs.uid)
        }

        return chain.proceed(builder.build())
    }

    private fun hasHeaders(): Boolean {
        return prefs.accessToken != "" &&
                prefs.client != "" &&
                prefs.uid != ""
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/HeadersInterceptor.kt
package com.rootstrap.android.network.services

import okhttp3.Interceptor
import okhttp3.Response
import java.io.IOException

class HeadersInterceptor : Interceptor {

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val request = chain.request()
                .newBuilder()
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build()

        return chain.proceed(request)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/network/services/ResponseInterceptor.kt
package com.rootstrap.android.network.services

import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.util.Prefs
import okhttp3.Interceptor
import okhttp3.Response
import java.io.IOException
import javax.inject.Inject

class ResponseInterceptor @Inject constructor(
    private val prefs: Prefs,
    private val sessionManager: SessionManager
) : Interceptor {

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val response = chain.proceed(chain.request())
        prefer(response)
        return response
    }

    private fun prefer(response: Response) {
        val accessToken = response.header(prefs.ACCESS_TOKEN)
        val client = response.header(prefs.CLIENT)
        val uid = response.header(prefs.UID)
        if (preferValid(accessToken, client, uid))
            sessionManager.addAuthenticationHeaders(accessToken!!, client!!, uid!!)
    }

    private fun preferValid(accessToken: String?, client: String?, uid: String?): Boolean {
        return accessToken != null && !accessToken.isEmpty() &&
                client != null && !client.isEmpty() &&
                uid != null && !uid.isEmpty()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/ProfileActivity.kt
package com.rootstrap.android.ui.activity.main

import android.os.Bundle
import androidx.activity.viewModels
import androidx.lifecycle.Observer
import com.rootstrap.android.R
import com.rootstrap.android.databinding.ActivityProfileBinding
import com.rootstrap.android.metrics.Analytics
import com.rootstrap.android.metrics.PageEvents
import com.rootstrap.android.metrics.VISIT_PROFILE
import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.ui.base.BaseActivity
import com.rootstrap.android.ui.view.ProfileView
import com.rootstrap.android.util.NetworkState
import dagger.hilt.android.AndroidEntryPoint
import javax.inject.Inject

@AndroidEntryPoint
class ProfileActivity : BaseActivity(), ProfileView {

    @Inject lateinit var sessionManager: SessionManager

    private val viewModel: ProfileActivityViewModel by viewModels()
    private val binding by lazy { ActivityProfileBinding.inflate(layoutInflater) }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        Analytics.track(PageEvents.visit(VISIT_PROFILE))

        with(binding) {
            setContentView(root)
            welcomeTextView.text = getString(R.string.welcome_message, sessionManager.user?.firstName)
            signOutButton.setOnClickListener { viewModel.signOut() }
        }

        lifecycle.addObserver(viewModel)
        setObservers()
    }

    override fun goToFirstScreen() {
        startActivityClearTask(SignUpActivity())
    }

    private fun setObservers() {
        viewModel.state.observe(this, Observer {
            when (it) {
                ProfileState.signOutFailure -> showError(viewModel.error)
                ProfileState.signOutSuccess -> goToFirstScreen()
            }
        })

        viewModel.networkState.observe(this, Observer {
            when (it) {
                NetworkState.loading -> showProgress()
                NetworkState.idle -> hideProgress()
                else -> showError(viewModel.error ?: getString(R.string.default_error))
            }
        })
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/ProfileActivityViewModel.kt
package com.rootstrap.android.ui.activity.main

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.network.managers.user.UserManager
import com.rootstrap.android.ui.base.BaseViewModel
import com.rootstrap.android.util.NetworkState
import com.rootstrap.android.util.extensions.ApiErrorType
import com.rootstrap.android.util.extensions.ApiException
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
open class ProfileActivityViewModel @Inject constructor(
    private val sessionManager: SessionManager,
    private val userManager: UserManager
) : BaseViewModel() {

    private val _state = MutableLiveData<ProfileState>()
    val state: LiveData<ProfileState>
        get() = _state

    fun signOut() {
        _networkState.value = NetworkState.loading
        viewModelScope.launch {
            val result = userManager.signOut()
            if (result.isSuccess) {
                _networkState.value = NetworkState.idle
                _state.value = ProfileState.signOutSuccess
                sessionManager.signOut()
            } else {
                handleError(result.exceptionOrNull())
            }
        }
    }

    private fun handleError(exception: Throwable?) {
        error = if (exception is ApiException && exception.errorType == ApiErrorType.apiError) {
            exception.message
        } else null

        _networkState.value = NetworkState.idle
        _networkState.value = NetworkState.error
        _state.value = ProfileState.signOutFailure
    }
}

enum class ProfileState {
    signOutFailure,
    signOutSuccess
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignInActivity.kt
package com.rootstrap.android.ui.activity.main

import android.Manifest
import android.os.Bundle
import androidx.activity.viewModels
import androidx.lifecycle.Observer
import com.rootstrap.android.R
import com.rootstrap.android.databinding.ActivitySignInBinding
import com.rootstrap.android.metrics.Analytics
import com.rootstrap.android.metrics.PageEvents
import com.rootstrap.android.metrics.VISIT_SIGN_IN
import com.rootstrap.android.network.models.User
import com.rootstrap.android.ui.view.AuthView
import com.rootstrap.android.util.NetworkState
import com.rootstrap.android.util.extensions.value
import com.rootstrap.android.util.permissions.PermissionActivity
import com.rootstrap.android.util.permissions.PermissionResponse
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class SignInActivity : PermissionActivity(), AuthView {

    private val viewModel: SignInActivityViewModel by viewModels()
    private val binding: ActivitySignInBinding by lazy {
        ActivitySignInBinding.inflate(layoutInflater)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContentView(binding.root)
        Analytics.track(PageEvents.visit(VISIT_SIGN_IN))

        binding.signInButton.setOnClickListener { signIn() }

        lifecycle.addObserver(viewModel)

        setObservers()
        sampleAskForPermission()
    }

    override fun showProfile() {
        startActivityClearTask(ProfileActivity())
    }

    private fun signIn() {
        with(binding) {
            val user = User(
                email = emailEditText.value(),
                password = passwordEditText.value()
            )
            viewModel.signIn(user)
        }
    }

    private fun setObservers() {
        viewModel.state.observe(this, Observer {
            when (it) {
                SignInState.signInFailure -> showError(viewModel.error)
                SignInState.signInSuccess -> showProfile()
            }
        })

        viewModel.networkState.observe(this, Observer {
            when (it) {
                NetworkState.loading -> showProgress()
                NetworkState.idle -> hideProgress()
                else -> showError(viewModel.error ?: getString(R.string.default_error))
            }
        })
    }

    private fun sampleAskForPermission() {
        requestPermission(arrayOf(Manifest.permission.CAMERA), object : PermissionResponse {
            override fun granted() {
                // TODO..
            }

            override fun denied() {
                // TODO..
            }

            override fun foreverDenied() {
                // TODO..
            }
        })
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignInActivityViewModel.kt
package com.rootstrap.android.ui.activity.main

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.network.managers.user.UserManager
import com.rootstrap.android.network.models.User
import com.rootstrap.android.ui.base.BaseViewModel
import com.rootstrap.android.util.NetworkState
import com.rootstrap.android.util.dispatcher.DispatcherProvider
import com.rootstrap.android.util.extensions.ApiErrorType
import com.rootstrap.android.util.extensions.ApiException
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
open class SignInActivityViewModel @Inject constructor(
    private val sessionManager: SessionManager,
    private val userManager: UserManager,
    private val dispatcher: DispatcherProvider
) : BaseViewModel() {

    private val _state = MutableLiveData<SignInState>()
    val state: LiveData<SignInState>
        get() = _state

    fun signIn(user: User) {
        _networkState.value = NetworkState.loading
        // Avoid using hardcoded dispatcher this way can be mocked later
        viewModelScope.launch(dispatcher.io) {
            val result = userManager.signIn(user = user)
            if (result.isSuccess) {
                result.getOrNull()?.value?.user?.let { user ->
                    sessionManager.signIn(user)
                }

                _networkState.value = NetworkState.idle
                _state.value = SignInState.signInSuccess
            } else {
                handleError(result.exceptionOrNull())
            }
        }
    }

    private fun handleError(exception: Throwable?) {
        error = if (exception is ApiException && exception.errorType == ApiErrorType.apiError) {
            exception.message
        } else null

        _networkState.value = NetworkState.error
        _state.value = SignInState.signInFailure
    }
}

enum class SignInState {
    signInFailure,
    signInSuccess
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignUpActivity.kt
package com.rootstrap.android.ui.activity.main

import android.content.Intent
import android.os.Bundle
import androidx.activity.viewModels
import androidx.lifecycle.Observer
import com.rootstrap.android.R
import com.rootstrap.android.databinding.ActivitySignUpBinding
import com.rootstrap.android.metrics.Analytics
import com.rootstrap.android.metrics.PageEvents
import com.rootstrap.android.metrics.VISIT_SIGN_UP
import com.rootstrap.android.network.models.User
import com.rootstrap.android.ui.base.BaseActivity
import com.rootstrap.android.ui.view.AuthView
import com.rootstrap.android.util.NetworkState
import com.rootstrap.android.util.extensions.value
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class SignUpActivity : BaseActivity(), AuthView {

    private val viewModel: SignUpActivityViewModel by viewModels()
    private val binding: ActivitySignUpBinding by lazy {
        ActivitySignUpBinding.inflate(layoutInflater)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContentView(binding.root)
        Analytics.track(PageEvents.visit(VISIT_SIGN_UP))

        with(binding) {
            signUpButton.setOnClickListener { signUp() }
            signInTextView.setOnClickListener { signIn() }
        }
        lifecycle.addObserver(viewModel)
        setObservers()
    }

    override fun showProfile() {
        startActivityClearTask(ProfileActivity())
    }

    private fun signIn() {
        startActivity(Intent(this, SignInActivity::class.java))
    }

    private fun signUp() {
        with(binding) {
            val user = User(
                email = emailEditText.value(),
                firstName = firstNameEditText.value(),
                lastName = lastNameEditText.value(),
                password = passwordEditText.value()
            )
            viewModel.signUp(user)
        }
    }

    private fun setObservers() {
        viewModel.state.observe(this, Observer {
            when (it) {
                SignUpState.signUpFailure -> showError(viewModel.error)
                SignUpState.signUpSuccess -> showProfile()
            }
        })

        viewModel.networkState.observe(this, Observer {
            when (it) {
                NetworkState.loading -> showProgress()
                NetworkState.idle -> hideProgress()
                else -> showError(viewModel.error ?: getString(R.string.default_error))
            }
        })
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/activity/main/SignUpActivityViewModel.kt
package com.rootstrap.android.ui.activity.main

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.network.managers.user.UserManager
import com.rootstrap.android.network.models.User
import com.rootstrap.android.ui.base.BaseViewModel
import com.rootstrap.android.util.NetworkState
import com.rootstrap.android.util.dispatcher.DispatcherProvider
import com.rootstrap.android.util.extensions.ApiErrorType
import com.rootstrap.android.util.extensions.ApiException
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
open class SignUpActivityViewModel @Inject constructor(
    private val sessionManager: SessionManager,
    private val userManager: UserManager,
    private val dispatcher: DispatcherProvider
) : BaseViewModel() {

    private val _state = MutableLiveData<SignUpState>()
    val state: LiveData<SignUpState>
        get() = _state

    fun signUp(user: User) {
        _networkState.value = NetworkState.loading
        // Avoid using hardcoded dispatcher this way can be mocked later
        viewModelScope.launch(dispatcher.io) {
            val result = userManager.signUp(user = user)

            if (result.isSuccess) {
                result.getOrNull()?.value?.user?.let { user ->
                    sessionManager.signIn(user)
                }

                _networkState.value = NetworkState.idle
                _state.value = SignUpState.signUpSuccess
            } else {
                handleError(result.exceptionOrNull())
            }
        }
    }

    private fun handleError(exception: Throwable?) {
        error = if (exception is ApiException && exception.errorType == ApiErrorType.apiError) {
            exception.message
        } else null

        _networkState.value = NetworkState.error
        _state.value = SignUpState.signUpFailure
    }
}

enum class SignUpState {
    signUpFailure,
    signUpSuccess
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/adapter/Adapter.kt
package com.rootstrap.android.ui.adapter

class Adapter

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseActivity.kt
package com.rootstrap.android.ui.base

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import com.rootstrap.android.util.LoadingDialogUtil

@SuppressLint("Registered")
open class BaseActivity : AppCompatActivity(), BaseView {

    override fun showProgress() {
        LoadingDialogUtil.showProgress(this)
    }

    override fun hideProgress() {
        LoadingDialogUtil.hideProgress()
    }

    override fun showError(message: String?) {
        LoadingDialogUtil.showError(message, this)
    }

    protected fun startActivityClearTask(activity: Activity) {
        val intent = Intent(this, activity.javaClass)
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
        startActivity(intent)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseFragment.kt
package com.rootstrap.android.ui.base

import androidx.fragment.app.Fragment
import com.rootstrap.android.util.LoadingDialogUtil

open class BaseFragment : Fragment(), BaseView {

    override fun showProgress() {
        LoadingDialogUtil.showProgress(requireContext())
    }

    override fun hideProgress() {
        LoadingDialogUtil.hideProgress()
    }

    override fun showError(message: String?) {
        LoadingDialogUtil.showError(message, requireContext())
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseView.kt
package com.rootstrap.android.ui.base

interface BaseView {

    fun showProgress()

    fun hideProgress()

    fun showError(message: String?)
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/base/BaseViewModel.kt
package com.rootstrap.android.ui.base

import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleObserver
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.OnLifecycleEvent
import androidx.lifecycle.ViewModel
import com.rootstrap.android.util.NetworkState
import com.squareup.otto.Bus

/**
 * A [ViewModel] base class
 * implement app general LiveData as Session or User
 * **/
open class BaseViewModel : ViewModel(), LifecycleObserver {
    var error: String? = null

    protected val _networkState = MutableLiveData<NetworkState>()
    val networkState: LiveData<NetworkState>
        get() = _networkState

    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    fun register() = Bus().register(this)

    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    fun unregister() = Bus().unregister(this)
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/custom/CustomView.kt
package com.rootstrap.android.ui.custom

class CustomView

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/custom/LoadingDialog.kt
package com.rootstrap.android.ui.custom

import android.app.Dialog
import android.content.Context
import android.content.DialogInterface
import android.view.Window
import com.rootstrap.android.R

class LoadingDialog(context: Context, cancelListener: DialogInterface.OnCancelListener?) : Dialog(context) {

    init {
        requestWindowFeature(Window.FEATURE_NO_TITLE)
        setContentView(R.layout.view_loading_dialog)
        setCanceledOnTouchOutside(false)

        if (cancelListener != null) {
            setCancelable(true)
            setOnCancelListener(cancelListener)
        } else {
            setCancelable(false)
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/view/AuthView.kt
package com.rootstrap.android.ui.view

import com.rootstrap.android.ui.base.BaseView

interface AuthView : BaseView {

    fun showProfile()
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/view/IView.kt
package com.rootstrap.android.ui.view

class IView

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/ui/view/ProfileView.kt
package com.rootstrap.android.ui.view

import com.rootstrap.android.ui.base.BaseView

interface ProfileView : BaseView {

    fun goToFirstScreen()
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/ErrorUtil.kt
package com.rootstrap.android.util

import com.google.android.material.textfield.TextInputLayout
import com.rootstrap.android.network.models.ErrorModel

class ErrorUtil {

    companion object {
        fun handleCustomError(error: ErrorModel): String {
            var message = ""
            if (error.errors != null) {
                if (error.errors is List<*> && !error.errors.isEmpty()) {
                    if (error.errors.first() is String) {
                        message = error.errors.first() as String
                    }
                } else if (error.errors is Map<*, *> && error.errors.keys.first() is String &&
                    error.errors.values.first() is List<*>
                ) {
                    val errors = error.errors as Map<String, List<String>>
                    message = errors.getValue("full_messages").first()
                }
            } else if (error.error != null && !error.error.isEmpty()) {
                message = error.error
            }

            return message
        }

        fun displayError(inputLayout: TextInputLayout, message: String) {
            inputLayout.isErrorEnabled = true
            inputLayout.error = message
        }
    }

    class ErrorsEvent(val error: String)
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/LoadingDialogUtil.kt
package com.rootstrap.android.util

import android.app.AlertDialog
import android.content.Context
import com.rootstrap.android.R
import com.rootstrap.android.ui.custom.LoadingDialog

object LoadingDialogUtil {

    private var loadingDialog: LoadingDialog? = null

    fun showProgress(context: Context) {
        if (loadingDialog == null) {
            loadingDialog = LoadingDialog(context, null)
        }

        loadingDialog?.show()
    }

    fun hideProgress() {
        loadingDialog?.run { dismiss() }
    }

    fun showError(message: String?, context: Context) {
        val builder = AlertDialog.Builder(context)
        with(builder) {
            setTitle(context.getString(R.string.error))

            val showMessage = if (message.isNullOrEmpty())
                context.getString(R.string.generic_error)
            else message

            setMessage(showMessage)

            setPositiveButton(context.getString(R.string.ok)) { dialog, _ ->
                dialog.cancel()
            }
            val dialog: AlertDialog = create()
            dialog.show()
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/NetworkState.kt
package com.rootstrap.android.util

enum class NetworkState {
    loading,
    idle,
    error
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/Prefs.kt
package com.rootstrap.android.util

import android.content.SharedPreferences
import com.google.gson.Gson
import com.rootstrap.android.network.models.User
import com.rootstrap.android.util.extensions.fromJson
import javax.inject.Inject

class Prefs @Inject constructor(private val prefs: SharedPreferences) {

    val ACCESS_TOKEN = "access-token"
    val CLIENT = "Client"
    val UID = "uid"
    val USER = "user"
    val SIGNED_IN = "signed_in"

    private val gson: Gson = Gson()

    var accessToken: String
        get() = prefs.getString(ACCESS_TOKEN, "")!!
        set(value) = prefs.edit().putString(ACCESS_TOKEN, value).apply()

    var client: String
        get() = prefs.getString(CLIENT, "")!!
        set(value) = prefs.edit().putString(CLIENT, value).apply()

    var uid: String
        get() = prefs.getString(UID, "")!!
        set(value) = prefs.edit().putString(UID, value).apply()

    var user: User?
        get() = gson.fromJson<User>(prefs.getString(USER, "")!!)
        set(value) = prefs.edit().putString(USER, gson.toJson(value)).apply()

    var signedIn: Boolean
        get() = prefs.getBoolean(SIGNED_IN, false)
        set(value) = prefs.edit().putBoolean(SIGNED_IN, value).apply()

    fun clear() = prefs.edit().clear().apply()
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/Util.kt
package com.rootstrap.android.util

class Util

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/UtilModule.kt
package com.rootstrap.android.util

import android.content.Context
import android.content.SharedPreferences
import android.security.keystore.KeyGenParameterSpec
import android.security.keystore.KeyProperties
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKey
import com.rootstrap.android.BuildConfig
import com.rootstrap.android.util.dispatcher.AppDispatcherProvider
import com.rootstrap.android.util.dispatcher.DispatcherProvider
import com.squareup.otto.Bus
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
class UtilModule {

    @Provides
    @Singleton
    fun provideSharedPreferences(@ApplicationContext context: Context): SharedPreferences {

        val spec = KeyGenParameterSpec.Builder(
            BuildConfig.SECURE_KEY_ALIAS,
            KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT
            )
            .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
            .setKeySize(256)
            .build()

        val masterKey = MasterKey.Builder(context, BuildConfig.SECURE_KEY_ALIAS)
            .setKeyGenParameterSpec(spec)
            .build()

        return EncryptedSharedPreferences.create(
            context,
            BuildConfig.SECURE_FILE_NAME,
            masterKey,
            EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
            EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
        )
    }

    @Provides
    @Singleton
    fun provideBus(): Bus = Bus()

    @Provides
    @Singleton
    fun provideDispatcher(): DispatcherProvider = AppDispatcherProvider()
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/dispatcher/AppDispatcherProvider.kt
package com.rootstrap.android.util.dispatcher

import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers

class AppDispatcherProvider : DispatcherProvider {
    override val io: CoroutineDispatcher = Dispatchers.IO
    override val default: CoroutineDispatcher = Dispatchers.Default
    override val main: CoroutineDispatcher = Dispatchers.Main
    override val unconfined: CoroutineDispatcher = Dispatchers.Unconfined
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/dispatcher/DispatcherProvider.kt
package com.rootstrap.android.util.dispatcher

import kotlinx.coroutines.CoroutineDispatcher

interface DispatcherProvider {
    val io: CoroutineDispatcher
    val default: CoroutineDispatcher
    val main: CoroutineDispatcher
    val unconfined: CoroutineDispatcher
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/ActionCallback.kt
package com.rootstrap.android.util.extensions

import com.google.gson.Gson
import com.rootstrap.android.network.models.ErrorModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.Call
import retrofit2.Response

class ActionCallback {

    companion object {

        suspend fun <T> call(apiCall: Call<T>): Result<Data<T>> =
            withContext(Dispatchers.IO) {
                val response = apiCall.execute()
                handleResponse(response)
            }

        private fun <T> handleResponse(response: Response<T>): Result<Data<T>> {
            if (response.isSuccessful) {
                return Result.success(
                    Data(response.body())
                )
            } else {
                try {
                    response.errorBody()?.let {
                        val apiError = Gson().fromJson(it.charStream(), ErrorModel::class.java)
                        return Result.failure(
                            ApiException(
                                errorMessage = apiError.error
                            )
                        )
                    }
                } catch (ignore: Exception) {
                }
            }

            return Result.failure(ApiException(errorType = ApiErrorType.unknownError))
        }
    }
}

class Data<T>(val value: T?)

class ApiException(
    private val errorMessage: String? = null,
    val errorType: ApiErrorType = ApiErrorType.apiError
) : java.lang.Exception() {
    override val message: String?
        get() = errorMessage
}

enum class ApiErrorType {
    apiError,
    unknownError
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/EditText.kt
package com.rootstrap.android.util.extensions

import android.widget.EditText
import java.util.regex.Pattern

/**
 * [EditText] value
 * */
fun EditText.value() = text.toString().trim()

/**
 * Validate [EditText] with pattern
 * @param pattern [String] Pattern
 * */
fun EditText.validate(pattern: String): Boolean =
    Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)
        .matcher(value())
        .matches()

/**
 * Validate [EditText] doesn't have a null value
 * */
fun EditText.isNotEmpty() = value().isNotEmpty()

/**
 * Add more extensions in case you need it
 * */

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/Gson.kt
package com.rootstrap.android.util.extensions

import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

inline fun <reified T> Gson.fromJson(json: String) = this.fromJson<T>(json, object : TypeToken<T>() {}.type)

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/ImageView.kt
package com.rootstrap.android.util.extensions

import android.net.Uri
import android.widget.ImageView
import com.bumptech.glide.Glide

/**
 * Using Glide to load an image
 * in case you change Glide by other library like Picasso or Fresco
 * just change this extension
 * @param uri [Uri] Image URI
 * */
fun ImageView.loadUri(uri: Uri) {
    Glide.with(context)
        .load(uri)
        .into(this)
}

/**
* Add more extensions in case you need it
* */

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/Validations.kt
package com.rootstrap.android.util.extensions

fun String.validate(pattern: String): Boolean {
    return pattern.toRegex().matches(this)
}

fun String.isEmail(): Boolean {
    return validate(
        "[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}" +
                "\\@" +
                "[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}" +
                "(" +
                "\\." +
                "[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25}" +
                ")+"
    )
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/extensions/ViewGroup.kt
package com.rootstrap.android.util.extensions

import android.view.LayoutInflater
import android.view.ViewGroup

/**
 * Layout Inflater for Recycler View adapters
 * @param layout [Int] Layout xlm
 * */
fun ViewGroup.inflate(layout: Int, attachToRoot: Boolean = false) =
    LayoutInflater.from(context).inflate(layout, this, attachToRoot)

/**
 * Add more extensions in case you need it
 * */

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/permissions/PermissionActivity.kt
package com.rootstrap.android.util.permissions

import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import com.rootstrap.android.ui.base.BaseActivity

open class PermissionActivity : BaseActivity() {

    private var permissionListener: PermissionResponse? = null

    fun requestPermission(permissions: Array<String>, listener: PermissionResponse) {
        permissionListener = listener
        val notGrantedPermissions = this.checkNotGrantedPermissions(permissions)

        when {
            notGrantedPermissions.isEmpty() -> permissionListener?.granted()
            else -> ActivityCompat.requestPermissions(
                this,
                notGrantedPermissions.toTypedArray(),
                REQUEST_PERMISSION_REQUEST_CODE
            )
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        permissionListener?.let { listener ->
            if (requestCode != REQUEST_PERMISSION_REQUEST_CODE) {
                return
            }

            val deniedPermissions = mutableListOf<String>()

            for (i in grantResults.indices) {
                if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                    deniedPermissions.add(permissions[i])
                }
            }

            when {
                deniedPermissions.isEmpty() -> listener.granted()
                else -> {
                    for (deniedPermission in deniedPermissions) {
                        if (!ActivityCompat.shouldShowRequestPermissionRationale(this, deniedPermission)) {
                            listener.foreverDenied()
                            return
                        }
                    }
                    listener.denied()
                }
            }
        }

        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/permissions/PermissionFragment.kt
package com.rootstrap.android.util.permissions

import android.content.pm.PackageManager
import com.rootstrap.android.ui.base.BaseFragment

open class PermissionFragment : BaseFragment() {

    private var permissionListener: PermissionResponse? = null

    private fun requestPermission(permissions: Array<String>, listener: PermissionResponse) {
        permissionListener = listener
        activity?.let { activityContext ->
            val notGrantedPermissions = activityContext.checkNotGrantedPermissions(permissions)

            when {
                notGrantedPermissions.isEmpty() -> permissionListener?.granted()
                else -> requestPermissions(
                    notGrantedPermissions.toTypedArray(),
                    REQUEST_PERMISSION_REQUEST_CODE
                )
            }
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        permissionListener?.let { listener ->
            if (requestCode != REQUEST_PERMISSION_REQUEST_CODE) {
                return
            }

            val deniedPermissions = mutableListOf<String>()

            for (i in grantResults.indices) {
                if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                    deniedPermissions.add(permissions[i])
                }
            }

            when {
                deniedPermissions.isEmpty() -> listener.granted()
                else -> {
                    for (deniedPermission in deniedPermissions) {
                        if (!shouldShowRequestPermissionRationale(deniedPermission)) {
                            listener.foreverDenied()
                            return
                        }
                    }
                    listener.denied()
                }
            }
        }

        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/java/com/rootstrap/android/util/permissions/PermissionManager.kt
package com.rootstrap.android.util.permissions

import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.provider.Settings
import androidx.core.content.ContextCompat.checkSelfPermission

interface PermissionResponse {
    fun granted()
    fun denied()
    fun foreverDenied()
}

val REQUEST_PERMISSION_REQUEST_CODE = 999

fun Context.checkPermission(permission: String): Boolean =
    Build.VERSION.SDK_INT < Build.VERSION_CODES.M || checkSelfPermission(
        this,
        permission
    ) == PackageManager.PERMISSION_GRANTED

fun Context.checkNotGrantedPermissions(permissions: Array<String>): List<String> =
    permissions.filter { !checkPermission(it) }

/**
 * Use this extension to open the app details to grant permission manually
 * in case that the user denied the permission all the time
 * **/
fun Context.openAppSettings() =
    startActivity(
        Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).also {
            it.data = Uri.parse("package:" + this.packageName)
        }
    )

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/drawable/background_loader.xml
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">

    <solid android:color="@android:color/transparent" />
    <corners android:radius="@dimen/loader_radius" />
</shape>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/drawable/ic_launcher_background.xml
<?xml version="1.0" encoding="utf-8"?>
<vector
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:height="108dp"
        android:width="108dp"
        android:viewportHeight="108"
        android:viewportWidth="108">
    <path android:fillColor="#008577"
          android:pathData="M0,0h108v108h-108z"/>
    <path android:fillColor="#00000000" android:pathData="M9,0L9,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,0L19,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,0L29,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,0L39,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,0L49,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,0L59,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,0L69,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,0L79,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M89,0L89,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M99,0L99,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,9L108,9"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,19L108,19"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,29L108,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,39L108,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,49L108,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,59L108,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,69L108,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,79L108,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,89L108,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,99L108,99"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,29L89,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,39L89,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,49L89,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,59L89,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,69L89,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,79L89,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,19L29,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,19L39,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,19L49,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,19L59,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,19L69,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,19L79,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/drawable-v24/ic_launcher_foreground.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:aapt="http://schemas.android.com/aapt"
        android:width="108dp"
        android:height="108dp"
        android:viewportHeight="108"
        android:viewportWidth="108">
    <path
            android:fillType="evenOdd"
            android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
            android:strokeColor="#00000000"
            android:strokeWidth="1">
        <aapt:attr name="android:fillColor">
            <gradient
                    android:endX="78.5885"
                    android:endY="90.9159"
                    android:startX="48.7653"
                    android:startY="61.0927"
                    android:type="linear">
                <item
                        android:color="#44000000"
                        android:offset="0.0"/>
                <item
                        android:color="#00000000"
                        android:offset="1.0"/>
            </gradient>
        </aapt:attr>
    </path>
    <path
            android:fillColor="#FFFFFF"
            android:fillType="nonZero"
            android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
            android:strokeColor="#00000000"
            android:strokeWidth="1"/>
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/activity_profile.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_margin="@dimen/sign_up_margin_horizontal">

    <TextView
        android:id="@+id/welcome_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:gravity="center"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <Button
        android:id="@+id/sign_out_button"
        android:layout_width="match_parent"
        android:layout_height="@dimen/sign_up_button_height"
        android:layout_marginTop="@dimen/text_input_margin_top"
        android:background="@color/colorAccent"
        android:text="@string/sign_out"
        android:textColor="@android:color/white"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/welcome_text_view" />

</androidx.constraintlayout.widget.ConstraintLayout>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/activity_sign_in.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_margin="@dimen/sign_up_margin_horizontal"
    tools:context=".ui.activity.main.MainActivity">

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/email_text_input_layout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/text_input_margin_top"
        app:errorEnabled="true"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <androidx.appcompat.widget.AppCompatEditText
            android:id="@+id/email_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/email"
            android:inputType="textEmailAddress" />

    </com.google.android.material.textfield.TextInputLayout>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/password_text_input_layout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/text_input_margin_top"
        app:errorEnabled="true"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/email_text_input_layout">

        <androidx.appcompat.widget.AppCompatEditText
            android:id="@+id/password_edit_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/password"
            android:inputType="textPassword" />

    </com.google.android.material.textfield.TextInputLayout>

    <Button
        android:id="@+id/sign_in_button"
        android:layout_width="match_parent"
        android:layout_height="@dimen/sign_up_button_height"
        android:layout_marginTop="@dimen/text_input_margin_top"
        android:background="@color/colorAccent"
        android:text="@string/sign_in"
        android:textColor="@android:color/white"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/password_text_input_layout" />

</androidx.constraintlayout.widget.ConstraintLayout>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/activity_sign_up.xml
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="@dimen/sign_up_margin_horizontal"
        tools:context=".ui.activity.main.SignUpActivity">

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/first_name_text_input_layout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/text_input_margin_top"
            app:errorEnabled="true"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent">

            <androidx.appcompat.widget.AppCompatEditText
                android:id="@+id/first_name_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/first_name"
                android:inputType="textCapWords" />

        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/last_name_text_input_layout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/text_input_margin_top"
            app:errorEnabled="true"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/first_name_text_input_layout">

            <androidx.appcompat.widget.AppCompatEditText
                android:id="@+id/last_name_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/last_name"
                android:inputType="textCapWords" />

        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/email_text_input_layout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/text_input_margin_top"
            app:errorEnabled="true"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/last_name_text_input_layout">

            <androidx.appcompat.widget.AppCompatEditText
                android:id="@+id/email_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/email"
                android:inputType="textEmailAddress" />

        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/password_text_input_layout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="@dimen/text_input_margin_top"
            app:errorEnabled="true"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/email_text_input_layout">

            <androidx.appcompat.widget.AppCompatEditText
                android:id="@+id/password_edit_text"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/password"
                android:inputType="textPassword" />

        </com.google.android.material.textfield.TextInputLayout>

        <Button
            android:id="@+id/sign_up_button"
            android:layout_width="match_parent"
            android:layout_height="@dimen/sign_up_button_height"
            android:layout_marginTop="@dimen/text_input_margin_top"
            android:background="@color/colorAccent"
            android:text="@string/sign_up"
            android:textColor="@android:color/white"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/password_text_input_layout" />

        <TextView
            android:id="@+id/sign_in_text_view"
            android:layout_width="match_parent"
            android:layout_height="@dimen/sign_up_button_height"
            android:gravity="center"
            android:text="@string/got_account"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/sign_up_button" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/fragment_sample.xml
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context="com.rootstrap.android.ui.fragment.sample.SampleFragment">

    <!-- TODO: Update blank fragment layout -->
    <TextView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:text="@string/hello_blank_fragment" />

</FrameLayout>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/layout/view_loading_dialog.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/background_loader"
    android:gravity="center"
    android:padding="@dimen/loader_padding">

    <ProgressBar
        android:id="@+id/progressBar"
        style="?android:attr/progressBarStyleLarge"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true" />

</RelativeLayout>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
</adaptive-icon>
--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
</adaptive-icon>
--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-hdpi/ic_launcher.png
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
--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-hdpi/ic_launcher_round.png
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
--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-mdpi/ic_launcher.png
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
--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-mdpi/ic_launcher_round.png
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
--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xhdpi/ic_launcher.png
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
--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxhdpi/ic_launcher.png

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/colors.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#008577</color>
    <color name="colorPrimaryDark">#00574B</color>
    <color name="colorAccent">#D81B60</color>
</resources>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/dimens.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- General -->
    <dimen name="loader_padding">30dp</dimen>
    <dimen name="loader_radius">10dp</dimen>

    <!-- Sign Up -->
    <dimen name="text_input_margin_top">20dp</dimen>
    <dimen name="sign_up_margin_horizontal">45dp</dimen>
    <dimen name="sign_up_button_height">48dp</dimen>
</resources>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/strings.xml
<resources>
    <!-- General -->
    <string name="app_name">RootstrapAndroidBase</string>
    <string name="ok">OK</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="mixpanel_api_key">mixpanel_api_key</string>

    <!-- Error Messages -->
    <string name="generic_error">There was an unexpected error</string>
    <string name="error">ERROR</string>

    <!-- Sign Up -->
    <string name="first_name">First Name</string>
    <string name="last_name">Last Name</string>
    <string name="email">Email</string>
    <string name="password">Password</string>
    <string name="got_account">Already registered? Sign in!</string>
    <string name="sign_up">Sign Up</string>

    <!-- Sign In -->
    <string name="sign_in">Sign In</string>

    <!-- Profile -->
    <string name="welcome_message">Hi %1$s!</string>
    <string name="sign_out">Sign Out</string>
    <string name="default_error">Oops! Network error</string>
</resources>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/values/styles.xml
<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
    </style>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/main/res/xml/network_security_config.xml
<?xml version="1.0" encoding="utf-8"?>
<network-security-config />

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/staging/res/xml/network_security_config.xml
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">localhost</domain>
    </domain-config>
</network-security-config>

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/SignInActivityViewModelTest.kt
package com.rootstrap.android

import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.network.managers.user.UserManager
import com.rootstrap.android.network.models.User
import com.rootstrap.android.network.models.UserSerializer
import com.rootstrap.android.test.TestDispatcherProvider
import com.rootstrap.android.test.UnitTestBase
import com.rootstrap.android.ui.activity.main.SignInActivityViewModel
import com.rootstrap.android.ui.activity.main.SignInState
import com.rootstrap.android.util.NetworkState
import com.rootstrap.android.util.extensions.ApiException
import com.rootstrap.android.util.extensions.Data
import io.mockk.coEvery
import io.mockk.coVerify
import io.mockk.every
import io.mockk.impl.annotations.MockK
import io.mockk.impl.annotations.RelaxedMockK
import io.mockk.verify
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test

@ExperimentalCoroutinesApi
class SignInActivityViewModelTest : UnitTestBase() {

    private lateinit var viewModel: SignInActivityViewModel

    @RelaxedMockK
    lateinit var sessionManager: SessionManager

    @RelaxedMockK
    lateinit var userManager: UserManager

    @MockK
    lateinit var user: User

    @MockK
    lateinit var userSerializer: UserSerializer

    companion object {
        const val ERROR_EXAMPLE_TEXT = "Time out example"
    }

    @Before
    override fun setup() {
        super.setup()
        every { userSerializer.user } returns user
        viewModel = SignInActivityViewModel(sessionManager, userManager, TestDispatcherProvider())
    }

    // reading: naming standards for unit testing https://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html
    @Test
    fun `signIn success assert signInSuccess and network idle`() {
        var state: SignInState? = null
        coEvery { userManager.signIn(user = user) } returns Result.success(Data(userSerializer))

        viewModel.signIn(user)
        viewModel.state.observeForever {
            state = it
        }

        assertEquals(state, SignInState.signInSuccess)
        assertEquals(viewModel.networkState.value, NetworkState.idle)
        verify { sessionManager.signIn(user) }
        coVerify { userManager.signIn(user = user) }
    }

    @Test
    fun `signIn fail assert signInFailure and network error`() {
        var state: SignInState? = null
        coEvery { userManager.signIn(user = user) } returns Result.failure(
            ApiException(
                ERROR_EXAMPLE_TEXT
            )
        )

        viewModel.signIn(user)
        viewModel.state.observeForever {
            state = it
        }

        assertEquals(state, SignInState.signInFailure)
        assertEquals(viewModel.networkState.value, NetworkState.error)
        assertEquals(viewModel.error, ERROR_EXAMPLE_TEXT)
        coVerify { userManager.signIn(user = user) }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/SignUpActivityViewModelTest.kt
package com.rootstrap.android

import com.rootstrap.android.network.managers.session.SessionManager
import com.rootstrap.android.network.managers.user.UserManager
import com.rootstrap.android.network.models.User
import com.rootstrap.android.network.models.UserSerializer
import com.rootstrap.android.test.TestDispatcherProvider
import com.rootstrap.android.test.UnitTestBase
import com.rootstrap.android.ui.activity.main.SignUpActivityViewModel
import com.rootstrap.android.ui.activity.main.SignUpState
import com.rootstrap.android.util.NetworkState
import com.rootstrap.android.util.extensions.ApiException
import com.rootstrap.android.util.extensions.Data
import io.mockk.coEvery
import io.mockk.coVerify
import io.mockk.every
import io.mockk.impl.annotations.MockK
import io.mockk.impl.annotations.RelaxedMockK
import io.mockk.verify
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test

@ExperimentalCoroutinesApi // This annotation is required to use TestDispatcherProvider is still an experiment
class SignUpActivityViewModelTest : UnitTestBase() {

    private lateinit var viewModel: SignUpActivityViewModel

    @RelaxedMockK
    lateinit var sessionManager: SessionManager

    @RelaxedMockK
    lateinit var userManager: UserManager

    @MockK
    lateinit var user: User

    @MockK
    lateinit var userSerializer: UserSerializer

    companion object {
        const val ERROR_EXAMPLE_TEXT = "Time out example"
    }

    @Before
    override fun setup() {
        super.setup()
        every { userSerializer.user } returns user
        viewModel = SignUpActivityViewModel(sessionManager, userManager, TestDispatcherProvider())
    }

    @Test
    fun `signUp success assert signUpSuccess and network idle`() {
        var state: SignUpState? = null
        coEvery { userManager.signUp(user = user) } returns Result.success(Data(userSerializer))

        viewModel.signUp(user)
        viewModel.state.observeForever {
            state = it
        }

        assertEquals(state, SignUpState.signUpSuccess)
        assertEquals(viewModel.networkState.value, NetworkState.idle)
        verify { sessionManager.signIn(user) }
        coVerify { userManager.signUp(user = user) }
    }

    @Test
    fun `signUp fail assert signUpFailure and network error`() {
        var state: SignUpState? = null
        coEvery { userManager.signUp(user = user) } returns Result.failure(
            ApiException(
                ERROR_EXAMPLE_TEXT
            )
        )

        viewModel.signUp(user)
        viewModel.state.observeForever {
            state = it
        }

        assertEquals(state, SignUpState.signUpFailure)
        assertEquals(viewModel.networkState.value, NetworkState.error)
        assertEquals(viewModel.error, ERROR_EXAMPLE_TEXT)
        coVerify { userManager.signUp(user = user) }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/ValidationTests.kt
package com.rootstrap.android

import com.rootstrap.android.util.extensions.isEmail
import org.junit.Assert.assertEquals
import org.junit.Test

class ValidationTests {
    @Test
    fun checkEmailTest() {
        assertEquals(true, "email@mkdi.com".isEmail())
        assertEquals(false, "email@mkdi".isEmail())
        assertEquals(false, "email".isEmail())
        assertEquals(false, "email.com".isEmail())
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/test/TestDispatcherProvider.kt
package com.rootstrap.android.test

import com.rootstrap.android.util.dispatcher.DispatcherProvider
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.TestCoroutineDispatcher

@ExperimentalCoroutinesApi
class TestDispatcherProvider(testCoroutineDispatcher: TestCoroutineDispatcher = TestCoroutineDispatcher()) :
    DispatcherProvider {
    override val default: CoroutineDispatcher = testCoroutineDispatcher
    override val main: CoroutineDispatcher = testCoroutineDispatcher
    override val io: CoroutineDispatcher = testCoroutineDispatcher
    override val unconfined: CoroutineDispatcher = testCoroutineDispatcher
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/app/src/test/java/com/rootstrap/android/test/UnitTestBase.kt
package com.rootstrap.android.test

import androidx.annotation.CallSuper
import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import io.mockk.MockKAnnotations
import org.junit.Before
import org.junit.Rule

abstract class UnitTestBase {

    @get:Rule
    val instantExecutorRule = InstantTaskExecutorRule()

    @CallSuper
    @Before
    open fun setup() {
        MockKAnnotations.init(this)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/android-base/fastlane/Appfile
json_key_file("secure/google-api.json")
# Path to the json secret file - Follow https://docs.fastlane.tools/actions/supply/#setup to get one

for_platform :android do
  for_lane :deploy_production do
    package_name("com.rootstrap.android")
  end

  for_lane :debug_production do
    package_name("com.rootstrap.android")
  end

  for_lane :deploy_dev do
   package_name("com.rootstrap.android.dev")
  end

  for_lane :debug_dev do
    package_name("com.rootstrap.android.dev")
  end

  for_lane :deploy_staging do
    package_name("com.rootstrap.android.staging")
  end
   
  for_lane :debug_staging do
    package_name("com.rootstrap.android.staging")
  end

end

--#

--% C:/work/oss/andro1/android-kotlin/android-base/fastlane/Fastfile
# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

skip_docs

platform :android do
  lane :deploy_production do
    release(flavor: 'Prod', track: 'internal')
  end

  lane :deploy_dev do
    release(flavor: 'Dev', track: 'internal')
  end

  lane :deploy_staging do
    release(flavor: 'Staging', track: 'internal')
  end

  lane :debug_production do
      debug(flavor: 'Prod')
  end

  lane :debug_dev do
    debug(flavor: 'Dev')
  end

  lane :debug_staging do
    debug(flavor: 'Staging')
  end

  lane :release do |options|
    increment_version_code(
      gradle_file_path: “app/build.gradle”
    )

    gradle(
      task: "clean"
    )

    gradle(
      task: 'androidDependencies',
      print_command: false
    )

    build_android_app(
      task: 'assemble',
      flavor: options[:flavor],
      build_type: 'Release',
      print_command: false,
    )

    upload_to_play_store(
      track: options[:track]
    )
  end

  lane :debug do |options|
    increment_version_code(
      gradle_file_path: “app/build.gradle”
    )

    gradle(
      task: "clean"
    )

    gradle(
      task: 'androidDependencies',
      print_command: false
    )

    build_android_app(
      task: 'assemble',
      flavor: options[:flavor],
      build_type: 'Debug',
      print_command: false,
    )

# Do something with the apk
  end
end

--#

--% C:/work/oss/andro1/android-kotlin/android-base/fastlane/Pluginfile
# Autogenerated by fastlane
#
# Ensure this file is checked in to source control!

gem 'fastlane-plugin-increment_version_code'

--#

--% C:/work/oss/andro1/android-kotlin/android-base/fastlane/README.md
# Android Fastlane configuration
============================

## Installation and requirements

* Ensure JDK 1.8 is installed

* Ensure proper version of Android SDK command line tools is installed

* Install _fastlane_ using
```
[sudo] gem install fastlane -NV
```
or alternatively using `brew cask install fastlane`


## General workflow

* Fastlane for Android basically executes Gradle commands for cleaning, installing Android dependencies and assembling the project into a .apk
* Application file is published to Google Play Store - keystore file needs to be present under `./app` and json API key file present in the root folder.


## Actions breakdown

Modify the Fastfile as appropiate for your project.

Execute with
```
fastlane lane_name
```

### debug_*
Builds and archive corresponding flavor for local use

### deploy_*
Builds corresponding flavor and pushes to Play Store

----
More information about fastlane can be found on [fastlane.tools](https://fastlane.tools).
The documentation of fastlane can be found on [docs.fastlane.tools](https://docs.fastlane.tools).

--#

--% C:/work/oss/andro1/android-kotlin/android-base/gradle/wrapper/gradle-wrapper.jar

--#

--% C:/work/oss/andro1/android-kotlin/android-base/gradle/wrapper/gradle-wrapper.properties
#Mon Jan 18 09:20:52 ART 2021
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip

--#

--% C:/work/oss/andro1/android-kotlin/android-base/secure/Readme.md
# Secret configuration files

Any sensitive files should be placed in this directory. This primarily includes:

* `google-api.json`: Google Play Developer API key - See [Developer API docs](https://developers.google.com/android-publisher/getting_started)

* `key.keystore`: container for cryptographic keys - see [Android keystore system](https://developer.android.com/training/articles/keystore)

* `gradle.properties`: Gradle properties file including keystore location, user and password


**All the plaintext files here are placed in .gitignore**

## Securing config files

For running the build through a CI pipeline we need to make sure all sensitive files are available to all build agents. Managing these files separately brings issues to ensure they are: a- version-controlled in a consistent manner with the code, and b- available to every build agent at build time.

We suggest using [git secret](https://git-secret.io/) as a simple and secure solution for keeping these sensitive files in the repo. 
This needs to be installed on any machine that requires access to the sourcecode and config (developer machines and CI agents).


## First time setup

* Generate gpg key -provide Real Name and Email address (to be used as USER-ID)
```
gpg --gen-key
```
* (Alternatively) Import existing owner public key
```
gpg --import ci-public-key.gpg
```
* Install git-secret
```
brew install git-secret
```
* Initialize git-secret on the project root folder (this createds `.gitsecret` folder)
```
git secret init
```
* Add access for USER-ID and any other usernames that will require access
```
git secret tell {dev-user@email}
git secret tell {ci-user@email}
```
* Add sensitive files to secret vault
```
git secret add secure/*
git secret add gradle.properties
```
* Encrypt
```
git secret hide
```
* Commit and push files (this includes `.gitsecret` folder)


## Accesing the files

* Install git secret
* Ensure private gpg key matching public key for the user ID that was granted access is available
* Check source code
* Decrypt
```
git secret reveal
```

### from CI server

* Store private key into and make available to project configuration as GPG_PRIVATE_KEY

* Include steps in Build pipeline
```
# Install git-secret
brew install git-secret
# Create private key file
echo $GPG_PRIVATE_KEY > ./private_key.gpg
# Import private key
gpg --import ./private_key.gpg
# Reveal secrets
git secret reveal

# Continue normal build pipeline
```
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gitignore
*.iml
.gradle
/local.properties
.idea/*
!.idea/copyright
.DS_Store
/build
/captures
.externalNativeBuild
ktlint
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/ASSETS_LICENSE
CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM ITS USE.

License
THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.

BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS.

1. Definitions

"Collective Work" means a work, such as a periodical issue, anthology or encyclopedia, in which the Work in its entirety in unmodified form, along with one or more other contributions, constituting separate and independent works in themselves, are assembled into a collective whole. A work that constitutes a Collective Work will not be considered a Derivative Work (as defined below) for the purposes of this License.
"Creative Commons Compatible License" means a license that is listed at https://creativecommons.org/compatiblelicenses that has been approved by Creative Commons as being essentially equivalent to this License, including, at a minimum, because that license: (i) contains terms that have the same purpose, meaning and effect as the License Elements of this License; and, (ii) explicitly permits the relicensing of derivatives of works made available under that license under this License or either a Creative Commons unported license or a Creative Commons jurisdiction license with the same License Elements as this License.
"Derivative Work" means a work based upon the Work or upon the Work and other pre-existing works, such as a translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art reproduction, abridgment, condensation, or any other form in which the Work may be recast, transformed, or adapted, except that a work that constitutes a Collective Work will not be considered a Derivative Work for the purpose of this License. For the avoidance of doubt, where the Work is a musical composition or sound recording, the synchronization of the Work in timed-relation with a moving image ("synching") will be considered a Derivative Work for the purpose of this License.
"License Elements" means the following high-level license attributes as selected by Licensor and indicated in the title of this License: Attribution, ShareAlike.
"Licensor" means the individual, individuals, entity or entities that offers the Work under the terms of this License.
"Original Author" means the individual, individuals, entity or entities who created the Work.
"Work" means the copyrightable work of authorship offered under the terms of this License.
"You" means an individual or entity exercising rights under this License who has not previously violated the terms of this License with respect to the Work, or who has received express permission from the Licensor to exercise rights under this License despite a previous violation.
2. Fair Use Rights. Nothing in this license is intended to reduce, limit, or restrict any rights arising from fair use, first sale or other limitations on the exclusive rights of the copyright owner under copyright law or other applicable laws.

3. License Grant. Subject to the terms and conditions of this License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the rights in the Work as stated below:

to reproduce the Work, to incorporate the Work into one or more Collective Works, and to reproduce the Work as incorporated in the Collective Works;
to create and reproduce Derivative Works provided that any such Derivative Work, including any translation in any medium, takes reasonable steps to clearly label, demarcate or otherwise identify that changes were made to the original Work. For example, a translation could be marked "The original work was translated from English to Spanish," or a modification could indicate "The original work has been modified.";
to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission the Work including as incorporated in Collective Works;
to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission Derivative Works.
For the avoidance of doubt, where the Work is a musical composition:

Performance Royalties Under Blanket Licenses. Licensor waives the exclusive right to collect, whether individually or, in the event that Licensor is a member of a performance rights society (e.g. ASCAP, BMI, SESAC), via that society, royalties for the public performance or public digital performance (e.g. webcast) of the Work.
Mechanical Rights and Statutory Royalties. Licensor waives the exclusive right to collect, whether individually or via a music rights agency or designated agent (e.g. Harry Fox Agency), royalties for any phonorecord You create from the Work ("cover version") and distribute, subject to the compulsory license created by 17 USC Section 115 of the US Copyright Act (or the equivalent in other jurisdictions).
Webcasting Rights and Statutory Royalties. For the avoidance of doubt, where the Work is a sound recording, Licensor waives the exclusive right to collect, whether individually or via a performance-rights society (e.g. SoundExchange), royalties for the public digital performance (e.g. webcast) of the Work, subject to the compulsory license created by 17 USC Section 114 of the US Copyright Act (or the equivalent in other jurisdictions).
The above rights may be exercised in all media and formats whether now known or hereafter devised. The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats. All rights not expressly granted by Licensor are hereby reserved.

4. Restrictions. The license granted in Section 3 above is expressly made subject to and limited by the following restrictions:

You may distribute, publicly display, publicly perform, or publicly digitally perform the Work only under the terms of this License, and You must include a copy of, or the Uniform Resource Identifier for, this License with every copy or phonorecord of the Work You distribute, publicly display, publicly perform, or publicly digitally perform. You may not offer or impose any terms on the Work that restrict the terms of this License or the ability of a recipient of the Work to exercise of the rights granted to that recipient under the terms of the License. You may not sublicense the Work. You must keep intact all notices that refer to this License and to the disclaimer of warranties. When You distribute, publicly display, publicly perform, or publicly digitally perform the Work, You may not impose any technological measures on the Work that restrict the ability of a recipient of the Work from You to exercise of the rights granted to that recipient under the terms of the License. This Section 4(a) applies to the Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Work itself to be made subject to the terms of this License. If You create a Collective Work, upon notice from any Licensor You must, to the extent practicable, remove from the Collective Work any credit as required by Section 4(c), as requested. If You create a Derivative Work, upon notice from any Licensor You must, to the extent practicable, remove from the Derivative Work any credit as required by Section 4(c), as requested.
You may distribute, publicly display, publicly perform, or publicly digitally perform a Derivative Work only under: (i) the terms of this License; (ii) a later version of this License with the same License Elements as this License; (iii) either the Creative Commons (Unported) license or a Creative Commons jurisdiction license (either this or a later license version) that contains the same License Elements as this License (e.g. Attribution-ShareAlike 3.0 (Unported)); (iv) a Creative Commons Compatible License. If you license the Derivative Work under one of the licenses mentioned in (iv), you must comply with the terms of that license. If you license the Derivative Work under the terms of any of the licenses mentioned in (i), (ii) or (iii) (the "Applicable License"), you must comply with the terms of the Applicable License generally and with the following provisions: (I) You must include a copy of, or the Uniform Resource Identifier for, the Applicable License with every copy or phonorecord of each Derivative Work You distribute, publicly display, publicly perform, or publicly digitally perform; (II) You may not offer or impose any terms on the Derivative Works that restrict the terms of the Applicable License or the ability of a recipient of the Work to exercise the rights granted to that recipient under the terms of the Applicable License; (III) You must keep intact all notices that refer to the Applicable License and to the disclaimer of warranties; and, (IV) when You distribute, publicly display, publicly perform, or publicly digitally perform the Work, You may not impose any technological measures on the Derivative Work that restrict the ability of a recipient of the Derivative Work from You to exercise the rights granted to that recipient under the terms of the Applicable License. This Section 4(b) applies to the Derivative Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Derivative Work itself to be made subject to the terms of the Applicable License.
If You distribute, publicly display, publicly perform, or publicly digitally perform the Work (as defined in Section 1 above) or any Derivative Works (as defined in Section 1 above) or Collective Works (as defined in Section 1 above), You must, unless a request has been made pursuant to Section 4(a), keep intact all copyright notices for the Work and provide, reasonable to the medium or means You are utilizing: (i) the name of the Original Author (or pseudonym, if applicable) if supplied, and/or (ii) if the Original Author and/or Licensor designate another party or parties (e.g. a sponsor institute, publishing entity, journal) for attribution ("Attribution Parties") in Licensor's copyright notice, terms of service or by other reasonable means, the name of such party or parties; the title of the Work if supplied; to the extent reasonably practicable, the Uniform Resource Identifier, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work; and, consistent with Section 3(b) in the case of a Derivative Work, a credit identifying the use of the Work in the Derivative Work (e.g., "French translation of the Work by Original Author," or "Screenplay based on original Work by Original Author"). The credit required by this Section 4(c) may be implemented in any reasonable manner; provided, however, that in the case of a Derivative Work or Collective Work, at a minimum such credit will appear, if a credit for all contributing authors of the Derivative Work or Collective Work appears, then as part of these credits and in a manner at least as prominent as the credits for the other contributing authors. For the avoidance of doubt, You may only use the credit required by this Section for the purpose of attribution in the manner set out above and, by exercising Your rights under this License, You may not implicitly or explicitly assert or imply any connection with, sponsorship or endorsement by the Original Author, Licensor and/or Attribution Parties, as appropriate, of You or Your use of the Work, without the separate, express prior written permission of the Original Author, Licensor and/or Attribution Parties.
5. Representations, Warranties and Disclaimer

UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR OFFERS THE WORK AS-IS AND ONLY TO THE EXTENT OF ANY RIGHTS HELD IN THE LICENSED WORK BY THE LICENSOR. THE LICENSOR MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MARKETABILITY, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.

6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

7. Termination

This License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License. Individuals or entities who have received Derivative Works or Collective Works from You under this License, however, will not have their licenses terminated provided such individuals or entities remain in full compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License.
Subject to the above terms and conditions, the license granted here is perpetual (for the duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves the right to release the Work under different license terms or to stop distributing the Work at any time; provided, however that any such election will not serve to withdraw this License (or any other license that has been, or is required to be, granted under the terms of this License), and this License will continue in full force and effect unless terminated as stated above.
8. Miscellaneous

Each time You distribute or publicly digitally perform the Work (as defined in Section 1 above) or a Collective Work (as defined in Section 1 above), the Licensor offers to the recipient a license to the Work on the same terms and conditions as the license granted to You under this License.
Each time You distribute or publicly digitally perform a Derivative Work, Licensor offers to the recipient a license to the original Work on the same terms and conditions as the license granted to You under this License.
If any provision of this License is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this License, and without further action by the parties to this agreement, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.
No term or provision of this License shall be deemed waived and no breach consented to unless such waiver or consent shall be in writing and signed by the party to be charged with such waiver or consent.
This License constitutes the entire agreement between the parties with respect to the Work licensed here. There are no understandings, agreements or representations with respect to the Work not specified here. Licensor shall not be bound by any additional provisions that may appear in any communication from You. This License may not be modified without the mutual written agreement of the Licensor and You.

Creative Commons Notice

Creative Commons is not a party to this License, and makes no warranty whatsoever in connection with the Work. Creative Commons will not be liable to You or any party on any legal theory for any damages whatsoever, including without limitation any general, special, incidental or consequential damages arising in connection to this license. Notwithstanding the foregoing two (2) sentences, if Creative Commons has expressly identified itself as the Licensor hereunder, it shall have all rights and obligations of Licensor.

Except for the limited purpose of indicating to the public that the Work is licensed under the CCPL, Creative Commons does not authorize the use by either party of the trademark "Creative Commons" or any related trademark or logo of Creative Commons without the prior written consent of Creative Commons. Any permitted use will be in compliance with Creative Commons' then-current trademark usage guidelines, as may be published on its website or otherwise made available upon request from time to time. For the avoidance of doubt, this trademark restriction does not form part of this License.

Creative Commons may be contacted at https://creativecommons.org/.
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/build.gradle
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    // Define versions in a single place
    ext {
        // Sdk and tools
        compileSdkVersion = 30
        minSdkVersion = 21
        targetSdkVersion = 30

        // App dependencies
        appCompatVersion = '1.1.0'
        constraintLayoutVersion = '2.0.0-beta3'
        coreTestingVersion = '2.0.0'
        coroutinesVersion = "1.4.2"
        espressoVersion = '3.1.1'
        fragmentVersion = '1.3.0'
        glideVersion = '4.10.0'
        gradleVersion = '4.1.2'
        gsonVersion = '2.8.2'
        hiltVersion = '2.38.1'
        junitVersion = '4.12'
        kotlinVersion = '1.4.30'
        ktlintVersion = '0.38.1'
        ktxVersion = '1.0.2'
        lifecycleVersion = '2.2.0'
        materialVersion = '1.2.0'
        navigationVersion = '2.3.3'
        okhttpLoggingVersion = '4.7.2'
        pagingVersion = '3.0.1'
        retrofitVersion = '2.9.0'
        roomVersion = '2.2.5'
        runnerVersion = '1.0.1'
        truthVersion = '0.42'
        testExtJunit = '1.1.0'
        uiAutomatorVersion = '2.2.0'
        viewPagerVersion = '1.0.0'
        workVersion = '2.4.0'
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradleVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hiltVersion"
    }
}

plugins {
    id "com.diffplug.spotless" version "5.2.0"
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

spotless {
    kotlin {
        target "**/*.kt"
        ktlint(ktlintVersion).userData(['max_line_length' : '100'])
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/CONTRIBUTING.md
# How to Contribute

We'd love to accept your patches and contributions to this project. There are
just a few small guidelines you need to follow.

## Contributor License Agreement

Contributions to this project must be accompanied by a Contributor License
Agreement. You (or your employer) retain the copyright to your contribution,
this simply gives us permission to use and redistribute your contributions as
part of the project. Head over to <https://cla.developers.google.com/> to see
your current agreements on file or to sign a new one.

You generally only need to submit a CLA once, so if you've already submitted one
(even if it was for a different project), you probably don't need to do it
again.

## Code reviews

All submissions, including submissions by project members, require review. We
use GitHub pull requests for this purpose. Consult
[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more
information on using pull requests.

## Community Guidelines

This project follows [Google's Open Source Community
Guidelines](https://opensource.google.com/conduct/).

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/gradle.properties
#
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
android.enableJetifier=true
android.useAndroidX=true
org.gradle.jvmargs=-Xmx1536m

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/gradlew
#!/usr/bin/env sh

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=$(save "$@")

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
  cd "$(dirname "$0")"
fi

exec "$JAVACMD" "$@"

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/gradlew.bat
@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windows variants

if not "%OS%" == "Windows_NT" goto win9xME_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/local.properties
## This file must *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
#Tue Feb 08 20:05:52 ICT 2022
sdk.dir=C\:\\Users\\user\\AppData\\Local\\Android\\Sdk

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/README.md
Android Sunflower
=================

A gardening app illustrating Android development best practices with Android Jetpack.

Android Sunflower is currently under heavy development.
Note that some changes (such as database schema modifications) are not backwards
compatible and may cause the app to crash. In this
case, please uninstall and re-install the app.

Introduction
------------

Android Jetpack is a set of components, tools and guidance to make great Android apps. They bring
together the existing Support Library and Architecture Components and arrange them into four
categories:

![Android Jetpack](screenshots/jetpack_donut.png "Android Jetpack Components")

Android Sunflower demonstrates utilizing these components to create a simple gardening app.
Read the
[Introducing Android Sunflower](https://medium.com/androiddevelopers/introducing-android-sunflower-e421b43fe0c2)
article for a walkthrough of the app.

Getting Started
---------------
This project uses the Gradle build system. To build this project, use the
`gradlew build` command or use "Import Project" in Android Studio.

There are two Gradle tasks for testing the project:
* `connectedAndroidTest` - for running Espresso on a connected device
* `test` - for running unit tests

For more resources on learning Android development, visit the
[Developer Guides](https://developer.android.com/guide/) at
[developer.android.com](https://developer.android.com).

### Unsplash API key

Sunflower uses the [Unsplash API](https://unsplash.com/developers) to load pictures on the gallery
screen. To use the API, you will need to obtain a free developer API key. See the
[Unsplash API Documentation](https://unsplash.com/documentation) for instructions.

Once you have the key, add this line to the `gradle.properties` file, either in your user home
directory (usually `~/.gradle/gradle.properties` on Linux and Mac) or in the project's root folder:

```
unsplash_access_key=<your Unsplash access key>
```

The app is still usable without an API key, though you won't be able to navigate to the gallery screen.

Screenshots
-----------

![List of plants](screenshots/phone_plant_list.png "A list of plants")
![Plant details](screenshots/phone_plant_detail.png "Details for a specific plant")
![My Garden](screenshots/phone_my_garden.png "Plants that have been added to your garden")

Libraries Used
--------------
* [Foundation][0] - Components for core system capabilities, Kotlin extensions and support for
  multidex and automated testing.
  * [AppCompat][1] - Degrade gracefully on older versions of Android.
  * [Android KTX][2] - Write more concise, idiomatic Kotlin code.
  * [Test][4] - An Android testing framework for unit and runtime UI tests.
* [Architecture][10] - A collection of libraries that help you design robust, testable, and
  maintainable apps. Start with classes for managing your UI component lifecycle and handling data
  persistence.
  * [Data Binding][11] - Declaratively bind observable data to UI elements.
  * [Lifecycles][12] - Create a UI that automatically responds to lifecycle events.
  * [LiveData][13] - Build data objects that notify views when the underlying database changes.
  * [Navigation][14] - Handle everything needed for in-app navigation.
  * [Room][16] - Access your app's SQLite database with in-app objects and compile-time checks.
  * [ViewModel][17] - Store UI-related data that isn't destroyed on app rotations. Easily schedule
     asynchronous tasks for optimal execution.
  * [WorkManager][18] - Manage your Android background jobs.
* [UI][30] - Details on why and how to use UI Components in your apps - together or separate
  * [Animations & Transitions][31] - Move widgets and transition between screens.
  * [Fragment][34] - A basic unit of composable UI.
  * [Layout][35] - Lay out widgets using different algorithms.
* Third party and miscellaneous libraries
  * [Glide][90] for image loading
  * [Hilt][92]: for [dependency injection][93]
  * [Kotlin Coroutines][91] for managing background threads with simplified code and reducing needs for callbacks

[0]: https://developer.android.com/jetpack/components
[1]: https://developer.android.com/topic/libraries/support-library/packages#v7-appcompat
[2]: https://developer.android.com/kotlin/ktx
[4]: https://developer.android.com/training/testing/
[10]: https://developer.android.com/jetpack/arch/
[11]: https://developer.android.com/topic/libraries/data-binding/
[12]: https://developer.android.com/topic/libraries/architecture/lifecycle
[13]: https://developer.android.com/topic/libraries/architecture/livedata
[14]: https://developer.android.com/topic/libraries/architecture/navigation/
[16]: https://developer.android.com/topic/libraries/architecture/room
[17]: https://developer.android.com/topic/libraries/architecture/viewmodel
[18]: https://developer.android.com/topic/libraries/architecture/workmanager
[30]: https://developer.android.com/guide/topics/ui
[31]: https://developer.android.com/training/animation/
[34]: https://developer.android.com/guide/components/fragments
[35]: https://developer.android.com/guide/topics/ui/declaring-layout
[90]: https://bumptech.github.io/glide/
[91]: https://kotlinlang.org/docs/reference/coroutines-overview.html
[92]: https://developer.android.com/training/dependency-injection/hilt-android
[93]: https://developer.android.com/training/dependency-injection

Upcoming features
-----------------
Updates will include incorporating additional Jetpack components and updating existing components
as the component libraries evolve.

Interested in seeing a particular feature of the Android Framework or Jetpack implemented in this
app? Please open a new [issue](https://github.com/android/sunflower/issues).

Android Studio IDE setup
------------------------
For development, the latest version of Android Studio is required. The latest version can be
downloaded from [here](https://developer.android.com/studio/).

Sunflower uses [ktlint](https://ktlint.github.io/) to enforce Kotlin coding styles.
Here's how to configure it for use with Android Studio (instructions adapted
from the ktlint [README](https://github.com/shyiko/ktlint/blob/master/README.md)):

- Close Android Studio if it's open

- Download ktlint using these [installation instructions](https://github.com/pinterest/ktlint/blob/master/README.md#installation)

- Apply ktlint settings to Android Studio using these [instructions](https://github.com/pinterest/ktlint/blob/master/README.md#-with-intellij-idea)

- Start Android Studio

Additional resources
--------------------
Check out these Wiki pages to learn more about Android Sunflower:

- [Notable Community Contributions](https://github.com/android/sunflower/wiki/Notable-Community-Contributions)

- [Publications](https://github.com/android/sunflower/wiki/Sunflower-Publications)

Non-Goals
---------
The focus of this project is on Android Jetpack and the Android framework.
Thus, there are no immediate plans to implement features outside of this scope.

Support
-------

- Stack Overflow:
  - https://stackoverflow.com/questions/tagged/android
  - https://stackoverflow.com/questions/tagged/android-jetpack

If you've found an error in this sample, please file an issue:
https://github.com/android/sunflower/issues

Patches are encouraged, and may be submitted by forking this project and submitting a pull request
through GitHub.

Third Party Content
-------------------
Select text used for describing the plants (in `plants.json`) are used from Wikipedia via CC BY-SA 3.0 US (license in `ASSETS_LICENSE`).

"[seed](https://thenounproject.com/search/?q=seed&i=1585971)" by [Aisyah](https://thenounproject.com/aisyahalmasyira/) is licensed under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/us/legalcode)

License
-------

Copyright 2018 Google, Inc.

Licensed to the Apache Software Foundation (ASF) under one or more contributor
license agreements.  See the NOTICE file distributed with this work for
additional information regarding copyright ownership.  The ASF licenses this
file to you under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License.  You may obtain a copy of
the License at

  https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
License for the specific language governing permissions and limitations under
the License.

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/run.bat
"C:\Program Files\Android\Android Studio\bin\studio64.exe" .
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/settings.gradle
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include ':app'

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.github/scripts/gradlew_recursive.sh
#!/bin/bash

# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -xe

# Default Gradle settings are not optimal for Android builds, override them
# here to make the most out of the GitHub Actions build servers
GRADLE_OPTS="$GRADLE_OPTS -Xms4g -Xmx4g"
GRADLE_OPTS="$GRADLE_OPTS -XX:+HeapDumpOnOutOfMemoryError"
GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.daemon=false"
GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.workers.max=2"
GRADLE_OPTS="$GRADLE_OPTS -Dkotlin.incremental=false"
GRADLE_OPTS="$GRADLE_OPTS -Dkotlin.compiler.execution.strategy=in-process"
GRADLE_OPTS="$GRADLE_OPTS -Dfile.encoding=UTF-8"
export GRADLE_OPTS

# Crawl all gradlew files which indicate an Android project
# You may edit this if your repo has a different project structure
for GRADLEW in `find . -name "gradlew"` ; do
    SAMPLE=$(dirname "${GRADLEW}")
    # Tell Gradle that this is a CI environment and disable parallel compilation
    bash "$GRADLEW" -p "$SAMPLE" -Pci --no-parallel --stacktrace $@
done

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.github/workflows/android.yml
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build project
        run: .github/scripts/gradlew_recursive.sh assembleDebug
      - name: Zip artifacts
        run: zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: assemble
          path: assemble.zip

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.github/workflows/copy-branch.yml
# Duplicates default main branch to the old master branch

name: Duplicates main to old master branch

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "copy-branch"
  copy-branch:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it,
    # but specifies master branch (old default).
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: master
        
    - run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git merge origin/main
        git push

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.google/packaging.yaml
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# GOOGLE SAMPLE PACKAGING DATA
#
# This file is used by Google as part of our samples packaging process.
# End users may safely ignore this file. It has no relevance to other systems.
---
status:       PUBLISHED
technologies: [Android]
categories:   [Getting Started, Jetpack]
languages:    [Kotlin]
solutions:    [Mobile]

github:       android/sunflower

level:        INTERMEDIATE

icon:         screenshots/ic_launcher-web.png

apiRefs:
    - android:android.support.constraint.ConstraintLayout

license: apache2

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/gc.properties

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/executionHistory/executionHistory.lock
A/Qw4MHzfOxsAAAAAAAAADM=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/fileContent/fileContent.lock
A81fABslwAghAAAAAAAAAAA=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/fileHashes/fileHashes.lock
A+da6X3zk3syAAAAAAAAB9g=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/6.5/javaCompile/javaCompile.lock
A/F4ejn9cMnzAAAAAAAAHOw=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/buildOutputCleanup/buildOutputCleanup.lock
A2V+/45CYyNsAAAAAAAADPU=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/buildOutputCleanup/cache.properties
#Tue Feb 08 20:06:00 ICT 2022
gradle.version=6.5

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/checksums/checksums.lock
A+esxyRk6LEzAAAAAAAABHA=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/.gradle/vcs-1/gc.properties

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/.gitignore
/build

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/build.gradle
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildFeatures {
        dataBinding true
    }
    defaultConfig {
        applicationId "com.google.samples.apps.sunflower"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        testInstrumentationRunner "com.google.samples.apps.sunflower.utilities.MainTestRunner"
        versionCode 1
        versionName "0.1.6"
        vectorDrawables.useSupportLibrary true

        // Consult the README on instructions for setting up Unsplash API key
        buildConfigField("String", "UNSPLASH_ACCESS_KEY", "\"" + getUnsplashAccess() + "\"")
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        // work-runtime-ktx 2.1.0 and above now requires Java 8
        jvmTarget = "1.8"

        // Enable Coroutines and Flow APIs
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
    }
    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    kapt "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    implementation "androidx.paging:paging-runtime-ktx:$rootProject.pagingVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.viewpager2:viewpager2:$rootProject.viewPagerVersion"
    implementation "androidx.work:work-runtime-ktx:$rootProject.workVersion"
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpLoggingVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"
    implementation "com.google.dagger:hilt-android:$rootProject.hiltVersion"

    // Testing dependencies
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"
    androidTestImplementation "com.google.truth:truth:$rootProject.truthVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$rootProject.hiltVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
}

def getUnsplashAccess() {
    return project.findProperty("unsplash_access_key")
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/proguard-rules.pro
# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in /usr/local/google/home/tiem/Android/Sdk/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the proguardFiles
# directive in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# Add any project specific keep options here:

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

# ServiceLoader support
-keepnames class kotlinx.coroutines.internal.MainDispatcherFactory {}
-keepnames class kotlinx.coroutines.CoroutineExceptionHandler {}

# Most of volatile fields are updated with AFU and should not be mangled
-keepclassmembernames class kotlinx.** {
    volatile <fields>;
}
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/assets/plants.json
[
  {
    "plantId": "malus-pumila",
    "name": "Apple",
    "description": "An apple is a sweet, edible fruit produced by an apple tree (Malus pumila). Apple trees are cultivated worldwide, and are the most widely grown species in the genus Malus. The tree originated in Central Asia, where its wild ancestor, Malus sieversii, is still found today. Apples have been grown for thousands of years in Asia and Europe, and were brought to North America by European colonists. Apples have religious and mythological significance in many cultures, including Norse, Greek and European Christian traditions.<br><br>Apple trees are large if grown from seed. Generally apple cultivars are propagated by grafting onto rootstocks, which control the size of the resulting tree. There are more than 7,500 known cultivars of apples, resulting in a range of desired characteristics. Different cultivars are bred for various tastes and uses, including cooking, eating raw and cider production. Trees and fruit are prone to a number of fungal, bacterial and pest problems, which can be controlled by a number of organic and non-organic means. In 2010, the fruit's genome was sequenced as part of research on disease control and selective breeding in apple production.<br><br>Worldwide production of apples in 2014 was 84.6 million tonnes, with China accounting for 48% of the total.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Apple\">Wikipedia</a>)",
    "growZoneNumber": 3,
    "wateringInterval": 30,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/5/55/Apple_orchard_in_Tasmania.jpg"
  },
  {
    "plantId": "beta-vulgaris",
    "name": "Beet",
    "description": "The beetroot is the taproot portion of the beet plant, usually known in North America as the beet and also known as the table beet, garden beet, red beet, or golden beet. It is one of several of the cultivated varieties of Beta vulgaris grown for their edible taproots and their leaves (called beet greens). These varieties have been classified as B. vulgaris subsp. vulgaris Conditiva Group.<br><br>Other than as a food, beets have use as a food colouring and as a medicinal plant. Many beet products are made from other Beta vulgaris varieties, particularly sugar beet.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Beetroot\">Wikipedia</a>)",
    "growZoneNumber": 2,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/2/29/Beetroot_jm26647.jpg"
  },
  {
    "plantId": "coriandrum-sativum",
    "name": "Cilantro",
    "description": "Coriander, also known as cilantro or Chinese parsley, is an annual herb in the family Apiaceae. All parts of the plant are edible, but the fresh leaves and the dried seeds are the parts most traditionally used in cooking.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Coriander\">Wikipedia</a>)",
    "growZoneNumber": 2,
    "wateringInterval": 2,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/5/51/A_scene_of_Coriander_leaves.JPG"
  },
  {
    "plantId": "solanum-lycopersicum",
    "name": "Tomato",
    "description": "The tomato is the edible, often red, berry of the nightshade Solanum lycopersicum, commonly known as a tomato plant. The species originated in western South America. The Nahuatl (Aztec language) word tomatl gave rise to the Spanish word tomate, from which the English word tomato derived. Its use as a cultivated food may have originated with the indigenous peoples of Mexico. The Spanish encountered the tomato from their contact with the Aztec during the Spanish colonization of the Americas and brought it to Europe. From there, the tomato was introduced to other parts of the European-colonized world during the 16th century.<br><br>The tomato is consumed in diverse ways, raw or cooked, in many dishes, sauces, salads, and drinks. While tomatoes are fruits – botanically classified as berries – they are commonly used as a vegetable ingredient or side dish.<br><br>Numerous varieties of the tomato plant are widely grown in temperate climates across the world, with greenhouses allowing for the production of tomatoes throughout all seasons of the year. Tomato plants typically grow to 1–3 meters (3–10 ft) in height. They are vines that have a weak stem that sprawls and typically needs support. Indeterminate tomato plants are perennials in their native habitat, but are cultivated as annuals. Determinate, or bush, plants are annuals that stop growing at a certain height and produce a crop all at once. The size of the tomato varies according to the cultivar, with a range of 0.5–4 inches (1.3–10.2 cm) in width.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Tomato\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 4,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/1/17/Cherry_tomatoes_red_and_green_2009_16x9.jpg"
  },
  {
    "plantId": "persea-americana",
    "name": "Avocado",
    "description": "The avocado (Persea americana) is a tree, long thought to have originated in South Central Mexico, classified as a member of the flowering plant family Lauraceae. The fruit of the plant, also called an avocado (or avocado pear or alligator pear), is botanically a large berry containing a single large seed.<br><br>Avocados are commercially valuable and are cultivated in tropical and Mediterranean climates throughout the world. They have a green-skinned, fleshy body that may be pear-shaped, egg-shaped, or spherical. Commercially, they ripen after harvesting. Avocado trees are partially self-pollinating and are often propagated through grafting to maintain a predictable quality and quantity of the fruit.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Avocado\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/e/e4/Branch_and_fruit_of_the_Maluma_avocado_cultivar.jpg"
  },
  {
    "plantId": "pyrus-communis",
    "name": "Pear",
    "description": "The pear tree and shrub are a species of genus Pyrus, in the family Rosaceae, bearing the pomaceous fruit of the same name. Several species of pear are valued for their edible fruit and juices while others are cultivated as trees.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Pear\">Wikipedia</a>)",
    "growZoneNumber": 3,
    "wateringInterval": 30,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/1/13/More_pears.jpg"
  },
  {
    "plantId": "solanum-melongena",
    "name": "Eggplant",
    "description": "Eggplant (US), aubergine (UK), or brinjal (South Asia and South Africa) is a plant species in the nightshade family Solanaceae, Solanum melongena, grown for its often purple edible fruit.<br><br>The spongy, absorbent fruit of the plant is widely used in cooking in many different cuisines, and is often considered a vegetable, even though it is a berry by botanical definition. As a member of the genus Solanum, it is related to the tomato and the potato. Like the tomato, its skin and seeds can be eaten, but, like the potato, it is not advisable to eat it raw. Eggplant supplies low contents of macronutrients and micronutrients. The capability of the fruit to absorb oils and flavors into its flesh through cooking is well known in the culinary arts.<br><br>It was originally domesticated from the wild nightshade species thorn or bitter apple, S. incanum, probably with two independent domestications: one in South Asia, and one in East Asia.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Eggplant\">Wikipedia</a>)",
    "growZoneNumber": 4,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/e/e5/Eggplant_display.JPG"
  },
  {
    "plantId": "vitis-vinifera",
    "name": "Grape",
    "description": "A grape is a fruit, botanically a berry, of the deciduous woody vines of the flowering plant genus Vitis.<br><br>Grapes can be eaten fresh as table grapes or they can be used for making wine, jam, juice, jelly, grape seed extract, raisins, vinegar, and grape seed oil. Grapes are a non-climacteric type of fruit, generally occurring in clusters.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Grape\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 9,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/0/03/Grape_Plant_and_grapes9.jpg"
  },
  {
    "plantId": "mangifera-indica",
    "name": "Mango",
    "description": "Mangoes are juicy stone fruit (drupe) from numerous species of tropical trees belonging to the flowering plant genus Mangifera, cultivated mostly for their edible fruit.<br><br>The majority of these species are found in nature as wild mangoes. The genus belongs to the cashew family Anacardiaceae. Mangoes are native to South Asia, from where the 'common mango' or 'Indian mango', Mangifera indica, has been distributed worldwide to become one of the most widely cultivated fruits in the tropics. Other Mangifera species (e.g. horse mango, Mangifera foetida) are grown on a more localized basis.<br><br>It is the national fruit of India, Pakistan, and the Philippines, and the national tree of Bangladesh.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Mango\">Wikipedia</a>)",
    "growZoneNumber": 11,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/6/67/Mangos_criollos_y_pera.JPG"
  },
  {
    "plantId": "citrus-x-sinensis",
    "name": "Orange",
    "description": "The orange is the fruit of the citrus species Citrus × sinensis in the family Rutaceae. It is also called sweet orange, to distinguish it from the related Citrus × aurantium, referred to as bitter orange. The sweet orange reproduces asexually (apomixis through nucellar embryony); varieties of sweet orange arise through mutations.<br><br>The orange is a hybrid between pomelo (Citrus maxima) and mandarin (Citrus reticulata). The chloroplast genome, and therefore the maternal line, is that of pomelo. The sweet orange has had its full genome sequenced.<br><br>Sweet oranges were mentioned in Chinese literature in 314 BC. As of 1987, orange trees were found to be the most cultivated fruit tree in the world. Orange trees are widely grown in tropical and subtropical climates for their sweet fruit. The fruit of the orange tree can be eaten fresh, or processed for its juice or fragrant peel. As of 2012, sweet oranges accounted for approximately 70% of citrus production.<br><br>In 2014, 70.9 million tonnes of oranges were grown worldwide, with Brazil producing 24% of the world total followed by China and India.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Orange_(fruit)\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 30,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/2/22/Apfelsinenbaum--Orange_tree.jpg"
  },
  {
    "plantId": "helianthus-annuus",
    "name": "Sunflower",
    "description": "Roses are red<br>Violets are blue<br>Sunflowers have seeds<br>That folks love to chew<br><br>- M.G., 2018<br><br>Helianthus annuus, the common sunflower, is a large annual forb of the genus Helianthus grown as a crop for its edible oil and edible fruits. This sunflower species is also used as wild bird food, as livestock forage (as a meal or a silage plant), in some industrial applications, and as an ornamental in domestic gardens. The plant was first domesticated in the Americas. Wild Helianthus annuus is a widely branched annual plant with many flower heads. The domestic sunflower, however, often possesses only a single large inflorescence (flower head) atop an unbranched stem. The name sunflower may derive from the flower's head's shape, which resembles the sun, or from the impression that the blooming plant appears to slowly turn its flower towards the sun as the latter moves across the sky on a daily basis.<br><br>Sunflower seeds were brought to Europe from the Americas in the 16th century, where, along with sunflower oil, they became a widespread cooking ingredient.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Helianthus_annuus\">Wikipedia</a>)",
    "growZoneNumber": 8,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/a/aa/Sunflowers_in_field_flower.jpg"
  },
  {
    "plantId": "citrullus-lanatus",
    "name": "Watermelon",
    "description": "Citrullus lanatus is a plant species in the family Cucurbitaceae, a vine-like (scrambler and trailer) flowering plant originating in West Africa. It is cultivated for its fruit. The subdivision of this species into two varieties, watermelons (Citrullus lanatus (Thunb.) var. lanatus) and citron melons (Citrullus lanatus var. citroides (L. H. Bailey) Mansf.), originated with the erroneous synonymization of Citrullus lanatus (Thunb.) Matsum. & Nakai and Citrullus vulgaris Schrad. by L.H. Bailey in 1930. Molecular data including sequences from the original collection of Thunberg and other relevant type material, show that the sweet watermelon (Citrullus vulgaris Schrad.) and the bitter wooly melon Citrullus lanatus (Thunb.) Matsum. & Nakai are not closely related to each other. Since 1930, thousands of papers have misapplied the name Citrullus lanatus (Thunb.) Matsum. & Nakai for the watermelon, and a proposal to conserve the name with this meaning was accepted by the relevant nomenclatural committee and confirmed at the International Botanical Congress in Shenzhen.<br><br>The bitter South African melon first collected by Thunberg has become naturalized in semiarid regions of several continents, and is designated as a 'pest plant' in parts of Western Australia where they are called pig melon.<br><br>Watermelon (Citrullus lanatus) is a scrambling and trailing vine in the flowering plant family Cucurbitaceae. The species was long thought to have originated in southern Africa, but this was based on the erroneous synonymization by L. H. Bailey (1930) of a South African species with the cultivated watermelon. The error became apparent with DNA comparison of material of the cultivated watermelon seen and named by Linnaeus and the holotype of the South African species. There is evidence from seeds in Pharao tombs of watermelon cultivation in Ancient Egypt. Watermelon is grown in tropical and subtropical areas worldwide for its large edible fruit, also known as a watermelon, which is a special kind of berry with a hard rind and no internal division, botanically called a pepo. The sweet, juicy flesh is usually deep red to pink, with many black seeds, although seedless varieties have been cultivated. The fruit can be eaten raw or pickled and the rind is edible after cooking.<br><br>Considerable breeding effort has been put into disease-resistant varieties. Many cultivars are available that produce mature fruit within 100 days of planting the crop.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Watermelon\">Wikipedia</a>)",
    "growZoneNumber": 7,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/f/fc/01266jfWatermelons_Philippines_textures_Apolonio_Samson_Market_Quezon_Cityfvf_02.jpg"
  },
  {
    "plantId": "hibiscus-rosa-sinensis",
    "name": "Hibiscus",
    "description": "Hibiscus is a genus of flowering plants in the mallow family, Malvaceae. The genus is quite large, comprising several hundred species that are native to warm temperate, subtropical and tropical regions throughout the world. Member species are renowned for their large, showy flowers and those species are commonly known simply as 'hibiscus', or less widely known as rose mallow. There are also names for hibiscus such as hardy hibiscus, rose of sharon, and tropical hibiscus.<br><br>The genus includes both annual and perennial herbaceous plants, as well as woody shrubs and small trees. The generic name is derived from the Greek name ἰβίσκος (hibiskos) which Pedanius Dioscorides gave to Althaea officinalis (c. 40–90 AD).<br><br>Several species are widely cultivated as ornamental plants, notably Hibiscus syriacus and Hibiscus rosa-sinensis.<br><br>A tea made from hibiscus flowers is known by many names around the world and is served both hot and cold. The beverage is known for its red colour, tart flavour, and vitamin C content.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Hibiscus\">Wikipedia</a>)",
    "growZoneNumber": 10,
    "wateringInterval": 1,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/8/82/Hibiscus_rosa-sinensis_flower_2.JPG"
  },
  {
    "plantId": "cypripedium-reginae",
    "name": "Pink & White Lady's Slipper",
    "description": "Cypripedium reginae, known as the showy lady's slipper, pink-and-white lady's-slipper, or the queen's lady's-slipper, is a rare terrestrial lady's-slipper orchid native to northern North America.<br><br>It is the state flower of Minnesota, United States, and the provincial flower of Prince Edward Island, Canada.<br><br>Despite producing a large amount of seeds per seed pod, it reproduces largely by vegetative reproduction, and remains restricted to the North East region of the United States and south east regions of Canada. Although never common, this rare plant has vanished from much of its historical range due to habitat loss. It has been a subject of horticultural interest for many years with Charles Darwin who, like many, was unsuccessful in cultivating the plant.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Cypripedium_reginae\">Wikipedia</a>)",
    "growZoneNumber": 4,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/a/ab/Cypripedium_reginae_Orchi_004.jpg"
  },
  {
    "plantId": "aquilegia-coerulea",
    "name": "Rocky Mountain Columbine",
    "description": "Aquilegia coerulea, the state flower of Colorado, is a species of flowering plant in the buttercup family Ranunculaceae, native to the Rocky Mountains from Montana south to New Mexico and west to Idaho and Arizona. Its common name is Colorado blue columbine; sometimes it is called \"Rocky Mountain columbine,\" but this also refers to Aquilegia saximontana.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Aquilegia_coerulea\">Wikipedia</a>)",
    "growZoneNumber": 5,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/9/94/Aquilegia_caerulea.jpg"
  },
  {
    "plantId": "magnolia-denudata",
    "name": "Yulan Magnolia",
    "description": "Magnolia denudata, known as the lilytree or Yulan magnolia (simplified Chinese: 玉兰花; traditional Chinese: 玉蘭花), is native to central and eastern China. It has been cultivated in Chinese Buddhist temple gardens since 600 AD. Its flowers were regarded as a symbol of purity in the Tang Dynasty and it was planted in the grounds of the Emperor's palace.<br><br>It is the official city flower of Shanghai.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Magnolia_denudata\">Wikipedia</a>)",
    "growZoneNumber": 8,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/1/13/Yulan_magnolia_%28Magnolia_denudata%29_%2816953983745%29.jpg"
  },
  {
    "plantId": "bougainvillea-glabra",
    "name": "Bougainvillea",
    "description": "Bougainvillea is a genus of thorny ornamental vines, bushes, or trees. The inflorescence consists of large colourful sepallike bracts which surround three simple waxy flowers. The vine species grow anywhere from 1 to 12 m (3 to 40 ft.) tall, scrambling over other plants with their spiky thorns, which are tipped with a black, waxy substance. They are evergreen where rainfall occurs all year, or deciduous if there is a dry season.<br><br>Bougainvillea glabra (simplified Chinese: 簕杜鹃; traditional Chinese: 簕杜鵑) is the official city flower of Shenzhen and many other cities around the world.<br><br><br>(From <a href=\\\"https://en.wikipedia.org/wiki/Bougainvillea\\\">Wikipedia</a>)",
    "growZoneNumber": 10,
    "wateringInterval": 21,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/6/6d/Paperflower_--_Bougainvillea_glabra.jpg"
  }
]

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/GardenActivityTest.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.matcher.ViewMatchers.isDisplayed
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.rule.ActivityTestRule
import dagger.hilt.android.testing.HiltAndroidRule
import dagger.hilt.android.testing.HiltAndroidTest
import org.junit.Rule
import org.junit.Test
import org.junit.rules.RuleChain

@HiltAndroidTest
class GardenActivityTest {

    private val hiltRule = HiltAndroidRule(this)
    private val activityTestRule = ActivityTestRule(GardenActivity::class.java)

    @get:Rule
    val rule = RuleChain
        .outerRule(hiltRule)
        .around(activityTestRule)

    @Test fun clickAddPlant_OpensPlantList() {
        // Given that no Plants are added to the user's garden

        // When the "Add Plant" button is clicked
        onView(withId(R.id.add_plant)).perform(click())

        // Then the ViewPager should change to the Plant List page
        onView(withId(R.id.plant_list)).check(matches(isDisplayed()))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/MainCoroutineRule.kt
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.test.TestCoroutineDispatcher
import kotlinx.coroutines.test.resetMain
import kotlinx.coroutines.test.runBlockingTest
import kotlinx.coroutines.test.setMain
import org.junit.rules.TestWatcher
import org.junit.runner.Description

class MainCoroutineRule(
    val testDispatcher: TestCoroutineDispatcher = TestCoroutineDispatcher()
) : TestWatcher() {

    override fun starting(description: Description?) {
        super.starting(description)
        Dispatchers.setMain(testDispatcher)
    }

    override fun finished(description: Description?) {
        super.finished(description)
        Dispatchers.resetMain()
        testDispatcher.cleanupTestCoroutines()
    }
}

fun MainCoroutineRule.runBlockingTest(block: suspend () -> Unit) =
    this.testDispatcher.runBlockingTest {
        block()
    }

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/PlantDetailFragmentTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.accessibilityservice.AccessibilityService
import android.content.Intent
import android.os.Bundle
import androidx.navigation.findNavController
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.intent.Intents
import androidx.test.espresso.intent.Intents.intended
import androidx.test.espresso.intent.matcher.IntentMatchers.hasAction
import androidx.test.espresso.intent.matcher.IntentMatchers.hasExtra
import androidx.test.espresso.intent.matcher.IntentMatchers.hasType
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.rule.ActivityTestRule
import com.google.samples.apps.sunflower.utilities.chooser
import com.google.samples.apps.sunflower.utilities.testPlant
import org.hamcrest.CoreMatchers.allOf
import org.junit.Before
import org.junit.Ignore
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class PlantDetailFragmentTest {

    @Rule
    @JvmField
    val activityTestRule = ActivityTestRule(GardenActivity::class.java)

    @Before
    fun jumpToPlantDetailFragment() {
        activityTestRule.activity.apply {
            runOnUiThread {
                val bundle = Bundle().apply { putString("plantId", testPlant.plantId) }
                findNavController(R.id.nav_host).navigate(R.id.plant_detail_fragment, bundle)
            }
        }
    }

    @Ignore("Share button redesign pending")
    @Test
    fun testShareTextIntent() {
        val shareText = activityTestRule.activity.getString(
            R.string.share_text_plant,
            testPlant.name
        )

        Intents.init()
        onView(withId(R.id.action_share)).perform(click())
        intended(
            chooser(
                allOf(
                    hasAction(Intent.ACTION_SEND),
                    hasType("text/plain"),
                    hasExtra(Intent.EXTRA_TEXT, shareText)
                )
            )
        )
        Intents.release()

        // dismiss the Share Dialog
        InstrumentationRegistry.getInstrumentation()
            .uiAutomation
            .performGlobalAction(AccessibilityService.GLOBAL_ACTION_BACK)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/data/GardenPlantingDaoTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.room.Room
import androidx.test.espresso.matcher.ViewMatchers.assertThat
import androidx.test.platform.app.InstrumentationRegistry
import com.google.samples.apps.sunflower.utilities.testCalendar
import com.google.samples.apps.sunflower.utilities.testGardenPlanting
import com.google.samples.apps.sunflower.utilities.testPlant
import com.google.samples.apps.sunflower.utilities.testPlants
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.runBlocking
import org.hamcrest.CoreMatchers.equalTo
import org.junit.After
import org.junit.Assert.assertFalse
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Rule
import org.junit.Test

class GardenPlantingDaoTest {
    private lateinit var database: AppDatabase
    private lateinit var gardenPlantingDao: GardenPlantingDao
    private var testGardenPlantingId: Long = 0

    @get:Rule
    var instantTaskExecutorRule = InstantTaskExecutorRule()

    @Before fun createDb() = runBlocking {
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        database = Room.inMemoryDatabaseBuilder(context, AppDatabase::class.java).build()
        gardenPlantingDao = database.gardenPlantingDao()

        database.plantDao().insertAll(testPlants)
        testGardenPlantingId = gardenPlantingDao.insertGardenPlanting(testGardenPlanting)
    }

    @After fun closeDb() {
        database.close()
    }

    @Test fun testGetGardenPlantings() = runBlocking {
        val gardenPlanting2 = GardenPlanting(
            testPlants[1].plantId,
            testCalendar,
            testCalendar
        ).also { it.gardenPlantingId = 2 }
        gardenPlantingDao.insertGardenPlanting(gardenPlanting2)
        assertThat(gardenPlantingDao.getGardenPlantings().first().size, equalTo(2))
    }

    @Test fun testDeleteGardenPlanting() = runBlocking {
        val gardenPlanting2 = GardenPlanting(
            testPlants[1].plantId,
            testCalendar,
            testCalendar
        ).also { it.gardenPlantingId = 2 }
        gardenPlantingDao.insertGardenPlanting(gardenPlanting2)
        assertThat(gardenPlantingDao.getGardenPlantings().first().size, equalTo(2))
        gardenPlantingDao.deleteGardenPlanting(gardenPlanting2)
        assertThat(gardenPlantingDao.getGardenPlantings().first().size, equalTo(1))
    }

    @Test fun testGetGardenPlantingForPlant() = runBlocking {
        assertTrue(gardenPlantingDao.isPlanted(testPlant.plantId).first())
    }

    @Test fun testGetGardenPlantingForPlant_notFound() = runBlocking {
        assertFalse(gardenPlantingDao.isPlanted(testPlants[2].plantId).first())
    }

    @Test fun testGetPlantAndGardenPlantings() = runBlocking {
        val plantAndGardenPlantings = gardenPlantingDao.getPlantedGardens().first()
        assertThat(plantAndGardenPlantings.size, equalTo(1))

        /**
         * Only the [testPlant] has been planted, and thus has an associated [GardenPlanting]
         */
        assertThat(plantAndGardenPlantings[0].plant, equalTo(testPlant))
        assertThat(plantAndGardenPlantings[0].gardenPlantings.size, equalTo(1))
        assertThat(plantAndGardenPlantings[0].gardenPlantings[0], equalTo(testGardenPlanting))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/data/PlantDaoTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.room.Room
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.runBlocking
import org.hamcrest.Matchers.equalTo
import org.junit.After
import org.junit.Assert.assertThat
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class PlantDaoTest {
    private lateinit var database: AppDatabase
    private lateinit var plantDao: PlantDao
    private val plantA = Plant("1", "A", "", 1, 1, "")
    private val plantB = Plant("2", "B", "", 1, 1, "")
    private val plantC = Plant("3", "C", "", 2, 2, "")

    @get:Rule
    var instantTaskExecutorRule = InstantTaskExecutorRule()

    @Before fun createDb() = runBlocking {
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        database = Room.inMemoryDatabaseBuilder(context, AppDatabase::class.java).build()
        plantDao = database.plantDao()

        // Insert plants in non-alphabetical order to test that results are sorted by name
        plantDao.insertAll(listOf(plantB, plantC, plantA))
    }

    @After fun closeDb() {
        database.close()
    }

    @Test fun testGetPlants() = runBlocking {
        val plantList = plantDao.getPlants().first()
        assertThat(plantList.size, equalTo(3))

        // Ensure plant list is sorted by name
        assertThat(plantList[0], equalTo(plantA))
        assertThat(plantList[1], equalTo(plantB))
        assertThat(plantList[2], equalTo(plantC))
    }

    @Test fun testGetPlantsWithGrowZoneNumber() = runBlocking {
        val plantList = plantDao.getPlantsWithGrowZoneNumber(1).first()
        assertThat(plantList.size, equalTo(2))
        assertThat(plantDao.getPlantsWithGrowZoneNumber(2).first().size, equalTo(1))
        assertThat(plantDao.getPlantsWithGrowZoneNumber(3).first().size, equalTo(0))

        // Ensure plant list is sorted by name
        assertThat(plantList[0], equalTo(plantA))
        assertThat(plantList[1], equalTo(plantB))
    }

    @Test fun testGetPlant() = runBlocking {
        assertThat(plantDao.getPlant(plantA.plantId).first(), equalTo(plantA))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/utilities/LiveDataTestUtil.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.utilities

import androidx.lifecycle.LiveData
import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit

/**
 * Helper method for testing LiveData objects, from
 * https://github.com/googlesamples/android-architecture-components.
 *
 * Get the value from a LiveData object. We're waiting for LiveData to emit, for 2 seconds.
 * Once we got a notification via onChanged, we stop observing.
 */
@Throws(InterruptedException::class)
fun <T> getValue(liveData: LiveData<T>): T {
    val data = arrayOfNulls<Any>(1)
    val latch = CountDownLatch(1)
    liveData.observeForever { o ->
        data[0] = o
        latch.countDown()
    }
    latch.await(2, TimeUnit.SECONDS)

    @Suppress("UNCHECKED_CAST")
    return data[0] as T
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/utilities/MainTestRunner.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.utilities

import android.app.Application
import android.content.Context
import androidx.test.runner.AndroidJUnitRunner
import dagger.hilt.android.testing.HiltTestApplication

// A custom runner to set up the instrumented application class for tests.
class MainTestRunner : AndroidJUnitRunner() {

    override fun newApplication(cl: ClassLoader?, name: String?, context: Context?): Application {
        return super.newApplication(cl, HiltTestApplication::class.java.name, context)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/utilities/TestUtils.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.utilities

import android.app.Activity
import android.content.Intent
import androidx.appcompat.widget.Toolbar
import androidx.test.espresso.intent.matcher.IntentMatchers.hasAction
import androidx.test.espresso.intent.matcher.IntentMatchers.hasExtra
import com.google.samples.apps.sunflower.data.GardenPlanting
import com.google.samples.apps.sunflower.data.Plant
import org.hamcrest.Matcher
import org.hamcrest.Matchers.`is`
import org.hamcrest.Matchers.allOf
import java.util.Calendar

/**
 * [Plant] objects used for tests.
 */
val testPlants = arrayListOf(
    Plant("1", "Apple", "A red fruit", 1),
    Plant("2", "B", "Description B", 1),
    Plant("3", "C", "Description C", 2)
)
val testPlant = testPlants[0]

/**
 * [Calendar] object used for tests.
 */
val testCalendar: Calendar = Calendar.getInstance().apply {
    set(Calendar.YEAR, 1998)
    set(Calendar.MONTH, Calendar.SEPTEMBER)
    set(Calendar.DAY_OF_MONTH, 4)
}

/**
 * [GardenPlanting] object used for tests.
 */
val testGardenPlanting = GardenPlanting(testPlant.plantId, testCalendar, testCalendar)

/**
 * Returns the content description for the navigation button view in the toolbar.
 */
fun getToolbarNavigationContentDescription(activity: Activity, toolbarId: Int) =
    activity.findViewById<Toolbar>(toolbarId).navigationContentDescription as String

/**
 * Simplify testing Intents with Chooser
 *
 * @param matcher the actual intent before wrapped by Chooser Intent
 */
fun chooser(matcher: Matcher<Intent>): Matcher<Intent> = allOf(
    hasAction(Intent.ACTION_CHOOSER),
    hasExtra(`is`(Intent.EXTRA_INTENT), matcher)
)

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/viewmodels/PlantDetailViewModelTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.viewmodels

import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.lifecycle.SavedStateHandle
import androidx.room.Room
import androidx.test.platform.app.InstrumentationRegistry
import com.google.samples.apps.sunflower.MainCoroutineRule
import com.google.samples.apps.sunflower.data.AppDatabase
import com.google.samples.apps.sunflower.data.GardenPlantingRepository
import com.google.samples.apps.sunflower.data.PlantRepository
import com.google.samples.apps.sunflower.runBlockingTest
import com.google.samples.apps.sunflower.utilities.getValue
import com.google.samples.apps.sunflower.utilities.testPlant
import dagger.hilt.android.testing.HiltAndroidRule
import dagger.hilt.android.testing.HiltAndroidTest
import org.junit.After
import org.junit.Assert.assertFalse
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.rules.RuleChain
import javax.inject.Inject
import kotlin.jvm.Throws

@HiltAndroidTest
class PlantDetailViewModelTest {

    private lateinit var appDatabase: AppDatabase
    private lateinit var viewModel: PlantDetailViewModel
    private val hiltRule = HiltAndroidRule(this)
    private val instantTaskExecutorRule = InstantTaskExecutorRule()
    private val coroutineRule = MainCoroutineRule()

    @get:Rule
    val rule = RuleChain
            .outerRule(hiltRule)
            .around(instantTaskExecutorRule)
            .around(coroutineRule)

    @Inject
    lateinit var plantRepository: PlantRepository

    @Inject
    lateinit var gardenPlantRepository: GardenPlantingRepository

    @Before
    fun setUp() {
        hiltRule.inject()

        val context = InstrumentationRegistry.getInstrumentation().targetContext
        appDatabase = Room.inMemoryDatabaseBuilder(context, AppDatabase::class.java).build()

        val savedStateHandle: SavedStateHandle = SavedStateHandle().apply {
            set("plantId", testPlant.plantId)
        }
        viewModel = PlantDetailViewModel(savedStateHandle, plantRepository, gardenPlantRepository)
    }

    @After
    fun tearDown() {
        appDatabase.close()
    }

    @Suppress("BlockingMethodInNonBlockingContext")
    @Test
    @Throws(InterruptedException::class)
    fun testDefaultValues() = coroutineRule.runBlockingTest {
        assertFalse(getValue(viewModel.isPlanted))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/androidTest/java/com/google/samples/apps/sunflower/worker/SeedDatabaseWorkerTest.kt
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.worker

import android.content.Context
import android.util.Log
import androidx.test.core.app.ApplicationProvider
import androidx.test.platform.app.InstrumentationRegistry
import androidx.work.Configuration
import androidx.work.ListenableWorker.Result
import androidx.work.WorkManager
import androidx.work.testing.SynchronousExecutor
import androidx.work.testing.TestListenableWorkerBuilder
import androidx.work.testing.WorkManagerTestInitHelper
import androidx.work.workDataOf
import com.google.samples.apps.sunflower.utilities.PLANT_DATA_FILENAME
import com.google.samples.apps.sunflower.workers.SeedDatabaseWorker
import org.hamcrest.CoreMatchers.`is`
import org.junit.Assert.assertThat
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4

@RunWith(JUnit4::class)
class RefreshMainDataWorkTest {
    private lateinit var workManager: WorkManager
    private lateinit var context: Context
    private lateinit var configuration: Configuration

    @Before
    fun setup() {
        // Configure WorkManager
        configuration = Configuration.Builder()
            // Set log level to Log.DEBUG to make it easier to debug
            .setMinimumLoggingLevel(Log.DEBUG)
            // Use a SynchronousExecutor here to make it easier to write tests
            .setExecutor(SynchronousExecutor())
            .build()

        // Initialize WorkManager for instrumentation tests.
        context = InstrumentationRegistry.getInstrumentation().targetContext
        WorkManagerTestInitHelper.initializeTestWorkManager(context, configuration)
        workManager = WorkManager.getInstance(context)
    }

    @Test
    fun testRefreshMainDataWork() {
        // Get the ListenableWorker
        val worker = TestListenableWorkerBuilder<SeedDatabaseWorker>(
            context = context,
            inputData = workDataOf(SeedDatabaseWorker.KEY_FILENAME to PLANT_DATA_FILENAME)
        ).build()

        // Start the work synchronously
        val result = worker.startWork().get()

        assertThat(result, `is`(Result.success()))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.google.samples.apps.sunflower">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:name=".MainApplication"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Sunflower">
        <activity
            android:name=".GardenActivity"
            android:theme="@style/Theme.Sunflower.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <provider
            android:name="androidx.work.impl.WorkManagerInitializer"
            android:authorities="${applicationId}.workmanager-init"
            tools:node="remove" />
    </application>

</manifest>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/assets/plants.json
[
  {
    "plantId": "malus-pumila",
    "name": "Apple",
    "description": "An apple is a sweet, edible fruit produced by an apple tree (Malus pumila). Apple trees are cultivated worldwide, and are the most widely grown species in the genus Malus. The tree originated in Central Asia, where its wild ancestor, Malus sieversii, is still found today. Apples have been grown for thousands of years in Asia and Europe, and were brought to North America by European colonists. Apples have religious and mythological significance in many cultures, including Norse, Greek and European Christian traditions.<br><br>Apple trees are large if grown from seed. Generally apple cultivars are propagated by grafting onto rootstocks, which control the size of the resulting tree. There are more than 7,500 known cultivars of apples, resulting in a range of desired characteristics. Different cultivars are bred for various tastes and uses, including cooking, eating raw and cider production. Trees and fruit are prone to a number of fungal, bacterial and pest problems, which can be controlled by a number of organic and non-organic means. In 2010, the fruit's genome was sequenced as part of research on disease control and selective breeding in apple production.<br><br>Worldwide production of apples in 2014 was 84.6 million tonnes, with China accounting for 48% of the total.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Apple\">Wikipedia</a>)",
    "growZoneNumber": 3,
    "wateringInterval": 30,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/5/55/Apple_orchard_in_Tasmania.jpg"
  },
  {
    "plantId": "beta-vulgaris",
    "name": "Beet",
    "description": "The beetroot is the taproot portion of the beet plant, usually known in North America as the beet and also known as the table beet, garden beet, red beet, or golden beet. It is one of several of the cultivated varieties of Beta vulgaris grown for their edible taproots and their leaves (called beet greens). These varieties have been classified as B. vulgaris subsp. vulgaris Conditiva Group.<br><br>Other than as a food, beets have use as a food colouring and as a medicinal plant. Many beet products are made from other Beta vulgaris varieties, particularly sugar beet.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Beetroot\">Wikipedia</a>)",
    "growZoneNumber": 2,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/2/29/Beetroot_jm26647.jpg"
  },
  {
    "plantId": "coriandrum-sativum",
    "name": "Cilantro",
    "description": "Coriander, also known as cilantro or Chinese parsley, is an annual herb in the family Apiaceae. All parts of the plant are edible, but the fresh leaves and the dried seeds are the parts most traditionally used in cooking.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Coriander\">Wikipedia</a>)",
    "growZoneNumber": 2,
    "wateringInterval": 2,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/5/51/A_scene_of_Coriander_leaves.JPG"
  },
  {
    "plantId": "solanum-lycopersicum",
    "name": "Tomato",
    "description": "The tomato is the edible, often red, berry of the nightshade Solanum lycopersicum, commonly known as a tomato plant. The species originated in western South America. The Nahuatl (Aztec language) word tomatl gave rise to the Spanish word tomate, from which the English word tomato derived. Its use as a cultivated food may have originated with the indigenous peoples of Mexico. The Spanish encountered the tomato from their contact with the Aztec during the Spanish colonization of the Americas and brought it to Europe. From there, the tomato was introduced to other parts of the European-colonized world during the 16th century.<br><br>The tomato is consumed in diverse ways, raw or cooked, in many dishes, sauces, salads, and drinks. While tomatoes are fruits – botanically classified as berries – they are commonly used as a vegetable ingredient or side dish.<br><br>Numerous varieties of the tomato plant are widely grown in temperate climates across the world, with greenhouses allowing for the production of tomatoes throughout all seasons of the year. Tomato plants typically grow to 1–3 meters (3–10 ft) in height. They are vines that have a weak stem that sprawls and typically needs support. Indeterminate tomato plants are perennials in their native habitat, but are cultivated as annuals. Determinate, or bush, plants are annuals that stop growing at a certain height and produce a crop all at once. The size of the tomato varies according to the cultivar, with a range of 0.5–4 inches (1.3–10.2 cm) in width.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Tomato\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 4,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/1/17/Cherry_tomatoes_red_and_green_2009_16x9.jpg"
  },
  {
    "plantId": "persea-americana",
    "name": "Avocado",
    "description": "The avocado (Persea americana) is a tree, long thought to have originated in South Central Mexico, classified as a member of the flowering plant family Lauraceae. The fruit of the plant, also called an avocado (or avocado pear or alligator pear), is botanically a large berry containing a single large seed.<br><br>Avocados are commercially valuable and are cultivated in tropical and Mediterranean climates throughout the world. They have a green-skinned, fleshy body that may be pear-shaped, egg-shaped, or spherical. Commercially, they ripen after harvesting. Avocado trees are partially self-pollinating and are often propagated through grafting to maintain a predictable quality and quantity of the fruit.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Avocado\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/e/e4/Branch_and_fruit_of_the_Maluma_avocado_cultivar.jpg"
  },
  {
    "plantId": "pyrus-communis",
    "name": "Pear",
    "description": "The pear tree and shrub are a species of genus Pyrus, in the family Rosaceae, bearing the pomaceous fruit of the same name. Several species of pear are valued for their edible fruit and juices while others are cultivated as trees.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Pear\">Wikipedia</a>)",
    "growZoneNumber": 3,
    "wateringInterval": 30,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/1/13/More_pears.jpg"
  },
  {
    "plantId": "solanum-melongena",
    "name": "Eggplant",
    "description": "Eggplant (US), aubergine (UK), or brinjal (South Asia and South Africa) is a plant species in the nightshade family Solanaceae, Solanum melongena, grown for its often purple edible fruit.<br><br>The spongy, absorbent fruit of the plant is widely used in cooking in many different cuisines, and is often considered a vegetable, even though it is a berry by botanical definition. As a member of the genus Solanum, it is related to the tomato and the potato. Like the tomato, its skin and seeds can be eaten, but, like the potato, it is not advisable to eat it raw. Eggplant supplies low contents of macronutrients and micronutrients. The capability of the fruit to absorb oils and flavors into its flesh through cooking is well known in the culinary arts.<br><br>It was originally domesticated from the wild nightshade species thorn or bitter apple, S. incanum, probably with two independent domestications: one in South Asia, and one in East Asia.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Eggplant\">Wikipedia</a>)",
    "growZoneNumber": 4,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/e/e5/Eggplant_display.JPG"
  },
  {
    "plantId": "vitis-vinifera",
    "name": "Grape",
    "description": "A grape is a fruit, botanically a berry, of the deciduous woody vines of the flowering plant genus Vitis.<br><br>Grapes can be eaten fresh as table grapes or they can be used for making wine, jam, juice, jelly, grape seed extract, raisins, vinegar, and grape seed oil. Grapes are a non-climacteric type of fruit, generally occurring in clusters.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Grape\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 9,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/0/03/Grape_Plant_and_grapes9.jpg"
  },
  {
    "plantId": "mangifera-indica",
    "name": "Mango",
    "description": "Mangoes are juicy stone fruit (drupe) from numerous species of tropical trees belonging to the flowering plant genus Mangifera, cultivated mostly for their edible fruit.<br><br>The majority of these species are found in nature as wild mangoes. The genus belongs to the cashew family Anacardiaceae. Mangoes are native to South Asia, from where the 'common mango' or 'Indian mango', Mangifera indica, has been distributed worldwide to become one of the most widely cultivated fruits in the tropics. Other Mangifera species (e.g. horse mango, Mangifera foetida) are grown on a more localized basis.<br><br>It is the national fruit of India, Pakistan, and the Philippines, and the national tree of Bangladesh.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Mango\">Wikipedia</a>)",
    "growZoneNumber": 11,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/6/67/Mangos_criollos_y_pera.JPG"
  },
  {
    "plantId": "citrus-x-sinensis",
    "name": "Orange",
    "description": "The orange is the fruit of the citrus species Citrus × sinensis in the family Rutaceae. It is also called sweet orange, to distinguish it from the related Citrus × aurantium, referred to as bitter orange. The sweet orange reproduces asexually (apomixis through nucellar embryony); varieties of sweet orange arise through mutations.<br><br>The orange is a hybrid between pomelo (Citrus maxima) and mandarin (Citrus reticulata). The chloroplast genome, and therefore the maternal line, is that of pomelo. The sweet orange has had its full genome sequenced.<br><br>Sweet oranges were mentioned in Chinese literature in 314 BC. As of 1987, orange trees were found to be the most cultivated fruit tree in the world. Orange trees are widely grown in tropical and subtropical climates for their sweet fruit. The fruit of the orange tree can be eaten fresh, or processed for its juice or fragrant peel. As of 2012, sweet oranges accounted for approximately 70% of citrus production.<br><br>In 2014, 70.9 million tonnes of oranges were grown worldwide, with Brazil producing 24% of the world total followed by China and India.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Orange_(fruit)\">Wikipedia</a>)",
    "growZoneNumber": 9,
    "wateringInterval": 30,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/2/22/Apfelsinenbaum--Orange_tree.jpg"
  },
  {
    "plantId": "helianthus-annuus",
    "name": "Sunflower",
    "description": "Roses are red<br>Violets are blue<br>Sunflowers have seeds<br>That folks love to chew<br><br>- M.G., 2018<br><br>Helianthus annuus, the common sunflower, is a large annual forb of the genus Helianthus grown as a crop for its edible oil and edible fruits. This sunflower species is also used as wild bird food, as livestock forage (as a meal or a silage plant), in some industrial applications, and as an ornamental in domestic gardens. The plant was first domesticated in the Americas. Wild Helianthus annuus is a widely branched annual plant with many flower heads. The domestic sunflower, however, often possesses only a single large inflorescence (flower head) atop an unbranched stem. The name sunflower may derive from the flower's head's shape, which resembles the sun, or from the impression that the blooming plant appears to slowly turn its flower towards the sun as the latter moves across the sky on a daily basis.<br><br>Sunflower seeds were brought to Europe from the Americas in the 16th century, where, along with sunflower oil, they became a widespread cooking ingredient.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Helianthus_annuus\">Wikipedia</a>)",
    "growZoneNumber": 8,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/a/aa/Sunflowers_in_field_flower.jpg"
  },
  {
    "plantId": "citrullus-lanatus",
    "name": "Watermelon",
    "description": "Citrullus lanatus is a plant species in the family Cucurbitaceae, a vine-like (scrambler and trailer) flowering plant originating in West Africa. It is cultivated for its fruit. The subdivision of this species into two varieties, watermelons (Citrullus lanatus (Thunb.) var. lanatus) and citron melons (Citrullus lanatus var. citroides (L. H. Bailey) Mansf.), originated with the erroneous synonymization of Citrullus lanatus (Thunb.) Matsum. & Nakai and Citrullus vulgaris Schrad. by L.H. Bailey in 1930. Molecular data including sequences from the original collection of Thunberg and other relevant type material, show that the sweet watermelon (Citrullus vulgaris Schrad.) and the bitter wooly melon Citrullus lanatus (Thunb.) Matsum. & Nakai are not closely related to each other. Since 1930, thousands of papers have misapplied the name Citrullus lanatus (Thunb.) Matsum. & Nakai for the watermelon, and a proposal to conserve the name with this meaning was accepted by the relevant nomenclatural committee and confirmed at the International Botanical Congress in Shenzhen.<br><br>The bitter South African melon first collected by Thunberg has become naturalized in semiarid regions of several continents, and is designated as a 'pest plant' in parts of Western Australia where they are called pig melon.<br><br>Watermelon (Citrullus lanatus) is a scrambling and trailing vine in the flowering plant family Cucurbitaceae. The species was long thought to have originated in southern Africa, but this was based on the erroneous synonymization by L. H. Bailey (1930) of a South African species with the cultivated watermelon. The error became apparent with DNA comparison of material of the cultivated watermelon seen and named by Linnaeus and the holotype of the South African species. There is evidence from seeds in Pharao tombs of watermelon cultivation in Ancient Egypt. Watermelon is grown in tropical and subtropical areas worldwide for its large edible fruit, also known as a watermelon, which is a special kind of berry with a hard rind and no internal division, botanically called a pepo. The sweet, juicy flesh is usually deep red to pink, with many black seeds, although seedless varieties have been cultivated. The fruit can be eaten raw or pickled and the rind is edible after cooking.<br><br>Considerable breeding effort has been put into disease-resistant varieties. Many cultivars are available that produce mature fruit within 100 days of planting the crop.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Watermelon\">Wikipedia</a>)",
    "growZoneNumber": 7,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/f/fc/01266jfWatermelons_Philippines_textures_Apolonio_Samson_Market_Quezon_Cityfvf_02.jpg"
  },
  {
    "plantId": "hibiscus-rosa-sinensis",
    "name": "Hibiscus",
    "description": "Hibiscus is a genus of flowering plants in the mallow family, Malvaceae. The genus is quite large, comprising several hundred species that are native to warm temperate, subtropical and tropical regions throughout the world. Member species are renowned for their large, showy flowers and those species are commonly known simply as 'hibiscus', or less widely known as rose mallow. There are also names for hibiscus such as hardy hibiscus, rose of sharon, and tropical hibiscus.<br><br>The genus includes both annual and perennial herbaceous plants, as well as woody shrubs and small trees. The generic name is derived from the Greek name ἰβίσκος (hibiskos) which Pedanius Dioscorides gave to Althaea officinalis (c. 40–90 AD).<br><br>Several species are widely cultivated as ornamental plants, notably Hibiscus syriacus and Hibiscus rosa-sinensis.<br><br>A tea made from hibiscus flowers is known by many names around the world and is served both hot and cold. The beverage is known for its red colour, tart flavour, and vitamin C content.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Hibiscus\">Wikipedia</a>)",
    "growZoneNumber": 10,
    "wateringInterval": 1,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/8/82/Hibiscus_rosa-sinensis_flower_2.JPG"
  },
  {
    "plantId": "cypripedium-reginae",
    "name": "Pink & White Lady's Slipper",
    "description": "Cypripedium reginae, known as the showy lady's slipper, pink-and-white lady's-slipper, or the queen's lady's-slipper, is a rare terrestrial lady's-slipper orchid native to northern North America.<br><br>It is the state flower of Minnesota, United States, and the provincial flower of Prince Edward Island, Canada.<br><br>Despite producing a large amount of seeds per seed pod, it reproduces largely by vegetative reproduction, and remains restricted to the North East region of the United States and south east regions of Canada. Although never common, this rare plant has vanished from much of its historical range due to habitat loss. It has been a subject of horticultural interest for many years with Charles Darwin who, like many, was unsuccessful in cultivating the plant.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Cypripedium_reginae\">Wikipedia</a>)",
    "growZoneNumber": 4,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/a/ab/Cypripedium_reginae_Orchi_004.jpg"
  },
  {
    "plantId": "aquilegia-coerulea",
    "name": "Rocky Mountain Columbine",
    "description": "Aquilegia coerulea, the state flower of Colorado, is a species of flowering plant in the buttercup family Ranunculaceae, native to the Rocky Mountains from Montana south to New Mexico and west to Idaho and Arizona. Its common name is Colorado blue columbine; sometimes it is called \"Rocky Mountain columbine,\" but this also refers to Aquilegia saximontana.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Aquilegia_coerulea\">Wikipedia</a>)",
    "growZoneNumber": 5,
    "wateringInterval": 3,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/9/94/Aquilegia_caerulea.jpg"
  },
  {
    "plantId": "magnolia-denudata",
    "name": "Yulan Magnolia",
    "description": "Magnolia denudata, known as the lilytree or Yulan magnolia (simplified Chinese: 玉兰花; traditional Chinese: 玉蘭花), is native to central and eastern China. It has been cultivated in Chinese Buddhist temple gardens since 600 AD. Its flowers were regarded as a symbol of purity in the Tang Dynasty and it was planted in the grounds of the Emperor's palace.<br><br>It is the official city flower of Shanghai.<br><br>(From <a href=\"https://en.wikipedia.org/wiki/Magnolia_denudata\">Wikipedia</a>)",
    "growZoneNumber": 8,
    "wateringInterval": 7,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/1/13/Yulan_magnolia_%28Magnolia_denudata%29_%2816953983745%29.jpg"
  },
  {
    "plantId": "bougainvillea-glabra",
    "name": "Bougainvillea",
    "description": "Bougainvillea is a genus of thorny ornamental vines, bushes, or trees. The inflorescence consists of large colourful sepallike bracts which surround three simple waxy flowers. The vine species grow anywhere from 1 to 12 m (3 to 40 ft.) tall, scrambling over other plants with their spiky thorns, which are tipped with a black, waxy substance. They are evergreen where rainfall occurs all year, or deciduous if there is a dry season.<br><br>Bougainvillea glabra (simplified Chinese: 簕杜鹃; traditional Chinese: 簕杜鵑) is the official city flower of Shenzhen and many other cities around the world.<br><br><br>(From <a href=\\\"https://en.wikipedia.org/wiki/Bougainvillea\\\">Wikipedia</a>)",
    "growZoneNumber": 10,
    "wateringInterval": 21,
    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/6/6d/Paperflower_--_Bougainvillea_glabra.jpg"
  }
]

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/GalleryFragment.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.findNavController
import androidx.navigation.fragment.navArgs
import com.google.samples.apps.sunflower.adapters.GalleryAdapter
import com.google.samples.apps.sunflower.databinding.FragmentGalleryBinding
import com.google.samples.apps.sunflower.viewmodels.GalleryViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

@AndroidEntryPoint
class GalleryFragment : Fragment() {

    private val adapter = GalleryAdapter()
    private val args: GalleryFragmentArgs by navArgs()
    private var searchJob: Job? = null
    private val viewModel: GalleryViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val binding = FragmentGalleryBinding.inflate(inflater, container, false)
        context ?: return binding.root

        binding.photoList.adapter = adapter
        search(args.plantName)

        binding.toolbar.setNavigationOnClickListener { view ->
            view.findNavController().navigateUp()
        }

        return binding.root
    }

    private fun search(query: String) {
        // Make sure we cancel the previous job before creating a new one
        searchJob?.cancel()
        searchJob = lifecycleScope.launch {
            viewModel.searchPictures(query).collectLatest {
                adapter.submitData(it)
            }
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/GardenActivity.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.DataBindingUtil.setContentView
import com.google.samples.apps.sunflower.databinding.ActivityGardenBinding
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class GardenActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView<ActivityGardenBinding>(this, R.layout.activity_garden)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/GardenFragment.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.observe
import androidx.viewpager2.widget.ViewPager2
import com.google.samples.apps.sunflower.adapters.GardenPlantingAdapter
import com.google.samples.apps.sunflower.adapters.PLANT_LIST_PAGE_INDEX
import com.google.samples.apps.sunflower.databinding.FragmentGardenBinding
import com.google.samples.apps.sunflower.viewmodels.GardenPlantingListViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class GardenFragment : Fragment() {

    private lateinit var binding: FragmentGardenBinding

    private val viewModel: GardenPlantingListViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentGardenBinding.inflate(inflater, container, false)
        val adapter = GardenPlantingAdapter()
        binding.gardenList.adapter = adapter

        binding.addPlant.setOnClickListener {
            navigateToPlantListPage()
        }

        subscribeUi(adapter, binding)
        return binding.root
    }

    private fun subscribeUi(adapter: GardenPlantingAdapter, binding: FragmentGardenBinding) {
        viewModel.plantAndGardenPlantings.observe(viewLifecycleOwner) { result ->
            binding.hasPlantings = !result.isNullOrEmpty()
            adapter.submitList(result)
        }
    }

    // TODO: convert to data binding if applicable
    private fun navigateToPlantListPage() {
        requireActivity().findViewById<ViewPager2>(R.id.view_pager).currentItem =
            PLANT_LIST_PAGE_INDEX
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/HomeViewPagerFragment.kt
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import com.google.android.material.tabs.TabLayoutMediator
import com.google.samples.apps.sunflower.adapters.MY_GARDEN_PAGE_INDEX
import com.google.samples.apps.sunflower.adapters.PLANT_LIST_PAGE_INDEX
import com.google.samples.apps.sunflower.adapters.SunflowerPagerAdapter
import com.google.samples.apps.sunflower.databinding.FragmentViewPagerBinding
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class HomeViewPagerFragment : Fragment() {

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val binding = FragmentViewPagerBinding.inflate(inflater, container, false)
        val tabLayout = binding.tabs
        val viewPager = binding.viewPager

        viewPager.adapter = SunflowerPagerAdapter(this)

        // Set the icon and text for each tab
        TabLayoutMediator(tabLayout, viewPager) { tab, position ->
            tab.setIcon(getTabIcon(position))
            tab.text = getTabTitle(position)
        }.attach()

        (activity as AppCompatActivity).setSupportActionBar(binding.toolbar)

        return binding.root
    }

    private fun getTabIcon(position: Int): Int {
        return when (position) {
            MY_GARDEN_PAGE_INDEX -> R.drawable.garden_tab_selector
            PLANT_LIST_PAGE_INDEX -> R.drawable.plant_list_tab_selector
            else -> throw IndexOutOfBoundsException()
        }
    }

    private fun getTabTitle(position: Int): String? {
        return when (position) {
            MY_GARDEN_PAGE_INDEX -> getString(R.string.my_garden_title)
            PLANT_LIST_PAGE_INDEX -> getString(R.string.plant_list_title)
            else -> null
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/MainApplication.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.app.Application
import androidx.work.Configuration
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MainApplication : Application(), Configuration.Provider {
    override fun getWorkManagerConfiguration(): Configuration =
                Configuration.Builder()
                        .setMinimumLoggingLevel(if (BuildConfig.DEBUG) android.util.Log.DEBUG else android.util.Log.ERROR)
                        .build()
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/PlantDetailFragment.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.coordinatorlayout.widget.CoordinatorLayout
import androidx.core.app.ShareCompat
import androidx.core.widget.NestedScrollView
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.findNavController
import androidx.navigation.fragment.findNavController
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.android.material.snackbar.Snackbar
import com.google.samples.apps.sunflower.PlantDetailFragment.Callback
import com.google.samples.apps.sunflower.data.Plant
import com.google.samples.apps.sunflower.databinding.FragmentPlantDetailBinding
import com.google.samples.apps.sunflower.viewmodels.PlantDetailViewModel
import dagger.hilt.android.AndroidEntryPoint

/**
 * A fragment representing a single Plant detail screen.
 */
@AndroidEntryPoint
class PlantDetailFragment : Fragment() {

    private val plantDetailViewModel: PlantDetailViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        val binding = DataBindingUtil.inflate<FragmentPlantDetailBinding>(
            inflater,
            R.layout.fragment_plant_detail,
            container,
            false
        ).apply {
            viewModel = plantDetailViewModel
            lifecycleOwner = viewLifecycleOwner
            callback = Callback { plant ->
                plant?.let {
                    hideAppBarFab(fab)
                    plantDetailViewModel.addPlantToGarden()
                    Snackbar.make(root, R.string.added_plant_to_garden, Snackbar.LENGTH_LONG)
                        .show()
                }
            }

            galleryNav.setOnClickListener { navigateToGallery() }

            var isToolbarShown = false

            // scroll change listener begins at Y = 0 when image is fully collapsed
            plantDetailScrollview.setOnScrollChangeListener(
                NestedScrollView.OnScrollChangeListener { _, _, scrollY, _, _ ->

                    // User scrolled past image to height of toolbar and the title text is
                    // underneath the toolbar, so the toolbar should be shown.
                    val shouldShowToolbar = scrollY > toolbar.height

                    // The new state of the toolbar differs from the previous state; update
                    // appbar and toolbar attributes.
                    if (isToolbarShown != shouldShowToolbar) {
                        isToolbarShown = shouldShowToolbar

                        // Use shadow animator to add elevation if toolbar is shown
                        appbar.isActivated = shouldShowToolbar

                        // Show the plant name if toolbar is shown
                        toolbarLayout.isTitleEnabled = shouldShowToolbar
                    }
                }
            )

            toolbar.setNavigationOnClickListener { view ->
                view.findNavController().navigateUp()
            }

            toolbar.setOnMenuItemClickListener { item ->
                when (item.itemId) {
                    R.id.action_share -> {
                        createShareIntent()
                        true
                    }
                    else -> false
                }
            }
        }
        setHasOptionsMenu(true)

        return binding.root
    }

    private fun navigateToGallery() {
        plantDetailViewModel.plant.value?.let { plant ->
            val direction =
                PlantDetailFragmentDirections.actionPlantDetailFragmentToGalleryFragment(plant.name)
            findNavController().navigate(direction)
        }
    }

    // Helper function for calling a share functionality.
    // Should be used when user presses a share button/menu item.
    @Suppress("DEPRECATION")
    private fun createShareIntent() {
        val shareText = plantDetailViewModel.plant.value.let { plant ->
            if (plant == null) {
                ""
            } else {
                getString(R.string.share_text_plant, plant.name)
            }
        }
        val shareIntent = ShareCompat.IntentBuilder.from(requireActivity())
            .setText(shareText)
            .setType("text/plain")
            .createChooserIntent()
            .addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT or Intent.FLAG_ACTIVITY_MULTIPLE_TASK)
        startActivity(shareIntent)
    }

    // FloatingActionButtons anchored to AppBarLayouts have their visibility controlled by the scroll position.
    // We want to turn this behavior off to hide the FAB when it is clicked.
    //
    // This is adapted from Chris Banes' Stack Overflow answer: https://stackoverflow.com/a/41442923
    private fun hideAppBarFab(fab: FloatingActionButton) {
        val params = fab.layoutParams as CoordinatorLayout.LayoutParams
        val behavior = params.behavior as FloatingActionButton.Behavior
        behavior.isAutoHideEnabled = false
        fab.hide()
    }

    fun interface Callback {
        fun add(plant: Plant?)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/PlantListFragment.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower

import android.os.Bundle
import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuInflater
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.observe
import com.google.samples.apps.sunflower.adapters.PlantAdapter
import com.google.samples.apps.sunflower.databinding.FragmentPlantListBinding
import com.google.samples.apps.sunflower.viewmodels.PlantListViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class PlantListFragment : Fragment() {

    private val viewModel: PlantListViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val binding = FragmentPlantListBinding.inflate(inflater, container, false)
        context ?: return binding.root

        val adapter = PlantAdapter()
        binding.plantList.adapter = adapter
        subscribeUi(adapter)

        setHasOptionsMenu(true)
        return binding.root
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        inflater.inflate(R.menu.menu_plant_list, menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.filter_zone -> {
                updateData()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun subscribeUi(adapter: PlantAdapter) {
        viewModel.plants.observe(viewLifecycleOwner) { plants ->
            adapter.submitList(plants)
        }
    }

    private fun updateData() {
        with(viewModel) {
            if (isFiltered()) {
                clearGrowZoneNumber()
            } else {
                setGrowZoneNumber(9)
            }
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/BindingAdapters.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.adapters

import android.view.View
import androidx.databinding.BindingAdapter

@BindingAdapter("isGone")
fun bindIsGone(view: View, isGone: Boolean) {
    view.visibility = if (isGone) {
        View.GONE
    } else {
        View.VISIBLE
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/GalleryAdapter.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.adapters

import android.content.Intent
import android.net.Uri
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.paging.PagingDataAdapter
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.RecyclerView
import com.google.samples.apps.sunflower.GalleryFragment
import com.google.samples.apps.sunflower.adapters.GalleryAdapter.GalleryViewHolder
import com.google.samples.apps.sunflower.data.UnsplashPhoto
import com.google.samples.apps.sunflower.databinding.ListItemPhotoBinding

/**
 * Adapter for the [RecyclerView] in [GalleryFragment].
 */

class GalleryAdapter : PagingDataAdapter<UnsplashPhoto, GalleryViewHolder>(GalleryDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GalleryViewHolder {
        return GalleryViewHolder(
            ListItemPhotoBinding.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
        )
    }

    override fun onBindViewHolder(holder: GalleryViewHolder, position: Int) {
        val photo = getItem(position)
        if (photo != null) {
            holder.bind(photo)
        }
    }

    class GalleryViewHolder(
        private val binding: ListItemPhotoBinding
    ) : RecyclerView.ViewHolder(binding.root) {
        init {
            binding.setClickListener { view ->
                binding.photo?.let { photo ->
                    val uri = Uri.parse(photo.user.attributionUrl)
                    val intent = Intent(Intent.ACTION_VIEW, uri)
                    view.context.startActivity(intent)
                }
            }
        }

        fun bind(item: UnsplashPhoto) {
            binding.apply {
                photo = item
                executePendingBindings()
            }
        }
    }
}

private class GalleryDiffCallback : DiffUtil.ItemCallback<UnsplashPhoto>() {
    override fun areItemsTheSame(oldItem: UnsplashPhoto, newItem: UnsplashPhoto): Boolean {
        return oldItem.id == newItem.id
    }

    override fun areContentsTheSame(oldItem: UnsplashPhoto, newItem: UnsplashPhoto): Boolean {
        return oldItem == newItem
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/GardenPlantingAdapter.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.adapters

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.navigation.findNavController
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.google.samples.apps.sunflower.HomeViewPagerFragmentDirections
import com.google.samples.apps.sunflower.R
import com.google.samples.apps.sunflower.data.PlantAndGardenPlantings
import com.google.samples.apps.sunflower.databinding.ListItemGardenPlantingBinding
import com.google.samples.apps.sunflower.viewmodels.PlantAndGardenPlantingsViewModel

class GardenPlantingAdapter :
    ListAdapter<PlantAndGardenPlantings, GardenPlantingAdapter.ViewHolder>(
        GardenPlantDiffCallback()
    ) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        return ViewHolder(
            DataBindingUtil.inflate(
                LayoutInflater.from(parent.context),
                R.layout.list_item_garden_planting,
                parent,
                false
            )
        )
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        holder.bind(getItem(position))
    }

    class ViewHolder(
        private val binding: ListItemGardenPlantingBinding
    ) : RecyclerView.ViewHolder(binding.root) {
        init {
            binding.setClickListener { view ->
                binding.viewModel?.plantId?.let { plantId ->
                    navigateToPlant(plantId, view)
                }
            }
        }

        private fun navigateToPlant(plantId: String, view: View) {
            val direction = HomeViewPagerFragmentDirections
                .actionViewPagerFragmentToPlantDetailFragment(plantId)
            view.findNavController().navigate(direction)
        }

        fun bind(plantings: PlantAndGardenPlantings) {
            with(binding) {
                viewModel = PlantAndGardenPlantingsViewModel(plantings)
                executePendingBindings()
            }
        }
    }
}

private class GardenPlantDiffCallback : DiffUtil.ItemCallback<PlantAndGardenPlantings>() {

    override fun areItemsTheSame(
        oldItem: PlantAndGardenPlantings,
        newItem: PlantAndGardenPlantings
    ): Boolean {
        return oldItem.plant.plantId == newItem.plant.plantId
    }

    override fun areContentsTheSame(
        oldItem: PlantAndGardenPlantings,
        newItem: PlantAndGardenPlantings
    ): Boolean {
        return oldItem.plant == newItem.plant
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/PlantAdapter.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.adapters

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.navigation.findNavController
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.google.samples.apps.sunflower.HomeViewPagerFragmentDirections
import com.google.samples.apps.sunflower.PlantListFragment
import com.google.samples.apps.sunflower.data.Plant
import com.google.samples.apps.sunflower.databinding.ListItemPlantBinding

/**
 * Adapter for the [RecyclerView] in [PlantListFragment].
 */
class PlantAdapter : ListAdapter<Plant, RecyclerView.ViewHolder>(PlantDiffCallback()) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        return PlantViewHolder(
            ListItemPlantBinding.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
        )
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        val plant = getItem(position)
        (holder as PlantViewHolder).bind(plant)
    }

    class PlantViewHolder(
        private val binding: ListItemPlantBinding
    ) : RecyclerView.ViewHolder(binding.root) {
        init {
            binding.setClickListener {
                binding.plant?.let { plant ->
                    navigateToPlant(plant, it)
                }
            }
        }

        private fun navigateToPlant(
            plant: Plant,
            view: View
        ) {
            val direction =
                HomeViewPagerFragmentDirections.actionViewPagerFragmentToPlantDetailFragment(
                    plant.plantId
                )
            view.findNavController().navigate(direction)
        }

        fun bind(item: Plant) {
            binding.apply {
                plant = item
                executePendingBindings()
            }
        }
    }
}

private class PlantDiffCallback : DiffUtil.ItemCallback<Plant>() {

    override fun areItemsTheSame(oldItem: Plant, newItem: Plant): Boolean {
        return oldItem.plantId == newItem.plantId
    }

    override fun areContentsTheSame(oldItem: Plant, newItem: Plant): Boolean {
        return oldItem == newItem
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/PlantDetailBindingAdapters.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.adapters

import android.text.method.LinkMovementMethod
import android.widget.ImageView
import android.widget.TextView
import androidx.core.text.HtmlCompat
import androidx.core.text.HtmlCompat.FROM_HTML_MODE_COMPACT
import androidx.databinding.BindingAdapter
import com.bumptech.glide.Glide
import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.samples.apps.sunflower.R

@BindingAdapter("imageFromUrl")
fun bindImageFromUrl(view: ImageView, imageUrl: String?) {
    if (!imageUrl.isNullOrEmpty()) {
        Glide.with(view.context)
            .load(imageUrl)
            .transition(DrawableTransitionOptions.withCrossFade())
            .into(view)
    }
}

@BindingAdapter("isFabGone")
fun bindIsFabGone(view: FloatingActionButton, isGone: Boolean?) {
    if (isGone == null || isGone) {
        view.hide()
    } else {
        view.show()
    }
}

@BindingAdapter("renderHtml")
fun bindRenderHtml(view: TextView, description: String?) {
    if (description != null) {
        view.text = HtmlCompat.fromHtml(description, FROM_HTML_MODE_COMPACT)
        view.movementMethod = LinkMovementMethod.getInstance()
    } else {
        view.text = ""
    }
}

@BindingAdapter("wateringText")
fun bindWateringText(textView: TextView, wateringInterval: Int) {
    val resources = textView.context.resources
    val quantityString = resources.getQuantityString(
        R.plurals.watering_needs_suffix,
        wateringInterval,
        wateringInterval
    )

    textView.text = quantityString
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/adapters/SunflowerPagerAdapter.kt
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.adapters

import androidx.fragment.app.Fragment
import androidx.viewpager2.adapter.FragmentStateAdapter
import com.google.samples.apps.sunflower.GardenFragment
import com.google.samples.apps.sunflower.PlantListFragment

const val MY_GARDEN_PAGE_INDEX = 0
const val PLANT_LIST_PAGE_INDEX = 1

class SunflowerPagerAdapter(fragment: Fragment) : FragmentStateAdapter(fragment) {

    /**
     * Mapping of the ViewPager page indexes to their respective Fragments
     */
    private val tabFragmentsCreators: Map<Int, () -> Fragment> = mapOf(
        MY_GARDEN_PAGE_INDEX to { GardenFragment() },
        PLANT_LIST_PAGE_INDEX to { PlantListFragment() }
    )

    override fun getItemCount() = tabFragmentsCreators.size

    override fun createFragment(position: Int): Fragment {
        return tabFragmentsCreators[position]?.invoke() ?: throw IndexOutOfBoundsException()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/api/UnsplashService.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.api

import com.google.samples.apps.sunflower.BuildConfig
import com.google.samples.apps.sunflower.data.UnsplashSearchResponse
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import okhttp3.logging.HttpLoggingInterceptor.Level
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import retrofit2.http.Query

/**
 * Used to connect to the Unsplash API to fetch photos
 */
interface UnsplashService {

    @GET("search/photos")
    suspend fun searchPhotos(
        @Query("query") query: String,
        @Query("page") page: Int,
        @Query("per_page") perPage: Int,
        @Query("client_id") clientId: String = BuildConfig.UNSPLASH_ACCESS_KEY
    ): UnsplashSearchResponse

    companion object {
        private const val BASE_URL = "https://api.unsplash.com/"

        fun create(): UnsplashService {
            val logger = HttpLoggingInterceptor().apply { level = Level.BASIC }

            val client = OkHttpClient.Builder()
                .addInterceptor(logger)
                .build()

            return Retrofit.Builder()
                .baseUrl(BASE_URL)
                .client(client)
                .addConverterFactory(GsonConverterFactory.create())
                .build()
                .create(UnsplashService::class.java)
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/AppDatabase.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.sqlite.db.SupportSQLiteDatabase
import androidx.work.OneTimeWorkRequestBuilder
import androidx.work.WorkManager
import androidx.work.workDataOf
import com.google.samples.apps.sunflower.utilities.DATABASE_NAME
import com.google.samples.apps.sunflower.utilities.PLANT_DATA_FILENAME
import com.google.samples.apps.sunflower.workers.SeedDatabaseWorker
import com.google.samples.apps.sunflower.workers.SeedDatabaseWorker.Companion.KEY_FILENAME

/**
 * The Room database for this app
 */
@Database(entities = [GardenPlanting::class, Plant::class], version = 1, exportSchema = false)
@TypeConverters(Converters::class)
abstract class AppDatabase : RoomDatabase() {
    abstract fun gardenPlantingDao(): GardenPlantingDao
    abstract fun plantDao(): PlantDao

    companion object {

        // For Singleton instantiation
        @Volatile private var instance: AppDatabase? = null

        fun getInstance(context: Context): AppDatabase {
            return instance ?: synchronized(this) {
                instance ?: buildDatabase(context).also { instance = it }
            }
        }

        // Create and pre-populate the database. See this article for more details:
        // https://medium.com/google-developers/7-pro-tips-for-room-fbadea4bfbd1#4785
        private fun buildDatabase(context: Context): AppDatabase {
            return Room.databaseBuilder(context, AppDatabase::class.java, DATABASE_NAME)
                .addCallback(
                    object : RoomDatabase.Callback() {
                        override fun onCreate(db: SupportSQLiteDatabase) {
                            super.onCreate(db)
                            val request = OneTimeWorkRequestBuilder<SeedDatabaseWorker>()
                                    .setInputData(workDataOf(KEY_FILENAME to PLANT_DATA_FILENAME))
                                    .build()
                            WorkManager.getInstance(context).enqueue(request)
                        }
                    }
                )
                .build()
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/Converters.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.room.TypeConverter
import java.util.Calendar

/**
 * Type converters to allow Room to reference complex data types.
 */
class Converters {
    @TypeConverter fun calendarToDatestamp(calendar: Calendar): Long = calendar.timeInMillis

    @TypeConverter fun datestampToCalendar(value: Long): Calendar =
        Calendar.getInstance().apply { timeInMillis = value }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/GardenPlanting.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.Index
import androidx.room.PrimaryKey
import java.util.Calendar

/**
 * [GardenPlanting] represents when a user adds a [Plant] to their garden, with useful metadata.
 * Properties such as [lastWateringDate] are used for notifications (such as when to water the
 * plant).
 *
 * Declaring the column info allows for the renaming of variables without implementing a
 * database migration, as the column name would not change.
 */
@Entity(
    tableName = "garden_plantings",
    foreignKeys = [
        ForeignKey(entity = Plant::class, parentColumns = ["id"], childColumns = ["plant_id"])
    ],
    indices = [Index("plant_id")]
)
data class GardenPlanting(
    @ColumnInfo(name = "plant_id") val plantId: String,

    /**
     * Indicates when the [Plant] was planted. Used for showing notification when it's time
     * to harvest the plant.
     */
    @ColumnInfo(name = "plant_date") val plantDate: Calendar = Calendar.getInstance(),

    /**
     * Indicates when the [Plant] was last watered. Used for showing notification when it's
     * time to water the plant.
     */
    @ColumnInfo(name = "last_watering_date")
    val lastWateringDate: Calendar = Calendar.getInstance()
) {
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "id")
    var gardenPlantingId: Long = 0
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/GardenPlantingDao.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.Query
import androidx.room.Transaction
import kotlinx.coroutines.flow.Flow

/**
 * The Data Access Object for the [GardenPlanting] class.
 */
@Dao
interface GardenPlantingDao {
    @Query("SELECT * FROM garden_plantings")
    fun getGardenPlantings(): Flow<List<GardenPlanting>>

    @Query("SELECT EXISTS(SELECT 1 FROM garden_plantings WHERE plant_id = :plantId LIMIT 1)")
    fun isPlanted(plantId: String): Flow<Boolean>

    /**
     * This query will tell Room to query both the [Plant] and [GardenPlanting] tables and handle
     * the object mapping.
     */
    @Transaction
    @Query("SELECT * FROM plants WHERE id IN (SELECT DISTINCT(plant_id) FROM garden_plantings)")
    fun getPlantedGardens(): Flow<List<PlantAndGardenPlantings>>

    @Insert
    suspend fun insertGardenPlanting(gardenPlanting: GardenPlanting): Long

    @Delete
    suspend fun deleteGardenPlanting(gardenPlanting: GardenPlanting)
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/GardenPlantingRepository.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class GardenPlantingRepository @Inject constructor(
    private val gardenPlantingDao: GardenPlantingDao
) {

    suspend fun createGardenPlanting(plantId: String) {
        val gardenPlanting = GardenPlanting(plantId)
        gardenPlantingDao.insertGardenPlanting(gardenPlanting)
    }

    suspend fun removeGardenPlanting(gardenPlanting: GardenPlanting) {
        gardenPlantingDao.deleteGardenPlanting(gardenPlanting)
    }

    fun isPlanted(plantId: String) =
        gardenPlantingDao.isPlanted(plantId)

    fun getPlantedGardens() = gardenPlantingDao.getPlantedGardens()
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/Plant.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import java.util.Calendar
import java.util.Calendar.DAY_OF_YEAR

@Entity(tableName = "plants")
data class Plant(
    @PrimaryKey @ColumnInfo(name = "id") val plantId: String,
    val name: String,
    val description: String,
    val growZoneNumber: Int,
    val wateringInterval: Int = 7, // how often the plant should be watered, in days
    val imageUrl: String = ""
) {

    /**
     * Determines if the plant should be watered.  Returns true if [since]'s date > date of last
     * watering + watering Interval; false otherwise.
     */
    fun shouldBeWatered(since: Calendar, lastWateringDate: Calendar) =
        since > lastWateringDate.apply { add(DAY_OF_YEAR, wateringInterval) }

    override fun toString() = name
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/PlantAndGardenPlantings.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.room.Embedded
import androidx.room.Relation

/**
 * This class captures the relationship between a [Plant] and a user's [GardenPlanting], which is
 * used by Room to fetch the related entities.
 */
data class PlantAndGardenPlantings(
    @Embedded
    val plant: Plant,

    @Relation(parentColumn = "id", entityColumn = "plant_id")
    val gardenPlantings: List<GardenPlanting> = emptyList()
)

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/PlantDao.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

/**
 * The Data Access Object for the Plant class.
 */
@Dao
interface PlantDao {
    @Query("SELECT * FROM plants ORDER BY name")
    fun getPlants(): Flow<List<Plant>>

    @Query("SELECT * FROM plants WHERE growZoneNumber = :growZoneNumber ORDER BY name")
    fun getPlantsWithGrowZoneNumber(growZoneNumber: Int): Flow<List<Plant>>

    @Query("SELECT * FROM plants WHERE id = :plantId")
    fun getPlant(plantId: String): Flow<Plant>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertAll(plants: List<Plant>)
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/PlantRepository.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import javax.inject.Inject
import javax.inject.Singleton

/**
 * Repository module for handling data operations.
 *
 * Collecting from the Flows in [PlantDao] is main-safe.  Room supports Coroutines and moves the
 * query execution off of the main thread.
 */
@Singleton
class PlantRepository @Inject constructor(private val plantDao: PlantDao) {

    fun getPlants() = plantDao.getPlants()

    fun getPlant(plantId: String) = plantDao.getPlant(plantId)

    fun getPlantsWithGrowZoneNumber(growZoneNumber: Int) =
        plantDao.getPlantsWithGrowZoneNumber(growZoneNumber)
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashPagingSource.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.paging.PagingSource
import androidx.paging.PagingState
import com.google.samples.apps.sunflower.api.UnsplashService

private const val UNSPLASH_STARTING_PAGE_INDEX = 1

class UnsplashPagingSource(
    private val service: UnsplashService,
    private val query: String
) : PagingSource<Int, UnsplashPhoto>() {

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, UnsplashPhoto> {
        val page = params.key ?: UNSPLASH_STARTING_PAGE_INDEX
        return try {
            val response = service.searchPhotos(query, page, params.loadSize)
            val photos = response.results
            LoadResult.Page(
                data = photos,
                prevKey = if (page == UNSPLASH_STARTING_PAGE_INDEX) null else page - 1,
                nextKey = if (page == response.totalPages) null else page + 1
            )
        } catch (exception: Exception) {
            LoadResult.Error(exception)
        }
    }

    override fun getRefreshKey(state: PagingState<Int, UnsplashPhoto>): Int? {
        return state.anchorPosition?.let { anchorPosition ->
            // This loads starting from previous page, but since PagingConfig.initialLoadSize spans
            // multiple pages, the initial load will still load items centered around
            // anchorPosition. This also prevents needing to immediately launch prepend due to
            // prefetchDistance.
            state.closestPageToPosition(anchorPosition)?.prevKey
        }
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashPhoto.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import com.google.gson.annotations.SerializedName

/**
 * Data class that represents a photo from Unsplash.
 *
 * Not all of the fields returned from the API are represented here; only the ones used in this
 * project are listed below. For a full list of fields, consult the API documentation
 * [here](https://unsplash.com/documentation#get-a-photo).
 */
data class UnsplashPhoto(
    @field:SerializedName("id") val id: String,
    @field:SerializedName("urls") val urls: UnsplashPhotoUrls,
    @field:SerializedName("user") val user: UnsplashUser
)

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashPhotoUrls.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import com.google.gson.annotations.SerializedName

/**
 * Data class that represents URLs available for a Unsplash photo.
 *
 * Although several photo sizes are available, this project uses only uses the `small` sized photo.
 * For more details, consult the API documentation
 * [here](https://unsplash.com/documentation#example-image-use).
 */
data class UnsplashPhotoUrls(
    @field:SerializedName("small") val small: String
)

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashRepository.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import androidx.paging.Pager
import androidx.paging.PagingConfig
import androidx.paging.PagingData
import com.google.samples.apps.sunflower.api.UnsplashService
import kotlinx.coroutines.flow.Flow
import javax.inject.Inject

class UnsplashRepository @Inject constructor(private val service: UnsplashService) {

    fun getSearchResultStream(query: String): Flow<PagingData<UnsplashPhoto>> {
        return Pager(
            config = PagingConfig(enablePlaceholders = false, pageSize = NETWORK_PAGE_SIZE),
            pagingSourceFactory = { UnsplashPagingSource(service, query) }
        ).flow
    }

    companion object {
        private const val NETWORK_PAGE_SIZE = 25
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashSearchResponse.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import com.google.gson.annotations.SerializedName

/**
 * Data class that represents a photo search response from Unsplash.
 *
 * Not all of the fields returned from the API are represented here; only the ones used in this
 * project are listed below. For a full list of fields, consult the API documentation
 * [here](https://unsplash.com/documentation#search-photos).
 */
data class UnsplashSearchResponse(
    @field:SerializedName("results") val results: List<UnsplashPhoto>,
    @field:SerializedName("total_pages") val totalPages: Int
)

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/data/UnsplashUser.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import com.google.gson.annotations.SerializedName

/**
 * Data class that represents a user from Unsplash.
 *
 * Not all of the fields returned from the API are represented here; only the ones used in this
 * project are listed below. For a full list of fields, consult the API documentation
 * [here](https://unsplash.com/documentation#get-a-users-public-profile).
 */
data class UnsplashUser(
    @field:SerializedName("name") val name: String,
    @field:SerializedName("username") val username: String
) {
    val attributionUrl: String
        get() {
            return "https://unsplash.com/$username?utm_source=sunflower&utm_medium=referral"
        }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/di/DatabaseModule.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.di

import android.content.Context
import com.google.samples.apps.sunflower.data.AppDatabase
import com.google.samples.apps.sunflower.data.GardenPlantingDao
import com.google.samples.apps.sunflower.data.PlantDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@InstallIn(SingletonComponent::class)
@Module
class DatabaseModule {

    @Singleton
    @Provides
    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {
        return AppDatabase.getInstance(context)
    }

    @Provides
    fun providePlantDao(appDatabase: AppDatabase): PlantDao {
        return appDatabase.plantDao()
    }

    @Provides
    fun provideGardenPlantingDao(appDatabase: AppDatabase): GardenPlantingDao {
        return appDatabase.gardenPlantingDao()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/di/NetworkModule.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.di

import com.google.samples.apps.sunflower.api.UnsplashService
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@InstallIn(SingletonComponent::class)
@Module
class NetworkModule {

    @Singleton
    @Provides
    fun provideUnsplashService(): UnsplashService {
        return UnsplashService.create()
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/utilities/Constants.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.utilities

/**
 * Constants used throughout the app.
 */
const val DATABASE_NAME = "sunflower-db"
const val PLANT_DATA_FILENAME = "plants.json"

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/utilities/GrowZoneUtil.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.utilities

import kotlin.math.abs

/**
 * A helper function to determine a Plant's growing zone for a given latitude.
 *
 * The numbers listed here are roughly based on the United States Department of Agriculture's
 * Plant Hardiness Zone Map (http://planthardiness.ars.usda.gov/), which helps determine which
 * plants are most likely to thrive at a location.
 *
 * If a given latitude falls on the border between two zone ranges, the larger zone range is chosen
 * (e.g. latitude 14.0 => zone 12).
 *
 * Negative latitude values are converted to positive with [Math.abs].
 *
 * For latitude values greater than max (90.0), zone 1 is returned.
 */
fun getZoneForLatitude(latitude: Double) = when (abs(latitude)) {
    in 0.0..7.0 -> 13
    in 7.0..14.0 -> 12
    in 14.0..21.0 -> 11
    in 21.0..28.0 -> 10
    in 28.0..35.0 -> 9
    in 35.0..42.0 -> 8
    in 42.0..49.0 -> 7
    in 49.0..56.0 -> 6
    in 56.0..63.0 -> 5
    in 63.0..70.0 -> 4
    in 70.0..77.0 -> 3
    in 77.0..84.0 -> 2
    else -> 1 // Remaining latitudes are assigned to zone 1.
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/GalleryViewModel.kt
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.paging.PagingData
import androidx.paging.cachedIn
import com.google.samples.apps.sunflower.data.UnsplashPhoto
import com.google.samples.apps.sunflower.data.UnsplashRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.Flow
import javax.inject.Inject

@HiltViewModel
class GalleryViewModel @Inject constructor(
    private val repository: UnsplashRepository
) : ViewModel() {
    private var currentQueryValue: String? = null
    private var currentSearchResult: Flow<PagingData<UnsplashPhoto>>? = null

    fun searchPictures(queryString: String): Flow<PagingData<UnsplashPhoto>> {
        currentQueryValue = queryString
        val newResult: Flow<PagingData<UnsplashPhoto>> =
            repository.getSearchResultStream(queryString).cachedIn(viewModelScope)
        currentSearchResult = newResult
        return newResult
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/GardenPlantingListViewModel.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.viewmodels

import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.asLiveData
import com.google.samples.apps.sunflower.data.GardenPlantingRepository
import com.google.samples.apps.sunflower.data.PlantAndGardenPlantings
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject

@HiltViewModel
class GardenPlantingListViewModel @Inject internal constructor(
    gardenPlantingRepository: GardenPlantingRepository
) : ViewModel() {
    val plantAndGardenPlantings: LiveData<List<PlantAndGardenPlantings>> =
        gardenPlantingRepository.getPlantedGardens().asLiveData()
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/PlantAndGardenPlantingsViewModel.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.viewmodels

import com.google.samples.apps.sunflower.data.PlantAndGardenPlantings
import java.text.SimpleDateFormat
import java.util.Locale

class PlantAndGardenPlantingsViewModel(plantings: PlantAndGardenPlantings) {
    private val plant = checkNotNull(plantings.plant)
    private val gardenPlanting = plantings.gardenPlantings[0]

    val waterDateString: String = dateFormat.format(gardenPlanting.lastWateringDate.time)
    val wateringInterval
        get() = plant.wateringInterval
    val imageUrl
        get() = plant.imageUrl
    val plantName
        get() = plant.name
    val plantDateString: String = dateFormat.format(gardenPlanting.plantDate.time)
    val plantId
        get() = plant.plantId

    companion object {
        private val dateFormat = SimpleDateFormat("MMM d, yyyy", Locale.US)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/PlantDetailViewModel.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.viewmodels

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.asLiveData
import androidx.lifecycle.viewModelScope
import com.google.samples.apps.sunflower.BuildConfig
import com.google.samples.apps.sunflower.PlantDetailFragment
import com.google.samples.apps.sunflower.data.GardenPlantingRepository
import com.google.samples.apps.sunflower.data.PlantRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * The ViewModel used in [PlantDetailFragment].
 */
@HiltViewModel
class PlantDetailViewModel @Inject constructor(
    savedStateHandle: SavedStateHandle,
    plantRepository: PlantRepository,
    private val gardenPlantingRepository: GardenPlantingRepository,
) : ViewModel() {

    val plantId: String = savedStateHandle.get<String>(PLANT_ID_SAVED_STATE_KEY)!!

    val isPlanted = gardenPlantingRepository.isPlanted(plantId).asLiveData()
    val plant = plantRepository.getPlant(plantId).asLiveData()

    fun addPlantToGarden() {
        viewModelScope.launch {
            gardenPlantingRepository.createGardenPlanting(plantId)
        }
    }

    fun hasValidUnsplashKey() = (BuildConfig.UNSPLASH_ACCESS_KEY != "null")

    companion object {
        private const val PLANT_ID_SAVED_STATE_KEY = "plantId"
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/viewmodels/PlantListViewModel.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.viewmodels

import androidx.lifecycle.LiveData
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.asLiveData
import androidx.lifecycle.viewModelScope
import com.google.samples.apps.sunflower.PlantListFragment
import com.google.samples.apps.sunflower.data.Plant
import com.google.samples.apps.sunflower.data.PlantRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * The ViewModel for [PlantListFragment].
 */
@HiltViewModel
class PlantListViewModel @Inject internal constructor(
    plantRepository: PlantRepository,
    private val savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val growZone: MutableStateFlow<Int> = MutableStateFlow(
        savedStateHandle.get(GROW_ZONE_SAVED_STATE_KEY) ?: NO_GROW_ZONE
    )

    val plants: LiveData<List<Plant>> = growZone.flatMapLatest { zone ->
        if (zone == NO_GROW_ZONE) {
            plantRepository.getPlants()
        } else {
            plantRepository.getPlantsWithGrowZoneNumber(zone)
        }
    }.asLiveData()

    init {

        /**
         * When `growZone` changes, store the new value in `savedStateHandle`.
         *
         * There are a few ways to write this; all of these are equivalent. (This info is from
         * https://github.com/android/sunflower/pull/671#pullrequestreview-548900174)
         *
         * 1) A verbose version:
         *
         *    viewModelScope.launch {
         *        growZone.onEach { newGrowZone ->
         *            savedStateHandle.set(GROW_ZONE_SAVED_STATE_KEY, newGrowZone)
         *        }
         *    }.collect()
         *
         * 2) A simpler version of 1). Since we're calling `collect`, we can consume
         *    the elements in the `collect`'s lambda block instead of using the `onEach` operator.
         *    This is the version that's used in the live code below.
         *
         * 3) We can avoid creating a new coroutine using the `launchIn` terminal operator. In this
         *    case, `onEach` is needed because `launchIn` doesn't take a lambda to consume the new
         *    element in the Flow; it takes a `CoroutineScope` that's used to create a coroutine
         *    internally.
         *
         *    growZone.onEach { newGrowZone ->
         *        savedStateHandle.set(GROW_ZONE_SAVED_STATE_KEY, newGrowZone)
         *    }.launchIn(viewModelScope)
         */
        viewModelScope.launch {
            growZone.collect { newGrowZone ->
                savedStateHandle.set(GROW_ZONE_SAVED_STATE_KEY, newGrowZone)
            }
        }
    }

    fun setGrowZoneNumber(num: Int) {
        growZone.value = num
    }

    fun clearGrowZoneNumber() {
        growZone.value = NO_GROW_ZONE
    }

    fun isFiltered() = growZone.value != NO_GROW_ZONE

    companion object {
        private const val NO_GROW_ZONE = -1
        private const val GROW_ZONE_SAVED_STATE_KEY = "GROW_ZONE_SAVED_STATE_KEY"
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/views/MaskedCardView.kt
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.views

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Canvas
import android.graphics.Path
import android.graphics.RectF
import android.util.AttributeSet
import com.google.android.material.R
import com.google.android.material.card.MaterialCardView
import com.google.android.material.shape.ShapeAppearanceModel
import com.google.android.material.shape.ShapeAppearancePathProvider

/**
 * A Card view that clips the content of any shape, this should be done upstream in card,
 * working around it for now.
 */
class MaskedCardView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyle: Int = R.attr.materialCardViewStyle
) : MaterialCardView(context, attrs, defStyle) {
    @SuppressLint("RestrictedApi")
    private val pathProvider = ShapeAppearancePathProvider()
    private val path: Path = Path()
    private val shapeAppearance: ShapeAppearanceModel = ShapeAppearanceModel.builder(
        context,
        attrs,
        defStyle,
        R.style.Widget_MaterialComponents_CardView
    ).build()

    private val rectF = RectF(0f, 0f, 0f, 0f)

    override fun onDraw(canvas: Canvas) {
        canvas.clipPath(path)
        super.onDraw(canvas)
    }

    @SuppressLint("RestrictedApi")
    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
        rectF.right = w.toFloat()
        rectF.bottom = h.toFloat()
        pathProvider.calculatePath(shapeAppearance, 1f, rectF, path)
        super.onSizeChanged(w, h, oldw, oldh)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/java/com/google/samples/apps/sunflower/workers/SeedDatabaseWorker.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.workers

import android.content.Context
import android.util.Log
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import com.google.gson.stream.JsonReader
import com.google.samples.apps.sunflower.data.AppDatabase
import com.google.samples.apps.sunflower.data.Plant
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class SeedDatabaseWorker(
        context: Context,
        workerParams: WorkerParameters
) : CoroutineWorker(context, workerParams) {
    override suspend fun doWork(): Result = withContext(Dispatchers.IO) {
        try {
            val filename = inputData.getString(KEY_FILENAME)
            if (filename != null) {
                applicationContext.assets.open(filename).use { inputStream ->
                    JsonReader(inputStream.reader()).use { jsonReader ->
                        val plantType = object : TypeToken<List<Plant>>() {}.type
                        val plantList: List<Plant> = Gson().fromJson(jsonReader, plantType)

                        val database = AppDatabase.getInstance(applicationContext)
                        database.plantDao().insertAll(plantList)

                        Result.success()
                    }
                }
            } else {
                Log.e(TAG, "Error seeding database - no valid filename")
                Result.failure()
            }
        } catch (ex: Exception) {
            Log.e(TAG, "Error seeding database", ex)
            Result.failure()
        }
    }

    companion object {
        private const val TAG = "SeedDatabaseWorker"
        const val KEY_FILENAME = "PLANT_DATA_FILENAME"
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_in_left.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate android:fromXDelta="-100%" android:toXDelta="0%"
        android:fromYDelta="0%" android:toYDelta="0%"
        android:duration="@integer/slide"/>
</set>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_in_right.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate android:fromXDelta="100%" android:toXDelta="0%"
        android:fromYDelta="0%" android:toYDelta="0%"
        android:duration="@integer/slide"/>
</set>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_out_left.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate android:fromXDelta="0%" android:toXDelta="-100%"
        android:fromYDelta="0%" android:toYDelta="0%"
        android:duration="@integer/slide"/>
</set>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/anim/slide_out_right.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<set xmlns:android="http://schemas.android.com/apk/res/android">
    <translate android:fromXDelta="0%" android:toXDelta="100%"
        android:fromYDelta="0%" android:toYDelta="0%"
        android:duration="@integer/slide"/>
</set>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/animator/show_toolbar.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<selector xmlns:android="http://schemas.android.com/apk/res/android">

    <item android:state_activated="true">

        <objectAnimator
            android:propertyName="translationZ"
            android:valueTo="@dimen/toolbar_elevation"
            android:valueType="floatType" />

    </item>

    <item android:state_activated="false">

        <objectAnimator
            android:propertyName="translationZ"
            android:valueTo="0dp"
            android:valueType="floatType" />

    </item>

</selector>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/garden_tab_selector.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<selector xmlns:android="http://schemas.android.com/apk/res/android" >
    <item android:drawable="@drawable/ic_my_garden_active" android:state_selected="true"/>
    <item android:drawable="@drawable/ic_my_garden_inactive"/>
</selector>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_detail_back.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="32dp"
    android:height="32dp"
    android:viewportWidth="32.0"
    android:viewportHeight="32.0">

    <path
        android:name="circle"
        android:fillColor="?attr/colorSurface"
        android:pathData="M16,16m-16,0a16,16 0,1 1,32 0a16,16 0,1 1,-32 0"/>

    <path
        android:name="arrow"
        android:fillColor="?attr/colorOnSurface"
        android:pathData="M20,14.66H10.44l7.45,-7.45L16,5.33l-10.66,10.66 10.66,10.66 1.88,-1.88L10.44,17.33H26.66v-2.66z"/>
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_detail_back_no_circle.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="32dp"
    android:height="32dp"
    android:viewportWidth="32.0"
    android:viewportHeight="32.0">

    <path
        android:name="arrow"
        android:fillColor="@color/sunflower_white"
        android:pathData="M20,14.66H10.44l7.45,-7.45L16,5.33l-10.66,10.66 10.66,10.66 1.88,-1.88L10.44,17.33H26.66v-2.66z"/>
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_detail_share.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="32dp"
    android:height="32dp"
    android:viewportWidth="32.0"
    android:viewportHeight="32.0">

  <path
      android:name="circle"
      android:fillColor="?attr/colorSurface"
      android:pathData="M16,16m-16,0a16,16 0,1 1,32 0a16,16 0,1 1,-32 0"/>

  <path
      android:name="share"
      android:fillColor="?attr/colorOnSurface"
      android:pathData="M22,20.1365C21.24,20.1365 20.56,20.4378 20.04,20.9096L12.91,16.743C12.96,16.512 13,16.2811 13,16.0402C13,15.7992 12.96,15.5683 12.91,15.3373L19.96,11.2108C20.5,11.7129 21.21,12.0241 22,12.0241C23.66,12.0241 25,10.6787 25,9.012C25,7.3454 23.66,6 22,6C20.34,6 19,7.3454 19,9.012C19,9.253 19.04,9.4839 19.09,9.7149L12.04,13.8414C11.5,13.3394 10.79,13.0281 10,13.0281C8.34,13.0281 7,14.3735 7,16.0402C7,17.7068 8.34,19.0522 10,19.0522C10.79,19.0522 11.5,18.741 12.04,18.239L19.16,22.4157C19.11,22.6265 19.08,22.8474 19.08,23.0683C19.08,24.6847 20.39,26 22,26C23.61,26 24.92,24.6847 24.92,23.0683C24.92,21.4518 23.61,20.1365 22,20.1365Z"/>

</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_filter_list_24dp.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FFFFFFFF"
        android:pathData="M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z"/>
</vector>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_launcher_background.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportHeight="108.0"
    android:viewportWidth="108.0">
    <path
        android:fillColor="#26A69A"
        android:pathData="M0,0h108v108h-108z"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeColor="#33FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeColor="#33FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeColor="#33FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeColor="#33FFFFFF"
        android:strokeWidth="0.8" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeColor="#66FFFFFF"
        android:strokeWidth="0.8" />
</vector>


--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_my_garden_active.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector android:height="28dp" android:viewportHeight="21"
    android:viewportWidth="18" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
    <path
        android:pathData="M9,21C13.97,21 18,16.97 18,12C13.03,12 9,16.03 9,21ZM2.6,9.25C2.6,10.63 3.72,11.75 5.1,11.75C5.63,11.75 6.11,11.59 6.52,11.31L6.5,11.5C6.5,12.88 7.62,14 9,14C10.38,14 11.5,12.88 11.5,11.5L11.48,11.31C11.88,11.59 12.37,11.75 12.9,11.75C14.28,11.75 15.4,10.63 15.4,9.25C15.4,8.25 14.81,7.4 13.97,7C14.81,6.6 15.4,5.75 15.4,4.75C15.4,3.37 14.28,2.25 12.9,2.25C12.37,2.25 11.89,2.41 11.48,2.69L11.5,2.5C11.5,1.12 10.38,0 9,0C7.62,0 6.5,1.12 6.5,2.5L6.52,2.69C6.12,2.41 5.63,2.25 5.1,2.25C3.72,2.25 2.6,3.37 2.6,4.75C2.6,5.75 3.19,6.6 4.03,7C3.19,7.4 2.6,8.25 2.6,9.25ZM9,4.5C10.38,4.5 11.5,5.62 11.5,7C11.5,8.38 10.38,9.5 9,9.5C7.62,9.5 6.5,8.38 6.5,7C6.5,5.62 7.62,4.5 9,4.5ZM0,12C0,16.97 4.03,21 9,21C9,16.03 4.97,12 0,12Z"
        android:fillColor="?attr/colorOnPrimary"
        android:fillType="nonZero" />
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_my_garden_inactive.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector android:height="28dp" android:viewportHeight="23"
    android:viewportWidth="20" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
    <path
        android:pathData="M10,22C14.97,22 19,17.97 19,13C14.03,13 10,17.03 10,22ZM3.6,10.25C3.6,11.63 4.72,12.75 6.1,12.75C6.63,12.75 7.11,12.59 7.52,12.31L7.5,12.5C7.5,13.88 8.62,15 10,15C11.38,15 12.5,13.88 12.5,12.5L12.48,12.31C12.88,12.59 13.37,12.75 13.9,12.75C15.28,12.75 16.4,11.63 16.4,10.25C16.4,9.25 15.81,8.4 14.97,8C15.81,7.6 16.4,6.75 16.4,5.75C16.4,4.37 15.28,3.25 13.9,3.25C13.37,3.25 12.89,3.41 12.48,3.69L12.5,3.5C12.5,2.12 11.38,1 10,1C8.62,1 7.5,2.12 7.5,3.5L7.52,3.69C7.12,3.41 6.63,3.25 6.1,3.25C4.72,3.25 3.6,4.37 3.6,5.75C3.6,6.75 4.19,7.6 5.03,8C4.19,8.4 3.6,9.25 3.6,10.25ZM10,5.5C11.38,5.5 12.5,6.62 12.5,8C12.5,9.38 11.38,10.5 10,10.5C8.62,10.5 7.5,9.38 7.5,8C7.5,6.62 8.62,5.5 10,5.5ZM1,13C1,17.97 5.03,22 10,22C10,17.03 5.97,13 1,13Z"
        android:fillColor="#00000000"
        android:fillType="nonZero"
        android:strokeColor="?attr/colorPrimaryDark"
        android:strokeWidth="1" />
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_photo_library.xml
<!--
  ~ Copyright 2020 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
  <path
      android:pathData="M22,16L22,4c0,-1.1 -0.9,-2 -2,-2L8,2c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2zM11,12l2.03,2.71L16,11l4,5L8,16l3,-4zM2,6v14c0,1.1 0.9,2 2,2h14v-2L4,20L4,6L2,6z"
      android:fillColor="?attr/colorOnSurface"/>
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_plant_list_active.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector android:height="24dp" android:viewportHeight="24"
    android:viewportWidth="20" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
    <path
        android:pathData="M18.3246,20.6607C14.6597,24.2525 7.0157,24.716 2.7225,20.4289C3.6649,19.8496 4.6073,19.2703 6.2827,19.3861C6.911,18.6909 7.8534,18.2275 9.3194,18.4592C10.3665,11.9707 7.4346,9.1899 4.9215,8.6106C6.0733,9.3058 7.7487,10.4645 8.2723,13.3611C1.6754,13.9404 1.1518,10.001 0,6.4092C4.5026,5.3664 7.8534,6.2933 9.8429,10.001C10.3665,1.4269 15.6021,0.7317 20,0.5C19.267,4.3236 19.4764,10.4645 12.4607,11.3914C12.5654,8.7265 13.6126,6.2933 16.2304,4.0918C10.9948,5.714 10.5759,13.9404 11.5183,18.4592C12.6702,18.4592 13.4031,18.4592 14.1361,19.3861C16.1257,19.1544 17.801,20.0813 18.3246,20.6607Z"
        android:fillColor="?attr/colorOnPrimary"
        android:fillType="evenOdd" />
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_plant_list_inactive.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector android:height="24dp" android:viewportHeight="24"
    android:viewportWidth="22" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
    <path
        android:pathData="M19.3246,20.6607C15.6597,24.2525 8.0157,24.716 3.7225,20.4289C4.6649,19.8496 5.6073,19.2703 7.2827,19.3861C7.911,18.6909 8.8534,18.2275 10.3194,18.4592C11.3665,11.9707 8.4346,9.1899 5.9215,8.6106C7.0733,9.3058 8.7487,10.4645 9.2723,13.3611C2.6754,13.9404 2.1518,10.001 1,6.4092C5.5026,5.3664 8.8534,6.2933 10.8429,10.001C11.3665,1.4269 16.6021,0.7317 21,0.5C20.267,4.3236 20.4764,10.4645 13.4607,11.3914C13.5654,8.7265 14.6126,6.2933 17.2304,4.0918C11.9948,5.714 11.5759,13.9404 12.5183,18.4592C13.6702,18.4592 14.4031,18.4592 15.1361,19.3861C17.1257,19.1544 18.801,20.0813 19.3246,20.6607Z"
        android:fillColor="#00000000"
        android:fillType="evenOdd"
        android:strokeColor="?attr/colorPrimaryDark"
        android:strokeWidth="1" />
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/ic_plus.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="24dp"
        android:height="24dp"
        android:viewportWidth="24.0"
        android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
</vector>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/plant_list_tab_selector.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<selector xmlns:android="http://schemas.android.com/apk/res/android" >
    <item android:drawable="@drawable/ic_plant_list_active" android:state_selected="true"/>
    <item android:drawable="@drawable/ic_plant_list_inactive"/>
</selector>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/drawable/tab_icon_color_selector.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:color="?attr/colorOnPrimary" android:state_activated="true" />
    <item android:color="?attr/colorPrimaryDark"/>
</selector>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/activity_garden.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<layout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <androidx.fragment.app.FragmentContainerView
        android:id="@+id/nav_host"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:defaultNavHost="true"
        app:navGraph="@navigation/nav_garden" />

</layout>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_gallery.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2020 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <androidx.coordinatorlayout.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fitsSystemWindows="true">

        <com.google.android.material.appbar.AppBarLayout
            android:id="@+id/appbar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:fitsSystemWindows="true"
            android:theme="@style/Theme.Sunflower.AppBarOverlay">

            <com.google.android.material.appbar.MaterialToolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:navigationIcon="@drawable/ic_detail_back_no_circle"
                app:title="@string/gallery_title" />
            
        </com.google.android.material.appbar.AppBarLayout>

        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/photo_list"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:clipToPadding="false"
            android:paddingEnd="@dimen/card_side_margin"
            android:paddingStart="@dimen/card_side_margin"
            android:paddingTop="@dimen/gallery_header_margin"
            app:layoutManager="androidx.recyclerview.widget.StaggeredGridLayoutManager"
            app:spanCount="@integer/grid_columns"
            tools:context="com.google.samples.apps.sunflower.GardenActivity"
            tools:listitem="@layout/list_item_photo"/>

    </androidx.coordinatorlayout.widget.CoordinatorLayout>

</layout>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_garden.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <data>

        <variable
                name="hasPlantings"
                type="boolean" />

    </data>

    <FrameLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">

        <androidx.recyclerview.widget.RecyclerView
                android:id="@+id/garden_list"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:clipToPadding="false"
                android:layout_marginStart="@dimen/card_side_margin"
                android:layout_marginEnd="@dimen/card_side_margin"
                android:layout_marginTop="@dimen/margin_normal"
                app:isGone="@{!hasPlantings}"
                app:layoutManager="androidx.recyclerview.widget.StaggeredGridLayoutManager"
                app:spanCount="@integer/grid_columns"
                tools:listitem="@layout/list_item_garden_planting"/>

        <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:gravity="center"
                android:orientation="vertical"
                app:isGone="@{hasPlantings}">

            <TextView
                    android:id="@+id/empty_garden"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/garden_empty"
                    android:textAppearance="?attr/textAppearanceHeadline5" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/add_plant"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="?attr/colorPrimary"
                android:text="@string/add_plant"
                app:backgroundTint="?attr/colorOnPrimary"
                app:shapeAppearance="@style/ShapeAppearance.Sunflower.Button.Add"/>

        </LinearLayout>

    </FrameLayout>

</layout>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_plant_detail.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <data>
        <import type="com.google.samples.apps.sunflower.data.Plant"/>
        <variable
            name="viewModel"
            type="com.google.samples.apps.sunflower.viewmodels.PlantDetailViewModel" />
        <variable
            name="callback"
            type="com.google.samples.apps.sunflower.PlantDetailFragment.Callback" />
    </data>

    <androidx.coordinatorlayout.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fitsSystemWindows="true"
        android:background="?attr/colorSurface"
        tools:context="com.google.samples.apps.sunflower.GardenActivity"
        tools:ignore="MergeRootFrame">

        <com.google.android.material.appbar.AppBarLayout
            android:id="@+id/appbar"
            android:layout_width="match_parent"
            android:layout_height="@dimen/plant_detail_app_bar_height"
            android:fitsSystemWindows="true"
            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
            android:stateListAnimator="@animator/show_toolbar"
            android:background="?attr/colorSurface"
            android:animateLayoutChanges="true">

            <com.google.android.material.appbar.CollapsingToolbarLayout
                android:id="@+id/toolbar_layout"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:fitsSystemWindows="true"
                app:contentScrim="?attr/colorSurface"
                app:statusBarScrim="?attr/colorSurface"
                app:collapsedTitleGravity="center"
                app:collapsedTitleTextAppearance="@style/TextAppearance.Sunflower.Toolbar.Text"
                app:layout_scrollFlags="scroll|exitUntilCollapsed"
                app:title="@{viewModel.plant.name}"
                app:titleEnabled="false"
                app:toolbarId="@id/toolbar">

                <ImageView
                    android:id="@+id/detail_image"
                    android:layout_width="match_parent"
                    android:layout_height="@dimen/plant_detail_app_bar_height"
                    android:contentDescription="@string/plant_detail_image_content_description"
                    android:fitsSystemWindows="true"
                    android:scaleType="centerCrop"
                    app:imageFromUrl="@{viewModel.plant.imageUrl}"
                    app:layout_collapseMode="parallax" />

                <com.google.android.material.appbar.MaterialToolbar
                    android:id="@+id/toolbar"
                    android:layout_width="match_parent"
                    android:layout_height="?attr/actionBarSize"
                    android:background="@android:color/transparent"
                    app:titleTextColor="?attr/colorOnSurface"
                    app:layout_collapseMode="pin"
                    app:contentInsetStartWithNavigation="0dp"
                    app:navigationIcon="@drawable/ic_detail_back"
                    app:menu="@menu/menu_plant_detail" />

            </com.google.android.material.appbar.CollapsingToolbarLayout>

        </com.google.android.material.appbar.AppBarLayout>

        <androidx.core.widget.NestedScrollView
            android:id="@+id/plant_detail_scrollview"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:clipToPadding="false"
            android:paddingBottom="@dimen/fab_bottom_padding"
            app:layout_behavior="@string/appbar_scrolling_view_behavior">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_margin="@dimen/margin_normal">

                <TextView
                    android:id="@+id/plant_detail_name"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="@dimen/margin_small"
                    android:layout_marginEnd="@dimen/margin_small"
                    android:gravity="center_horizontal"
                    android:clickable="true"
                    android:focusable="true"
                    android:text="@{viewModel.plant.name}"
                    android:textAppearance="?attr/textAppearanceHeadline5"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toTopOf="parent"
                    tools:text="Apple" />

                <TextView
                    android:id="@+id/plant_watering_header"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="@dimen/margin_small"
                    android:layout_marginTop="@dimen/margin_normal"
                    android:layout_marginEnd="@dimen/margin_small"
                    android:gravity="center_horizontal"
                    android:text="@string/watering_needs_prefix"
                    android:textColor="?attr/colorAccent"
                    android:textStyle="bold"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@id/plant_detail_name" />

                <TextView
                    android:id="@+id/plant_watering"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="@dimen/margin_small"
                    android:layout_marginEnd="@dimen/margin_small"
                    android:gravity="center_horizontal"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@id/plant_watering_header"
                    app:wateringText="@{viewModel.plant.wateringInterval}"
                    tools:text="every 7 days" />

                <ImageView
                    android:id="@+id/gallery_nav"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginEnd="@dimen/margin_small"
                    android:layout_marginTop="@dimen/margin_normal"
                    android:clickable="true"
                    android:contentDescription="@string/gallery_content_description"
                    android:focusable="true"
                    android:src="@drawable/ic_photo_library"
                    app:isGone="@{!viewModel.hasValidUnsplashKey()}"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintTop_toBottomOf="@id/plant_detail_name" />

                <TextView
                    android:id="@+id/plant_description"
                    style="?android:attr/textAppearanceMedium"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="@dimen/margin_small"
                    android:layout_marginTop="@dimen/margin_small"
                    android:layout_marginEnd="@dimen/margin_small"
                    android:textIsSelectable="true"
                    android:minHeight="@dimen/plant_description_min_height"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@id/plant_watering"
                    app:renderHtml="@{viewModel.plant.description}"
                    tools:text="Details about the plant" />

            </androidx.constraintlayout.widget.ConstraintLayout>

        </androidx.core.widget.NestedScrollView>

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/fab"
            style="@style/Widget.MaterialComponents.FloatingActionButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="@dimen/fab_margin"
            android:onClick="@{() -> callback.add(viewModel.plant)}"
            android:tint="@android:color/white"
            app:shapeAppearance="@style/ShapeAppearance.Sunflower.FAB"
            app:isFabGone="@{viewModel.isPlanted}"
            app:layout_anchor="@id/appbar"
            app:layout_anchorGravity="bottom|end"
            app:srcCompat="@drawable/ic_plus" />

    </androidx.coordinatorlayout.widget.CoordinatorLayout>

</layout>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_plant_list.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <FrameLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

    <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/plant_list"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:clipToPadding="false"
            android:paddingEnd="@dimen/card_side_margin"
            android:paddingStart="@dimen/card_side_margin"
            android:paddingTop="@dimen/header_margin"
            app:layoutManager="androidx.recyclerview.widget.StaggeredGridLayoutManager"
            app:spanCount="@integer/grid_columns"
            tools:context="com.google.samples.apps.sunflower.GardenActivity"
            tools:listitem="@layout/list_item_plant"/>

    </FrameLayout>
</layout>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/fragment_view_pager.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<layout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <!--
     Note: even though the IDs for the CoordinatorLayout and the AppBarLayout unused in HomeViewPagerFragment, they are
     both required to preserve the toolbar scroll / collapse state when navigating to a new screen and then coming back.
    -->
    <androidx.coordinatorlayout.widget.CoordinatorLayout
        android:id="@+id/coordinator_layout"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fitsSystemWindows="true">

        <androidx.viewpager2.widget.ViewPager2
            android:id="@+id/view_pager"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_behavior="@string/appbar_scrolling_view_behavior"/>

        <com.google.android.material.appbar.AppBarLayout
            android:id="@+id/app_bar_layout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:fitsSystemWindows="true"
            android:theme="@style/Theme.Sunflower.AppBarOverlay">

            <com.google.android.material.appbar.CollapsingToolbarLayout
                android:id="@+id/toolbar_layout"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:layout_scrollFlags="scroll|snap"
                app:toolbarId="@id/toolbar">

                <com.google.android.material.appbar.MaterialToolbar
                    android:id="@+id/toolbar"
                    style="@style/Widget.MaterialComponents.Toolbar.Primary"
                    android:layout_width="match_parent"
                    android:layout_height="?attr/actionBarSize"
                    app:contentInsetStart="0dp"
                    app:layout_collapseMode="parallax">

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="?attr/actionBarSize"
                    android:gravity="center"
                    android:text="@string/app_name"
                    android:textAppearance="?attr/textAppearanceHeadline5" />

                </com.google.android.material.appbar.MaterialToolbar>

            </com.google.android.material.appbar.CollapsingToolbarLayout>

            <!-- Override tabIconTint attribute of style with selector -->
            <com.google.android.material.tabs.TabLayout
                android:id="@+id/tabs"
                style="@style/Widget.MaterialComponents.TabLayout.Colored"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:tabIconTint="@drawable/tab_icon_color_selector"
                app:tabTextColor="?attr/colorPrimaryDark"/>

        </com.google.android.material.appbar.AppBarLayout>

    </androidx.coordinatorlayout.widget.CoordinatorLayout>

</layout>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/list_item_garden_planting.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <data>
        <variable
            name="clickListener"
            type="android.view.View.OnClickListener"/>
        <variable
            name="viewModel"
            type="com.google.samples.apps.sunflower.viewmodels.PlantAndGardenPlantingsViewModel"/>
    </data>

    <com.google.samples.apps.sunflower.views.MaskedCardView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/card_side_margin"
        android:layout_marginEnd="@dimen/card_side_margin"
        android:layout_marginBottom="@dimen/card_bottom_margin"
        android:onClick="@{clickListener}"
        app:cardElevation="@dimen/card_elevation"
        app:cardPreventCornerOverlap="false"
        app:shapeAppearanceOverlay="@style/ShapeAppearance.Sunflower.Card">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <ImageView
                android:id="@+id/imageView"
                android:layout_width="0dp"
                android:layout_height="@dimen/plant_item_image_height"
                android:contentDescription="@string/a11y_plant_item_image"
                android:scaleType="centerCrop"
                app:imageFromUrl="@{viewModel.imageUrl}"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent" />

            <TextView
                android:id="@+id/plant_name"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/margin_normal"
                android:text="@{viewModel.plantName}"
                android:gravity="center_horizontal"
                android:textAppearance="@style/TextAppearance.MaterialComponents.Subtitle1"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/imageView"/>

            <TextView
                android:id="@+id/plant_date_header"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/margin_normal"
                android:text="@string/plant_date_header"
                android:textStyle="bold"
                android:gravity="center_horizontal"
                android:textAppearance="?attr/textAppearanceSubtitle2"
                android:textColor="?attr/colorAccent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/plant_name"/>

            <TextView
                android:id="@+id/plant_date"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginTop="0dp"
                android:text="@{viewModel.plantDateString}"
                android:gravity="center_horizontal"
                android:textAppearance="?attr/textAppearanceSubtitle2"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/plant_date_header"/>

            <TextView
                android:id="@+id/watered_date_header"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/margin_normal"
                android:text="@string/watered_date_header"
                android:textStyle="bold"
                android:textAppearance="?attr/textAppearanceSubtitle2"
                android:textColor="?attr/colorAccent"
                android:gravity="center_horizontal"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/plant_date"/>

            <TextView
                android:id="@+id/water_date"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginTop="0dp"
                android:text="@{viewModel.waterDateString}"
                android:gravity="center_horizontal"
                android:textAppearance="?attr/textAppearanceSubtitle2"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/watered_date_header" />

            <TextView
                android:id="@+id/water_interval"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginTop="0dp"
                android:layout_marginBottom="@dimen/margin_normal"
                android:text="@{@plurals/watering_next(viewModel.wateringInterval, viewModel.wateringInterval)}"
                android:gravity="center_horizontal"
                android:textAppearance="?attr/textAppearanceSubtitle2"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@id/water_date"
                app:layout_constraintBottom_toBottomOf="parent"/>

        </androidx.constraintlayout.widget.ConstraintLayout>

    </com.google.samples.apps.sunflower.views.MaskedCardView>

</layout>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/list_item_photo.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2020 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <data>
        <variable
            name="clickListener"
            type="android.view.View.OnClickListener"/>
        <variable
            name="photo"
            type="com.google.samples.apps.sunflower.data.UnsplashPhoto"/>
    </data>

    <com.google.samples.apps.sunflower.views.MaskedCardView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/card_side_margin"
        android:layout_marginEnd="@dimen/card_side_margin"
        android:layout_marginBottom="@dimen/card_bottom_margin"
        android:onClick="@{clickListener}"
        app:cardElevation="@dimen/card_elevation"
        app:cardPreventCornerOverlap="false"
        app:shapeAppearanceOverlay="@style/ShapeAppearance.Sunflower.Card">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <ImageView
                    android:id="@+id/plant_photo"
                    android:layout_width="0dp"
                    android:layout_height="@dimen/plant_item_image_height"
                    android:contentDescription="@string/a11y_plant_item_image"
                    android:scaleType="centerCrop"
                    app:imageFromUrl="@{photo.urls.small}"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toTopOf="parent" />

                <TextView
                    android:id="@+id/photographer"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="@dimen/margin_normal"
                    android:layout_marginTop="@dimen/margin_normal"
                    android:text="@{photo.user.name}"
                    android:textAppearance="?attr/textAppearanceListItem"
                    android:gravity="center_horizontal"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@id/plant_photo"
                    app:layout_constraintBottom_toBottomOf="parent"
                    tools:text="Sunny F."/>

            </androidx.constraintlayout.widget.ConstraintLayout>

    </com.google.samples.apps.sunflower.views.MaskedCardView>

</layout>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/layout/list_item_plant.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <data>
        <variable
            name="clickListener"
            type="android.view.View.OnClickListener"/>
        <variable
            name="plant"
            type="com.google.samples.apps.sunflower.data.Plant"/>
    </data>

    <com.google.samples.apps.sunflower.views.MaskedCardView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginStart="@dimen/card_side_margin"
        android:layout_marginEnd="@dimen/card_side_margin"
        android:layout_marginBottom="@dimen/card_bottom_margin"
        android:onClick="@{clickListener}"
        app:cardElevation="@dimen/card_elevation"
        app:cardPreventCornerOverlap="false"
        app:shapeAppearanceOverlay="@style/ShapeAppearance.Sunflower.Card">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <ImageView
                    android:id="@+id/plant_item_image"
                    android:layout_width="0dp"
                    android:layout_height="@dimen/plant_item_image_height"
                    android:contentDescription="@string/a11y_plant_item_image"
                    android:scaleType="centerCrop"
                    app:imageFromUrl="@{plant.imageUrl}"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toTopOf="parent" />

                <TextView
                    android:id="@+id/plant_item_title"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginBottom="@dimen/margin_normal"
                    android:layout_marginTop="@dimen/margin_normal"
                    android:text="@{plant.name}"
                    android:textAppearance="?attr/textAppearanceListItem"
                    android:gravity="center_horizontal"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toBottomOf="@id/plant_item_image"
                    app:layout_constraintBottom_toBottomOf="parent"
                    tools:text="Tomato"/>

            </androidx.constraintlayout.widget.ConstraintLayout>

    </com.google.samples.apps.sunflower.views.MaskedCardView>

</layout>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/menu/menu_plant_detail.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <item
        android:id="@+id/action_share"
        android:icon="@drawable/ic_detail_share"
        android:title="@string/menu_item_share_plant"
        app:showAsAction="ifRoom" />

</menu>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/menu/menu_plant_list.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <item android:id="@+id/filter_zone"
        android:icon="@drawable/ic_filter_list_24dp"
        app:showAsAction="always"
        android:title="@string/menu_filter_by_grow_zone"/>

</menu>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@mipmap/ic_launcher_background" />
    <foreground android:drawable="@mipmap/ic_launcher_foreground" />
</adaptive-icon>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@mipmap/ic_launcher_background" />
    <foreground android:drawable="@mipmap/ic_launcher_foreground" />
</adaptive-icon>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher_background.png
iVBORw0KGgoAAAANSUhEUgAAAKIAAACiCAYAAADC8hYbAAABPUlEQVR42u3SQREAAAQAQfm00FI7YnjYxxa4ucjqgWshAkYEI2JEMCJGBCNiRDAiRgQjYkQwIkYEI2JEMCJGBCNiRDAiRgQjYkQwIkYEI2JEMCJGBCNiRDAiGBEjghExIhgRI4IRMSIYESOCETEiGBEjghExIhgRI4IRMSIYESOCETEiGBEjghExIhgRI4IRMaIIGBGMiBHBiBgRjIgRwYgYEYyIEcGIGBGMiBHBiBgRjIgRwYgYEYyIEcGIGBGMiBHBiBgRjIgRwYhgRIwIRsSIYESMCEbEiGBEjAhGxIhgRIwIRsSIYESMCEbEiGBEjAhGxIhgRIwIRsSIYESMCEbEiGBEMCJGBCNiRDAiRgQjYkQwIkYEI2JEMCJGBCNiRDAiRgQjYkQwIkYEI2JEMCJGBCNiRDAiRgQj8t0CrYhU1Up/J7sAAAAASUVORK5CYII=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher_foreground.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-hdpi/ic_launcher_round.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher.png
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
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher_background.png
iVBORw0KGgoAAAANSUhEUgAAAGwAAABsCAYAAACPZlfNAAAAtklEQVR42u3RQREAAAQAQfm00FI7ajCzjytwG1k9+lOYAEzABAyYgAkYMAETMGACJmDABEzAgAmYgAETMAEDJmACBkzABAyYCcAETMCACZiAARMwAQMmYAIGTMAEDJiACRgwARMwYAImYMAETMCACZiACRgwARMwYAImYMAETMCACZiAARMwAQMmYAIGTMAEDJiACRgwARMwAQMmYAIGTMAEDJiACRgwARMwYAImYMAETMCA6WIL6uCXdQJ7AokAAAAASUVORK5CYII=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher_foreground.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-mdpi/ic_launcher_round.png
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
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher_background.png
iVBORw0KGgoAAAANSUhEUgAAANgAAADYCAYAAACJIC3tAAABzElEQVR42u3TMQ0AAAjAMPThApe4AxU8pEcNLFlk9QA3QgQwGBgMMBgYDAwGGAwMBgYDDAYGA4MBBgODgcEAg4HBwGAigMHAYIDBwGBgMMBgYDAwGGAwMBgYDDAYGAwMBhgMDAYGEwEMBgYDDAYGA4MBBgODgcEAg4HBwGCAwcBgYDDAYGAwMJgQYDAwGGAwMBgYDDAYGAwMBhgMDAYGAwwGBgODAQYDg4HBAIOBwQCDgcHAYIDBwGBgMMBgYDAwGGAwMBgYDDAYGAwMBhgMDAYYDAwGBgMMBgYDgwEGA4OBwQCDgcHAYIDBwGBgMMBgYDDAYGAwMBhgMDAYGAwwGBgMDAYYDAwGBgMMBgYDgwEGA4MBBgODgcEAg4HBwGCAwcBgYDDAYGAwMBhgMDAYGAwwGBgMMBgYDAwGGAwMBgYDDAYGA4MBBgODgcEAg4HBwGCAwcBggMHAYGAwwGBgMDAYYDAwGBgMMBgYDAwGGAwMBgYDDAYGAwwGBgODAQYDg4HBAIOBwcBggMHAYGAwwGBgMDAYYDAwGGAwMBgYDDAYGAwMBhgMDAYGAwwGBgODAQYDg4HBAIOBwQCDgcHAYIDBwGBgMMBgYDD4aQFkYV3vGhX4UgAAAABJRU5ErkJggg==
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher_background.png
iVBORw0KGgoAAAANSUhEUgAAAUQAAAFECAYAAABf6kfGAAADUElEQVR42u3UMREAAAjEMPThApfvDnxwGWKgQ6snC0C2RAAwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwTAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRAAMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMUQgAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQxQBwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBBFADBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEEQAMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEMEcAQAQwRwBABDBHAEAEwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEMEMEQAQwQwRABDBDBEAEME+OAA3upTYBFoK0EAAAAASUVORK5CYII=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher_background.png
iVBORw0KGgoAAAANSUhEUgAAAbAAAAGwCAYAAADITjAqAAAFFklEQVR42u3VMQ0AAAjAMPThApe4AxUcJD1qYM8iqwcAvgkRADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwADAwAAwMAAwMAAwPAwADAwADAwAAwMAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADA8DAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAADEwIAAwMAAwMAAwMAAMDAAMDAAMDwMAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAwPAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAAMDAADAwADAwADA8DAAMDAAMDAADAwADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDwMAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAwPAwADAwADAwAAwMAAwMAAwMAAMTAQADAwADAwADAwAAwMAAwMAAwPAwADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwADA8DAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAwMAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwPAwADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwADA8DAAMDAAMDAADAwADAwADAwAAxMBAAMDAAMDAAMDAADAwADAwADA8DAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwADAwAAwMAAwMAAwPAwADAwADAwAAwMAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADA8DAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAADEwEAAwMAAwMAAwMAAMDAAMDAAMDwMAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAwPAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAAMDAADAwADAwADA8DAAMDAAMDAADAwADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDwMAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwAAxMCAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwPAwADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwADA8DAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAwMAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwPAwADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAADEwEAAwMAAwMAAwPAwADAwADAwAAwMAAwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADA8DAAMDAAMDAAMDAADAwADAwADAwAAwMAAwMAAwMAAMDAAMDAAMDAAMDwMAAwMAAwMAAMDAAMDAAMDAADAwADAwADAwADAwAAwMAAwMAAwPAwADAwADAwAAwMAAwMAC4tZ12d8i+lehZAAAAAElFTkSuQmCC
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/navigation/nav_garden.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<navigation xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    app:startDestination="@id/view_pager_fragment">

    <fragment
        android:id="@+id/view_pager_fragment"
        android:name="com.google.samples.apps.sunflower.HomeViewPagerFragment"
        tools:layout="@layout/fragment_view_pager">

        <action
                android:id="@+id/action_view_pager_fragment_to_plant_detail_fragment"
                app:destination="@id/plant_detail_fragment"
                app:enterAnim="@anim/slide_in_right"
                app:exitAnim="@anim/slide_out_left"
                app:popEnterAnim="@anim/slide_in_left"
                app:popExitAnim="@anim/slide_out_right" />
    </fragment>

    <fragment
        android:id="@+id/plant_detail_fragment"
        android:name="com.google.samples.apps.sunflower.PlantDetailFragment"
        android:label="@string/plant_details_title"
        tools:layout="@layout/fragment_plant_detail">

        <action
            android:id="@+id/action_plant_detail_fragment_to_gallery_fragment"
            app:destination="@id/gallery_fragment"
            app:enterAnim="@anim/slide_in_right"
            app:exitAnim="@anim/slide_out_left"
            app:popEnterAnim="@anim/slide_in_left"
            app:popExitAnim="@anim/slide_out_right" />
        <argument
            android:name="plantId"
            app:argType="string" />
    </fragment>

    <fragment
        android:id="@+id/gallery_fragment"
        android:name="com.google.samples.apps.sunflower.GalleryFragment"
        android:label="@string/plant_details_title"
        tools:layout="@layout/fragment_gallery">
        <argument
            android:name="plantName"
            app:argType="string" />
    </fragment>

</navigation>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/anim.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!-- Values used for animations -->
<resources>

    <!-- Duration (in milliseconds) for slide transition animation -->
    <integer name="slide">200</integer>
</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/colors.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <color name="sunflower_black">#de000000</color>
    <color name="sunflower_gray_50">#fafafa</color>
    <color name="sunflower_gray_50_a600">#99fafafa</color>
    <color name="sunflower_green_300">#6dc790</color>
    <color name="sunflower_green_500">#49bb79</color>
    <color name="sunflower_green_700">#005d2b</color>
    <color name="sunflower_green_900">#1a231e</color>
    <color name="sunflower_white">#deffffff</color>
    <color name="sunflower_yellow_300">#f8f99f</color>
    <color name="sunflower_yellow_500">#ffff63</color>
</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/dimens.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <!-- Per Material Design specs: -->
    <!-- https://material.io/design/components/buttons-floating-action-button.html#specs -->
    <dimen name="fab_margin">16dp</dimen>

    <!-- Padding on the bottom of a screen so that the FAB won't overlap scrolled text. -->
    <dimen name="fab_bottom_padding">72dp</dimen>

    <dimen name="plant_detail_app_bar_height">278dp</dimen>

    <dimen name="margin_normal">16dp</dimen>
    <dimen name="margin_small">8dp</dimen>
    <dimen name="margin_extra_small">4dp</dimen>

    <dimen name="plant_item_image_height">95dp</dimen>

    <dimen name="card_side_margin">12dp</dimen>
    <dimen name="card_bottom_margin">26dp</dimen>
    <dimen name="card_elevation">2dp</dimen>
    <dimen name="card_corner_radius">12dp</dimen>

    <!-- elevation for Plant Detail toolbar - used to convert to pixels when hiding/showing -->
    <dimen name="toolbar_elevation">5dp</dimen>

    <!-- Plant List Header margin -->
    <dimen name="header_margin">24dp</dimen>

    <dimen name="gallery_header_margin">72dp</dimen>

    <!-- minimum height of plant detail page so that the collapsing toolbar can be shown on every page -->
    <dimen name="plant_description_min_height">555dp</dimen>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/integers.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <!-- Number of columns for garden and plant list grid -->
    <integer name="grid_columns">2</integer>

</resources>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/shape.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <style name="ShapeAppearance.Sunflower.Card" parent="ShapeAppearance.MaterialComponents">
        <item name="cornerFamily">rounded</item>

        <item name="cornerSizeTopLeft">0dp</item>
        <item name="cornerSizeTopRight">@dimen/card_corner_radius</item>
        <item name="cornerSizeBottomRight">0dp</item>
        <item name="cornerSizeBottomLeft">@dimen/card_corner_radius</item>
    </style>

    <style name="ShapeAppearance.Sunflower.Button.Add" parent="ShapeAppearance.MaterialComponents">
        <item name="cornerFamily">rounded</item>

        <item name="cornerSizeTopLeft">0dp</item>
        <item name="cornerSizeTopRight">@dimen/button_corner_radius</item>
        <item name="cornerSizeBottomRight">0dp</item>
        <item name="cornerSizeBottomLeft">@dimen/button_corner_radius</item>
    </style>

    <style
        name="ShapeAppearance.Sunflower.FAB"
        parent="ShapeAppearance.MaterialComponents.SmallComponent" />

    <!-- Add plant button -->
    <dimen name="button_corner_radius">12dp</dimen>

</resources>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/strings.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <!-- Resources that do not require translation -->
    <string name="app_name" translatable="false">Sunflower</string>

    <!-- Translatable resources -->
    <string name="menu_filter_by_grow_zone" translation_description="The label for the menu item to filter the displayed plants by grow zone.">Filter by grow zone</string>
    <string name="my_garden_title" translation_description="Title for the 'My garden' screen where the user can see the list of plants that have been added to their garden.">My garden</string>
    <string name="plant_list_title" translation_description="Title for the plant list screen where the user can see a list of plants available to add to their garden.">Plant list</string>
    <string name="available" translation_description="Text for the header of the plant list page indicating the available plants for users to choose from.">Available Plants</string>
    <string name="plant_details_title" translation_description="Title for the plant details screen where the user can see the details for a specific plant.">Plant details</string>
    <string name="add_plant" translation_description="Button text that prompts user to navigate to the Plant List to add plants to their empty garden.">Add plant</string>
    <string name="added_plant_to_garden" translation_description="Confirmation text that is shown when a user adds a plant to their empty garden.">Added plant to garden</string>
    <string name="garden_empty" translation_description="Text that is shown on the 'My Garden' screen when no plants have been added to the user's garden">Your garden is empty</string>
    <string name="plant_date_header" translation_description="Text that is shown on each plant on the 'My Garden' screen which says the word Planted to show date of planting below">Planted</string>
    <string name="watered_date_header" translation_description="Text that is shown on each plant on the 'My Garden' screen which says the word Last Watered to show date of last watering below">Last Watered</string>
    <string name="menu_item_share_plant" translation_description="The label for the Share menu item">Share</string>
    <string name="share_text_plant" translation_description="The default messaged used when sharing a plant on SNS, etc.">Check out the %s plant in the Android Sunflower app</string>
    <string name="gallery_title" translation_description="Title for the photo gallery screen">Photos by Unsplash</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix" translation_description="Prefix for the text describing how often a plant should be watered. Used in combination with watering_needs_suffix.">Watering needs</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one" translation_description="Suffix for the text describing how often a plant should be watered, singular. Used in combination with watering_needs_prefix: 'Watering needs: every day'.">every day</item>
        <item quantity="other" translation_description="Suffix for the text describing how often a plant should be watered, plural. Used in combination with watering_needs_prefix: 'Watering needs: every 8 days'.">every %d days</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one" translation_description="Text indicating when the the plant should next be watered, singular. Used in conjunction with last watered date. 'May 24, 2018 - water tomorrow.'.">water tomorrow.</item>
        <item quantity="other" translation_description="Text indicating when the the plant should next be watered, plural. Used in conjunction with last watered date. 'May 24, 2018 - water in 8 days.'.">water in %d days.</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image" translation_description="Accessibility text for each of the plant images shown in the 'My garden' and 'Plant list' screens.">Picture of plant</string>
    <string name="gallery_content_description" translation_description="Content description for the clickable image to navigate to the gallery screen">Navigate to gallery screen</string>
    <string name="plant_detail_image_content_description" translation_description="Content description for the header / hero image that is show at the top of the plant detail screen.">Image of plant</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values/styles.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <!-- To see how these attributes are used, please visit https://material.io/develop/android/theming/color/ -->
    <style name="Base.Theme.Sunflower" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <item name="colorPrimary">@color/sunflower_green_500</item>
        <item name="colorOnPrimary">@color/sunflower_yellow_500</item>
        <item name="colorPrimaryDark">@color/sunflower_green_700</item>
        <item name="colorOnSurface">@color/sunflower_black</item>
        <item name="colorAccent">@color/sunflower_green_700</item>
        <item name="colorSurface">@color/sunflower_gray_50</item>
        <item name="colorSecondary">@color/sunflower_yellow_500</item>
        <item name="android:colorBackground">@color/sunflower_green_500</item>
    </style>

    <style name="Theme.Sunflower" parent="Base.Theme.Sunflower"/>

    <style name="Theme.Sunflower.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>

    <style name="Theme.Sunflower.AppBarOverlay" parent="ThemeOverlay.MaterialComponents.Dark.ActionBar"/>

    <style name="TextAppearance.Sunflower.Toolbar.Text" parent="TextAppearance.MaterialComponents.Headline5" >
        <item name="android:textColor">?attr/colorOnSurface</item>
    </style>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-bn/strings.xml
<!--
  ~ Copyright 2020 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <!-- Translatable resources -->
    <string name="menu_filter_by_grow_zone">গাছ বৃদ্ধি এলাকা বাছাই</string>
    <string name="plant_detail_image_content_description">গাছের ছবি</string>
    <string name="my_garden_title">আমার বাগান</string>
    <string name="plant_list_title">গাছের তালিকা</string>
    <string name="available">মজুদ চারাগাছ</string>
    <string name="plant_details_title">গাছের বিস্তারিত</string>
    <string name="add_plant">গাছ লাগান</string>
    <string name="added_plant_to_garden">বাগানে এই গাছ টি লাগানো হয়েছে</string>
    <string name="garden_empty">আপনার বাগানে কোনো গাছ নেই</string>
    <string name="plant_date_header">বপন সম্পন্ন হয়েছে</string>
    <string name="watered_date_header">সর্বশেষ জল দেত্তয়া</string>
    <string name="menu_item_share_plant">শেয়ার</string>
    <string name="share_text_plant">অ্যানড্রয়েড সানফ্লাওয়ার অ্যাপে আমার %s গাছ টি দেখুন</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">জল দেয়া প্রয়োজন</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">প্রতি দিন</item>
        <item quantity="other">প্রতি %d দিন</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">আগামী কাল জল দিন।</item>
        <item quantity="other">জল দিন %d দিন পর।</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">গাছের ছবি</string>

</resources>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-ca/strings.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">Filtra per zona de creixement</string>
    <string name="plant_detail_image_content_description">Imatge de la planta</string>
    <string name="my_garden_title">El meu jardí</string>
    <string name="plant_list_title">Llista de plantes</string>
    <string name="available">Plantes disponibles</string>
    <string name="plant_details_title">Detalls de la planta</string>
    <string name="add_plant">Afegeix una planta</string>
    <string name="added_plant_to_garden">La planta s\'ha afegit al jardí</string>
    <string name="garden_empty">El jardí és buit</string>
    <string name="plant_date_header">Plantada</string>
    <string name="watered_date_header">Regada per darrera vegada</string>
    <string name="menu_item_share_plant">Comparteix</string>
    <string name="share_text_plant">Mira la planta %s a l\'aplicació Android Sunflower</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Cal regar-la</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">diàriament</item>
        <item quantity="other">cada %d dies</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">cal regar-la demà.</item>
        <item quantity="other">cal regar-la d\'aquí a %d dies.</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Imatge de la planta</string>
    <string name="gallery_title">(translate me) Photos by Unsplash</string>
    <string name="gallery_content_description">(translate me) Navigate to gallery screen</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-de/strings.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">Nach Wachstumszone filtern</string>
    <string name="plant_detail_image_content_description">Bild der Pflanze</string>
    <string name="my_garden_title">Mein Garten</string>
    <string name="plant_list_title">Pflanzenliste</string>
    <string name="available">Verfügbare Pflanzen</string>
    <string name="plant_details_title">Details zur Pflanze</string>
    <string name="add_plant">Pflanze hinzufügen</string>
    <string name="added_plant_to_garden">Pflanze wurde zum Garten hinzugefügt</string>
    <string name="garden_empty">Ihr Garten ist unbepflanzt</string>
    <string name="plant_date_header">Gepflanzt</string>
    <string name="watered_date_header">Zuletzt gegossen</string>
    <string name="menu_item_share_plant">Teilen</string>
    <string name="share_text_plant">Schau dir die %s Pflanze in der App "Sunflower" an</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Wasserbedarf</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">jeden Tag</item>
        <item quantity="other">alle %d Tage</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">Morgen gießen</item>
        <item quantity="other">In %d Tagen gießen</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Bild der Pflanze</string>
    <string name="gallery_title">(translate me) Photos by Unsplash</string>
    <string name="gallery_content_description">(translate me) Navigate to gallery screen</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-es/strings.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">Filtrar por zona de crecimiento</string>
    <string name="plant_detail_image_content_description">Imagen de la planta</string>
    <string name="my_garden_title">Mi jardín</string>
    <string name="plant_list_title">Lista de plantas</string>
    <string name="available">Plantas disponibles</string>
    <string name="plant_details_title">Detalles de la planta</string>
    <string name="add_plant">Añadir planta</string>
    <string name="added_plant_to_garden">Planta añadida al jardín</string>
    <string name="garden_empty">Tu jardín esta vacío</string>
    <string name="plant_date_header">Plantada</string>
    <string name="watered_date_header">Última vez regada</string>
    <string name="menu_item_share_plant">Compartir</string>
    <string name="share_text_plant">Revisa la planta %s en la aplicación Android Sunflower</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Necesita ser regada</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">diariamente.</item>
        <item quantity="other">cada %d días.</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">regar mañana.</item>
        <item quantity="other">regar en %d días.</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Imagen de la planta</string>
    <string name="gallery_title">(translate me) Photos by Unsplash</string>
    <string name="gallery_content_description">(translate me) Navigate to gallery screen</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-fr/strings.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">Filtrer par zone de croissance</string>
    <string name="my_garden_title">Mon jardin</string>
    <string name="plant_detail_image_content_description">Image de plante</string>
    <string name="plant_list_title">Liste des plantes</string>
    <string name="available">Plantes disponibles</string>
    <string name="plant_details_title">Détails sur la plante</string>
    <string name="add_plant">Ajouter une plante</string>
    <string name="added_plant_to_garden">Plante ajoutée à votre jardin</string>
    <string name="garden_empty">Votre jardin est vide</string>
    <string name="plant_date_header">Plantée</string>
    <string name="watered_date_header">Dernier arrosage</string>
    <string name="menu_item_share_plant">Partager</string>
    <string name="share_text_plant">Regardez la plante %s sur l\'application Sunflower</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Arrosage nécessaire</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">%d fois par jour</item>
        <item quantity="other">Tous les %d jours</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">à arroser dans %d jour.</item>
        <item quantity="other">à arroser dans %d jours.</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Image de plante</string>
    <string name="gallery_title">(translate me) Photos by Unsplash</string>
    <string name="gallery_content_description">(translate me) Navigate to gallery screen</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-it/strings.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">Filtra per zona di crescita</string>
    <string name="plant_detail_image_content_description">Immagine della pianta</string>
    <string name="my_garden_title">Il mio giardino</string>
    <string name="plant_list_title">Lista delle piante</string>
    <string name="available">(translate me) Available Plants</string>
    <string name="plant_details_title">Dettagli della pianta</string>
    <string name="menu_item_share_plant">Condividi</string>
    <string name="plant_date_header">(translate me) Planted</string>
    <string name="watered_date_header">(translate me) Last Watered</string>
    <string name="garden_empty">Il tuo giardino è vuoto</string>
    <string name="add_plant">(translate me) Add plant</string>
    <string name="added_plant_to_garden">Pianta aggiunta al giardino</string>
    <string name="share_text_plant">Controlla la pianta %s nell\'app Sunflower</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Esigenze di irrigazione</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">ogni giorno</item>
        <item quantity="other">ogni %d giorni</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">annaffia domani.</item>
        <item quantity="other">annaffia tra %d giorni.</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Immagine della pianta</string>
    <string name="gallery_title">(translate me) Photos by Unsplash</string>
    <string name="gallery_content_description">(translate me) Navigate to gallery screen</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-ja/strings.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">成長度合いによって分ける</string>
    <string name="plant_detail_image_content_description">植物のイメージ</string>
    <string name="my_garden_title">私の庭</string>
    <string name="plant_list_title">植物のリスト</string>
    <string name="available">選択できる植物</string>
    <string name="plant_details_title">植物の詳細</string>
    <string name="add_plant">植物を追加する</string>
    <string name="added_plant_to_garden">植物が庭に追加されました</string>
    <string name="garden_empty">あなたの庭に植物はありません</string>
    <string name="plant_date_header">植えた日</string>
    <string name="watered_date_header">最後に水をあげた日</string>
    <string name="menu_item_share_plant">共有</string>
    <string name="share_text_plant">%s という植物を「Sunflower」アプリで見てみてください</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <!-- Item quantities for zero and one are not used in Japanese -->
    <string name="watering_needs_prefix">水の必要量</string>
    <plurals name="watering_needs_suffix">
        <item quantity="other">%d日ごと</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="other">%d日後に水をあげてください</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">植物の写真</string>
    <string name="gallery_title">(translate me) Photos by Unsplash</string>
    <string name="gallery_content_description">(translate me) Navigate to gallery screen</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-night/styles.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <!-- To see how these attributes are used, please visit https://material.io/develop/android/theming/color/ -->
    <style name="Base.Theme.Sunflower" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <item name="colorPrimary">@color/sunflower_green_900</item>
        <item name="colorOnPrimary">@color/sunflower_yellow_300</item>
        <item name="colorPrimaryDark">@color/sunflower_gray_50_a600</item>
        <item name="colorOnSurface">@color/sunflower_white</item>
        <item name="colorAccent">@color/sunflower_green_300</item>
        <item name="colorSurface">@color/sunflower_green_900</item>
        <item name="colorSecondary">@color/sunflower_yellow_300</item>
        <item name="android:colorBackground">@color/sunflower_green_900</item>
    </style>

    <style name="Theme.Sunflower" parent="Base.Theme.Sunflower"/>

    <style name="Theme.Sunflower.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>

    <style name="Theme.Sunflower.AppBarOverlay" parent="ThemeOverlay.MaterialComponents.Dark.ActionBar"/>

    <style name="TextAppearance.Sunflower.Toolbar.Text" parent="TextAppearance.MaterialComponents.Headline5" >
        <item name="android:textColor">?attr/colorOnSurface</item>
    </style>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-night-v21/styles.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <style name="Theme.Sunflower" parent="Base.Theme.Sunflower">
        <item name="android:windowTranslucentStatus">true</item>
    </style>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-ru/strings.xml
<!--
  ~ Copyright 2020 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">Отфильтровать по зоне выращивания</string>
    <string name="plant_detail_image_content_description">Изображение растения</string>
    <string name="my_garden_title">Мои сад</string>
    <string name="plant_list_title">Растения</string>
    <string name="available">Доступные растения</string>
    <string name="add_plant">Добавить растение</string>
    <string name="garden_empty">Ваш сад пуст</string>
    <string name="menu_item_share_plant">Поделиться</string>
    <string name="plant_details_title">О растении</string>
    <string name="added_plant_to_garden">Растение добавлено в ваш сад</string>
    <string name="plant_date_header">Посажен</string>
    <string name="watered_date_header">Последний полив</string>
    <string name="share_text_plant">Попробуйте %s в приложении Android Sunflower</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Необходим полив</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">раз в %d день</item>
        <item quantity="few">каждый %d дня</item>
        <item quantity="many">каждые %d дней</item>
        <item quantity="other">каждые %d дней</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">полить через %d день</item>
        <item quantity="few">полить через %d дня</item>
        <item quantity="many">полить через %d дней</item>
        <item quantity="other">полить через %d дней</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Изображение растения</string>
    <string name="gallery_title">(translate me) Photos by Unsplash</string>
    <string name="gallery_content_description">(translate me) Navigate to gallery screen</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-sv-rSE/strings.xml
<!--
  ~ Copyright 2021 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <string name="menu_filter_by_grow_zone">Filtrera efter odlingszon</string>
    <string name="plant_detail_image_content_description">Foto på växten</string>
    <string name="my_garden_title">Min trädgård</string>
    <string name="plant_list_title">Växtlista</string>
    <string name="available">Tillgängliga växter</string>
    <string name="plant_details_title">Växtdetaljer</string>
    <string name="add_plant">Lägg till växt</string>
    <string name="added_plant_to_garden">Växt tillagd i trädgård</string>
    <string name="garden_empty">Din trädgård är tom</string>
    <string name="plant_date_header">Planterad</string>
    <string name="watered_date_header">Senast vattnad</string>
    <string name="menu_item_share_plant">Dela</string>
    <string name="share_text_plant">Titta på %s-växten i Android Sunflower-appen</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Vattningsbehov</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">varje dag.</item>
        <item quantity="other">efter %d dagar</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">vattna imorgon.</item>
        <item quantity="other">vattna om %d dagar.</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Bild på växt</string>
    <string name="gallery_title">Foton från Unsplash</string>
    <string name="gallery_content_description">Navigera till galleriet</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-tr-rTR/strings.xml
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">Yetişme bölgesine göre filtrele</string>
    <string name="plant_detail_image_content_description">Bitkinin görüntüsü</string>
    <string name="my_garden_title">Bahçem</string>
    <string name="plant_list_title">Bitki listesi</string>
    <string name="available">Mevcut Bitkiler</string>
    <string name="plant_details_title">Bitki detayları</string>
    <string name="add_plant">Bitki Ekle</string>
    <string name="added_plant_to_garden">Bitki bahçeye eklendi</string>
    <string name="garden_empty">Bahçen boş</string>
    <string name="plant_date_header">Ekiliş Tarihi</string>
    <string name="watered_date_header">Son Sulama Tarihi</string>
    <string name="menu_item_share_plant">Paylaş</string>
    <string name="share_text_plant">%s bitkisini Android Sunflower uygulamasında inceleyin</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <string name="watering_needs_prefix">Sulama gereksinimi:</string>
    <plurals name="watering_needs_suffix">
        <item quantity="one">her gün</item>
        <item quantity="other">%d günde bir</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="one">yarın sulayın.</item>
        <item quantity="other">%d gün içinde sulayın.</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">Bitkinin görüntüsü</string>
    <string name="gallery_title">Unsplash Fotoğrafları</string>
    <string name="gallery_content_description">Galeri ekranına git</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-v21/styles.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <style name="Theme.Sunflower" parent="Base.Theme.Sunflower">
        <item name="android:windowTranslucentStatus">true</item>
    </style>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-v29/shape.xml
<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2019 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>

    <style name="ShapeAppearance.Sunflower.FAB" parent="ShapeAppearance.MaterialComponents">
        <item name="cornerFamily">rounded</item>

        <item name="cornerSizeTopLeft">0dp</item>
        <item name="cornerSizeTopRight">@dimen/fab_corner_radius</item>
        <item name="cornerSizeBottomRight">0dp</item>
        <item name="cornerSizeBottomLeft">@dimen/fab_corner_radius</item>
    </style>

    <!-- Plus button on detail page -->
    <dimen name="fab_corner_radius">30dp</dimen>

</resources>
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-zh-rCN/strings.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">按生长区筛选</string>
    <string name="plant_detail_image_content_description">植物图片</string>
    <string name="my_garden_title">我的花园</string>
    <string name="plant_list_title">植物目录</string>
    <string name="available">植物品种</string>
    <string name="plant_details_title">植物介绍</string>
    <string name="add_plant">添加植物</string>
    <string name="added_plant_to_garden">添加了新植物</string>
    <string name="garden_empty">花园里还没有植物</string>
    <string name="plant_date_header">种下日期</string>
    <string name="watered_date_header">最后浇水</string>
    <string name="menu_item_share_plant">分享</string>
    <string name="share_text_plant">在安卓 Sunflower APP 上看看这 %s</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <!-- Item quantities for zero and one are not used in Chinese -->
    <string name="watering_needs_prefix">浇水指南</string>
    <plurals name="watering_needs_suffix">
        <item quantity="other">每隔 %d 天</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="other">%d 天后浇水</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">植物图片</string>
    <string name="gallery_title">图片来源：Unsplash</string>
    <string name="gallery_content_description">跳转到图库</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/main/res/values-zh-rTW/strings.xml
<!--
  ~ Copyright 2018 Google LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="menu_filter_by_grow_zone">按生長區篩選</string>
    <string name="plant_detail_image_content_description">植物圖片</string>
    <string name="my_garden_title">我的花園</string>
    <string name="plant_list_title">植物目錄</string>
    <string name="available">植物品種</string>
    <string name="plant_details_title">植物介紹</string>
    <string name="add_plant">添加植物</string>
    <string name="added_plant_to_garden">添加了新植物</string>
    <string name="garden_empty">花園裡還沒有植物</string>
    <string name="plant_date_header">種下日期</string>
    <string name="watered_date_header">最後澆水</string>
    <string name="menu_item_share_plant">分享</string>
    <string name="share_text_plant">在安卓 Sunflower APP 上看看這 %s</string>

    <!-- String plurals and their related prefix / suffix strings -->
    <!-- Item quantities for zero and one are not used in Chinese -->
    <string name="watering_needs_prefix">澆水指南</string>
    <plurals name="watering_needs_suffix">
        <item quantity="other">每隔 %d 天</item>
    </plurals>

    <plurals name="watering_next">
        <item quantity="other">%d 天後澆水</item>
    </plurals>

    <!-- Accessibility -->
    <string name="a11y_plant_item_image">植物圖片</string>
    <string name="gallery_title">圖片來源：Unsplash</string>
    <string name="gallery_content_description">跳轉到圖庫</string>

</resources>

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/data/ConvertersTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import org.junit.Assert.assertEquals
import org.junit.Test
import java.util.Calendar
import java.util.Calendar.DAY_OF_MONTH
import java.util.Calendar.MONTH
import java.util.Calendar.SEPTEMBER
import java.util.Calendar.YEAR

class ConvertersTest {

    private val cal = Calendar.getInstance().apply {
        set(YEAR, 1998)
        set(MONTH, SEPTEMBER)
        set(DAY_OF_MONTH, 4)
    }

    @Test fun calendarToDatestamp() {
        assertEquals(cal.timeInMillis, Converters().calendarToDatestamp(cal))
    }

    @Test fun datestampToCalendar() {
        assertEquals(Converters().datestampToCalendar(cal.timeInMillis), cal)
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/data/GardenPlantingTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import org.hamcrest.CoreMatchers.equalTo
import org.junit.Assert.assertEquals
import org.junit.Assert.assertThat
import org.junit.Test
import java.util.Calendar
import java.util.Calendar.DAY_OF_MONTH
import java.util.Calendar.MONTH
import java.util.Calendar.YEAR

class GardenPlantingTest {

    @Test
    fun testDefaultValues() {
        val gardenPlanting = GardenPlanting("1")
        val cal = Calendar.getInstance()
        assertYMD(cal, gardenPlanting.plantDate)
        assertYMD(cal, gardenPlanting.lastWateringDate)
        assertEquals(0L, gardenPlanting.gardenPlantingId)
    }

    // Only Year/Month/Day precision is needed for comparing GardenPlanting Calendar entries
    private fun assertYMD(expectedCal: Calendar, actualCal: Calendar) {
        assertThat(actualCal.get(YEAR), equalTo(expectedCal.get(YEAR)))
        assertThat(actualCal.get(MONTH), equalTo(expectedCal.get(MONTH)))
        assertThat(actualCal.get(DAY_OF_MONTH), equalTo(expectedCal.get(DAY_OF_MONTH)))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/data/PlantTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.data

import org.junit.Assert.assertEquals
import org.junit.Assert.assertFalse
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test
import java.util.Calendar
import java.util.Calendar.DAY_OF_YEAR

class PlantTest {

    private lateinit var plant: Plant

    @Before fun setUp() {
        plant = Plant("1", "Tomato", "A red vegetable", 1, 2, "")
    }

    @Test fun test_default_values() {
        val defaultPlant = Plant("2", "Apple", "Description", 1)
        assertEquals(7, defaultPlant.wateringInterval)
        assertEquals("", defaultPlant.imageUrl)
    }

    @Test fun test_shouldBeWatered() {
        Calendar.getInstance().let { now ->
            // Generate lastWateringDate from being as copy of now.
            val lastWateringDate = Calendar.getInstance()

            // Test for lastWateringDate is today.
            lastWateringDate.time = now.time
            assertFalse(plant.shouldBeWatered(now, lastWateringDate.apply { add(DAY_OF_YEAR, -0) }))

            // Test for lastWateringDate is yesterday.
            lastWateringDate.time = now.time
            assertFalse(plant.shouldBeWatered(now, lastWateringDate.apply { add(DAY_OF_YEAR, -1) }))

            // Test for lastWateringDate is the day before yesterday.
            lastWateringDate.time = now.time
            assertFalse(plant.shouldBeWatered(now, lastWateringDate.apply { add(DAY_OF_YEAR, -2) }))

            // Test for lastWateringDate is some days ago, three days ago, four days ago etc.
            lastWateringDate.time = now.time
            assertTrue(plant.shouldBeWatered(now, lastWateringDate.apply { add(DAY_OF_YEAR, -3) }))
        }
    }

    @Test fun test_toString() {
        assertEquals("Tomato", plant.toString())
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/app/src/test/java/com/google/samples/apps/sunflower/utilities/GrowZoneUtilTest.kt
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.samples.apps.sunflower.utilities

import org.junit.Assert.assertEquals
import org.junit.Test

class GrowZoneUtilTest {

    @Test fun getZoneForLatitude() {
        assertEquals(13, getZoneForLatitude(0.0))
        assertEquals(13, getZoneForLatitude(7.0))
        assertEquals(12, getZoneForLatitude(7.1))
        assertEquals(1, getZoneForLatitude(84.1))
        assertEquals(1, getZoneForLatitude(90.0))
    }

    @Test fun getZoneForLatitude_negativeLatitudes() {
        assertEquals(13, getZoneForLatitude(-7.0))
        assertEquals(12, getZoneForLatitude(-7.1))
        assertEquals(1, getZoneForLatitude(-84.1))
        assertEquals(1, getZoneForLatitude(-90.0))
    }

    // Bugfix test for https://github.com/android/sunflower/issues/8
    @Test fun getZoneForLatitude_GitHub_issue8() {
        assertEquals(9, getZoneForLatitude(35.0))
        assertEquals(8, getZoneForLatitude(42.0))
        assertEquals(7, getZoneForLatitude(49.0))
        assertEquals(6, getZoneForLatitude(56.0))
        assertEquals(5, getZoneForLatitude(63.0))
        assertEquals(4, getZoneForLatitude(70.0))
    }
}

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/gradle/wrapper/gradle-wrapper.jar

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/gradle/wrapper/gradle-wrapper.properties
#Tue Oct 13 20:23:10 PDT 2020
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-all.zip

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/screenshots/icon_background.png
iVBORw0KGgoAAAANSUhEUgAAAGwAAABsCAIAAAAABMCaAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAKNJREFUeNrs0EERADAIAKC5eLawpfEM4c+DCERWP3a+AokSJSJRokSJSJQoUSISJUqUiESJEiUiUaJEiUiUKBGJEiVKRKJEiRKRKFGiRCRKlCgRiRIlSkSiRIkSkShRIhIlSpSIRIkSJSJRokSJSJQoUSISJUqUiESJEiUiUaJEJEqUKBGJEiVKRKJEiRKRKFGiRCRKlCgRiRIlIlGixDtGgAEAjhQCO9STQYQAAAAASUVORK5CYII=
--#

--% C:/work/oss/andro1/android-kotlin/sunflower/screenshots/icon_foreground.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/screenshots/ic_launcher-web.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/screenshots/jetpack_donut.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/screenshots/phone_my_garden.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/screenshots/phone_plant_detail.png

--#

--% C:/work/oss/andro1/android-kotlin/sunflower/screenshots/phone_plant_list.png

--#

