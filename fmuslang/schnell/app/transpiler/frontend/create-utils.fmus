--% index/fmus
.,d
	%__TEMPLATE_APPNAME=INPUT
	%__TEMPLATE_APPCODE=INPUT
	fullstack.py,f(f=fullstack.py,@ib=fullstacknewapp="// insert new utils app")
	fslang,d
		backend_statement.py,f(f=backend_statement.py,@ia=backendimport="# new utils imports")
		backend_statement.py,f(f=backend_statement.py,@ia=backendentry="# new gen utils entry")
		utils,d
			__init__.py,f(f=__init__.py,@ia=utilsinitimport="# new imports")
			__TEMPLATE_APPNAME,d(/mk)
				__init__.py,f(e=__FILE__=utils__init__)
				index-input.mk,f(e=__FILE__=utils_indexinput)
				$* code index-input.mk
--#

--% utils_indexinput
`__PWD/__TEMPLATE_APPNAME,d
	%utama=__FILE__
--#

--% utils__init__
from app.libpohon.columnify import (
  columnify_and_transform,
  transform_columns,
  columnify,
)
from app.stringutils import tabify_content, tabify_contentlist
from app.treeutils import tables_from_rootnode
from app.usutils import tab
from app.fileutils import (
  file_content,
  append_entry_tostring,
  # append_entry_tofile,
  file_write,
)
from app.dirutils import (
  ayah, 
  joiner, 
  here,
)
from app.fileutils import get_definition_by_key_permissive_start
from app.fmus import Fmus


disini = here(__file__)


class Coordinator:

  def __init__(self, RootNode, project_dir='INPUT'):
    self.root = RootNode
    # self.tables = tables_from_rootnode(self.root)
    self.project_dir = project_dir
    self.mkfile_input = joiner(disini, 'index-input.mk')
    self.mkfile_output = joiner(disini, 'index.mk')
    self.mkfile_input_content = file_content(self.mkfile_input)
    self.node_app_content = '' # file_content(joiner(disini, 'appcontent.tpl'))

  def output(self):
    return self.mkfile_output

  def change_projectdir(self):
    self.mkfile_input_content = self.mkfile_input_content.replace('__REPLACE_WITH_PROJECT_DIR_OR_INPUT__', self.project_dir)

  def db_init(self):
    from app.libpohon.db_init import db_init
    # template_db_init = db_init(self.root)
    # self.mkfile_input_content = self.mkfile_input_content.replace('__TEMPLATE_DB_INIT', template_db_init)

  def app_init(self):
    from app.libpohon.app_init import app_init
    # template_app_init = app_init(self.tables)
    # self.mkfile_input_content = self.mkfile_input_content.replace('__TEMPLATE_APP_INIT', template_app_init)

  def app_content(self):
    from app.libpohon.app_content import app_content
    # template_node_app_content = app_content(self.tables, self.node_app_content)
    # self.mkfile_input_content = self.mkfile_input_content.replace('__TEMPLATE_SERVER_APP_CONTENT', template_node_app_content)

  def mkfile(self):
    self.change_projectdir()
    self.db_init()
    self.app_init()
    self.app_content()
    print('hasil mkfile:', self.mkfile_output)

  def model(self):
    print('hasil model:', self.mkfile_output)

  def save_file(self):
    file_write(self.mkfile_output, self.mkfile_input_content)
    print('hasil save file:', self.mkfile_output)

  def generate(self):
    self.mkfile()
    self.model()
    self.save_file()
    print('selesai generate __TEMPLATE_APPNAME')
--#


--% fullstacknewapp
	| "__TEMPLATE_APPCODE"			-> utils___TEMPLATE_APPNAME
--#

--% backendimport
	__TEMPLATE_APPNAME_generator,
--#

--% backendentry
	'__TEMPLATE_APPNAME': __TEMPLATE_APPNAME_generator,
--#

--% utilsinitimport
from .__TEMPLATE_APPNAME import Coordinator as __TEMPLATE_APPNAME_generator
--#
