--% index/fmus
.,d(/mk)
	%utama=__FILE__
	chat,d(/mk)
		Cargo.toml,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/Cargo.toml)
		diesel.toml,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/diesel.toml)
		migrations,d(/mk)
			.gitkeep,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/.gitkeep)
			00000000000000_diesel_initial_setup,d(/mk)
				down.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/00000000000000_diesel_initial_setup/down.sql)
				up.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/00000000000000_diesel_initial_setup/up.sql)
			2019-01-06-192329_create_users,d(/mk)
				down.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192329_create_users/down.sql)
				up.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192329_create_users/up.sql)
			2019-01-06-192333_create_channels,d(/mk)
				down.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192333_create_channels/down.sql)
				up.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192333_create_channels/up.sql)
			2019-01-06-192338_create_memberships,d(/mk)
				down.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192338_create_memberships/down.sql)
				up.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192338_create_memberships/up.sql)
			2019-01-06-192344_create_messages,d(/mk)
				down.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192344_create_messages/down.sql)
				up.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192344_create_messages/up.sql)
		src,d(/mk)
			lib.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/src/lib.rs)
			models.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/src/models.rs)
			schema.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/src/schema.rs)
	users,d(/mk)
		Cargo.toml,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/Cargo.toml)
		diesel.toml,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/diesel.toml)
		migrate.sh,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrate.sh)
		migrations,d(/mk)
			.gitkeep,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrations/.gitkeep)
			2018-11-22-192300_create_tables,d(/mk)
				down.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrations/2018-11-22-192300_create_tables/down.sql)
				up.sql,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrations/2018-11-22-192300_create_tables/up.sql)
		src,d(/mk)
			main.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/src/main.rs)
			models.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/src/models.rs)
			schema.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/src/schema.rs)
--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/Cargo.toml
[package]
name = "chat"
version = "0.1.0"
authors = ["Yusef Ulum <yusef314159@gmail.com>"]
edition = "2018"

[dependencies]
chrono = { version = "0.4.6", features = ["serde"] }
clap = "2.32"
diesel = { version = "^1.1.0", features = ["chrono", "postgres", "r2d2"] }
failure = "0.1"
r2d2 = "0.8"
serde = "1.0"
serde_derive = "1.0"
uuid = { version = "0.5", features = ["serde", "v4"] }

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/diesel.toml
# For documentation on how to configure this file,
# see diesel.rs/guides/configuring-diesel-cli

[print_schema]
file = "src/schema.rs"

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/.gitkeep

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/00000000000000_diesel_initial_setup/down.sql
-- This file was automatically created by Diesel to setup helper functions
-- and other internal bookkeeping. This file is safe to edit, any future
-- changes will be added to existing projects as new migrations.

DROP FUNCTION IF EXISTS diesel_manage_updated_at(_tbl regclass);
DROP FUNCTION IF EXISTS diesel_set_updated_at();

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/00000000000000_diesel_initial_setup/up.sql
-- This file was automatically created by Diesel to setup helper functions
-- and other internal bookkeeping. This file is safe to edit, any future
-- changes will be added to existing projects as new migrations.




-- Sets up a trigger for the given table to automatically set a column called
-- `updated_at` whenever the row is modified (unless `updated_at` was included
-- in the modified columns)
--
-- # Example
--
-- ```sql
-- CREATE TABLE users (id SERIAL PRIMARY KEY, updated_at TIMESTAMP NOT NULL DEFAULT NOW());
--
-- SELECT diesel_manage_updated_at('users');
-- ```
CREATE OR REPLACE FUNCTION diesel_manage_updated_at(_tbl regclass) RETURNS VOID AS $$
BEGIN
    EXECUTE format('CREATE TRIGGER set_updated_at BEFORE UPDATE ON %s
                    FOR EACH ROW EXECUTE PROCEDURE diesel_set_updated_at()', _tbl);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION diesel_set_updated_at() RETURNS trigger AS $$
BEGIN
    IF (
        NEW IS DISTINCT FROM OLD AND
        NEW.updated_at IS NOT DISTINCT FROM OLD.updated_at
    ) THEN
        NEW.updated_at := current_timestamp;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192329_create_users/down.sql
DROP TABLE users;

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192329_create_users/up.sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email TEXT NOT NULL UNIQUE
);

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192333_create_channels/down.sql
DROP TABLE channels;

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192333_create_channels/up.sql
CREATE TABLE channels (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users,
  title TEXT NOT NULL,
  is_public BOOL NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

SELECT diesel_manage_updated_at('channels');

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192338_create_memberships/down.sql
DROP TABLE memberships;

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192338_create_memberships/up.sql
CREATE TABLE memberships (
  id SERIAL PRIMARY KEY,
  channel_id INTEGER NOT NULL REFERENCES channels,
  user_id INTEGER NOT NULL REFERENCES users
);

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192344_create_messages/down.sql
DROP TABLE messages;

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/migrations/2019-01-06-192344_create_messages/up.sql
CREATE TABLE messages (
  id SERIAL PRIMARY KEY,
  timestamp TIMESTAMP NOT NULL,
  channel_id INTEGER NOT NULL REFERENCES channels,
  user_id INTEGER NOT NULL REFERENCES users,
  text TEXT NOT NULL
);

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/src/lib.rs
#![feature(custom_attribute)]

#[macro_use]
extern crate diesel;

mod models;
mod schema;

use diesel::{Connection, ExpressionMethods, OptionalExtension, PgConnection, QueryDsl, RunQueryDsl, insert_into};
use chrono::Utc;
use failure::{Error, format_err};
use self::models::{Channel, Id, Membership, Message, User};
use self::schema::{channels, memberships, messages, users};
use std::env;

pub struct Api {
    conn: PgConnection,
}

impl Api {
    pub fn connect() -> Result<Self, Error> {
        let database_url = env::var("DATABASE_URL")
            .unwrap_or("postgres://postgres@localhost:5432".to_string());
        let conn = PgConnection::establish(&database_url)?;
        Ok(Self { conn })
    }

    pub fn register_user(&self, email: &str) -> Result<User, Error> {
        insert_into(users::table)
            .values((
                    users::email.eq(email),
                    ))
            .returning((
                    users::id,
                    users::email
                    ))
            .get_result(&self.conn)
            .map_err(Error::from)
    }

    pub fn create_channel(&self, user_id: Id, title: &str, is_public: bool)
        -> Result<Channel, Error>
    {
        self.conn.transaction::<_, _, _>(|| {
            let channel: Channel = insert_into(channels::table)
                .values((
                        channels::user_id.eq(user_id),
                        channels::title.eq(title),
                        channels::is_public.eq(is_public),
                        ))
                .returning((
                        channels::id,
                        channels::user_id,
                        channels::title,
                        channels::is_public,
                        channels::created_at,
                        channels::updated_at,
                        ))
                .get_result(&self.conn)
                .map_err(Error::from)?;
            self.add_member(channel.id, user_id)?;
            Ok(channel)
        })
    }

    pub fn publish_channel(&self, channel_id: Id) -> Result<(), Error> {
        let channel = channels::table
            .filter(channels::id.eq(channel_id))
            .select((
                    channels::id,
                    channels::user_id,
                    channels::title,
                    channels::is_public,
                    channels::created_at,
                    channels::updated_at,
                    ))
            .first::<Channel>(&self.conn)
            .optional()
            .map_err(Error::from)?;
        if let Some(channel) = channel {
            diesel::update(&channel)
                .set(channels::is_public.eq(true))
                .execute(&self.conn)?;
            Ok(())
        } else {
            Err(format_err!("channel not found"))
        }
    }

    pub fn add_member(&self, channel_id: Id, user_id: Id)
        -> Result<Membership, Error>
    {
        insert_into(memberships::table)
            .values((
                    memberships::channel_id.eq(channel_id),
                    memberships::user_id.eq(user_id),
                    ))
            .returning((
                    memberships::id,
                    memberships::channel_id,
                    memberships::user_id,
                    ))
            .get_result(&self.conn)
            .map_err(Error::from)
    }

    pub fn add_message(&self, channel_id: Id, user_id: Id, text: &str)
        -> Result<Message, Error>
    {
        let timestamp = Utc::now().naive_utc();
        insert_into(messages::table)
            .values((
                    messages::timestamp.eq(timestamp),
                    messages::channel_id.eq(channel_id),
                    messages::user_id.eq(user_id),
                    messages::text.eq(text),
                    ))
            .returning((
                    messages::id,
                    messages::timestamp,
                    messages::channel_id,
                    messages::user_id,
                    messages::text,
                    ))
            .get_result(&self.conn)
            .map_err(Error::from)
    }

    pub fn delete_message(&self, message_id: Id) -> Result<(), Error> {
        diesel::delete(messages::table)
            .filter(messages::id.eq(message_id))
            .execute(&self.conn)?;
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::Api;

    #[test]
    fn create_users() {
        let api = Api::connect().unwrap();
        let user_1 = api.register_user("user_1@example.com").unwrap();
        let user_2 = api.register_user("user_2@example.com").unwrap();
        let channel = api.create_channel(user_1.id, "My Channel", false).unwrap();
        api.publish_channel(channel.id).unwrap();
        api.add_member(channel.id, user_2.id).unwrap();
        let message = api.add_message(channel.id, user_1.id, "Welcome!").unwrap();
        api.add_message(channel.id, user_2.id, "Hi!").unwrap();
        api.delete_message(message.id).unwrap();
    }
}

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/src/models.rs
use chrono::NaiveDateTime;
use crate::schema::{users, channels, memberships, messages};
use serde_derive::{Deserialize, Serialize};

pub type Id = i32;

#[derive(Debug, Identifiable, Queryable, Serialize, Deserialize)]
#[table_name = "users"]
pub struct User {
    pub id: Id,
    pub email: String,
}

#[derive(Debug, Identifiable, Queryable, Associations, Serialize, Deserialize)]
#[belongs_to(User)]
#[table_name = "channels"]
pub struct Channel {
    pub id: Id,
    pub user_id: Id,
    pub title: String,
    pub is_public: bool,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Debug, Identifiable, Queryable, Associations, Serialize, Deserialize)]
#[belongs_to(Channel)]
#[belongs_to(User)]
#[table_name = "memberships"]
pub struct Membership {
    pub id: Id,
    pub channel_id: Id,
    pub user_id: Id,
}

#[derive(Debug, Identifiable, Queryable, Associations, Serialize, Deserialize)]
#[belongs_to(Channel)]
#[belongs_to(User)]
#[table_name = "messages"]
pub struct Message {
    pub id: Id,
    pub timestamp: NaiveDateTime,
    pub channel_id: Id,
    pub user_id: Id,
    pub text: String,
}

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/chat/src/schema.rs
table! {
    channels (id) {
        id -> Int4,
        user_id -> Int4,
        title -> Text,
        is_public -> Bool,
        created_at -> Timestamp,
        updated_at -> Timestamp,
    }
}

table! {
    memberships (id) {
        id -> Int4,
        channel_id -> Int4,
        user_id -> Int4,
    }
}

table! {
    messages (id) {
        id -> Int4,
        timestamp -> Timestamp,
        channel_id -> Int4,
        user_id -> Int4,
        text -> Text,
    }
}

table! {
    users (id) {
        id -> Int4,
        email -> Text,
    }
}

joinable!(channels -> users (user_id));
joinable!(memberships -> channels (channel_id));
joinable!(memberships -> users (user_id));
joinable!(messages -> channels (channel_id));
joinable!(messages -> users (user_id));

allow_tables_to_appear_in_same_query!(
    channels,
    memberships,
    messages,
    users,
);

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/Cargo.toml
[package]
name = "users"
version = "0.1.0"
authors = ["Yusef Ulum <yusef314159@gmail.com>"]
edition = "2018"

[dependencies]
clap = "2.32"
diesel = { version = "^1.1.0", features = ["sqlite", "r2d2"] }
failure = "0.1"
r2d2 = "0.8"
serde = "1.0"
serde_derive = "1.0"
uuid = { version = "0.5", features = ["serde", "v4"] }

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/diesel.toml
# For documentation on how to configure this file,
# see diesel.rs/guides/configuring-diesel-cli

[print_schema]
file = "src/schema.rs"

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrate.sh
DATABASE_URL=test.db diesel migration run

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrations/.gitkeep

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrations/2018-11-22-192300_create_tables/down.sql
DROP TABLE users;

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/migrations/2018-11-22-192300_create_tables/up.sql
CREATE TABLE users (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  email TEXT NOT NULL
);

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/src/main.rs
#[macro_use]
extern crate diesel;

use clap::{
    crate_authors, crate_description, crate_name, crate_version, App, AppSettings, Arg, SubCommand,
};
use diesel::prelude::*;
use diesel::r2d2::ConnectionManager;
use failure::Error;

pub mod models;
pub mod schema;

const CMD_ADD: &str = "add";
const CMD_LIST: &str = "list";

fn main() -> Result<(), Error> {

    let matches = App::new(crate_name!())
        .version(crate_version!())
        .author(crate_authors!())
        .about(crate_description!())
        .setting(AppSettings::SubcommandRequired)
        .arg(
            Arg::with_name("database")
            .short("d")
            .long("db")
            .value_name("FILE")
            .help("Sets a file name of a database")
            .takes_value(true),
            )
        .subcommand(SubCommand::with_name(CMD_ADD).about("add user to the table")
                    .arg(Arg::with_name("NAME")
                         .help("Sets the name of a user")
                         .required(true)
                         .index(1))
                    .arg(Arg::with_name("EMAIL")
                         .help("Sets the email of a user")
                         .required(true)
                         .index(2)))
        .subcommand(SubCommand::with_name(CMD_LIST).about("prints a list with users"))
        .get_matches();

    let path = matches.value_of("database")
        .unwrap_or("test.db");
    let manager = ConnectionManager::<SqliteConnection>::new(path);
    let pool = r2d2::Pool::new(manager)?;

    match matches.subcommand() {
        (CMD_ADD, Some(matches)) => {
            let conn = pool.get()?;
            let name = matches.value_of("NAME").unwrap();
            let email = matches.value_of("EMAIL").unwrap();
            let uuid = format!("{}", uuid::Uuid::new_v4());
            let new_user = models::NewUser {
                id: &uuid,
                name: &name,
                email: &email,
            };
            diesel::insert_into(schema::users::table)
                .values(&new_user)
                .execute(&conn)?;
        }
        (CMD_LIST, _) => {
            use self::schema::users::dsl::*;
            let conn = pool.get()?;
            let items = users
                .filter(email.like("%@example.com"))
                .limit(10)
                .load::<models::User>(&conn)?;
            for user in items {
                println!("{:?}", user);
            }
        }
        _ => {
            matches.usage(); // but unreachable
        }
    }

    Ok(())
}

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/src/models.rs
use serde_derive::Serialize;
use super::schema::users;

#[derive(Debug, Serialize, Queryable)]
pub struct User {
    pub id: String,
    pub name: String,
    pub email: String,
}

#[derive(Insertable)]
#[table_name = "users"]
pub struct NewUser<'a> {
    pub id: &'a str,
    pub name: &'a str,
    pub email: &'a str,
}

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter08/users/src/schema.rs
table! {
    users (id) {
        id -> Text,
        name -> Text,
        email -> Text,
    }
}

--#

