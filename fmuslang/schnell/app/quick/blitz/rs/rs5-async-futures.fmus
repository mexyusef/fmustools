--% index/fmus
.,d(/mk)
	%utama=__FILE__
	futures-examples,d(/mk)
		.gitignore,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/futures-examples/.gitignore)
		Cargo.toml,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/futures-examples/Cargo.toml)
		src,d(/mk)
			main.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/futures-examples/src/main.rs)
	images-service,d(/mk)
		Cargo.toml,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/images-service/Cargo.toml)
		test.sh,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/images-service/test.sh)
		src,d(/mk)
			main.rs,f(e=utama=C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/images-service/src/main.rs)
--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/futures-examples/.gitignore
/target
**/*.rs.bk

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/futures-examples/Cargo.toml
[package]
name = "futures-examples"
version = "0.1.0"
authors = ["Yusef Ulum <yusef314159@gmail.com>"]

[dependencies]
failure = "0.1"
futures = "0.1"
tokio = "0.1"

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/futures-examples/src/main.rs
extern crate failure;
extern crate futures;
extern crate tokio;

use std::io;
use failure::Error;
use futures::{future, stream, Future, Stream, Sink, IntoFuture};
use futures::sync::{mpsc, oneshot};
use tokio::net::{UdpSocket, UdpFramed};
use tokio::codec::LinesCodec;

fn to_box<T>(fut :T) -> Box<dyn Future<Item=(), Error=()> + Send>
where
    T: IntoFuture,
    T::Future: Send + 'static,
    T::Item: 'static,
    T::Error: 'static,
{
    let fut = fut.into_future().map(drop).map_err(drop);
    Box::new(fut)
}

fn other<E>(err: E) -> io::Error
where
    E: Into<Box<std::error::Error + Send + Sync>>,
{
    io::Error::new(io::ErrorKind::Other, err)
}

fn main() {
    single();
    multiple();
    send_spawn();
    println!("Start UDP echo");
    alt_udp_echo().unwrap();
}

fn single() {
    let (tx_sender, rx_future) = oneshot::channel::<u8>();
    let receiver = rx_future.map(|x| {
        println!("Received: {}", x);
    });
    let sender = tx_sender.send(8);
    let execute_all = future::join_all(vec![
        to_box(receiver),
        to_box(sender),
    ]).map(drop);
    tokio::run(execute_all);
}

fn multiple() {
    let (tx_sink, rx_stream) = mpsc::channel::<u8>(8);
    let receiver = rx_stream.fold(0, |acc, value| {
        future::ok(acc + value)
    }).map(|x| {
        println!("Calculated: {}", x);
    });
    let send_1 = tx_sink.clone().send(1);
    let send_2 = tx_sink.clone().send(2);
    let send_3 = tx_sink.clone().send(3);
    let execute_all = future::join_all(vec![
        to_box(receiver),
        to_box(send_1),
        to_box(send_2),
        to_box(send_3),
    ]).map(drop);
    drop(tx_sink);
    tokio::run(execute_all);
}

fn alt_udp_echo() -> Result<(), Error> {
    let from = "0.0.0.0:12345".parse()?;
    let socket = UdpSocket::bind(&from)?;
    let framed = UdpFramed::new(socket, LinesCodec::new());
    let (sink, stream) = framed.split();
    let (tx, rx) = mpsc::channel(16);
    let rx = rx.map_err(|_| other("can't take a message"))
        .fold(sink, |sink, frame| {
            sink.send(frame)
        });
    let process = stream.and_then(move |args| {
        tx.clone()
            .send(args)
            .map(drop)
            .map_err(other)
    }).collect();
    let execute_all = future::join_all(vec![
        to_box(rx),
        to_box(process),
    ]).map(drop);
    Ok(tokio::run(execute_all))
}

fn send_spawn() {
    let (tx_sink, rx_stream) = mpsc::channel::<u8>(8);
    let receiver = rx_stream.fold(0, |acc, value| {
        println!("Received: {}", value);
        future::ok(acc + value)
    }).map(drop);
    let spawner = stream::iter_ok::<_, ()>(1u8..11u8).map(move |x| {
        let fut = tx_sink.clone().send(x).map(drop).map_err(drop);
        tokio::spawn(fut);
    }).collect();
    let execute_all = future::join_all(vec![
        to_box(spawner),
        to_box(receiver),
    ]).map(drop);
    tokio::run(execute_all);
}

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/images-service/Cargo.toml
[package]
name = "images-service"
version = "0.1.0"
authors = ["Yusef Ulum <yusef314159@gmail.com>"]

[dependencies]
lazy_static = "1.0"
regex = "1.0"
futures = "0.1"
tokio = "0.1"
hyper = "0.12"
hyper-staticfile = "0.3"
rand = "0.5"
serde = "1.0"
serde_derive = "1.0"
serde_json = "1.0"

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/images-service/test.sh
curl --request POST \
     --data-binary "@../../media/image.jpg" \
     "http://localhost:8080/upload"

--#

--% C:/work/github/rust/Hands-On-Microservices-with-Rust/Chapter05/images-service/src/main.rs
#[macro_use]
extern crate lazy_static;
extern crate regex;
extern crate rand;
extern crate futures;
extern crate tokio;
extern crate hyper;
extern crate hyper_staticfile;

use std::io::{Error, ErrorKind};
use std::fs;
use std::path::Path;
use regex::Regex;
use rand::{thread_rng, Rng};
use rand::distributions::Alphanumeric;
use futures::{future, Future, Stream};
use tokio::fs::File;
use hyper::{Body, Method, Request, Response, Server, StatusCode};
use hyper::service::service_fn;
use hyper_staticfile::FileChunkStream;

static INDEX: &[u8] = b"Images Microservice";

lazy_static! {
    static ref DOWNLOAD_FILE: Regex = Regex::new("^/download/(?P<filename>\\w{20})?$").unwrap();
}

fn other<E>(err: E) -> Error
where
    E: Into<Box<std::error::Error + Send + Sync>>,
{
    Error::new(ErrorKind::Other, err)
}

fn microservice_handler(req: Request<Body>, files: &Path)
    -> Box<Future<Item=Response<Body>, Error=Error> + Send>
{
    match (req.method(), req.uri().path().to_owned().as_ref()) {
        (&Method::GET, "/") => {
            Box::new(future::ok(Response::new(INDEX.into())))
        },
        (&Method::POST, "/upload") => {
            let name: String = thread_rng().sample_iter(&Alphanumeric).take(20).collect();
            let mut filepath = files.to_path_buf();
            filepath.push(&name);
            let create_file = File::create(filepath);
            let write = create_file.and_then(|file| {
                req.into_body()
                    .map_err(other)
                    .fold(file, |file, chunk| {
                    tokio::io::write_all(file, chunk)
                        .map(|(file, _)| file)
                })
            });
            let body = write.map(|_| {
                Response::new(name.into())
            });
            Box::new(body)
        },
        (&Method::GET, path) if path.starts_with("/download") => {
            if let Some(cap) = DOWNLOAD_FILE.captures(path) {
                    let filename = cap.name("filename").unwrap().as_str();
                    let mut filepath = files.to_path_buf();
                    filepath.push(filename);
                    let open_file = File::open(filepath);
                    let body = open_file.map(|file| {
                        let chunks = FileChunkStream::new(file);
                        Response::new(Body::wrap_stream(chunks))
                    });
                    Box::new(body)
            } else {
                response_with_code(StatusCode::NOT_FOUND)
            }
        },
        _ => {
            response_with_code(StatusCode::NOT_FOUND)
        },
    }
}

fn response_with_code(status_code: StatusCode)
    -> Box<Future<Item=Response<Body>, Error=Error> + Send>
{
    let resp = Response::builder()
        .status(status_code)
        .body(Body::empty())
        .unwrap();
    Box::new(future::ok(resp))
}


fn main() {
    let files = Path::new("./files");
    fs::create_dir(files).ok();
    let addr = ([127, 0, 0, 1], 8080).into();
    let builder = Server::bind(&addr);
    let server = builder.serve(move || {
        service_fn(move |req| microservice_handler(req, &files))
    });
    let server = server.map_err(drop);
    hyper::rt::run(server);
}

--#

