--% index/fmus
__PWD/starwars-spor,d(/mk)
	%utama=__FILE__
	.gitignore,f(e=utama=C:/work/oprek/crats/.gitignore)
	package.json,f(e=utama=C:/work/oprek/crats/package.json)
	README.md,f(e=utama=C:/work/oprek/crats/README.md)
	tsconfig.json,f(e=utama=C:/work/oprek/crats/tsconfig.json)
	public,d(/mk)
		favicon.ico,f(b64=utama=C:/work/oprek/crats/public/favicon.ico)
		index.html,f(e=utama=C:/work/oprek/crats/public/index.html)
		logo192.png,f(b64=utama=C:/work/oprek/crats/public/logo192.png)
		logo512.png,f(b64=utama=C:/work/oprek/crats/public/logo512.png)
		manifest.json,f(e=utama=C:/work/oprek/crats/public/manifest.json)
		robots.txt,f(e=utama=C:/work/oprek/crats/public/robots.txt)
	src,d(/mk)
		App.css,f(e=utama=C:/work/oprek/crats/src/App.css)
		App.test.tsx,f(e=utama=C:/work/oprek/crats/src/App.test.tsx)
		App.tsx,f(e=utama=C:/work/oprek/crats/src/App.tsx)
		AppState.tsx,f(e=utama=C:/work/oprek/crats/src/AppState.tsx)
		Character.ts,f(e=utama=C:/work/oprek/crats/src/Character.ts)
		CharacterList.tsx,f(e=utama=C:/work/oprek/crats/src/CharacterList.tsx)
		CharacterListContainer.tsx,f(e=utama=C:/work/oprek/crats/src/CharacterListContainer.tsx)
		CharacterListResponse.ts,f(e=utama=C:/work/oprek/crats/src/CharacterListResponse.ts)
		CharactersActions.ts,f(e=utama=C:/work/oprek/crats/src/CharactersActions.ts)
		CharactersListActionCreators.ts,f(e=utama=C:/work/oprek/crats/src/CharactersListActionCreators.ts)
		CharactersListReducer.ts,f(e=utama=C:/work/oprek/crats/src/CharactersListReducer.ts)
		CharactersListState.ts,f(e=utama=C:/work/oprek/crats/src/CharactersListState.ts)
		index.css,f(e=utama=C:/work/oprek/crats/src/index.css)
		index.tsx,f(e=utama=C:/work/oprek/crats/src/index.tsx)
		logo.svg,f(e=utama=C:/work/oprek/crats/src/logo.svg)
		Product.ts,f(e=utama=C:/work/oprek/crats/src/Product.ts)
		ProductList.tsx,f(e=utama=C:/work/oprek/crats/src/ProductList.tsx)
		ProductListContainer.tsx,f(e=utama=C:/work/oprek/crats/src/ProductListContainer.tsx)
		ProductListResponse.ts,f(e=utama=C:/work/oprek/crats/src/ProductListResponse.ts)
		ProductsActions.ts,f(e=utama=C:/work/oprek/crats/src/ProductsActions.ts)
		ProductsListActionCreators.ts,f(e=utama=C:/work/oprek/crats/src/ProductsListActionCreators.ts)
		ProductsListReducer.ts,f(e=utama=C:/work/oprek/crats/src/ProductsListReducer.ts)
		ProductsListState.ts,f(e=utama=C:/work/oprek/crats/src/ProductsListState.ts)
		react-app-env.d.ts,f(e=utama=C:/work/oprek/crats/src/react-app-env.d.ts)
		reportWebVitals.ts,f(e=utama=C:/work/oprek/crats/src/reportWebVitals.ts)
		Root.tsx,f(e=utama=C:/work/oprek/crats/src/Root.tsx)
		setupTests.ts,f(e=utama=C:/work/oprek/crats/src/setupTests.ts)
		StarWarsApi.ts,f(e=utama=C:/work/oprek/crats/src/StarWarsApi.ts)
		Store.tsx,f(e=utama=C:/work/oprek/crats/src/Store.tsx)
--#

--% C:/work/oprek/crats/.gitignore
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

--#

--% C:/work/oprek/crats/package.json
{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@babel/plugin-syntax-flow": "7.14.5",
    "@babel/plugin-transform-react-jsx": "7.14.9",
    "@dooboo/eslint-config": "^1.3.0",
    "@graphql-tools/schema": "^8.3.1",
    "@material-ui/core": "^4.12.3",
    "@material-ui/icons": "^4.11.2",
    "@prisma/client": "^3.9.2",
    "@testing-library/dom": "^8.11.3",
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^12.0.0",
    "@testing-library/user-event": "^13.2.1",
    "@types/bcrypt": "^5.0.0",
    "@types/bcryptjs": "^2.4.2",
    "@types/ejs": "^3.1.0",
    "@types/express": "^4.17.13",
    "@types/graphql-iso-date": "^3.4.0",
    "@types/graphql-upload": "^8.0.10",
    "@types/jest": "^27.4.0",
    "@types/jsonwebtoken": "^8.5.8",
    "@types/node": "^17.0.18",
    "@types/react": "^17.0.20",
    "@types/react-dom": "^17.0.9",
    "@types/ws": "^8.2.2",
    "@typescript-eslint/eslint-plugin": "^5.12.0",
    "@typescript-eslint/parser": "5.0.0",
    "antd": "^4.18.5",
    "apollo-cache-inmemory": "^1.6.6",
    "apollo-client": "^2.6.10",
    "apollo-link-ws": "^1.0.20",
    "apollo-server": "^3.6.3",
    "autoprefixer": "10.0.2",
    "axios": "^0.25.0",
    "bcrypt": "^5.0.1",
    "bcryptjs": "^2.4.3",
    "boostrap": "^2.0.0",
    "bootstrap": "^5.1.3",
    "chartist": "^0.11.4",
    "dotenv": "^16.0.0",
    "dotenv-cli": "^5.0.0",
    "echarts": "^5.3.0",
    "echarts-for-react": "^3.0.2",
    "ejs": "^3.1.6",
    "eslint": "^8.9.0",
    "graphql-import": "^1.0.2",
    "graphql-iso-date": "^3.6.1",
    "graphql-middleware": "^6.1.13",
    "graphql-request": "^4.0.0",
    "graphql-shield": "^7.5.0",
    "graphql-subscriptions": "^2.0.0",
    "graphql-tag": "^2.12.6",
    "graphql-upload": "^13.0.0",
    "highcharts": "^9.3.2",
    "highcharts-react-official": "^3.1.0",
    "jest": "^27.5.1",
    "jsonwebtoken": "^8.5.1",
    "leaflet": "^1.7.1",
    "leaflet-geosearch": "^3.6.0",
    "leaflet-search": "^3.0.2",
    "leaflet.locatecontrol": "^0.76.0",
    "nexus": "^1.2.0",
    "nexus-validation-plugin": "^0.2.0",
    "passport": "^0.5.2",
    "passport-facebook": "^3.0.0",
    "passport-github2": "^0.1.12",
    "passport-google-oauth20": "^2.0.0",
    "passport-local": "^1.0.0",
    "passport-twitter": "^1.0.4",
    "path": "^0.12.7",
    "postcss": "8.1.0",
    "prettier": "^2.5.1",
    "prisma": "^3.9.2",
    "prop-types": ">=15.7.2 <16.0.0",
    "pubsub-js": "^1.9.4",
    "react": "^17.0.2",
    "react-bootstrap": "^2.1.1",
    "react-chartist": "^0.14.4",
    "react-dom": "^17.0.2",
    "react-fullscreen-crossbrowser": "^1.1.0",
    "react-leaflet": "^3.2.5",
    "react-leaflet-search": "^2.0.1",
    "react-loader-spinner": "^5.1.0",
    "react-paypal-button-v2": "^2.6.3",
    "react-redux": "^7.2.6",
    "react-router-bootstrap": "^0.26.0",
    "react-router-dom": "^6.2.1",
    "react-scripts": "5.0.0",
    "reactstrap": "^9.0.1",
    "recharts": "^2.1.8",
    "redux": "^4.1.2",
    "redux-devtools-extension": "^2.13.9",
    "redux-saga": "^1.1.3",
    "redux-thunk": "^2.4.1",
    "subscriptions-transport-ws": "^0.11.0",
    "ts-jest": "^27.1.3",
    "ts-node": "^10.5.0",
    "ts-node-dev": "^1.1.8",
    "typescript": "^4.5.5",
    "web-vitals": "^2.1.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

--#

--% C:/work/oprek/crats/README.md
# urutan

## index
<Root store={store} />

## Root
import App from './App';
import AppState from './AppState';

# AppState
import CharactersListState from "./CharactersListState";
import ProductsListState from "./ProductsListState";
  charactersListState: CharactersListState;
  productsListState: ProductsListState;

# App

interface Props {
  getCharacters(): void,
  charactersList: CharactersListState,
  getProducts(): void,
  productsList: ProductsListState,
}
  componentDidMount = () => {
    if (this.props.charactersList.characters.length === 0) {
      this.props.getCharacters();
    }
    if (this.props.productsList.products.length === 0) {
      this.props.getProducts();
    }
  }
  public render() {
    const { 
      productsList,
      charactersList,
    } = this.props;
  }
        <CharacterListContainer
          charactersList={charactersList}
          onCharacterSelected={this.onCharacterSelected} />

        <ProductListContainer
          productsList={productsList}
          onProductSelected={this.onProductSelected} />

const mapStateToProps = (state: AppState) => {
    charactersList: state.charactersListState,
    productsList: state.productsListState,
};
const mapDispatchToProps = (dispatch: Function) => {
    getCharacters: () => dispatch(getCharacters()),
    getProducts: () => dispatch(getProducts()),
}

export default connect(mapStateToProps, mapDispatchToProps)(App);

# CharacterListContainer, ProductListContainer
import CharacterList from './CharacterList';
import CharactersListState from './CharactersListState';
import Character from './Character';
interface Props {
    charactersList: CharactersListState,
    onCharacterSelected(character: Character): void
}
const CharacterListContainer: FunctionComponent<Props> = (props: Props) => {
    const { charactersList, onCharacterSelected } = props;
    return (<CharacterList 
        characters={charactersList.characters} 
        onCharacterSelected={(c:any) => onCharacterSelected(c)} 
    />)
}
# CharacterList
interface Props {
  characters: Character[];
  onCharacterSelected: (character: Character) => void
}

--#

--% C:/work/oprek/crats/tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve"
  },
  "include": [
    "src"
  ]
}


--#

--% C:/work/oprek/crats/public/favicon.ico
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
--#

--% C:/work/oprek/crats/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


--#

--% C:/work/oprek/crats/public/logo192.png
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
--#

--% C:/work/oprek/crats/public/logo512.png

--#

--% C:/work/oprek/crats/public/manifest.json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


--#

--% C:/work/oprek/crats/public/robots.txt
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--#

--% C:/work/oprek/crats/src/App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--#

--% C:/work/oprek/crats/src/App.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


--#

--% C:/work/oprek/crats/src/App.tsx
import React from 'react';
import { connect } from 'react-redux';
import AppState from './AppState';

import { 
  getCharacters, 
} from './CharactersListActionCreators';
import CharactersListState from './CharactersListState';
import Character from './Character';
import CharacterListContainer from './CharacterListContainer';
import { 
  getProducts,
} from './ProductsListActionCreators';
import ProductsListState from './ProductsListState';
import Product from './Product';
import ProductListContainer from './ProductListContainer';

interface Props {
  getCharacters(): void,
  charactersList: CharactersListState,
  getProducts(): void,
  productsList: ProductsListState,
}

interface State {
  // isSelectedCharacterModalOpen: boolean
}

class App extends React.Component<Props, State> {

  constructor(props: Props) {
    super(props);
    this.state = { 
      // isSelectedCharacterModalOpen: false 
    };
  }

  componentDidMount = () => {
    if (this.props.charactersList.characters.length === 0) {
      this.props.getCharacters();
    }
    if (this.props.productsList.products.length === 0) {
      this.props.getProducts();
    }
  }

  onCharacterSelected = (character: Character) => {
    // this.openSelectedCharacterDialog();
  }
  onProductSelected = (product: Product) => {
    // this.openSelectedCharacterDialog();
  }

  // openSelectedCharacterDialog = () => {
  //   this.setState({ isSelectedCharacterModalOpen: true });
  // }

  // closeSelectedCharacterDialog = () => {
  //   this.setState({ isSelectedCharacterModalOpen: false });
  // }

  public render() {
    const { 
      productsList,
      charactersList,
    } = this.props;
    return (
      <div className="app-container">

        <CharacterListContainer
          charactersList={charactersList}
          onCharacterSelected={this.onCharacterSelected} />

        <ProductListContainer
          productsList={productsList}
          onProductSelected={this.onProductSelected} />

      </div>
    );
  }
}

const mapStateToProps = (state: AppState) => {
  return {
    charactersList: state.charactersListState,
    productsList: state.productsListState,
  };
};

const mapDispatchToProps = (dispatch: Function) => {
  return {
    getCharacters: () => dispatch(getCharacters()),
    getProducts: () => dispatch(getProducts()),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(App);

--#

--% C:/work/oprek/crats/src/AppState.tsx
import CharactersListState from "./CharactersListState";
import ProductsListState from "./ProductsListState";

export default interface AppState {
  charactersListState: CharactersListState;
  productsListState: ProductsListState;
}

--#

--% C:/work/oprek/crats/src/Character.ts
export default interface Character {
  name: string,
  height: string,
  mass: string,
  hair_color: string,
  skin_color: string,
  eye_color: string,
  birth_year: string,
  gender: string,
  homeworld: string,
  films: string[],
  species: string[],
  vehicles: string[],
  starships: string[],
  created: string,
  edited: string,
  url: string
}
--#

--% C:/work/oprek/crats/src/CharacterList.tsx
import React, { FunctionComponent } from 'react';
import Character from './Character';
// import './CharacterList.css';

interface Props {
  characters: Character[];
  onCharacterSelected: (character: Character) => void
}
const CharacterList: FunctionComponent<Props> = props => {
  const { characters, onCharacterSelected } = props;
  return (
    <ul className="list-group">
      {characters.map(character =>
        <li key={character.name}
          className="list-group-item"
          onClick={() => onCharacterSelected(character)}>
          {character.name}
        </li>
      )}
    </ul>
  );
};

export default CharacterList;

--#

--% C:/work/oprek/crats/src/CharacterListContainer.tsx
import React, { FunctionComponent } from 'react';
import CharactersListState from './CharactersListState';
// import ProgressBar from '../ProgressBar';
// import Alert, { AlertType } from '../Alert';
import CharacterList from './CharacterList';
import Character from './Character';

interface Props {
    charactersList: CharactersListState,
    onCharacterSelected(character: Character): void
}
const CharacterListContainer: FunctionComponent<Props> = (props: Props) => {
    const { charactersList, onCharacterSelected } = props;
    return (<CharacterList 
        characters={charactersList.characters} 
        onCharacterSelected={(c:any) => onCharacterSelected(c)} 
    />)
}
export default CharacterListContainer;

--#

--% C:/work/oprek/crats/src/CharacterListResponse.ts
import Character from "./Character";

export default interface CharacterListResponse {
    count: number,
    next: string,
    previous: string,
    results: Character[]
}
--#

--% C:/work/oprek/crats/src/CharactersActions.ts
import Character from './Character';
// import CharacterDetails from '../../api/model/CharacterDetails';

export enum CharacterActionTypes {

  GET_CHARACTERS_LIST_START = 'GET_CHARACTERS_LIST_START',
  GET_CHARACTERS_LIST_SUCCESS = 'GET_CHARACTERS_LIST_SUCCESS',
  GET_CHARACTERS_LIST_FAILURE = 'GET_CHARACTERS_LIST_FAILURE',

  GET_CHARACTER_DETAILS_START = 'GET_CHARACTER_DETAILS_START',
  GET_CHARACTER_DETAILS_PROGRESS = 'GET_CHARACTER_DETAILS_PROGRESS',
  GET_CHARACTER_DETAILS_SUCCESS = 'GET_CHARACTER_DETAILS_SUCCESS',
  GET_CHARACTER_DETAILS_FAILURE = 'GET_CHARACTER_DETAILS_FAILURE'
}

export interface GetCharactersListStartAction {
  type: CharacterActionTypes.GET_CHARACTERS_LIST_START,
}

export interface GetCharactersListSuccessAction {
  type: CharacterActionTypes.GET_CHARACTERS_LIST_SUCCESS,
  characters: Character[]
}

export interface GetCharactersListFailureAction {
  type: CharacterActionTypes.GET_CHARACTERS_LIST_FAILURE,
  error: string
}

// export interface GetCharacterDetailsStartAction {
//   type: CharacterActionTypes.GET_CHARACTER_DETAILS_START,
//   characterId: number,
//   characterName: string
// }

// export interface GetCharacterDetailsSuccessAction {
//   type: CharacterActionTypes.GET_CHARACTER_DETAILS_SUCCESS,
//   characterDetails: CharacterDetails
// }

// export interface GetCharacterDetailsProgressAction {
//   type: CharacterActionTypes.GET_CHARACTER_DETAILS_PROGRESS,
//   value: number,
//   message: string
// }

// export interface GetCharacterDetailsFailureAction {
//   type: CharacterActionTypes.GET_CHARACTER_DETAILS_FAILURE,
//   error: string
// }

export type CharactersListActions =
  GetCharactersListStartAction
  | GetCharactersListSuccessAction
  | GetCharactersListFailureAction;

// export type CharacterDetailsActions =
//   GetCharacterDetailsStartAction
//   | GetCharacterDetailsProgressAction
//   | GetCharacterDetailsSuccessAction
//   | GetCharacterDetailsFailureAction;

--#

--% C:/work/oprek/crats/src/CharactersListActionCreators.ts
import { Dispatch } from 'redux';
import { StarWarsApi } from './StarWarsApi';
import {
  GetCharactersListStartAction,
  GetCharactersListSuccessAction,
  GetCharactersListFailureAction,
  CharacterActionTypes
} from './CharactersActions';
import Character from './Character';


export const getCharactersStart = (): GetCharactersListStartAction => {
  return {
    type: CharacterActionTypes.GET_CHARACTERS_LIST_START
  };
}

export const getCharactersSuccess = (results: Character[]): GetCharactersListSuccessAction => {
  return {
    type: CharacterActionTypes.GET_CHARACTERS_LIST_SUCCESS,
    characters: results
  };
}

export const getCharactersFailure = (error: string): GetCharactersListFailureAction => {
  return {
    type: CharacterActionTypes.GET_CHARACTERS_LIST_FAILURE,
    error: error
  };
}

export const getCharacters = () => {
  return (dispatch: Dispatch) => {

    dispatch(getCharactersStart());
    return new StarWarsApi()
      .getCharacters()
      .then((response:any) => dispatch(getCharactersSuccess(response.data.results)))
      .catch((error:any) => dispatch(getCharactersFailure('Could not get characters: ' + error.message)));
  };
};

// export const searchCharacters = (term: string) => {
//   return (dispatch: Dispatch) => {

//     dispatch(getCharactersStart());
//     return new StarWarsApi()
//       .searchCharacters(term)
//       .then((response:any) => dispatch(getCharactersSuccess(response.data.results)))
//       .catch((error:any) => dispatch(getCharactersFailure('Could not search for characters: ' + error.message)));
//   };
// };

--#

--% C:/work/oprek/crats/src/CharactersListReducer.ts
import { Reducer } from 'redux';
import CharactersListState from './CharactersListState';
import { CharacterActionTypes, CharactersListActions } from './CharactersActions';

const initialState: CharactersListState = {
  characters: [],
  isFetching: false
};

const CharactersListReducer: Reducer<CharactersListState, CharactersListActions> = (state = initialState, action: CharactersListActions) => {

  switch (action.type) {
    case CharacterActionTypes.GET_CHARACTERS_LIST_START: {
      return {
        ...state,
        isFetching: true
      };
    }
    case CharacterActionTypes.GET_CHARACTERS_LIST_SUCCESS: {
      return {
        ...state,
        characters: action.characters,
        isFetching: false
      };
    }
    case CharacterActionTypes.GET_CHARACTERS_LIST_FAILURE: {
      return {
        ...state,
        isFetching: false,
        error: action.error
      };
    }
    default: return state;
  }
};

export default CharactersListReducer;

--#

--% C:/work/oprek/crats/src/CharactersListState.ts
import Character from './Character';

export default interface CharactersListState {
  characters: Character[],
  isFetching: boolean,
  error?: string
}

--#

--% C:/work/oprek/crats/src/index.css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


--#

--% C:/work/oprek/crats/src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom';
import configureStore from "./Store";
import Root from './Root';
import 'bootstrap/dist/css/bootstrap.css';

const store = configureStore();
ReactDOM.render(<Root store={store} />, document.getElementById('root'));

--#

--% C:/work/oprek/crats/src/logo.svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

--#

--% C:/work/oprek/crats/src/Product.ts
export default interface Product {
  // name: string,
  // height: string,
  // mass: string,
  // hair_color: string,
  // skin_color: string,
  // eye_color: string,
  // birth_year: string,
  // gender: string,
  // homeworld: string,
  // films: string[],
  // species: string[],
  // vehicles: string[],
  // starships: string[],
  // created: string,
  // edited: string,
  // url: string
  id: number,
  prodname: string,
  price: string,
  grup: string,
  perf_6bln: string,
  perf_1thn: string,
  perf_3thn: string,
  perf_5thn: string,
  min_trx: string,
  min_portofolio: string,
  profil_risiko: string,
  metode_pembayran: string,
  fundcode: string,
  closedate: string,
  lastupdate: string,
  buyable: boolean,
  autodebetable: boolean,
  pending: boolean,
  min_redemption: string
}

--#

--% C:/work/oprek/crats/src/ProductList.tsx
import React, { FunctionComponent } from 'react';
import Product from './Product';
// import './ProductList.css';

interface Props {
  products: Product[];
  onProductSelected: (product: Product) => void
}
const ProductList: FunctionComponent<Props> = props => {
  const { products, onProductSelected } = props;
  return (
    <ul className="list-group">
      {products.map(product =>
        <li key={product.prodname}
          className="list-group-item"
          onClick={() => onProductSelected(product)}>
          {product.prodname}
        </li>
      )}
    </ul>
  );
};

export default ProductList;

--#

--% C:/work/oprek/crats/src/ProductListContainer.tsx
import React, { FunctionComponent } from 'react';
import ProductsListState from './ProductsListState';
import ProductList from './ProductList';
import Product from './Product';

interface Props {
    productsList: ProductsListState,
    onProductSelected(Product: Product): void
}
const ProductListContainer: FunctionComponent<Props> = (props: Props) => {
    const { productsList, onProductSelected } = props;
    return (<ProductList 
        products={productsList.products} 
        onProductSelected={(c:any) => onProductSelected(c)} 
    />)
}
export default ProductListContainer;

--#

--% C:/work/oprek/crats/src/ProductListResponse.ts
import Product from "./Product";

export default interface ProductListResponse {
    response: string,
    data: Product[]
}
--#

--% C:/work/oprek/crats/src/ProductsActions.ts
import Product from './Product';

export enum ProductActionTypes {

  GET_PRODUCTS_LIST_START = 'GET_PRODUCTS_LIST_START',
  GET_PRODUCTS_LIST_SUCCESS = 'GET_PRODUCTS_LIST_SUCCESS',
  GET_PRODUCTS_LIST_FAILURE = 'GET_PRODUCTS_LIST_FAILURE',

}

export interface GetProductsListStartAction {
  type: ProductActionTypes.GET_PRODUCTS_LIST_START,
}

export interface GetProductsListSuccessAction {
  type: ProductActionTypes.GET_PRODUCTS_LIST_SUCCESS,
  products: Product[]
}

export interface GetProductsListFailureAction {
  type: ProductActionTypes.GET_PRODUCTS_LIST_FAILURE,
  error: string
}

export type ProductsListActions =
  GetProductsListStartAction
  | GetProductsListSuccessAction
  | GetProductsListFailureAction;

--#

--% C:/work/oprek/crats/src/ProductsListActionCreators.ts
import { Dispatch } from 'redux';
import { StarWarsApi } from './StarWarsApi';
import {
  GetProductsListStartAction,
  GetProductsListSuccessAction,
  GetProductsListFailureAction,
  ProductActionTypes
} from './ProductsActions';
import Product from './Product';


export const getProductsStart = (): GetProductsListStartAction => {
  return {
    type: ProductActionTypes.GET_PRODUCTS_LIST_START
  };
}

export const getProductsSuccess = (results: Product[]): GetProductsListSuccessAction => {
  // console.log(`
  //   ProductsListActionCreators/getProductSuccess/getProductsSuccess
  //   peroleh results: ${JSON.stringify(results)}
  // `);
  return {
    type: ProductActionTypes.GET_PRODUCTS_LIST_SUCCESS,
    products: results
  };
}

export const getProductsFailure = (error: string): GetProductsListFailureAction => {
  return {
    type: ProductActionTypes.GET_PRODUCTS_LIST_FAILURE,
    error: error
  };
}

export const getProducts = () => {
  return (dispatch: Dispatch) => {
    dispatch(getProductsStart());
    return new StarWarsApi()
      .getProducts()
      .then((response:any) => {
        // response.data dari axios yg berupa objek
        // utk products ada .data sedangkan utk characers ada .results
          const hasil = response.data.data;
          // console.log(`
          //   hasil produk: ${JSON.stringify(hasil.slice(0,100))}
          //   response asli: ${JSON.stringify(response)}
          // `);
          // console.log(`
          //   hasil produk: ${JSON.stringify(hasil)}
          //   response asli: ${JSON.stringify(response)}
          // `);
          dispatch(getProductsSuccess(hasil));
        }
      )
      .catch((error:any) => dispatch(getProductsFailure('Could not get characters: ' + error.message)));
  };
};

// export const searchProducts = (term: string) => {
//   return (dispatch: Dispatch) => {

//     dispatch(getProductsStart());
//     return new StarWarsApi()
//       .searchProducts(term)
//       .then((response:any) => dispatch(getProductsSuccess(response.data.results)))
//       .catch((error:any) => dispatch(getProductsFailure('Could not search for characters: ' + error.message)));
//   };
// };

--#

--% C:/work/oprek/crats/src/ProductsListReducer.ts
import { Reducer } from 'redux';
import ProductsListState from './ProductsListState';
import { ProductActionTypes, ProductsListActions } from './ProductsActions';

const initialState: ProductsListState = {
  products: [],
  isFetching: false
};

const ProductsListReducer: Reducer<ProductsListState, ProductsListActions> = (state = initialState, action: ProductsListActions) => {

  switch (action.type) {
    case ProductActionTypes.GET_PRODUCTS_LIST_START: {
      return {
        ...state,
        isFetching: true
      };
    }
    case ProductActionTypes.GET_PRODUCTS_LIST_SUCCESS: {
      return {
        ...state,
        products: action.products,
        isFetching: false
      };
    }
    case ProductActionTypes.GET_PRODUCTS_LIST_FAILURE: {
      return {
        ...state,
        isFetching: false,
        error: action.error
      };
    }
    default: return state;
  }
};

export default ProductsListReducer;

--#

--% C:/work/oprek/crats/src/ProductsListState.ts
import Product from './Product';

export default interface ProductsListState {
  products: Product[],
  isFetching: boolean,
  error?: string
}

--#

--% C:/work/oprek/crats/src/react-app-env.d.ts
/// <reference types="react-scripts" />


--#

--% C:/work/oprek/crats/src/reportWebVitals.ts
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


--#

--% C:/work/oprek/crats/src/Root.tsx
import React from 'react';
import { Provider } from 'react-redux';
import { Store } from 'redux';

import App from './App';
import AppState from './AppState';

interface Props {
  store: Store<AppState>;
}

const Root: React.FunctionComponent<Props> = props => {
  return (
    <Provider store={props.store}>
      <App />
    </Provider>
  );
};

export default Root;

--#

--% C:/work/oprek/crats/src/setupTests.ts
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--#

--% C:/work/oprek/crats/src/StarWarsApi.ts
import axios, { AxiosResponse } from 'axios';
import CharacterListResponse from './CharacterListResponse';
import ProductListResponse from './ProductListResponse';

export class StarWarsApi {

  private baseUrl = "https://swapi.dev/api";
  private peopleUrl = `${this.baseUrl}/people/`;
  private sporUrl = 'http://localhost:3000';
  private sporProductUrl = `${this.sporUrl}/2/get_products`;

  getProducts(): Promise<AxiosResponse<ProductListResponse>> {
    return axios.get<ProductListResponse>(`${this.sporProductUrl}`);
  }

  getCharacters(): Promise<AxiosResponse<CharacterListResponse>> {
    return axios.get<CharacterListResponse>(`${this.peopleUrl}`);
  }

  // searchCharacters(term: string): Promise<AxiosResponse<CharacterListResponse>> {
  //   return axios.get<CharacterListResponse>(`${this.peopleUrl}?search=${term}`);
  // }

  // getEntityIdFromUrl(url: string): number {
  //   const urlSegments = url.split('/').filter(x => x !== '');
  //   return parseInt(urlSegments[urlSegments.length - 1]);
  // }
}
--#

--% C:/work/oprek/crats/src/Store.tsx
import { applyMiddleware, combineReducers, createStore, Store, AnyAction } from 'redux';
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension';
import AppState from './AppState';
import CharactersListReducer from './CharactersListReducer';
import ProductsListReducer from './ProductsListReducer';

const rootReducer = combineReducers<AppState>({
  charactersListState: CharactersListReducer,
  productsListState: ProductsListReducer,
});

export default function configureStore(): Store<AppState, AnyAction> {
  return createStore(rootReducer, undefined, composeWithDevTools(applyMiddleware(thunk)));
}

--#

