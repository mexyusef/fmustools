--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#

--% index/fmus/under_pwd
__REPLACE_WITH_PROJECT_DIR_OR_INPUT__,d(/mk)
	%utama=__FILE__
	.eslintrc.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.eslintrc.js)
	.gitignore,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.gitignore)
	.jsdoc.summary.md,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.jsdoc.summary.md)
	.npmrc,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.npmrc)
	.nycrc,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.nycrc)
	.travis.yml,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.travis.yml)
	architecture.svg,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/architecture.svg)
	lambda-node-logo.png,f(b64=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/lambda-node-logo.png)
	package.json,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/package.json)
	README.md,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/README.md)
	serverless.yml,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/serverless.yml)
	start-server.sh,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/start-server.sh)
	stop-server.sh,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/stop-server.sh)
	test-api-local.sh,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test-api-local.sh)
	src,d(/mk)
		Article.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/Article.js)
		Comment.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/Comment.js)
		User.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/User.js)
		Util.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/Util.js)
	test,d(/mk)
		mocha-axios-reporter.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/mocha-axios-reporter.js)
		mocha.opts,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/mocha.opts)
		test.Article.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.Article.js)
		test.Comment.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.Comment.js)
		test.User.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.User.js)
		test.Util.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.Util.js)
		TestHooks.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/TestHooks.js)
		TestUtil.js,f(e=utama=E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/TestUtil.js)
--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.eslintrc.js
module.exports = {

  env: {
    node: true,
    mocha: true,
    es6: true,
  },

  parserOptions: {
    ecmaVersion: 2017,
    sourceType: 'module',
  },

  // The Rules (Keep them sorted)
  extends: 'eslint:recommended',
  rules: {
    'comma-spacing': 'error',
    'eol-last': 'error',
    'max-len': ['error', 80],
    'no-console': 'off',
    'no-multi-spaces': 'error',
    'no-trailing-spaces': 'error',
    'no-var': 'error',
    'prefer-const': 'error',
    'require-atomic-updates': 'off',
    'semi': 'error',
    'space-before-function-paren': ['error', {
      'anonymous': 'always',
      'asyncArrow': 'always',
      'named': 'never',
    }],
  },

};

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.gitignore
node_modules
yarn.lock
package-lock.json
yarn-error.log
.serverless
dist
.test_output
.nyc_output
coverage
gh-pages
.dynamodb

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.jsdoc.summary.md
# JSDoc for [realworld-dynamodb-lambda](https://github.com/anishkny/realworld-dynamodb-lambda)

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.npmrc
package-lock=false

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.nycrc
{
  "reporter": [
    "lcov",
    "text",
    "html"
  ]
}

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/.travis.yml
language: node_js

node_js:
  - lts/*

cache:
  directories:
  - node_modules

after_script:
  - sleep 10
  - cat ./coverage/lcov.info | npx coveralls
  - cat .test_output/server.log

before_deploy:
  - rm -rf gh-pages
  - mkdir -p gh-pages
  - npm run build:docs
  - cp -r ./coverage gh-pages
  - cp -r ./.test_output gh-pages/test-output

deploy:
  provider: pages
  local-dir: gh-pages
  skip-cleanup: true
  github-token: $GITHUB_TOKEN
  verbose: true
  on:
    branch: master

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/architecture.svg
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="921px" height="611px" version="1.1"><defs/>
  <g transform="translate(0.5,0.5)"><path
    d="M 59.71 350 C 48.43 349.11 40 339.19 40.88 327.85 C 40.76 322.08 43.05 316.53 47.19 312.54 C 51.32 308.55 56.93 306.49 62.65 306.85 C 66.3 299.79 74.39 296.3 81.99 298.48 C 81.55 287.55 88.02 277.53 98.12 273.49 C 109.35 269.99 121.31 276.09 125.14 287.27 C 132.4 282.26 142.1 282.85 148.71 288.69 C 155.8 294.38 159.16 303.56 157.42 312.52 C 164.68 315.99 169.03 323.65 168.3 331.71 C 167.91 340.97 161.03 348.65 151.91 350 Z"
    fill="#7d7d7d"
    stroke="none"
    pointer-events="none"/>
    <g transform="translate(80.5,356.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="47" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">Internet<br style="font-size: 14px"/></div>
          </div>
        </foreignObject>
        <text x="24" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">[Not supported by viewer]</text>
      </switch>
    </g><path d="M 340.13 310.53 Q 454.94 310.53 454.94 195.24 Q 454.94 79.94 540.34 79.94" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 334.88 310.53 L 341.88 307.03 L 340.13 310.53 L 341.88 314.03 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 545.59 79.94 L 538.59 83.44 L 540.34 79.94 L 538.59 76.44 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 340.13 310.53 Q 454.94 310.53 454.94 271.71 Q 454.94 232.88 540.34 232.88" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 334.88 310.53 L 341.88 307.03 L 340.13 310.53 L 341.88 314.03 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 545.59 232.88 L 538.59 236.38 L 540.34 232.88 L 538.59 229.38 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 340.13 310.53 Q 454.94 310.53 454.94 348.76 Q 454.94 387 540.63 387" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 334.88 310.53 L 341.88 307.03 L 340.13 310.53 L 341.88 314.03 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 545.88 387 L 538.88 390.5 L 540.63 387 L 538.88 383.5 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 340.13 310.53 Q 454.94 310.53 454.94 425.24 Q 454.94 539.94 540.34 539.94" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 334.88 310.53 L 341.88 307.03 L 340.13 310.53 L 341.88 314.03 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 545.59 539.94 L 538.59 543.44 L 540.34 539.94 L 538.59 536.44 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 302.69 310.53 L 163.66 310.53" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 307.94 310.53 L 300.94 314.03 L 302.69 310.53 L 300.94 307.03 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 158.41 310.53 L 165.41 307.03 L 163.66 310.53 L 165.41 314.03 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path
      d="M 308.82 353.8 L 308.82 340.83 L 291.58 345.44 L 280 339.61 L 280 316.33 L 300.04 315.47 L 308.82 316.05 L 308.82 304.45 L 300.05 305.03 L 280 304.06 L 280 280.63 L 291.58 274.94 L 308.82 279.66 L 308.82 266.18 L 321.12 260 L 333.42 266.18 L 333.42 279.64 L 350.68 274.94 L 362.26 280.76 L 362.26 304.16 L 342.24 305.02 L 333.42 304.45 L 333.42 316.05 L 342.22 315.47 L 362.26 316.31 L 362.26 339.61 L 350.68 345.44 L 333.42 340.83 L 333.42 353.8 L 321.12 360 Z"
      fill="#d9a741"
      stroke="none"
      pointer-events="none"/><path
      d="M 350.68 302.96 L 333.42 303.95 L 333.42 297.52 L 334.02 297.62 L 344.3 296.52 L 344.3 285 L 333.42 281.41 L 333.42 279.64 L 350.68 274.94 Z M 350.68 345.44 L 333.42 340.83 L 333.42 339.01 L 344.3 335.49 L 344.3 323.83 L 334.04 322.73 L 333.42 322.82 L 333.42 316.52 L 350.68 317.39 Z M 297.96 296.52 L 297.96 285 L 308.82 281.42 L 308.82 266.18 L 321.12 260 L 321.12 360 L 308.82 353.8 L 308.82 339.01 L 297.96 335.49 L 297.96 323.83 L 308.82 325.78 L 308.82 294.58 Z M 291.58 302.96 L 280 304.06 L 280 280.63 L 291.58 274.94 Z M 291.58 345.44 L 280 339.61 L 280 316.33 L 291.58 317.39 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path
      d="M 308.21 297.62 L 297.96 296.52 L 308.82 294.58 L 308.82 297.54 Z M 362.26 304.16 L 342.24 305.02 L 333.42 304.45 L 333.42 303.95 L 350.68 302.96 Z M 333.42 297.52 L 333.42 294.58 L 344.3 296.52 L 334.02 297.62 Z M 300.05 305.03 L 280 304.06 L 291.58 302.96 L 308.82 303.95 L 308.82 304.45 Z"
      fill-opacity="0.5"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path
      d="M 350.68 317.39 L 333.42 316.52 L 333.42 316.05 L 342.22 315.47 L 362.26 316.31 Z M 333.42 325.78 L 333.42 322.82 L 334.04 322.73 L 344.3 323.83 Z M 308.82 325.78 L 297.96 323.83 L 308.21 322.73 L 308.82 322.83 Z M 291.58 317.39 L 280 316.33 L 300.04 315.47 L 308.82 316.05 L 308.82 316.52 Z"
      fill-opacity="0.3"
      fill="#ffffff"
      stroke="none"
      pointer-events="none"/>
    <g transform="translate(279.5,366.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="82" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">API Gateway</div>
          </div>
        </foreignObject>
        <text x="41" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">API Gateway</text>
      </switch>
    </g><path d="M 618.96 79.94 L 689.06 79.94 L 758.13 79.94" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 613.71 79.94 L 620.71 76.44 L 618.96 79.94 L 620.71 83.44 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 763.38 79.94 L 756.38 83.44 L 758.13 79.94 L 756.38 76.44 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path
      d="M 589.8 68.01 L 595.79 67.2 L 603.68 76.9 L 603.68 65.45 L 589.8 61.79 Z M 589.8 98.28 L 603.68 94.53 L 603.68 83.25 L 595.79 92.88 L 589.8 92.05 Z M 579.94 120 L 570.09 115.09 L 570.09 108.61 L 562.37 111.17 L 556.28 108.1 L 556.28 104.35 L 551.15 105.57 L 547 103.43 L 547 56.62 L 551.15 54.47 L 556.28 55.69 L 556.28 51.96 L 562.37 48.83 L 570.09 51.32 L 570.09 44.95 L 579.94 40 L 612.9 56.61 L 612.9 103.33 Z"
      fill="#f58534"
      stroke="none"
      pointer-events="none"/><path
      d="M 603.68 94.53 L 603.68 83.25 L 606.24 80.01 L 603.68 76.9 L 603.68 65.45 L 608.64 64.78 L 608.64 95.28 Z M 589.8 92.05 L 589.8 68.01 L 595.79 67.2 L 595.79 92.88 Z M 570.09 115.09 L 570.09 44.95 L 579.94 40 L 579.94 120 Z M 556.28 108.1 L 556.28 51.96 L 562.37 48.83 L 562.37 111.17 Z M 547 103.43 L 547 56.62 L 551.15 54.47 L 551.15 105.57 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path d="M 589.8 61.79 L 589.8 59.03 L 608.64 64.78 L 603.68 65.45 Z" fill-opacity="0.5" fill="#000000" stroke="none" pointer-events="none"/><path d="M 589.8 98.28 L 603.68 94.53 L 608.64 95.28 L 608.64 95.28 L 589.8 101.11 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/>
    <g transform="translate(557.5,126.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="43" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">User.js</div>
          </div>
        </foreignObject>
        <text x="22" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">User.js</text>
      </switch>
    </g><path d="M 618.96 232.88 L 689.06 232.88 L 758.13 232.88" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 613.71 232.88 L 620.71 229.38 L 618.96 232.88 L 620.71 236.38 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 763.38 232.88 L 756.38 236.38 L 758.13 232.88 L 756.38 229.38 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path
      d="M 589.8 221.01 L 595.79 220.2 L 603.68 229.9 L 603.68 218.45 L 589.8 214.79 Z M 589.8 251.28 L 603.68 247.53 L 603.68 236.25 L 595.79 245.88 L 589.8 245.05 Z M 579.94 273 L 570.09 268.09 L 570.09 261.61 L 562.37 264.17 L 556.28 261.1 L 556.28 257.35 L 551.15 258.57 L 547 256.43 L 547 209.62 L 551.15 207.47 L 556.28 208.69 L 556.28 204.96 L 562.37 201.83 L 570.09 204.32 L 570.09 197.95 L 579.94 193 L 612.9 209.61 L 612.9 256.33 Z"
      fill="#f58534"
      stroke="none"
      pointer-events="none"/><path
      d="M 603.68 247.53 L 603.68 236.25 L 606.24 233.01 L 603.68 229.9 L 603.68 218.45 L 608.64 217.78 L 608.64 248.28 Z M 589.8 245.05 L 589.8 221.01 L 595.79 220.2 L 595.79 245.88 Z M 570.09 268.09 L 570.09 197.95 L 579.94 193 L 579.94 273 Z M 556.28 261.1 L 556.28 204.96 L 562.37 201.83 L 562.37 264.17 Z M 547 256.43 L 547 209.62 L 551.15 207.47 L 551.15 258.57 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path d="M 589.8 214.79 L 589.8 212.03 L 608.64 217.78 L 603.68 218.45 Z" fill-opacity="0.5" fill="#000000" stroke="none" pointer-events="none"/><path d="M 589.8 251.28 L 603.68 247.53 L 608.64 248.28 L 608.64 248.28 L 589.8 254.11 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/>
    <g transform="translate(552.5,279.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="53" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">Article.js</div>
          </div>
        </foreignObject>
        <text x="27" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">Article.js</text>
      </switch>
    </g><path d="M 618.96 387 L 757.98 387" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 613.71 387 L 620.71 383.5 L 618.96 387 L 620.71 390.5 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 763.23 387 L 756.23 390.5 L 757.98 387 L 756.23 383.5 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 618.96 387 Q 689.06 387 689.06 309.94 Q 689.06 232.88 757.98 232.88" fill="none" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 613.71 387 L 620.71 383.5 L 618.96 387 L 620.71 390.5 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path d="M 763.23 232.88 L 756.23 236.38 L 757.98 232.88 L 756.23 229.38 Z" fill="#4d4d4d" stroke="#4d4d4d" stroke-miterlimit="10" pointer-events="none"/><path
      d="M 589.8 375.01 L 595.79 374.2 L 603.68 383.9 L 603.68 372.45 L 589.8 368.79 Z M 589.8 405.28 L 603.68 401.53 L 603.68 390.25 L 595.79 399.88 L 589.8 399.05 Z M 579.94 427 L 570.09 422.09 L 570.09 415.61 L 562.37 418.17 L 556.28 415.1 L 556.28 411.35 L 551.15 412.57 L 547 410.43 L 547 363.62 L 551.15 361.47 L 556.28 362.69 L 556.28 358.96 L 562.37 355.83 L 570.09 358.32 L 570.09 351.95 L 579.94 347 L 612.9 363.61 L 612.9 410.33 Z"
      fill="#f58534"
      stroke="none"
      pointer-events="none"/><path
      d="M 603.68 401.53 L 603.68 390.25 L 606.24 387.01 L 603.68 383.9 L 603.68 372.45 L 608.64 371.78 L 608.64 402.28 Z M 589.8 399.05 L 589.8 375.01 L 595.79 374.2 L 595.79 399.88 Z M 570.09 422.09 L 570.09 351.95 L 579.94 347 L 579.94 427 Z M 556.28 415.1 L 556.28 358.96 L 562.37 355.83 L 562.37 418.17 Z M 547 410.43 L 547 363.62 L 551.15 361.47 L 551.15 412.57 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path d="M 589.8 368.79 L 589.8 366.03 L 608.64 371.78 L 603.68 372.45 Z" fill-opacity="0.5" fill="#000000" stroke="none" pointer-events="none"/><path d="M 589.8 405.28 L 603.68 401.53 L 608.64 402.28 L 608.64 402.28 L 589.8 408.11 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/>
    <g transform="translate(541.5,433.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="75" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">Comment.js</div>
          </div>
        </foreignObject>
        <text x="38" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">Comment.js</text>
      </switch>
    </g><path
      d="M 589.8 528.01 L 595.79 527.2 L 603.68 536.9 L 603.68 525.45 L 589.8 521.79 Z M 589.8 558.28 L 603.68 554.53 L 603.68 543.25 L 595.79 552.88 L 589.8 552.05 Z M 579.94 580 L 570.09 575.09 L 570.09 568.61 L 562.37 571.17 L 556.28 568.1 L 556.28 564.35 L 551.15 565.57 L 547 563.43 L 547 516.62 L 551.15 514.47 L 556.28 515.69 L 556.28 511.96 L 562.37 508.83 L 570.09 511.32 L 570.09 504.95 L 579.94 500 L 612.9 516.61 L 612.9 563.33 Z"
      fill="#f58534"
      stroke="none"
      pointer-events="none"/><path
      d="M 603.68 554.53 L 603.68 543.25 L 606.24 540.01 L 603.68 536.9 L 603.68 525.45 L 608.64 524.78 L 608.64 555.28 Z M 589.8 552.05 L 589.8 528.01 L 595.79 527.2 L 595.79 552.88 Z M 570.09 575.09 L 570.09 504.95 L 579.94 500 L 579.94 580 Z M 556.28 568.1 L 556.28 511.96 L 562.37 508.83 L 562.37 571.17 Z M 547 563.43 L 547 516.62 L 551.15 514.47 L 551.15 565.57 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path d="M 589.8 521.79 L 589.8 519.03 L 608.64 524.78 L 603.68 525.45 Z" fill-opacity="0.5" fill="#000000" stroke="none" pointer-events="none"/><path d="M 589.8 558.28 L 603.68 554.53 L 608.64 555.28 L 608.64 555.28 L 589.8 561.11 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/>
    <g transform="translate(561.5,586.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="34" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">Util.js</div>
          </div>
        </foreignObject>
        <text x="17" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">Util.js</text>
      </switch>
    </g><path
      d="M 788.36 120 L 772.3 112.11 L 764.5 102.33 L 764.5 93.89 L 766.73 93.66 L 766.73 91.55 L 764.5 90.21 L 764.5 81.77 L 766.73 81.77 L 766.73 78.22 L 764.5 78.22 L 764.5 69.79 L 766.73 68.44 L 766.73 66.34 L 764.5 66.1 L 764.5 57.66 L 772.3 47.88 L 788.36 40 L 810.6 40 L 826.52 47.88 L 835.43 57.66 L 835.43 66.1 L 832.43 66.32 L 832.43 68.32 L 835.43 69.88 L 835.43 78.22 L 832.43 78.22 L 832.43 81.77 L 835.43 81.77 L 835.43 90.33 L 832.43 91.77 L 832.43 93.66 L 835.43 93.89 L 835.43 102.33 L 826.52 112.11 L 810.6 120 Z"
      fill="#2e73b8"
      stroke="none"
      pointer-events="none"/><path
      d="M 788.36 54.77 L 772.3 60.11 L 772.3 47.88 L 788.36 40 Z M 788.36 76.99 L 772.3 77.43 L 772.3 65.25 L 788.36 61.43 Z M 788.36 98.11 L 772.3 94.54 L 772.3 82.56 L 788.36 83.67 Z M 788.36 120 L 772.3 112.11 L 772.3 99.87 L 788.36 104.77 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path
      d="M 835.43 93.89 L 826.52 99.89 L 810.6 104.77 L 788.36 104.77 L 772.3 99.87 L 772.3 112.11 L 764.5 102.33 L 764.5 93.89 L 766.73 93.66 L 766.73 91.55 L 764.5 90.21 L 764.5 81.77 L 766.73 81.77 L 766.73 78.22 L 764.5 78.22 L 764.5 69.79 L 766.73 68.44 L 766.73 66.34 L 764.5 66.1 L 764.5 57.66 L 772.3 47.88 L 772.3 60.11 L 788.36 54.77 L 810.6 54.77 L 826.52 59.89 L 835.43 66.1 L 832.43 66.32 L 832.43 68.32 L 826.52 65.21 L 810.6 61.43 L 788.36 61.43 L 772.3 65.25 L 772.3 77.43 L 788.36 76.99 L 810.6 76.99 L 826.52 77.55 L 835.43 78.22 L 832.43 78.22 L 832.43 81.77 L 835.43 81.77 L 826.52 82.56 L 810.6 83.67 L 788.36 83.67 L 772.3 82.56 L 772.3 94.54 L 788.36 98.11 L 810.6 98.11 L 826.52 94.66 L 832.43 91.77 L 832.43 93.66 Z"
      fill-opacity="0.5"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path d="M 810.6 54.77 L 810.6 40 L 826.52 47.88 L 826.52 59.89 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.6 61.43 L 826.52 65.21 L 826.52 77.55 L 810.6 76.99 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.6 83.67 L 826.52 82.56 L 826.52 94.66 L 810.6 98.11 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.6 104.77 L 826.52 99.89 L 826.52 112.11 L 810.6 120 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/>
    <g transform="translate(761.5,126.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="74" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">Users Table</div>
          </div>
        </foreignObject>
        <text x="37" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">Users Table</text>
      </switch>
    </g><path
      d="M 788.36 273 L 772.3 265.11 L 764.5 255.33 L 764.5 246.89 L 766.73 246.66 L 766.73 244.55 L 764.5 243.21 L 764.5 234.77 L 766.73 234.77 L 766.73 231.22 L 764.5 231.22 L 764.5 222.79 L 766.73 221.44 L 766.73 219.34 L 764.5 219.1 L 764.5 210.66 L 772.3 200.88 L 788.36 193 L 810.6 193 L 826.52 200.88 L 835.43 210.66 L 835.43 219.1 L 832.43 219.32 L 832.43 221.32 L 835.43 222.88 L 835.43 231.22 L 832.43 231.22 L 832.43 234.77 L 835.43 234.77 L 835.43 243.33 L 832.43 244.77 L 832.43 246.66 L 835.43 246.89 L 835.43 255.33 L 826.52 265.11 L 810.6 273 Z"
      fill="#2e73b8"
      stroke="none"
      pointer-events="none"/><path
      d="M 788.36 207.77 L 772.3 213.11 L 772.3 200.88 L 788.36 193 Z M 788.36 229.99 L 772.3 230.43 L 772.3 218.25 L 788.36 214.43 Z M 788.36 251.11 L 772.3 247.54 L 772.3 235.56 L 788.36 236.67 Z M 788.36 273 L 772.3 265.11 L 772.3 252.87 L 788.36 257.77 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path
      d="M 835.43 246.89 L 826.52 252.89 L 810.6 257.77 L 788.36 257.77 L 772.3 252.87 L 772.3 265.11 L 764.5 255.33 L 764.5 246.89 L 766.73 246.66 L 766.73 244.55 L 764.5 243.21 L 764.5 234.77 L 766.73 234.77 L 766.73 231.22 L 764.5 231.22 L 764.5 222.79 L 766.73 221.44 L 766.73 219.34 L 764.5 219.1 L 764.5 210.66 L 772.3 200.88 L 772.3 213.11 L 788.36 207.77 L 810.6 207.77 L 826.52 212.89 L 835.43 219.1 L 832.43 219.32 L 832.43 221.32 L 826.52 218.21 L 810.6 214.43 L 788.36 214.43 L 772.3 218.25 L 772.3 230.43 L 788.36 229.99 L 810.6 229.99 L 826.52 230.55 L 835.43 231.22 L 832.43 231.22 L 832.43 234.77 L 835.43 234.77 L 826.52 235.56 L 810.6 236.67 L 788.36 236.67 L 772.3 235.56 L 772.3 247.54 L 788.36 251.11 L 810.6 251.11 L 826.52 247.66 L 832.43 244.77 L 832.43 246.66 Z"
      fill-opacity="0.5"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path d="M 810.6 207.77 L 810.6 193 L 826.52 200.88 L 826.52 212.89 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.6 214.43 L 826.52 218.21 L 826.52 230.55 L 810.6 229.99 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.6 236.67 L 826.52 235.56 L 826.52 247.66 L 810.6 251.11 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.6 257.77 L 826.52 252.89 L 826.52 265.11 L 810.6 273 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/>
    <g transform="translate(757.5,279.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="83" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">Articles Table</div>
          </div>
        </foreignObject>
        <text x="42" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">Articles Table</text>
      </switch>
    </g><path
      d="M 788.29 427 L 772.23 419.11 L 764.43 409.33 L 764.43 400.89 L 766.66 400.66 L 766.66 398.55 L 764.43 397.21 L 764.43 388.77 L 766.66 388.77 L 766.66 385.22 L 764.43 385.22 L 764.43 376.79 L 766.66 375.44 L 766.66 373.34 L 764.43 373.1 L 764.43 364.66 L 772.23 354.88 L 788.29 347 L 810.53 347 L 826.45 354.88 L 835.36 364.66 L 835.36 373.1 L 832.36 373.32 L 832.36 375.32 L 835.36 376.88 L 835.36 385.22 L 832.36 385.22 L 832.36 388.77 L 835.36 388.77 L 835.36 397.33 L 832.36 398.77 L 832.36 400.66 L 835.36 400.89 L 835.36 409.33 L 826.45 419.11 L 810.53 427 Z"
      fill="#2e73b8"
      stroke="none"
      pointer-events="none"/><path
      d="M 788.29 361.77 L 772.23 367.11 L 772.23 354.88 L 788.29 347 Z M 788.29 383.99 L 772.23 384.43 L 772.23 372.25 L 788.29 368.43 Z M 788.29 405.11 L 772.23 401.54 L 772.23 389.56 L 788.29 390.67 Z M 788.29 427 L 772.23 419.11 L 772.23 406.87 L 788.29 411.77 Z"
      fill-opacity="0.3"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path
      d="M 835.36 400.89 L 826.45 406.89 L 810.53 411.77 L 788.29 411.77 L 772.23 406.87 L 772.23 419.11 L 764.43 409.33 L 764.43 400.89 L 766.66 400.66 L 766.66 398.55 L 764.43 397.21 L 764.43 388.77 L 766.66 388.77 L 766.66 385.22 L 764.43 385.22 L 764.43 376.79 L 766.66 375.44 L 766.66 373.34 L 764.43 373.1 L 764.43 364.66 L 772.23 354.88 L 772.23 367.11 L 788.29 361.77 L 810.53 361.77 L 826.45 366.89 L 835.36 373.1 L 832.36 373.32 L 832.36 375.32 L 826.45 372.21 L 810.53 368.43 L 788.29 368.43 L 772.23 372.25 L 772.23 384.43 L 788.29 383.99 L 810.53 383.99 L 826.45 384.55 L 835.36 385.22 L 832.36 385.22 L 832.36 388.77 L 835.36 388.77 L 826.45 389.56 L 810.53 390.67 L 788.29 390.67 L 772.23 389.56 L 772.23 401.54 L 788.29 405.11 L 810.53 405.11 L 826.45 401.66 L 832.36 398.77 L 832.36 400.66 Z"
      fill-opacity="0.5"
      fill="#000000"
      stroke="none"
      pointer-events="none"/><path d="M 810.53 361.77 L 810.53 347 L 826.45 354.88 L 826.45 366.89 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.53 368.43 L 826.45 372.21 L 826.45 384.55 L 810.53 383.99 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.53 390.67 L 826.45 389.56 L 826.45 401.66 L 810.53 405.11 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/><path d="M 810.53 411.77 L 826.45 406.89 L 826.45 419.11 L 810.53 427 Z" fill-opacity="0.3" fill="#ffffff" stroke="none" pointer-events="none"/>
    <g transform="translate(746.5,433.5)">
      <switch>
        <foreignObject style="overflow:visible;" pointer-events="all" width="105" height="14" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(77, 77, 77); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;">
            <div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;">Comments Table</div>
          </div>
        </foreignObject>
        <text x="53" y="14" fill="#4D4D4D" text-anchor="middle" font-size="14px" font-family="Helvetica">Comments Table</text>
      </switch>
    </g>
  </g>
</svg>

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/lambda-node-logo.png

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/package.json
{
  "name": "realworld-dynamodb-lambda",
  "version": "1.0.0",
  "description": "A serverless backend implementation for RealWorld using AWS DynamoDB + Lambda",
  "keywords": [
    "realworld",
    "aws",
    "lambda",
    "dynamodb",
    "serverless"
  ],
  "license": "MIT",
  "scripts": {
    "lint": "eslint src/ test/",
    "test": "npm run lint && ./test-api-local.sh",
    "start": "./start-server.sh",
    "stop": "./stop-server.sh",
    "deploy": "serverless deploy",
    "test:deployed": "API_URL=`serverless info --verbose | grep '^ServiceEndpoint:' | grep -o 'https://.*'`; API_URL=$API_URL/api mocha",
    "build:docs": "jsdoc -d gh-pages/jsdoc src/ .jsdoc.summary.md",
    "postinstall": "serverless dynamodb install 2>&1 | awk 'NF'"
  },
  "devDependencies": {
    "aws-sdk": "2.573.0",
    "axios": "^0.19.0",
    "eslint": "^6.6.0",
    "mocha": "^6.2.2",
    "node-jre": "^0.2.3",
    "nyc": "^14.1.1",
    "serverless": "^1.57.0",
    "serverless-dynamodb-local": "0.2.35",
    "serverless-offline": "^4.10.6",
    "showdown": "^1.9.1"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^8.5.1",
    "slugify": "^1.3.6",
    "uuid": "^3.3.3"
  },
  "optionalDependencies": {
    "coveralls": "^3.0.7",
    "jsdoc": "^3.6.3"
  },
  "greenkeeper": {
    "ignore": [
      "aws-sdk"
    ]
  }
}

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/README.md
# ![RealWorld Example App](https://rawgit.com/anishkny/realworld-dynamodb-lambda/master/lambda-node-logo.png)

[![RealWorld Backend](https://img.shields.io/badge/realworld-backend-%23783578.svg)](http://realworld.io)
[![Build Status](https://travis-ci.org/anishkny/realworld-dynamodb-lambda.svg?branch=master)](https://travis-ci.org/anishkny/realworld-dynamodb-lambda)
[![Coverage Status](https://coveralls.io/repos/github/anishkny/realworld-dynamodb-lambda/badge.svg?branch=master)](https://coveralls.io/github/anishkny/realworld-dynamodb-lambda?branch=master)
[![Greenkeeper badge](https://badges.greenkeeper.io/anishkny/realworld-dynamodb-lambda.svg)](https://greenkeeper.io/)
[![Known Vulnerabilities](https://snyk.io/test/github/anishkny/realworld-dynamodb-lambda/badge.svg)](https://snyk.io/test/github/anishkny/realworld-dynamodb-lambda)
[![Gitter](https://img.shields.io/gitter/room/realworld-dev/node-lambda-dynamodb.svg)](https://gitter.im/realworld-dev/node-lambda-dynamodb)

> ### AWS DynamoDB + Lambda codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the [RealWorld](https://github.com/gothinkster/realworld-example-apps) spec and API.


### [Demo](https://anishkny.github.io/realworld-dynamodb-lambda/test-output/network.html)

This codebase was created to demonstrate a fully fledged fullstack application built with **AWS DynamoDB + Lambda** including CRUD operations, authentication, routing, pagination, and more.

We've gone to great lengths to adhere to the **AWS DynamoDB + Lambda** community styleguides & best practices.

For more information on how to this works with other frontends/backends, head over to the [RealWorld](https://github.com/gothinkster/realworld) repo.

# Getting started

*Requires Node 8 or higher*

Clone this repo, and cd into it:
```
git clone https://github.com/anishkny/realworld-dynamodb-lambda
cd realworld-dynamodb-lambda
```

## Starting the local server

```
npm install
npm run start
```

This should start local DynamoDB emulator and Serverless offline. You can now make API calls against `http://localhost:3000/api` like this:

```
curl http://localhost:3000/api/articles

Serverless: GET /api/articles (λ: listArticles)
Serverless: The first request might take a few extra seconds
Serverless: [200] {"statusCode":200,"headers":{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":true},"body":"{\"articles\":[]}"}
```

## Running tests locally
```
npm test
```
See sample test run [log](https://travis-ci.org/anishkny/realworld-dynamodb-lambda) and [network traffic](https://anishkny.github.io/realworld-dynamodb-lambda/test-output/network.html).

# How it works

## Overview
This repo uses [Serverless Framework](https://serverless.com) to describe, test and deploy the [RealWorld REST API](https://github.com/gothinkster/realworld/blob/master/api/README.md#endpoints) to [AWS Lambda](https://aws.amazon.com/lambda/). AWS Lambda provides "serverless" cloud functions as a service. [AWS API Gateway](https://aws.amazon.com/api-gateway/) is used to expose the deployed Lambda functions as a HTTP REST API.

![Architecture Diagram](architecture.svg)

## API
The API is described in the [`serverless.yml`](serverless.yml) file. For example the following snippet instructs AWS Lambda to execute the `create` method in [`src/User.js`](src/User.js) whenever a `POST` method is called on `/api/users`:
```
functions:

  ## Users API
  createUser:
    handler: src/User.create
    events:
      - http:
          method: POST
          path: /api/users
          cors: true

  ...
```

## Storage
For storage, [AWS DynamoDB](https://aws.amazon.com/dynamodb/) a managed serverless NoSQL database is used. Tables are created to store `users`, `articles` and `comments` also described in `serverless.yml` file. For example:
```
resources:
  Resources:

    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        ...
```

## Deployment
To deploy the code to AWS, simply execute:
```
npm run deploy
```
This will use `serverless` to deploy the API as described in `serverless.yml`.

Once deployed, you can test the deployed API by executing:
```
npm run test:deployed
```

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/serverless.yml
service: realworld

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

package:
  exclude:
    - test/**
    - coverage/**
    - lambda-node-logo.png
    - .nyc_output/**

plugins:
  - serverless-dynamodb-local
  - serverless-offline

functions:

  ## Users API
  createUser:
    handler: src/User.create
    events:
      - http:
          method: POST
          path: /api/users
          cors: true

  loginUser:
    handler: src/User.login
    events:
      - http:
          method: POST
          path: /api/users/login
          cors: true

  getUser:
    handler: src/User.get
    events:
      - http:
          method: GET
          path: /api/user
          cors: true

  updateUser:
    handler: src/User.update
    events:
      - http:
          method: PUT
          path: /api/user
          cors: true

  getProfile:
    handler: src/User.getProfile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true

  followUser:
    handler: src/User.follow
    events:
      - http:
          method: POST
          path: /api/profiles/{username}/follow
          cors: true

  unfollowUser:
    handler: src/User.follow
    events:
      - http:
          method: DELETE
          path: /api/profiles/{username}/follow
          cors: true

  ## Articles API
  createArticle:
    handler: src/Article.create
    events:
      - http:
          method: POST
          path: /api/articles
          cors: true

  getArticle:
    handler: src/Article.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}
          cors: true

  udpateArticle:
    handler: src/Article.update
    events:
      - http:
          method: PUT
          path: /api/articles/{slug}
          cors: true

  deleteArticle:
    handler: src/Article.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}
          cors: true

  favoriteArticle:
    handler: src/Article.favorite
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/favorite
          cors: true

  unfavoriteArticle:
    handler: src/Article.favorite
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/favorite
          cors: true

  listArticles:
    handler: src/Article.list
    events:
      - http:
          method: GET
          path: /api/articles
          cors: true

  getArticlesFeed:
    handler: src/Article.getFeed
    events:
      - http:
          method: GET
          path: /api/articles/feed
          cors: true

  getTags:
    handler: src/Article.getTags
    events:
      - http:
          method: GET
          path: /api/tags
          cors: true

  ## Comments API
  createComment:
    handler: src/Comment.create
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/comments
          cors: true

  getComments:
    handler: src/Comment.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}/comments
          cors: true

  deleteComment:
    handler: src/Comment.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/comments/{id}
          cors: true

  ## Utils API
  ping:
    handler: src/Util.ping
    events:
      - http:
          method: GET
          path: /api/ping
          cors: true

  purgeData:
    handler: src/Util.purgeData
    events:
      - http: DELETE /api/__TESTUTILS__/purge

resources:
  Resources:

    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-users
        GlobalSecondaryIndexes:
          -
            IndexName: email
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ArticlesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: slug
            AttributeType: S
          -
            AttributeName: dummy
            AttributeType: S
          -
            AttributeName: updatedAt
            AttributeType: N
        KeySchema:
          -
            AttributeName: slug
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-articles
        GlobalSecondaryIndexes:
          -
            IndexName: updatedAt
            KeySchema:
              -
                AttributeName: dummy
                KeyType: HASH
              -
                AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    CommentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: slug
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-comments
        GlobalSecondaryIndexes:
          -
            IndexName: article
            KeySchema:
              -
                AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/start-server.sh
#!/usr/bin/env bash
set -x
./stop-server.sh

# Add JRE to path
export JRE_PATH=`find node_modules/node-jre -type f -name java`
export JRE_PATH=`dirname $JRE_PATH`
export JRE_PATH=`pwd`/$JRE_PATH
export PATH=$JRE_PATH:$PATH
set -e
which java
java -version

# Start local dynamodb and offline plugins
export AWS_ACCESS_KEY_ID=foo
export AWS_SECRET_ACCESS_KEY=bar
serverless dynamodb start --migrate &
sleep 5
nyc serverless offline &
sleep 5

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/stop-server.sh
#!/usr/bin/env bash
set -x
SERVER_PIDS=`lsof -ti:3000 -ti:8000`
if [ -n "$SERVER_PIDS" ]; then
  kill $SERVER_PIDS
fi

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test-api-local.sh
#!/usr/bin/env bash
rm -rf .test_output && mkdir -p .test_output

echo -n 'Starting server (see .test_output/server.log)... '
./start-server.sh > .test_output/server.log 2>&1
echo 'Done!'

touch .test_output/network.md
export NETWORK_DUMP_FILE=.test_output/network.md

set -eo pipefail
API_URL=http://localhost:3000/api mocha
set +e

cat << EOF > .test_output/network.html
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdn.rawgit.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css">
<style>
	.markdown-body {
		box-sizing: border-box;
		min-width: 200px;
		max-width: 980px;
		margin: 0 auto;
		padding: 45px;
	}

	@media (max-width: 767px) {
		.markdown-body {
			padding: 15px;
		}
	}
</style>
<article class="markdown-body">
EOF
showdown --quiet makehtml --input $NETWORK_DUMP_FILE >> .test_output/network.html

echo -n 'Stopping server (see .test_output/server.log)... '
sleep 5
./stop-server.sh >> .test_output/server.log 2>&1
echo 'Done!'

nyc report

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/Article.js
const Util = require('./Util');
const User = require('./User');
const articlesTable = Util.getTableName('articles');
const slugify = require('slugify');

/**
 * @module Article
 */
module.exports = {

  /** Create article */
  async create(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Must be logged in.', 422);
    }

    const body = JSON.parse(event.body);
    if (!body.article) {
      return Util.envelop('Article must be specified.', 422);
    }
    const articleData = body.article;
    for (const expectedField of ['title', 'description', 'body']) {
      if (!articleData[expectedField]) {
        return Util.envelop(`${expectedField} must be specified.`, 422);
      }
    }

    const timestamp = (new Date()).getTime();
    const slug = slugify(articleData.title) + '-' +
      (Math.random() * Math.pow(36, 6) | 0).toString(36);
    const article = {
      slug,
      title: articleData.title,
      description: articleData.description,
      body: articleData.body,
      createdAt: timestamp,
      updatedAt: timestamp,
      author: authenticatedUser.username,
      dummy: 'OK',
    };
    if (articleData.tagList) {
      article.tagList = Util.DocumentClient.createSet(articleData.tagList);
    }

    await Util.DocumentClient.put({
      TableName: articlesTable,
      Item: article,
    }).promise();

    delete article.dummy;
    article.tagList = articleData.tagList || [];
    article.favorited = false;
    article.favoritesCount = 0;
    article.author = {
      username: authenticatedUser.username,
      bio: authenticatedUser.bio || '',
      image: authenticatedUser.image || '',
      following: false,
    };

    return Util.envelop({ article });
  },

  /** Get article */
  async get(event) {
    const slug = event.pathParameters.slug;

    /* istanbul ignore if  */
    if (!slug) {
      return Util.envelop('Slug must be specified.', 422);
    }

    const article = (await Util.DocumentClient.get({
      TableName: articlesTable,
      Key: { slug },
    }).promise()).Item;
    if (!article) {
      return Util.envelop(`Article not found: [${slug}]`, 422);
    }

    const authenticatedUser = await User.authenticateAndGetUser(event);
    return Util.envelop({
      article: await transformRetrievedArticle(article, authenticatedUser)
    });
  },

  /** Update article */
  async update(event) {
    const body = JSON.parse(event.body);
    const articleMutation = body.article;
    if (!articleMutation) {
      return Util.envelop('Article mutation must be specified.', 422);
    }

    // Ensure at least one mutation is requested
    if (!articleMutation.title &&
      !articleMutation.description && !articleMutation.body) {
      return Util.envelop(
        'At least one field must be specified: [title, description, article].',
        422);
    }

    const authenticatedUser = await User.authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Must be logged in.', 422);
    }

    const slug = event.pathParameters.slug;

    /* istanbul ignore if  */
    if (!slug) {
      return Util.envelop('Slug must be specified.', 422);
    }

    const article = (await Util.DocumentClient.get({
      TableName: articlesTable,
      Key: { slug },
    }).promise()).Item;
    if (!article) {
      return Util.envelop(`Article not found: [${slug}]`, 422);
    }

    // Ensure article is authored by authenticatedUser
    if (article.author !== authenticatedUser.username) {
      return Util.envelop('Article can only be updated by author: ' +
        `[${article.author}]`, 422);
    }

    // Apply mutations to retrieved article
    ['title', 'description', 'body'].forEach(field => {
      if (articleMutation[field]) {
        article[field] = articleMutation[field];
      }
    });
    await Util.DocumentClient.put({
      TableName: articlesTable,
      Item: article,
    }).promise();

    const updatedArticle = (await Util.DocumentClient.get({
      TableName: articlesTable,
      Key: { slug },
    }).promise()).Item;

    return Util.envelop({
      article: await transformRetrievedArticle(
        updatedArticle, authenticatedUser),
    });
  },

  /** Delete article */
  async delete(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Must be logged in.', 422);
    }

    const slug = event.pathParameters.slug;

    /* istanbul ignore if  */
    if (!slug) {
      return Util.envelop('Slug must be specified.', 422);
    }

    const article = (await Util.DocumentClient.get({
      TableName: articlesTable,
      Key: { slug },
    }).promise()).Item;
    if (!article) {
      return Util.envelop(`Article not found: [${slug}]`, 422);
    }

    // Ensure article is authored by authenticatedUser
    if (article.author !== authenticatedUser.username) {
      return Util.envelop('Article can only be deleted by author: ' +
        `[${article.author}]`, 422);
    }

    await Util.DocumentClient.delete({
      TableName: articlesTable,
      Key: { slug },
    }).promise();

    return Util.envelop({});
  },

  /** Favorite/unfavorite article */
  async favorite(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Must be logged in.', 422);
    }

    const slug = event.pathParameters.slug;

    /* istanbul ignore if  */
    if (!slug) {
      return Util.envelop('Slug must be specified.', 422);
    }

    let article = (await Util.DocumentClient.get({
      TableName: articlesTable,
      Key: { slug },
    }).promise()).Item;
    if (!article) {
      return Util.envelop(`Article not found: [${slug}]`, 422);
    }

    // Set/unset favorite bit and count for article
    const shouldFavorite = !(event.httpMethod === 'DELETE');
    if (shouldFavorite) {
      /* istanbul ignore next */
      if (!article.favoritedBy) {
        article.favoritedBy = [];
      }
      article.favoritedBy.push(authenticatedUser.username);
      article.favoritesCount = 1;
    } else {
      article.favoritedBy = article.favoritedBy.filter(
        e => (e !== authenticatedUser.username));
      /* istanbul ignore next */
      if (article.favoritedBy.length === 0) {
        delete article.favoritedBy;
      }
    }
    article.favoritesCount = article.favoritedBy ?
      article.favoritedBy.length : 0;
    await Util.DocumentClient.put({
      TableName: articlesTable,
      Item: article,
    }).promise();

    article = await transformRetrievedArticle(article);
    article.favorited = shouldFavorite;
    return Util.envelop({ article });
  },

  /** List articles */
  async list(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    const params = event.queryStringParameters || {};
    const limit = parseInt(params.limit) || 20;
    const offset = parseInt(params.offset) || 0;
    if ((params.tag && params.author) ||
      (params.author && params.favorited) || (params.favorited && params.tag)) {
      return Util.envelop(
        'Only one of these can be specified: [tag, author, favorited]', 422);
    }
    const queryParams = {
      TableName: articlesTable,
      IndexName: 'updatedAt',
      KeyConditionExpression: 'dummy = :dummy',
      ExpressionAttributeValues: {
        ':dummy': 'OK',
      },
      ScanIndexForward: false,
    };
    if (params.tag) {
      queryParams.FilterExpression = 'contains(tagList, :tag)';
      queryParams.ExpressionAttributeValues[':tag'] = params.tag;
    } else if (params.author) {
      queryParams.FilterExpression = 'author = :author';
      queryParams.ExpressionAttributeValues[':author'] = params.author;
    } else if (params.favorited) {
      queryParams.FilterExpression = 'contains(favoritedBy, :favorited)';
      queryParams.ExpressionAttributeValues[':favorited'] = params.favorited;
    }
    return Util.envelop({
      articles: await queryEnoughArticles(queryParams, authenticatedUser,
        limit, offset)
    });
  },

  /** Get Articles feed */
  async getFeed(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Must be logged in.', 422);
    }

    const params = event.queryStringParameters || {};
    const limit = parseInt(params.limit) || 20;
    const offset = parseInt(params.offset) || 0;

    // Get followed users
    const followed = await User.getFollowedUsers(authenticatedUser.username);
    if (!followed.length) {
      return Util.envelop({ articles: [] });
    }

    const queryParams = {
      TableName: articlesTable,
      IndexName: 'updatedAt',
      KeyConditionExpression: 'dummy = :dummy',
      FilterExpression: 'author IN ',
      ExpressionAttributeValues: {
        ':dummy': 'OK',
      },
      ScanIndexForward: false,
    };

    // Query articlesTable to filter only authored by followed users
    // This results in:
    //   FilterExpression:
    //      'author IN (:author0, author1, ...)',
    //   ExpressionAttributeValues:
    //      { ':dummy': 'OK', ':author0': 'authoress-kly3oz', ':author1': ... },
    for (let i = 0; i < followed.length; ++i) {
      queryParams.ExpressionAttributeValues[`:author${i}`] = followed[i];
    }
    queryParams.FilterExpression += '(' +
      Object.keys(queryParams.ExpressionAttributeValues)
      .filter(e => e !== ':dummy').join(",") +
      ')';
    console.log(`FilterExpression: [${queryParams.FilterExpression}]`);
    return Util.envelop({
      articles: await queryEnoughArticles(queryParams, authenticatedUser,
        limit, offset),
    });
  },

  /** Get list of tags */
  async getTags() {
    const uniqTags = {};

    let lastEvaluatedKey = null;
    do {
      const scanParams = {
        TableName: articlesTable,
        AttributesToGet: ['tagList'],
      };
      /* istanbul ignore next */
      if (lastEvaluatedKey) {
        scanParams.ExclusiveStartKey = lastEvaluatedKey;
      }
      const data = await Util.DocumentClient.scan(scanParams).promise();
      data.Items.forEach(item => {
        /* istanbul ignore next */
        if (item.tagList && item.tagList.values) {
          item.tagList.values.forEach(tag => uniqTags[tag] = 1);
        }
      });
      lastEvaluatedKey = data.LastEvaluatedKey;
    } while (lastEvaluatedKey);
    const tags = Object.keys(uniqTags);

    return Util.envelop({ tags });
  },

};

/**
 * Given queryParams, repeatedly call query until we have enough records
 * to satisfy (limit + offset)
 */
async function queryEnoughArticles(queryParams, authenticatedUser,
  limit, offset) {

  // Call query repeatedly, until we have enough records, or there are no more
  const queryResultItems = [];
  while (queryResultItems.length < (offset + limit)) {
    const queryResult = await Util.DocumentClient.query(queryParams)
      .promise();
    queryResultItems.push(...queryResult.Items);
    /* istanbul ignore next */
    if (queryResult.LastEvaluatedKey) {
      queryParams.ExclusiveStartKey = queryResult.LastEvaluatedKey;
    } else {
      break;
    }
  }

  // Decorate last "limit" number of articles with author data
  const articlePromises = [];
  queryResultItems.slice(offset, offset + limit).forEach(a =>
    articlePromises.push(transformRetrievedArticle(a, authenticatedUser)));
  const articles = await Promise.all(articlePromises);
  return articles;
}

/**
 * Given an article retrieved from table,
 * decorate it with extra information like author, favorite, following etc.
 */
async function transformRetrievedArticle(article, authenticatedUser) {
  delete article.dummy;
  article.tagList = article.tagList ? article.tagList.values : [];
  article.favoritesCount = article.favoritesCount || 0;
  article.favorited = false;
  if (article.favoritedBy && authenticatedUser) {
    article.favorited = article.favoritedBy
      .includes(authenticatedUser.username);
    delete article.favoritedBy;
  }
  article.author = await User.getProfileByUsername(article.author,
    authenticatedUser);
  return article;
}

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/Comment.js
const Util = require('./Util');
const User = require('./User');
const articlesTable = Util.getTableName('articles');
const commentsTable = Util.getTableName('comments');
const uuidv4 = require('uuid/v4');

/**
 * @module Comment
 */
module.exports = {

  /** Create comment */
  async create(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Must be logged in.', 422);
    }

    const body = JSON.parse(event.body);
    if (!body.comment || !body.comment.body) {
      return Util.envelop('Comment must be specified.', 422);
    }
    const commentBody = body.comment.body;

    const slug = event.pathParameters.slug;
    const article = (await Util.DocumentClient.get({
      TableName: articlesTable,
      Key: { slug },
    }).promise()).Item;
    if (!article) {
      return Util.envelop(`Article not found: [${slug}]`, 422);
    }

    const timestamp = (new Date()).getTime();
    const comment = {
      id: uuidv4(),
      slug: slug,
      body: commentBody,
      createdAt: timestamp,
      updatedAt: timestamp,
      author: authenticatedUser.username,
    };

    await Util.DocumentClient.put({
      TableName: commentsTable,
      Item: comment,
    }).promise();

    comment.author = {
      username: authenticatedUser.username,
      bio: authenticatedUser.bio || '',
      image: authenticatedUser.image || '',
      following: false,
    };

    return Util.envelop({ comment });
  },

  /** Get comments for an article */
  async get(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    const slug = event.pathParameters.slug;

    const comments = (await Util.DocumentClient.query({
      TableName: commentsTable,
      IndexName: 'article',
      KeyConditionExpression: 'slug = :slug',
      ExpressionAttributeValues: {
        ':slug': slug,
      },
    }).promise()).Items;

    // Get profile for each comment's author
    for (let i = 0; i < comments.length; ++i) {
      comments[i].author = await User.getProfileByUsername(comments[i].author,
        authenticatedUser);
    }

    return Util.envelop({ comments });
  },

  /** Delete comment */
  async delete(event) {
    const authenticatedUser = await User.authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Must be logged in.', 422);
    }
    const commentId = event.pathParameters.id;

    const comment = (await Util.DocumentClient.get({
      TableName: commentsTable,
      Key: {
        id: commentId,
      },
    }).promise()).Item;
    if (!comment) {
      return Util.envelop(`Comment ID not found: [${commentId}]`, 422);
    }

    // Only comment author can delete comment
    if (comment.author !== authenticatedUser.username) {
      return Util.envelop(
        `Only comment author can delete: [${comment.author}]`, 422);
    }

    await Util.DocumentClient.delete({
      TableName: commentsTable,
      Key: {
        id: commentId,
      },
    }).promise();

    return Util.envelop({});
  },

};

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/User.js
const Util = require('./Util');
const usersTable = Util.getTableName('users');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

/**
 * @module User
 */
module.exports = {

  /** Create user */
  async create(event) {
    const body = JSON.parse(event.body);

    if (!body.user) {
      return Util.envelop('User must be specified.', 422);
    }
    const newUser = body.user;
    if (!newUser.username) {
      return Util.envelop('Username must be specified.', 422);
    }
    if (!newUser.email) {
      return Util.envelop('Email must be specified.', 422);
    }
    if (!newUser.password) {
      return Util.envelop('Password must be specified.', 422);
    }

    // Verify username is not taken
    const userWithThisUsername = await getUserByUsername(newUser.username);
    if (userWithThisUsername.Item) {
      return Util.envelop(`Username already taken: [${newUser.username}]`, 422);
    }

    // Verify email is not taken
    const userWithThisEmail = await getUserByEmail(newUser.email);
    if (userWithThisEmail.Count !== 0) {
      return Util.envelop(`Email already taken: [${newUser.email}]`, 422);
    }

    // Add new entry to usersTable
    const encryptedPassword = bcrypt.hashSync(newUser.password, 5);
    await Util.DocumentClient.put({
      TableName: usersTable,
      Item: {
        username: newUser.username,
        email: newUser.email,
        password: encryptedPassword,
      },
    }).promise();

    return Util.envelop({
      user: {
        email: newUser.email,
        token: mintToken(newUser.username),
        username: newUser.username,
        bio: '',
        image: '',
      }
    });
  },

  /** Login user */
  async login(event) {
    const body = JSON.parse(event.body);
    if (!body.user) {
      return Util.envelop('User must be specified.', 422);
    }
    const user = body.user;
    if (!user.email) {
      return Util.envelop('Email must be specified.', 422);
    }
    if (!user.password) {
      return Util.envelop('Password must be specified.', 422);
    }

    // Get user with this email
    const userWithThisEmail = await getUserByEmail(user.email);
    if (userWithThisEmail.Count !== 1) {
      return Util.envelop(`Email not found: [${user.email}]`, 422);
    }

    // Attempt to match password
    if (!bcrypt.compareSync(user.password,
        userWithThisEmail.Items[0].password)) {
      return Util.envelop('Wrong password.', 422);
    }

    const authenticatedUser = {
      email: user.email,
      token: mintToken(userWithThisEmail.Items[0].username),
      username: userWithThisEmail.Items[0].username,
      bio: userWithThisEmail.Items[0].bio || '',
      image: userWithThisEmail.Items[0].image || '',
    };
    return Util.envelop({ user: authenticatedUser });
  },

  /** Get user */
  async get(event) {
    const authenticatedUser = await authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Token not present or invalid.', 422);
    }
    return Util.envelop({
      user: {
        email: authenticatedUser.email,
        token: getTokenFromEvent(event),
        username: authenticatedUser.username,
        bio: authenticatedUser.bio || '',
        image: authenticatedUser.image || '',
      }
    });
  },

  /** Update user */
  async update(event) {
    const authenticatedUser = await authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Token not present or invalid.', 422);
    }
    const body = JSON.parse(event.body);
    const user = body.user;
    if (!user) {
      return Util.envelop('User must be specified.', 422);
    }
    const updatedUser = {
      username: authenticatedUser.username,
    };
    if (user.email) {
      // Verify email is not taken
      const userWithThisEmail = await getUserByEmail(user.email);
      if (userWithThisEmail.Count !== 0) {
        return Util.envelop(`Email already taken: [${user.email}]`, 422);
      }
      updatedUser.email = user.email;
    }
    if (user.password) {
      updatedUser.password = bcrypt.hashSync(user.password, 5);
    }
    if (user.image) {
      updatedUser.image = user.image;
    }
    if (user.bio) {
      updatedUser.bio = user.bio;
    }

    await Util.DocumentClient.put({
      TableName: usersTable,
      Item: updatedUser,
    }).promise();

    // Decorate updatedUser and return it
    if (updatedUser.password) {
      delete updatedUser.password;
    }
    if (!updatedUser.email) {
      updatedUser.email = authenticatedUser.email;
    }
    if (!updatedUser.image) {
      updatedUser.image = authenticatedUser.image || '';
    }
    if (!updatedUser.bio) {
      updatedUser.bio = authenticatedUser.bio || '';
    }
    updatedUser.token = getTokenFromEvent(event);

    return Util.envelop({
      user: updatedUser,
    });

  },

  authenticateAndGetUser,
  getUserByUsername,

  async getProfile(event) {
    const username = event.pathParameters.username;
    const authenticatedUser =
      await authenticateAndGetUser(event);
    const profile = await getProfileByUsername(username,
      authenticatedUser);
    if (!profile) {
      return Util.envelop(`User not found: [${username}]`, 422);
    }
    return Util.envelop({ profile });
  },

  getProfileByUsername,

  async follow(event) {
    const authenticatedUser = await authenticateAndGetUser(event);
    if (!authenticatedUser) {
      return Util.envelop('Token not present or invalid.', 422);
    }
    const username = event.pathParameters.username;
    const user = (await getUserByUsername(username)).Item;
    const shouldFollow = !(event.httpMethod === 'DELETE');

    // Update "followers" field on followed user
    if (shouldFollow) {
      if (user.followers &&
        !user.followers.values.includes(authenticatedUser.username)) {
        user.followers.values.push(authenticatedUser.username);
      } else {
        user.followers = Util.DocumentClient.createSet(
          [authenticatedUser.username]);
      }
    } else {
      if (user.followers &&
        user.followers.values.includes(authenticatedUser.username)) {
        user.followers.values = user.followers.values.filter(
          e => e != authenticatedUser.username
        );
        if (!user.followers.values.length) {
          delete user.followers;
        }
      }
    }
    await Util.DocumentClient.put({
      TableName: usersTable,
      Item: user,
    }).promise();

    // Update "following" field on follower user
    if (shouldFollow) {
      if (authenticatedUser.following &&
        !authenticatedUser.following.values.includes(username)) {
        authenticatedUser.following.values.push(username);
      } else {
        authenticatedUser.following = Util.DocumentClient.createSet([username]);
      }
    } else {
      if (authenticatedUser.following &&
        authenticatedUser.following.values.includes(username)) {
        authenticatedUser.following.values =
          authenticatedUser.following.values.filter(
            e => e != username
          );
        /* istanbul ignore next  */
        if (!authenticatedUser.following.values.length) {
          delete authenticatedUser.following;
        }
      }
    }
    await Util.DocumentClient.put({
      TableName: usersTable,
      Item: authenticatedUser,
    }).promise();

    const profile = {
      username,
      bio: user.bio || '',
      image: user.image || '',
      following: shouldFollow,
    };
    return Util.envelop({ profile });
  },

  /** Create followed users */
  async getFollowedUsers(aUsername) {
    const user = (await Util.DocumentClient.get({
      TableName: usersTable,
      Key: {
        username: aUsername,
      },
    }).promise()).Item;
    return user.following ? user.following.values : [];
  },

};

function mintToken(aUsername) {
  return jwt.sign({ username: aUsername },
    Util.tokenSecret, { expiresIn: '2 days' });
}

function getUserByEmail(aEmail) {
  return Util.DocumentClient.query({
    TableName: usersTable,
    IndexName: 'email',
    KeyConditionExpression: 'email = :email',
    ExpressionAttributeValues: {
      ':email': aEmail,
    },
    Select: 'ALL_ATTRIBUTES',
  }).promise();
}

function getUserByUsername(aUsername) {
  return Util.DocumentClient.get({
    TableName: usersTable,
    Key: {
      username: aUsername,
    },
  }).promise();
}

function getTokenFromEvent(event) {
  return event.headers.Authorization.replace('Token ', '');
}

async function getProfileByUsername(aUsername, aAuthenticatedUser) {
  const user = (await getUserByUsername(aUsername)).Item;
  if (!user) {
    return null;
  }

  const profile = {
    username: user.username,
    bio: user.bio || '',
    image: user.image || '',
    following: false,
  };

  // If user is authenticated, set following bit
  if (user.followers && aAuthenticatedUser) {
    profile.following = user.followers.values
      .includes(aAuthenticatedUser.username);
  }
  return profile;
}

async function authenticateAndGetUser(event) {
  try {
    const token = getTokenFromEvent(event);
    const decoded = jwt.verify(token, Util.tokenSecret);
    const username = decoded.username;
    const authenticatedUser = await getUserByUsername(username);
    return authenticatedUser.Item;
  } catch (err) {
    return null;
  }
}

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/src/Util.js
/* istanbul ignore next */
if (!process.env.AWS_REGION) {
  process.env.AWS_REGION = 'us-east-1';
}

/* istanbul ignore next */
if (!process.env.DYNAMODB_NAMESPACE) {
  process.env.DYNAMODB_NAMESPACE = 'dev';
}

const AWS = require('aws-sdk');

// In offline mode, use DynamoDB local server
let DocumentClient = null;
/* istanbul ignore next */
if (process.env.IS_OFFLINE) {
  AWS.config.update({
    region: 'localhost',
    endpoint: "http://localhost:8000"
  });
}
DocumentClient = new AWS.DynamoDB.DocumentClient();


module.exports = {

  async ping() {
    return envelop({
      pong: new Date(),
      AWS_REGION: process.env.AWS_REGION,
      DYNAMODB_NAMESPACE: process.env.DYNAMODB_NAMESPACE,
    });
  },

  async purgeData() {
    await purgeTable('users', 'username');
    await purgeTable('articles', 'slug');
    await purgeTable('comments', 'id');
    return envelop('Purged all data!');
  },

  getTableName(aName) {
    return `realworld-${process.env.DYNAMODB_NAMESPACE}-${aName}`;
  },

  envelop,

  tokenSecret: /* istanbul ignore next */ process.env.SECRET ?
    process.env.SECRET : '3ee058420bc2',
  DocumentClient,

};

function envelop(res, statusCode = 200) {
  let body;
  if (statusCode == 200) {
    body = JSON.stringify(res, null, 2);
  } else {
    body = JSON.stringify({ errors: { body: [res] } }, null, 2);
  }
  return {
    statusCode,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Credentials': true
    },
    body,
  };
}

async function purgeTable(aTable, aKeyName) /* istanbul ignore next */ {
  const tableName = module.exports.getTableName(aTable);

  if (!tableName.includes('dev') && !tableName.includes('test')) {
    console.log(`WARNING: Table name [${tableName}] ` +
      `contains neither dev nor test, not purging`);
    return;
  }

  const allRecords = await DocumentClient
    .scan({ TableName: tableName }).promise();
  const deletePromises = [];
  for (let i = 0; i < allRecords.Items.length; ++i) {
    const recordToDelete = {
      TableName: tableName,
      Key: {},
    };
    recordToDelete.Key[aKeyName] = allRecords.Items[i][aKeyName];
    deletePromises.push(DocumentClient.delete(recordToDelete).promise());
  }
  await Promise.all(deletePromises);
}

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/mocha-axios-reporter.js
const mocha = require('mocha');
const axios = require('axios');
const fs = require('fs');
const NETWORK_DUMP_FILE = process.env.NETWORK_DUMP_FILE;

module.exports = MochaAxiosReporter;
let indent = 0; // eslint-disable-line no-unused-vars

function MochaAxiosReporter(runner) {
  mocha.reporters.Spec.call(this, runner);

  if (NETWORK_DUMP_FILE) {

    axios.interceptors.request.use(async (config) => {
      let reqDump = '```\n' + `${config.method.toUpperCase()} ${config.url}\n`;
      if (config.data) {
        reqDump += '\n' + JSON.stringify(config.data, null, 2) + '\n';
      }
      reqDump += '```\n';
      fs.appendFileSync(NETWORK_DUMP_FILE, reqDump);

      return config;
    });

    axios.interceptors.response.use(async (response) => {
      const resDump = '```\n' +
        `${response.status} ${response.statusText}\n\n` +
        JSON.stringify(response.data, null, 2) + '\n' +
        '```\n';
      fs.appendFileSync(NETWORK_DUMP_FILE, resDump);
      return response;
    }, async (error) => {
      if (error && error.response && error.response.status &&
        error.response.statusText) {
        const resDump = '```\n' +
          `${error.response.status} ${error.response.statusText}\n\n` +
          JSON.stringify(error.response.data, null, 2) + '\n' +
          '```\n';
        fs.appendFileSync(NETWORK_DUMP_FILE, resDump);
      }
      return Promise.reject(error);
    });

    runner.on('suite', suite => {
      if (!suite || !suite.title) {
        return;
      }
      ++indent;
      fs.appendFileSync(NETWORK_DUMP_FILE,
        `${"#".repeat(indent)} ${suite.title}\n`);
    });

    runner.on('test', test => {
      ++indent;
      fs.appendFileSync(NETWORK_DUMP_FILE,
        `${"#".repeat(indent)} ${test.title}\n`);
    });

    runner.on('test end', () => {
      --indent;
    });

    runner.on('suite end', (suite) => {
      if (!suite || !suite.title) {
        return;
      }
      --indent;
    });

  }

}

mocha.utils.inherits(MochaAxiosReporter, mocha.reporters.Spec);

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/mocha.opts
--bail
--timeout 30000
--reporter test/mocha-axios-reporter.js

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.Article.js
const TestUtil = require('./TestUtil');
const assert = require('assert');
const axios = require('axios');

const globals = {
  authorUser: null,
  authoressUser: null,
  createdArticleWithoutTags: null,
  createdArticleWithTags: null,
  listArticles: [],
  nonAuthorUser: null,
};

describe('Article', async () => {

  before(async () => {
    globals.authorUser = await TestUtil.createTestUser(
      `author-${TestUtil.randomString()}`);

    globals.authoressUser = await TestUtil.createTestUser(
      `authoress-${TestUtil.randomString()}`);

    globals.nonAuthorUser = await TestUtil.createTestUser(
      `non-author-${TestUtil.randomString()}`);
  });

  describe('Create', async () => {

    it('should create article', async () => {
      globals.createdArticleWithoutTags =
        (await axios.post(`/articles`, {
          article: {
            title: 'title',
            description: 'description',
            body: 'body'
          },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;

      // TODO: Assert on createdArticleWithoutTags
    });

    it('should create article with tags', async () => {
      globals.createdArticleWithTags =
        (await axios.post(`/articles`, {
          article: {
            title: 'title',
            description: 'description',
            body: 'body',
            tagList: ['tag_a', 'tag_b'],
          },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;

      // TODO: Assert on createdArticleWithTags
    });

    it('should disallow unauthenticated user', async () => {
      await axios.post(`/articles`, {}, {
        headers: { Authorization: `Token ${globals.authorUser.token} foo` },
      }).catch(res => TestUtil.assertError(res, /Must be logged in/));
    });

    it('should enforce required fields', async () => {
      await axios.post(`/articles`, {}, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /Article must be specified/);
      });
      await axios.post(`/articles`, {
        article: {},
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /title must be specified/);
      });
      await axios.post(`/articles`, {
        article: { title: 'title', },
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /description must be specified/);
      });
      await axios.post(`/articles`, {
        article: { title: 'title', description: 'description', },
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /body must be specified/);
      });
    });

  });

  describe('Get', async () => {

    it('should get article by slug', async () => {
      const retrievedArticle = (await axios.get(
          `/articles/${globals.createdArticleWithoutTags.slug}`))
        .data.article;

      // TODO: Assert on retrievedArticle
      (retrievedArticle);
    });

    it('should get article with tags by slug', async () => {
      const retrievedArticle = (await axios.get(
          `/articles/${globals.createdArticleWithTags.slug}`))
        .data.article;

      // TODO: Assert on retrievedArticle
      (retrievedArticle);
    });

    it('should disallow unknown slug', async () => {
      await axios.get(
          `/articles/${Math.random().toString(36).substring(7)}`)
        .catch(res => {
          TestUtil.assertError(res, /Article not found/);
        });
    });

    // TODO: Add Article.get edge cases

  });

  describe('Update', async () => {

    it('should update article', async () => {
      let updatedArticle;

      updatedArticle = (await axios.put(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          article: { title: 'newtitle' },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;
      assert.equal(updatedArticle.title, 'newtitle');

      updatedArticle = (await axios.put(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          article: { description: 'newdescription' },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;
      assert.equal(updatedArticle.description, 'newdescription');

      updatedArticle = (await axios.put(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          article: { body: 'newbody' },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;
      assert.equal(updatedArticle.body, 'newbody');

    });

    it('should disallow missing mutation', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {})
        .catch(res => {
          TestUtil.assertError(res, /Article mutation must be specified/);
        });
    });

    it('should disallow empty mutation', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {
        article: {},
      }).catch(res => {
        TestUtil.assertError(res, /At least one field must be specified/);
      });
    });

    it('should disallow unauthenticated update', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {
        article: { title: 'newtitle' },
      }).catch(res => {
        TestUtil.assertError(res, /Must be logged in/);
      });
    });

    it('should disallow updating non-existent article', async () => {
      await axios.put(`/articles/foo-${globals.createdArticleWithTags.slug}`, {
        article: { title: 'newtitle' },
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /Article not found/);
      });
    });

    it('should disallow non-author from updating', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {
        article: { title: 'newtitle' },
      }, {
        headers: { Authorization: `Token ${globals.authoressUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /Article can only be updated by author/);
      });
    });

  });

  describe('Favorite', async () => {

    it('should favorite article', async () => {
      const favoritedArticle = (await axios.post(`/articles/` +
        `${globals.createdArticleWithoutTags.slug}/favorite`, {}, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        })).data.article;
      assert(favoritedArticle.favorited === true,
        `Expected article to have been favorited`);

      const retrievedArticle = (await axios.get(`/articles/` +
        `${globals.createdArticleWithoutTags.slug}`, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        })).data.article;
      assert(retrievedArticle.favorited === true,
        `Expected article to have been favorited`);
    });

    it('should disallow favoriting by unauthenticated user', async () => {
      await axios.post(`/articles/` +
        `${globals.createdArticleWithoutTags.slug}/favorite`, {}, {
          headers: {
            Authorization: `Token ${globals.nonAuthorUser.token} foo`
          },
        }).catch(res => TestUtil.assertError(res, /Must be logged in/));
    });

    it('should disallow favoriting unknown article', async () => {
      await axios.post(`/articles/` +
        `${globals.createdArticleWithoutTags.slug}_foo/favorite`, {}, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        }).catch(res => TestUtil.assertError(res, /Article not found/));
    });

    it('should unfavorite article', async () => {
      const unfavoritedArticle = (await axios.delete(`/articles/` +
        `${globals.createdArticleWithoutTags.slug}/favorite`, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        })).data.article;
      assert(unfavoritedArticle.favorited === false,
        `Expected article to have been unfavorited`);
    });

  });

  describe('Delete', async () => {

    it('should delete article', async () => {
      await axios.delete(
        `/articles/${globals.createdArticleWithoutTags.slug}`, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        });

      // Assert article is deleted
      await axios.get(
        `/articles/${globals.createdArticleWithoutTags.slug}`
      ).catch(res => TestUtil.assertError(res, /Article not found/));
    });

    it('should disallow deleting by unauthenticated user', async () => {
      await axios.delete(`/articles/foo`, {}, {
        headers: { Authorization: `Token ${globals.authorUser.token} foo` },
      }).catch(res => TestUtil.assertError(res, /Must be logged in/));
    });

    it('should disallow deleting unknown article', async () => {
      await axios.delete(
        `/articles/foobar`, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        }).catch(res => TestUtil.assertError(res, /Article not found/));
    });

    it('should disallow deleting article by non-author', async () => {
      await axios.delete(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        }).catch(res => TestUtil.assertError(res,
        /Article can only be deleted by author/));
    });

  });

  describe('List', async () => {

    before(async () => {
      // Create a few articles to be listed
      for (let i = 0; i < 20; ++i) {
        globals.listArticles.push((await axios.post(`/articles`, {
          article: {
            title: 'title',
            description: 'description',
            body: 'body',
            tagList: [
              TestUtil.randomString(),
              `tag_${i}`,
              `tag_mod_2_${(i % 2)}`,
              `tag_mod_3_${(i % 3)}`,
            ],
          },
        }, {
          headers: {
            Authorization: 'Token ' +
              ((i % 2) ? globals.authorUser.token : globals.authoressUser.token)
          },
        })).data.article);
      }
    });

    it('should list articles', async () => {
      const allArticles =
        (await axios.get(`/articles`)).data.articles;
      // TODO: Assert on retrieved articles
      (allArticles);
    });

    it('should list articles with tag', async () => {
      const articles_tag_7 =
        (await axios.get(`/articles?tag=tag_7`)).data.articles;
      (articles_tag_7);

      const articles_tag_mod_3_2 =
        (await axios.get(`/articles?tag=tag_mod_3_2`)).data.articles;
      (articles_tag_mod_3_2);

      // TODO: Assert on retrieved articles
    });

    it('should list articles by author', async () => {
      const articles_of_authoress = (await axios.get(
          `/articles?author=${globals.authoressUser.username}`))
        .data.articles;
      (articles_of_authoress);

      // TODO: Assert on retrieved articles
    });

    it('should list articles favorited by user', async () => {
      const favorited_articles = (await axios.get(
          `/articles?favorited=${globals.nonAuthorUser.username}`))
        .data.articles;
      (favorited_articles);

      // TODO: Assert on retrieved articles
    });

    it('should list articles by limit/offset', async () => {
      const articles_batch_1 = (await axios.get(
          `/articles?author=${globals.authorUser.username}&limit=2`))
        .data.articles;
      (articles_batch_1);

      const articles_batch_2 = (await axios.get(
          `/articles?author=${globals.authorUser.username}` +
          `&limit=2&offset=2`))
        .data.articles;
      (articles_batch_2);

      // TODO: Assert on retrieved articles
    });

    it('should list articles when authenticated', async () => {
      await axios.get(`/articles`, {
        headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
      });
      // TODO: Assert on retrieved articles
    });

    it('should disallow multiple of author/tag/favorited', async () => {
      [
        ['tag', 'author', ],
        ['author', 'favorited', ],
        ['favorited', 'tag', ],
      ].forEach(async (params) => {
        await axios.get(`/articles?${params[0]}=foo&${params[1]}=bar`)
          .catch(res => TestUtil.assertError(res,
            /Only one of these can be specified/));
      });
    });

  });

  describe('Feed', async () => {

    it('should get feed', async () => {
      // Get feed without following any user
      const feed0 = (await axios.get(`/articles/feed`, {
        headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
      })).data.articles;
      (feed0);
      // TODO: Assert on feed

      // Get feed after following only authoressUser
      await axios.post(
        `/profiles/${globals.authoressUser.username}/follow`, {}, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        });
      const feed1 = (await axios.get(`/articles/feed`, {
        headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
      })).data.articles;
      (feed1);
      // TODO: Assert on feed

      // Get feed after following authorUser too
      await axios.post(
        `/profiles/${globals.authorUser.username}/follow`, {}, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        });
      const feed2 = (await axios.get(`/articles/feed`, {
        headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
      })).data.articles;
      (feed2);
      // TODO: Assert on feed
    });

    it('should disallow unauthenticated feed', async () => {
      await axios.get('/articles/feed').catch(res => TestUtil.assertError(res,
        /Must be logged in/));
    });

  });

  describe('Tags', async () => {

    it('should get tags', async () => {
      const tags = (await axios.get('/tags')).data.tags;
      // TODO: Assert on tags
      (tags);
    });

  });

});

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.Comment.js
const TestUtil = require('./TestUtil');
const axios = require('axios');

const globals = {
  authorUser: null,
  commenterUser: null,
  testArticle: null,
  createdComments: [],
};

describe('Comment', async () => {

  before(async () => {

    globals.authorUser = await TestUtil.createTestUser(
      `author-${TestUtil.randomString()}`);
    globals.commenterUser = await TestUtil.createTestUser(
      `commenter-${TestUtil.randomString()}`);
    globals.testArticle = (await axios.post(`/articles`, {
      article: {
        title: 'title',
        description: 'description',
        body: 'body'
      },
    }, {
      headers: { Authorization: `Token ${globals.authorUser.token}` },
    })).data.article;

  });

  describe('Create', async () => {

    it('should create comment', async () => {
      for (let i = 0; i < 10; ++i) {
        globals.createdComments.push((await axios.post(
          `/articles/${globals.testArticle.slug}/comments`, {
            comment: {
              body: `test comment ${TestUtil.randomString()}`
            },
          }, {
            headers: { Authorization: `Token ${globals.commenterUser.token}` },
          })).data.comment);
      }
      // TODO: Assert on createdComments
    });

    it('should disallow unauthenticated user', async () => {
      await axios.post(
        `/articles/${globals.testArticle.slug}/comments`, {}, {
          headers: { Authorization: 'Token foobar' },
        }).catch(res => TestUtil.assertError(res, /Must be logged in/));
    });

    it('should enforce comment body', async () => {
      await axios.post(`/articles/${globals.testArticle.slug}/comments`, {}, {
        headers: { Authorization: `Token ${globals.commenterUser.token}` },
      }).catch(res => TestUtil.assertError(res, /Comment must be specified/));
    });

    it('should disallow non-existent article', async () => {
      await axios.post('/articles/foobar/comments', {
        comment: {
          body: `test comment ${TestUtil.randomString()}`
        },
      }, {
        headers: { Authorization: `Token ${globals.commenterUser.token}` },
      }).catch(res => TestUtil.assertError(res, /Article not found/));
    });

  });

  describe('Get', async () => {

    it('should get all comments for article', async () => {
      const retrievedComments = (await axios.get(
          `/articles/${globals.testArticle.slug}/comments`))
        .data.comments;

      // TODO: Assert on retrievedComments
      (retrievedComments);
    });

  });

  describe('Delete', async () => {

    it('should delete comment', async () => {
      await axios.delete(`/articles/${globals.testArticle.slug}` +
        `/comments/${globals.createdComments[0].id}`, {
          headers: { Authorization: `Token ${globals.commenterUser.token}` },
        });

      // TODO: Assert comment is deleted
    });

    it('only comment author should be able to delete comment', async () => {
      await axios.delete(`/articles/${globals.testArticle.slug}` +
        `/comments/${globals.createdComments[1].id}`, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        }).catch(res => {
        TestUtil.assertError(res, /Only comment author can delete/);
      });
    });

    it('should disallow unauthenticated user', async () => {
      await axios.delete(`/articles/${globals.testArticle.slug}` +
        `/comments/${globals.createdComments[1].id}`, {
          headers: { Authorization: 'Token foo' },
        }).catch(res => {
        TestUtil.assertError(res, /Must be logged in/);
      });
    });

    it('should disallow deleting unknown comment', async () => {
      await axios.delete(`/articles/${globals.testArticle.slug}` +
        '/comments/foobar_id', {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        }).catch(res => {
        TestUtil.assertError(res, /Comment ID not found/);
      });
    });

  });

});

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.User.js
const TestUtil = require('./TestUtil');
const assert = require('assert');
const axios = require('axios');

const username = `user1-${Math.random().toString(36)}`;
const userToCreate = {
  email: `${username}@email.com`,
  username: username,
  password: 'password',
};
let loggedInUser = null;

describe('User', async () => {

  describe('Create', async () => {

    it('should create user', async () => {
      const createdUser = (await axios.post(
        `/users`, { user: userToCreate })).data.user;
      assertUserEquals(createdUser, userToCreate);
    });

    it('should disallow same username', async () => {
      await axios.post(
        `/users`, { user: userToCreate }).catch(res => {
        assert.equal(res.response.status, 422);
        assert(/Username already taken/.test(res.response.data.errors.body[0]));
      });
    });

    it('should disallow same email', async () => {
      await axios.post(`/users`, {
        user: {
          username: 'user2',
          email: userToCreate.email,
          password: 'password',
        }
      }).catch(res => {
        assert.equal(res.response.status, 422);
        assert(/Email already taken/.test(res.response.data.errors.body[0]));
      });
    });

    it('should enforce required fields', async () => {
      await axios.post(`/users`, {})
        .catch(res => {
          TestUtil.assertError(res, /User must be specified/);
        });
      await axios.post(`/users`, {
        user: { foo: 1 }
      }).catch(res => {
        TestUtil.assertError(res, /Username must be specified/);
      });
      await axios.post(`/users`, {
        user: { username: 1 }
      }).catch(res => {
        TestUtil.assertError(res, /Email must be specified/);
      });
      await axios.post(`/users`, {
        user: { username: 1, email: 2 }
      }).catch(res => {
        TestUtil.assertError(res, /Password must be specified/);
      });
    });

  });

  describe('Login', async () => {

    it('should login', async () => {
      loggedInUser = (await axios.post(`/users/login`, {
        user: { email: userToCreate.email, password: userToCreate.password }
      })).data.user;
      assertUserEquals(loggedInUser, userToCreate);
    });

    it('should disallow unknown email', async () => {
      await axios.post(`/users/login`, {
        user: { email: Math.random().toString(36), password: 'somepassword' }
      }).catch(res => {
        TestUtil.assertError(res, /Email not found/);
      });
    });

    it('should disallow wrong password', async () => {
      await axios.post(`/users/login`, {
        user: {
          email: userToCreate.email,
          password: Math.random().toString(36)
        }
      }).catch(res => {
        TestUtil.assertError(res, /Wrong password/);
      });
    });

    it('should enforce required fields', async () => {
      await axios.post(`/users/login`, {}).catch(res => {
        TestUtil.assertError(res, /User must be specified/);
      });
      await axios.post(`/users/login`, { user: {} }).catch(res => {
        TestUtil.assertError(res, /Email must be specified/);
      });
      await axios.post(`/users/login`, {
        user: { email: 'someemail' }
      }).catch(res => {
        TestUtil.assertError(res, /Password must be specified/);
      });
    });

  });

  describe('Get', async () => {

    it('should get current user', async () => {
      const authenticatedUser = (await axios.get(`/user`, {
        headers: { 'Authorization': `Token ${loggedInUser.token}` }
      })).data.user;
      assertUserEquals(authenticatedUser, loggedInUser);
    });

    it('should disallow bad tokens', async () => {
      await axios.get(`/user`)
        .catch(res =>
          TestUtil.assertError(res, /Token not present or invalid/));
      await axios.get(`/user`, { headers: { foo: 'bar' } })
        .catch(res =>
          TestUtil.assertError(res, /Token not present or invalid/));
      await axios.get(`/user`, { headers: { Authorization: 'foo' } })
        .catch(res =>
          TestUtil.assertError(res, /Token not present or invalid/));
      await axios.get(`/user`, {
        headers: { Authorization: 'Token: foo' }
      }).catch(res =>
        TestUtil.assertError(res, /Token not present or invalid/));
    });

  });

  describe('Profile', async () => {

    it('should get profile', async () => {
      const profile = (await axios.get(
        `/profiles/${userToCreate.username}`)).data.profile;
      // TODO: Assert on profile
      (profile);
    });

    it('should disallow unknown username', async () => {
      await axios.get(`/profiles/foo_${Math.random().toString(36)}`)
        .catch(res => { TestUtil.assertError(res, /User not found/); });
    });

    // TODO: Add User.getProfile edge cases

    it('should follow/unfollow user', async () => {

      // Create user who can be followed
      await axios.post(`/users`, {
        user: {
          username: 'followed_user',
          email: 'followed_user@mail.com',
          password: 'password',
        }
      });
      const followedProfile = (await axios({
        method: 'POST',
        url: `/profiles/followed_user/follow`,
        headers: { 'Authorization': `Token ${loggedInUser.token}` },
      })).data.profile;
      (followedProfile); // TODO: Assert on this

      // Following a user again should have no effect
      await axios({
        method: 'POST',
        url: `/profiles/followed_user/follow`,
        headers: { 'Authorization': `Token ${loggedInUser.token}` },
      });
      const retrievedFollowedProfile = (await axios({
        method: 'GET',
        url: `/profiles/followed_user`,
        headers: { 'Authorization': `Token ${loggedInUser.token}` },
      })).data.profile;
      (retrievedFollowedProfile); // TODO: Assert on this

      // Get followed profile without authentication
      const retrievedFollowedProfileNoAuth = (await axios({
        method: 'GET',
        url: `/profiles/followed_user`,
      })).data.profile;
      (retrievedFollowedProfileNoAuth); // TODO: Assert on this

      // Create a second follower user
      const secondFollowerUsername = `user2-${Math.random().toString(36)}`;
      const secondFollowerUser = (await axios({
        method: 'POST',
        url: `/users`,
        data: {
          user: {
            username: secondFollowerUsername,
            email: `${secondFollowerUsername}@mail.com`,
            password: 'password',
          }
        },
      })).data.user;
      const secondFollowedProfile = (await axios({
        method: 'POST',
        url: `/profiles/followed_user/follow`,
        headers: { 'Authorization': `Token ${secondFollowerUser.token}` },
      })).data.profile;
      (secondFollowedProfile); // TODO: Assert on this

      const unfollowedProfile = (await axios({
        method: 'DELETE',
        url: `/profiles/followed_user/follow`,
        headers: { 'Authorization': `Token ${loggedInUser.token}` },
      })).data.profile;
      (unfollowedProfile); // TODO: Assert on this

      const reUnfollowedProfile = (await axios({
        method: 'DELETE',
        url: `/profiles/followed_user/follow`,
        headers: { 'Authorization': `Token ${loggedInUser.token}` },
      })).data.profile;
      (reUnfollowedProfile); // TODO: Assert on this

      const secondUnfollowedProfile = (await axios({
        method: 'DELETE',
        url: `/profiles/followed_user/follow`,
        headers: { 'Authorization': `Token ${secondFollowerUser.token}` },
      })).data.profile;
      (secondUnfollowedProfile); // TODO: Assert on this


    });

    it('should disallow following with bad token', async () => {
      await axios({
        method: 'POST',
        url: `/profiles/followed_user/follow`,
      }).catch(res =>
        TestUtil.assertError(res, /Token not present or invalid/));
    });

  });

  describe('Update', async () => {

    it('should update user', async () => {
      const userMutations = [{
        email: `updated-${username}@email.com`,
      }, {
        password: 'newpassword',
      }, {
        bio: 'newbio',
      }, {
        image: 'newimage',
      }, ];
      for (let i = 0; i < userMutations.length; ++i) {
        const userMutation = userMutations[i];
        const updatedUser = (await axios.put('/user', {
          user: userMutation,
        }, {
          headers: { 'Authorization': `Token ${loggedInUser.token}` },
        })).data.user;
        if (!userMutation.password) {
          const field = Object.keys(userMutation)[0];
          assert.equal(updatedUser[field], userMutation[field]);
        }
        (updatedUser); // TODO: Assert on updatedUser
      }
    });

    it('should disallow missing token/email in update', async () => {
      await axios.put(`/user`).catch(res => {
        TestUtil.assertError(res, /Token not present or invalid/);
      });
      await axios.put(`/user`, {}, {
        headers: { 'Authorization': `Token ${loggedInUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /User must be specified/);
      });
    });

    it('should disallow reusing email', async () => {
      const newUser = await TestUtil.createTestUser(
        `user2-${Math.random().toString(36)}`);
      await axios.put(`/user`, {
        user: { email: newUser.email },
      }, {
        headers: { 'Authorization': `Token ${newUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /Email already taken/);
      });

    });

  });

});

function assertUserEquals(actual, expected) {
  assert.equal(actual.username, expected.username);
  assert.equal(actual.email, expected.email);
  assert.equal(typeof actual.token, 'string');
  assert.equal(actual.bio, expected.bio || '');
  assert.equal(actual.image, expected.image || '');
}

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/test.Util.js
const assert = require('assert');
const axios = require('axios');

describe('Util', async () => {

  describe('Ping', async () => {

    it('should ping', async () => {
      const pong = await axios.get(`/ping`);
      ['pong', 'AWS_REGION', 'DYNAMODB_NAMESPACE'].forEach(k => {
        assert.equal(typeof pong.data[k], 'string',
          `Expected key not found: [${k}], ` +
          `Actual: [${JSON.stringify(pong.data)}]`);
      });

      // Verify CORS headers
      [
        ['access-control-allow-origin', '*'],
        ['access-control-allow-credentials', 'true'],
      ].forEach(pair => {
        assert.equal(pong.headers[pair[0]], pair[1],
          `Expected header not found: [${pair[0]}]=[${pair[1]}]`
        );
      });
    });

  });

});

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/TestHooks.js
const axios = require('axios');
const TestUtil = require('./TestUtil');
const API_URL = process.env.API_URL;

// Root level 'before' function called at beginning of suite
before(async () => {

  console.log(`Testing API_URL: [${API_URL}]`);
  axios.defaults.baseURL = API_URL;

  process.stdout.write('Purging data... ');
  await axios.delete(`/__TESTUTILS__/purge`);
  console.log('Done!\n');

  // Debounce if running against 'serverless offline'
  if (process.env.IS_OFFLINE) {
    axios.interceptors.request.use(async (config) => {
      process.stdout.write('.');
      await TestUtil.delay(100);
      process.stdout.write('\b');

      return config;
    });
  }

});

--#

--% E:/desktop-laptop/_rwe/realworld-dynamodb-lambda/test/TestUtil.js
const assert = require('assert');
const axios = require('axios');

module.exports = {

  assertError(res, errorRegex) {
    assert.equal(res.response.status, 422);
    const actualError = res.response.data.errors.body[0];
    assert(errorRegex.test(actualError),
      `Expected: [${errorRegex}], Actual: [${actualError}]`);
  },

  randomString() {
    return (Math.random() * Math.pow(36, 6) | 0).toString(36);
  },

  async createTestUser(username) {
    return (await axios.post(
      `/users`, {
        user: {
          email: `${username}@email.com`,
          username: username,
          password: 'password',
        }
      })).data.user;
  },

  delay,

};

function delay(time) {
  return new Promise((fulfill) => setTimeout(fulfill, time));
}

--#

