--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#

--% index/fmus/under_pwd
__REPLACE_WITH_PROJECT_DIR_OR_INPUT__,d(/mk)
	%utama=__FILE__
	.gitignore,f(e=utama=/realworld-serverless-application/.gitignore)
	buildspec.yaml,f(e=utama=/realworld-serverless-application/buildspec.yaml)
	CODE_OF_CONDUCT.md,f(e=utama=/realworld-serverless-application/CODE_OF_CONDUCT.md)
	CONTRIBUTING.md,f(e=utama=/realworld-serverless-application/CONTRIBUTING.md)
	LICENSE,f(e=utama=/realworld-serverless-application/LICENSE)
	NOTICE,f(e=utama=/realworld-serverless-application/NOTICE)
	pom.xml,f(e=utama=/realworld-serverless-application/pom.xml)
	README.md,f(e=utama=/realworld-serverless-application/README.md)
	analytics,d(/mk)
		buildspec-integ-test.yaml,f(e=utama=/realworld-serverless-application/analytics/buildspec-integ-test.yaml)
		buildspec.yaml,f(e=utama=/realworld-serverless-application/analytics/buildspec.yaml)
		pom.xml,f(e=utama=/realworld-serverless-application/analytics/pom.xml)
		README.md,f(e=utama=/realworld-serverless-application/analytics/README.md)
		sam,d(/mk)
			app,d(/mk)
				template.yaml,f(e=utama=/realworld-serverless-application/analytics/sam/app/template.yaml)
			cicd,d(/mk)
				template.yaml,f(e=utama=/realworld-serverless-application/analytics/sam/cicd/template.yaml)
		src,d(/mk)
			test,d(/mk)
				java,d(/mk)
					software,d(/mk)
						amazon,d(/mk)
							serverless,d(/mk)
								apprepo,d(/mk)
									api,d(/mk)
										client,d(/mk)
											AbstractAWSServerlessApplicationRepository.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AbstractAWSServerlessApplicationRepository.java)
											AWSServerlessApplicationRepository.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepository.java)
											AWSServerlessApplicationRepositoryClient.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClient.java)
											AWSServerlessApplicationRepositoryClientBuilder.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClientBuilder.java)
											package-info.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/package-info.java)
											auth,d(/mk)
												CognitoAuthorizer.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/auth/CognitoAuthorizer.java)
											model,d(/mk)
												Application.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/Application.java)
												ApplicationList.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationList.java)
												ApplicationSummary.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationSummary.java)
												AWSServerlessApplicationRepositoryException.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/AWSServerlessApplicationRepositoryException.java)
												BadRequestException.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/BadRequestException.java)
												ConflictException.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ConflictException.java)
												CreateApplicationInput.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationInput.java)
												CreateApplicationRequest.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationRequest.java)
												CreateApplicationResult.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationResult.java)
												DeleteApplicationRequest.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationRequest.java)
												DeleteApplicationResult.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationResult.java)
												GetApplicationRequest.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationRequest.java)
												GetApplicationResult.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationResult.java)
												InternalServerErrorException.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/InternalServerErrorException.java)
												ListApplicationsRequest.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsRequest.java)
												ListApplicationsResult.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsResult.java)
												NotFoundException.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/NotFoundException.java)
												TooManyRequestsException.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/TooManyRequestsException.java)
												UnauthorizedException.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UnauthorizedException.java)
												UpdateApplicationInput.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationInput.java)
												UpdateApplicationRequest.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationRequest.java)
												UpdateApplicationResult.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationResult.java)
												transform,d(/mk)
													ApplicationJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationJsonUnmarshaller.java)
													ApplicationListJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListJsonUnmarshaller.java)
													ApplicationListMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListMarshaller.java)
													ApplicationMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationMarshaller.java)
													ApplicationSummaryJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryJsonUnmarshaller.java)
													ApplicationSummaryMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryMarshaller.java)
													CreateApplicationInputJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputJsonUnmarshaller.java)
													CreateApplicationInputMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputMarshaller.java)
													CreateApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestMarshaller.java)
													CreateApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestProtocolMarshaller.java)
													CreateApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationResultJsonUnmarshaller.java)
													DeleteApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestMarshaller.java)
													DeleteApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestProtocolMarshaller.java)
													DeleteApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationResultJsonUnmarshaller.java)
													GetApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestMarshaller.java)
													GetApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestProtocolMarshaller.java)
													GetApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationResultJsonUnmarshaller.java)
													ListApplicationsRequestMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestMarshaller.java)
													ListApplicationsRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestProtocolMarshaller.java)
													ListApplicationsResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsResultJsonUnmarshaller.java)
													UpdateApplicationInputJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputJsonUnmarshaller.java)
													UpdateApplicationInputMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputMarshaller.java)
													UpdateApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestMarshaller.java)
													UpdateApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestProtocolMarshaller.java)
													UpdateApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationResultJsonUnmarshaller.java)
									cucumber,d(/mk)
										ApplicationsService_IT.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/ApplicationsService_IT.java)
										features,d(/mk)
											AthenaQuery.feature,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/features/AthenaQuery.feature)
										guice,d(/mk)
											ApplicationModule.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/ApplicationModule.java)
											CognitoAuthorizerImpl.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CognitoAuthorizerImpl.java)
											CukeInjectorSource.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CukeInjectorSource.java)
										steps,d(/mk)
											AthenaQuerySteps.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/AthenaQuerySteps.java)
											AWSServerlessApplicationRepositoryRecordingClient.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/AWSServerlessApplicationRepositoryRecordingClient.java)
											CognitoUserManager.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CognitoUserManager.java)
											S3Helper.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/S3Helper.java)
											SetupAndTeardownSteps.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/SetupAndTeardownSteps.java)
											TestEnv.java,f(e=utama=/realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/TestEnv.java)
				resources,d(/mk)
					cucumber.properties,f(e=utama=/realworld-serverless-application/analytics/src/test/resources/cucumber.properties)
					integ-test-env.template.yaml,f(e=utama=/realworld-serverless-application/analytics/src/test/resources/integ-test-env.template.yaml)
					log4j2.properties,f(e=utama=/realworld-serverless-application/analytics/src/test/resources/log4j2.properties)
	backend,d(/mk)
		buildspec-integ-test.yaml,f(e=utama=/realworld-serverless-application/backend/buildspec-integ-test.yaml)
		buildspec.yaml,f(e=utama=/realworld-serverless-application/backend/buildspec.yaml)
		pom.xml,f(e=utama=/realworld-serverless-application/backend/pom.xml)
		README.md,f(e=utama=/realworld-serverless-application/backend/README.md)
		images,d(/mk)
			back_end_diagram.png,f(b64=utama=/realworld-serverless-application/backend/images/back_end_diagram.png)
		sam,d(/mk)
			app,d(/mk)
				api.template.yaml,f(e=utama=/realworld-serverless-application/backend/sam/app/api.template.yaml)
				database.template.yaml,f(e=utama=/realworld-serverless-application/backend/sam/app/database.template.yaml)
				template.yaml,f(e=utama=/realworld-serverless-application/backend/sam/app/template.yaml)
			cicd,d(/mk)
				template.yaml,f(e=utama=/realworld-serverless-application/backend/sam/cicd/template.yaml)
		src,d(/mk)
			main,d(/mk)
				java,d(/mk)
					software,d(/mk)
						amazon,d(/mk)
							serverless,d(/mk)
								apprepo,d(/mk)
									api,d(/mk)
										exception,d(/mk)
											ApiException.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/ApiException.java)
											ApiExceptionMapper.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/ApiExceptionMapper.java)
											BadRequestApiException.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/BadRequestApiException.java)
											ConflictApiException.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/ConflictApiException.java)
											InternalServerApiException.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/InternalServerApiException.java)
											NotFoundApiException.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/NotFoundApiException.java)
										impl,d(/mk)
											ApplicationRecord.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/ApplicationRecord.java)
											ApplicationsService.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/ApplicationsService.java)
											pagination,d(/mk)
												DynamoDbStartKeySerializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/DynamoDbStartKeySerializer.java)
												EncryptedTokenSerializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/EncryptedTokenSerializer.java)
												InvalidTokenException.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/InvalidTokenException.java)
												PaginationTokenSerializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/PaginationTokenSerializer.java)
												TimeBasedTokenSerializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/TimeBasedTokenSerializer.java)
												TokenSerializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/TokenSerializer.java)
												jackson,d(/mk)
													AttributeValueDeserializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/AttributeValueDeserializer.java)
													AttributeValueSerializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/AttributeValueSerializer.java)
													SdkBytesDeserializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/SdkBytesDeserializer.java)
													SdkBytesSerializer.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/SdkBytesSerializer.java)
									container,d(/mk)
										ApiLambdaHandler.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/ApiLambdaHandler.java)
										CorsHeadersResponseFilter.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/CorsHeadersResponseFilter.java)
										config,d(/mk)
											ConfigProvider.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/config/ConfigProvider.java)
											Env.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/config/Env.java)
											SsmConfigProvider.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/config/SsmConfigProvider.java)
										factory,d(/mk)
											DynamoDbClientFactory.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/factory/DynamoDbClientFactory.java)
											KmsClientFactory.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/factory/KmsClientFactory.java)
											SsmConfigProviderFactory.java,f(e=utama=/realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/factory/SsmConfigProviderFactory.java)
				resources,d(/mk)
					log4j.properties,f(e=utama=/realworld-serverless-application/backend/src/main/resources/log4j.properties)
			test,d(/mk)
				java,d(/mk)
					software,d(/mk)
						amazon,d(/mk)
							serverless,d(/mk)
								apprepo,d(/mk)
									api,d(/mk)
										client,d(/mk)
											AbstractAWSServerlessApplicationRepository.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AbstractAWSServerlessApplicationRepository.java)
											AWSServerlessApplicationRepository.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepository.java)
											AWSServerlessApplicationRepositoryClient.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClient.java)
											AWSServerlessApplicationRepositoryClientBuilder.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClientBuilder.java)
											package-info.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/package-info.java)
											auth,d(/mk)
												CognitoAuthorizer.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/auth/CognitoAuthorizer.java)
											model,d(/mk)
												Application.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/Application.java)
												ApplicationList.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationList.java)
												ApplicationSummary.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationSummary.java)
												AWSServerlessApplicationRepositoryException.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/AWSServerlessApplicationRepositoryException.java)
												BadRequestException.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/BadRequestException.java)
												ConflictException.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ConflictException.java)
												CreateApplicationInput.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationInput.java)
												CreateApplicationRequest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationRequest.java)
												CreateApplicationResult.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationResult.java)
												DeleteApplicationRequest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationRequest.java)
												DeleteApplicationResult.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationResult.java)
												GetApplicationRequest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationRequest.java)
												GetApplicationResult.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationResult.java)
												InternalServerErrorException.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/InternalServerErrorException.java)
												ListApplicationsRequest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsRequest.java)
												ListApplicationsResult.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsResult.java)
												NotFoundException.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/NotFoundException.java)
												TooManyRequestsException.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/TooManyRequestsException.java)
												UnauthorizedException.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UnauthorizedException.java)
												UpdateApplicationInput.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationInput.java)
												UpdateApplicationRequest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationRequest.java)
												UpdateApplicationResult.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationResult.java)
												transform,d(/mk)
													ApplicationJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationJsonUnmarshaller.java)
													ApplicationListJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListJsonUnmarshaller.java)
													ApplicationListMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListMarshaller.java)
													ApplicationMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationMarshaller.java)
													ApplicationSummaryJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryJsonUnmarshaller.java)
													ApplicationSummaryMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryMarshaller.java)
													CreateApplicationInputJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputJsonUnmarshaller.java)
													CreateApplicationInputMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputMarshaller.java)
													CreateApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestMarshaller.java)
													CreateApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestProtocolMarshaller.java)
													CreateApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationResultJsonUnmarshaller.java)
													DeleteApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestMarshaller.java)
													DeleteApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestProtocolMarshaller.java)
													DeleteApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationResultJsonUnmarshaller.java)
													GetApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestMarshaller.java)
													GetApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestProtocolMarshaller.java)
													GetApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationResultJsonUnmarshaller.java)
													ListApplicationsRequestMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestMarshaller.java)
													ListApplicationsRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestProtocolMarshaller.java)
													ListApplicationsResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsResultJsonUnmarshaller.java)
													UpdateApplicationInputJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputJsonUnmarshaller.java)
													UpdateApplicationInputMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputMarshaller.java)
													UpdateApplicationRequestMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestMarshaller.java)
													UpdateApplicationRequestProtocolMarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestProtocolMarshaller.java)
													UpdateApplicationResultJsonUnmarshaller.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationResultJsonUnmarshaller.java)
										exception,d(/mk)
											ApiExceptionMapperTest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/exception/ApiExceptionMapperTest.java)
										impl,d(/mk)
											ApplicationsServiceTest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/ApplicationsServiceTest.java)
											pagination,d(/mk)
												DynamoDbStartKeySerializerTest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/pagination/DynamoDbStartKeySerializerTest.java)
												EncryptedTokenSerializerTest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/pagination/EncryptedTokenSerializerTest.java)
												TimeBasedTokenSerializerTest.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/pagination/TimeBasedTokenSerializerTest.java)
									cucumber,d(/mk)
										ApplicationsService_IT.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/ApplicationsService_IT.java)
										features,d(/mk)
											CreateApplication.feature,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/CreateApplication.feature)
											DeleteApplication.feature,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/DeleteApplication.feature)
											GetApplication.feature,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/GetApplication.feature)
											ListApplications.feature,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/ListApplications.feature)
											UpdateApplication.feature,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/UpdateApplication.feature)
										guice,d(/mk)
											ApplicationModule.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/ApplicationModule.java)
											CognitoAuthorizerImpl.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CognitoAuthorizerImpl.java)
											CukeInjectorSource.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CukeInjectorSource.java)
										steps,d(/mk)
											AWSServerlessApplicationRepositoryRecordingClient.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/AWSServerlessApplicationRepositoryRecordingClient.java)
											CognitoUserManager.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CognitoUserManager.java)
											CommonSteps.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CommonSteps.java)
											CreateApplicationSteps.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CreateApplicationSteps.java)
											DeleteApplicationSteps.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/DeleteApplicationSteps.java)
											GetApplicationSteps.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/GetApplicationSteps.java)
											ListApplicationsSteps.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/ListApplicationsSteps.java)
											SetupAndTeardownSteps.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/SetupAndTeardownSteps.java)
											TestEnv.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/TestEnv.java)
											UpdateApplicationSteps.java,f(e=utama=/realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/UpdateApplicationSteps.java)
				resources,d(/mk)
					cucumber.properties,f(e=utama=/realworld-serverless-application/backend/src/test/resources/cucumber.properties)
					integ-test-env.template.yaml,f(e=utama=/realworld-serverless-application/backend/src/test/resources/integ-test-env.template.yaml)
		swagger,d(/mk)
			api.yaml,f(e=utama=/realworld-serverless-application/backend/swagger/api.yaml)
	images,d(/mk)
		architecture_diagram.png,f(b64=utama=/realworld-serverless-application/images/architecture_diagram.png)
	ops,d(/mk)
		buildspec.yaml,f(e=utama=/realworld-serverless-application/ops/buildspec.yaml)
		README.md,f(e=utama=/realworld-serverless-application/ops/README.md)
		images,d(/mk)
			alarm-email.png,f(b64=utama=/realworld-serverless-application/ops/images/alarm-email.png)
			alarms.png,f(b64=utama=/realworld-serverless-application/ops/images/alarms.png)
			dashboard.png,f(b64=utama=/realworld-serverless-application/ops/images/dashboard.png)
		sam,d(/mk)
			app,d(/mk)
				alarm.template.yaml,f(e=utama=/realworld-serverless-application/ops/sam/app/alarm.template.yaml)
				dashboard.template.yaml,f(e=utama=/realworld-serverless-application/ops/sam/app/dashboard.template.yaml)
				template.yaml,f(e=utama=/realworld-serverless-application/ops/sam/app/template.yaml)
			cicd,d(/mk)
				template.yaml,f(e=utama=/realworld-serverless-application/ops/sam/cicd/template.yaml)
	sam,d(/mk)
		app,d(/mk)
			template.yaml,f(e=utama=/realworld-serverless-application/sam/app/template.yaml)
	static-website,d(/mk)
		.browserslistrc,f(e=utama=/realworld-serverless-application/static-website/.browserslistrc)
		.editorconfig,f(e=utama=/realworld-serverless-application/static-website/.editorconfig)
		.eslintrc.js,f(e=utama=/realworld-serverless-application/static-website/.eslintrc.js)
		.gitignore,f(e=utama=/realworld-serverless-application/static-website/.gitignore)
		babel.config.js,f(e=utama=/realworld-serverless-application/static-website/babel.config.js)
		buildspec-integ-test.yaml,f(e=utama=/realworld-serverless-application/static-website/buildspec-integ-test.yaml)
		buildspec.yaml,f(e=utama=/realworld-serverless-application/static-website/buildspec.yaml)
		nightwatch.conf.js,f(e=utama=/realworld-serverless-application/static-website/nightwatch.conf.js)
		package.json,f(e=utama=/realworld-serverless-application/static-website/package.json)
		postcss.config.js,f(e=utama=/realworld-serverless-application/static-website/postcss.config.js)
		README.md,f(e=utama=/realworld-serverless-application/static-website/README.md)
		vue.config.js,f(e=utama=/realworld-serverless-application/static-website/vue.config.js)
		images,d(/mk)
			sign-in.png,f(b64=utama=/realworld-serverless-application/static-website/images/sign-in.png)
		public,d(/mk)
			favicon.ico,f(b64=utama=/realworld-serverless-application/static-website/public/favicon.ico)
			index.html,f(e=utama=/realworld-serverless-application/static-website/public/index.html)
		sam,d(/mk)
			app,d(/mk)
				template.yaml,f(e=utama=/realworld-serverless-application/static-website/sam/app/template.yaml)
			cicd,d(/mk)
				template.yaml,f(e=utama=/realworld-serverless-application/static-website/sam/cicd/template.yaml)
		src,d(/mk)
			App.vue,f(e=utama=/realworld-serverless-application/static-website/src/App.vue)
			config.js,f(e=utama=/realworld-serverless-application/static-website/src/config.js)
			main.js,f(e=utama=/realworld-serverless-application/static-website/src/main.js)
			router.js,f(e=utama=/realworld-serverless-application/static-website/src/router.js)
			assets,d(/mk)
				logo.png,f(b64=utama=/realworld-serverless-application/static-website/src/assets/logo.png)
			components,d(/mk)
				Breadcrumb.vue,f(e=utama=/realworld-serverless-application/static-website/src/components/Breadcrumb.vue)
				ErrorAlert.vue,f(e=utama=/realworld-serverless-application/static-website/src/components/ErrorAlert.vue)
				Nav.vue,f(e=utama=/realworld-serverless-application/static-website/src/components/Nav.vue)
			plugins,d(/mk)
				bootstrap-vue.js,f(e=utama=/realworld-serverless-application/static-website/src/plugins/bootstrap-vue.js)
			services,d(/mk)
				sar-api.js,f(e=utama=/realworld-serverless-application/static-website/src/services/sar-api.js)
			store,d(/mk)
				actions.type.js,f(e=utama=/realworld-serverless-application/static-website/src/store/actions.type.js)
				auth.module.js,f(e=utama=/realworld-serverless-application/static-website/src/store/auth.module.js)
				index.js,f(e=utama=/realworld-serverless-application/static-website/src/store/index.js)
				mutations.type.js,f(e=utama=/realworld-serverless-application/static-website/src/store/mutations.type.js)
				sar.module.js,f(e=utama=/realworld-serverless-application/static-website/src/store/sar.module.js)
			views,d(/mk)
				Applications.vue,f(e=utama=/realworld-serverless-application/static-website/src/views/Applications.vue)
				EditApplication.vue,f(e=utama=/realworld-serverless-application/static-website/src/views/EditApplication.vue)
				Home.vue,f(e=utama=/realworld-serverless-application/static-website/src/views/Home.vue)
				NewApplication.vue,f(e=utama=/realworld-serverless-application/static-website/src/views/NewApplication.vue)
				SignIn.vue,f(e=utama=/realworld-serverless-application/static-website/src/views/SignIn.vue)
				ViewApplication.vue,f(e=utama=/realworld-serverless-application/static-website/src/views/ViewApplication.vue)
		tests,d(/mk)
			setup.js,f(e=utama=/realworld-serverless-application/static-website/tests/setup.js)
			e2e,d(/mk)
				custom-assertions,d(/mk)
					elementCount.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/custom-assertions/elementCount.js)
				page-objects,d(/mk)
					appDetails.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/page-objects/appDetails.js)
					editApp.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/page-objects/editApp.js)
					myApps.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/page-objects/myApps.js)
					publishApp.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/page-objects/publishApp.js)
					signIn.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/page-objects/signIn.js)
					welcome.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/page-objects/welcome.js)
				specs,d(/mk)
					applications.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/specs/applications.js)
				utils,d(/mk)
					cognitoAdmin.js,f(e=utama=/realworld-serverless-application/static-website/tests/e2e/utils/cognitoAdmin.js)
			unit,d(/mk)
				.eslintrc.js,f(e=utama=/realworld-serverless-application/static-website/tests/unit/.eslintrc.js)
				components,d(/mk)
					Nav.spec.js,f(e=utama=/realworld-serverless-application/static-website/tests/unit/components/Nav.spec.js)
				views,d(/mk)
					Applications.spec.js,f(e=utama=/realworld-serverless-application/static-website/tests/unit/views/Applications.spec.js)
					EditApplication.spec.js,f(e=utama=/realworld-serverless-application/static-website/tests/unit/views/EditApplication.spec.js)
					Home.spec.js,f(e=utama=/realworld-serverless-application/static-website/tests/unit/views/Home.spec.js)
					NewApplication.spec.js,f(e=utama=/realworld-serverless-application/static-website/tests/unit/views/NewApplication.spec.js)
					ViewApplication.spec.js,f(e=utama=/realworld-serverless-application/static-website/tests/unit/views/ViewApplication.spec.js)
--#

--% /realworld-serverless-application/.gitignore
/eclipse-bin/
*.iml
.classpath
.settings
.project
build
.*.sw[op]
*/.DS_Store
.idea/
*target/


--#

--% /realworld-serverless-application/buildspec.yaml
version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8
      nodejs: 8
    commands:
      - npm install -g @vue/cli
  build:
    commands:
      - cd static-website
      - npm install
      - npm run ci
      - cd ..
      - mvn clean package -DpackageBucket=${PACKAGE_BUCKET}

--#

--% /realworld-serverless-application/CODE_OF_CONDUCT.md
## Code of Conduct
This project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).
For more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact
opensource-codeofconduct@amazon.com with any additional questions or comments.

--#

--% /realworld-serverless-application/CONTRIBUTING.md
# Contributing Guidelines

Thank you for your interest in contributing to our project. We appreciate your interest but our intention is not for customers to send PRs back to the service for feature requests. The most interesting pieces about this release will be the project and code structure, architectural choices and operational rigor applied to various parts of our service. If you have a valuable contribution to an issue that affects multiple customers, please submit a pull request following the guidelines below.

## Contributing via Pull Requests
Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:

1. You are working against the latest source on the *master* branch.
2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.
3. You open an issue to discuss any significant work - we would hate for your time to be wasted.

To send us a pull request, please:

1. Fork the repository.
2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.
3. Ensure local tests pass.
4. Commit to your fork using clear commit messages.
5. Send us a pull request, answering any default questions in the pull request interface.
6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.

GitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and
[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).


## Finding contributions to work on
Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.


## Code of Conduct
This project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).
For more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact
opensource-codeofconduct@amazon.com with any additional questions or comments.


## Security issue notifications
If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.


## Licensing

See the [LICENSE](LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.

We may ask you to sign a [Contributor License Agreement (CLA)](http://en.wikipedia.org/wiki/Contributor_License_Agreement) for larger changes.

--#

--% /realworld-serverless-application/LICENSE

                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

--#

--% /realworld-serverless-application/NOTICE
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

--#

--% /realworld-serverless-application/pom.xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>software.amazon.serverless</groupId>
  <artifactId>realworld-serverless-application</artifactId>
  <version>1.0.1</version>
  <packaging>pom</packaging>

  <name>realworld-serverless-application</name>
  <url>https://github.com/awslabs/realworld-serverless-application</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <packageBucket>my-bucket</packageBucket>
  </properties>
  <modules>
    <module>backend</module>
  </modules>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>Create package folder</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <mkdir dir="${project.build.directory}/sam/app"/>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <id>Package project</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>aws</executable>
              <arguments>
                <argument>cloudformation</argument>
                <argument>package</argument>
                <argument>--s3-bucket</argument>
                <argument>${packageBucket}</argument>
                <argument>--template-file</argument>
                <argument>${project.basedir}/sam/app/template.yaml</argument>
                <argument>--output-template-file</argument>
                <argument>${project.build.directory}/sam/app/packaged-template.yaml</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

--#

--% /realworld-serverless-application/README.md
## realworld-serverless-application ![Build Status](https://codebuild.us-east-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoidk1hV1NVOVR6WkJSbjdEN3Evc0lDN2t1ZEQ2ZFVuTDV5Q1ZHMDF5NFZBZTBIWVZxbEtIN2w5NGNPRGxkQmpZVzJaQTVaV1I3Mm5tT1FYN1IxYmFGY1hBPSIsIml2UGFyYW1ldGVyU3BlYyI6Ijc2QU1Qc2lUTXY4Ny9Za2EiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=master)

This project is an adaptation of the [AWS Serverless Application Repository](https://aws.amazon.com/serverless/serverlessrepo/). Its primary objective is to serve as a case study of how to build a real world application using a combination of serverless technologies and approaches. The project captures key architectural components, code structure, deployment techniques, testing approaches, and operational practices of the AWS Serverless Application Repository - a production-grade AWS service, written in Java and built using serverless technologies. It is comprised of 4 components.

![Architecture Diagram](https://github.com/awslabs/realworld-serverless-application/raw/master/images/architecture_diagram.png)

To get started, see the [Quick Start](https://github.com/awslabs/realworld-serverless-application/wiki/Quick-Start) guide. For more details, read our [blog post](https://aws.amazon.com/blogs/opensource/real-world-serverless-application) and see our [project wiki](https://github.com/awslabs/realworld-serverless-application/wiki).

## License

This project is licensed under the Apache-2.0 License.

--#

--% /realworld-serverless-application/analytics/buildspec-integ-test.yaml
version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8
  build:
    commands:
      - TEST_STAGE=integtests`date +%s`
      - cd backend
      - mvn clean package -DpackageBucket=${PACKAGE_BUCKET}
      - cd ..
      - ./bin/deploy.sh -n $TEST_STAGE-backend -t backend/target/sam/app/packaged-template.yaml -o "Stage=$TEST_STAGE"
      - cd analytics
      - mvn clean verify -Dintegtests.stage=${TEST_STAGE} -DpackageBucket=${PACKAGE_BUCKET}
    finally:
      - cd $CODEBUILD_SRC_DIR
#     Cleanup commands end with "|| true" to ensure that all of them are executed. It's ok if they fail trying to delete a resource that was never created due to a build phase error.
      - ./bin/delete-stack.sh -n $TEST_STAGE-backend || true
--#

--% /realworld-serverless-application/analytics/buildspec.yaml
version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8 # Runtime version is required in the build spec even though this module does not use java
  build:
    commands:
      - bin/package.sh -n analytics
artifacts:
  files:
    - analytics/target/sam/app/packaged-template.yaml
  discard-paths: yes

--#

--% /realworld-serverless-application/analytics/pom.xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>software.amazon.serverless</groupId>
    <artifactId>realworld-serverless-application-analytics</artifactId>
    <version>1.0.1</version>

    <name>realworld-serverless-application-analytics</name>
    <url>https://github.com/awslabs/realworld-serverless-application</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <packageBucket>my-bucket</packageBucket>
        <integtests.stage>integ-tests</integtests.stage>
    </properties>

    <dependencies>
        <!-- Build Dependencies -->


        <!-- Regular Dependencies -->


        <!-- Test Dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.0.100-beta</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.12.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>4.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>4.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk-opensdk</artifactId>
            <version>1.11.392</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>4.2.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-guice</artifactId>
            <version>4.7.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>cognitoidentityprovider</artifactId>
            <version>2.8.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>url-connection-client</artifactId>
            <version>2.8.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>2.9.17</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>athena</artifactId>
            <version>2.9.16</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.9</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-xray-recorder-sdk-core</artifactId>
            <version>2.3.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>software.amazon.serverless</groupId>
            <artifactId>aws-ssm-java-caching-client</artifactId>
            <version>1.0.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.18</version>
            <scope>test</scope>
        </dependency>

        <!-- Runtime Dependencies -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.26</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.0</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>4.3.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <configLocation>google_checks.xml</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <linkXRef>true</linkXRef>
                    <violationSeverity>warning</violationSeverity>
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <systemProperties>
                        <integtests.stage>${integtests.stage}</integtests.stage>
                    </systemProperties>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>Create package folder</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <mkdir dir="${project.build.directory}/sam/app"/>
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <id>SAM package</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>cloudformation</argument>
                                <argument>package</argument>
                                <argument>--s3-bucket</argument>
                                <argument>${packageBucket}</argument>
                                <argument>--template-file</argument>
                                <argument>${project.basedir}/sam/app/template.yaml</argument>
                                <argument>--output-template-file</argument>
                                <argument>${project.build.directory}/sam/app/packaged-template.yaml</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Integ Test Environment Setup - Create Stack</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>cloudformation</argument>
                                <argument>deploy</argument>
                                <argument>--capabilities</argument>
                                <argument>CAPABILITY_IAM</argument>
                                <argument>CAPABILITY_AUTO_EXPAND</argument>
                                <argument>--template-file</argument>
                                <argument>${project.build.directory}/sam/app/packaged-template.yaml</argument>
                                <argument>--stack-name</argument>
                                <argument>${project.name}-${integtests.stage}</argument>
                                <argument>--parameter-overrides</argument>
                                <argument>Stage=${integtests.stage}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Integ Test Environment Setup - Create Resource Stack</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>cloudformation</argument>
                                <argument>deploy</argument>
                                <argument>--capabilities</argument>
                                <argument>CAPABILITY_IAM</argument>
                                <argument>CAPABILITY_AUTO_EXPAND</argument>
                                <argument>--template-file</argument>
                                <argument>${project.basedir}/src/test/resources/integ-test-env.template.yaml</argument>
                                <argument>--stack-name</argument>
                                <argument>${project.name}-${integtests.stage}-env</argument>
                                <argument>--parameter-overrides</argument>
                                <argument>Stage=${integtests.stage}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Integ Test Environment Teardown</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>cloudformation</argument>
                                <argument>delete-stack</argument>
                                <argument>--stack-name</argument>
                                <argument>${project.name}-${integtests.stage}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Integ Test Environment Teardown - Resource Stack</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>aws</executable>
                            <arguments>
                                <argument>cloudformation</argument>
                                <argument>delete-stack</argument>
                                <argument>--stack-name</argument>
                                <argument>${project.name}-${integtests.stage}-env</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

--#

--% /realworld-serverless-application/analytics/README.md
# realworld-serverless-application-analytics

realworld-serverless-application-analytics is the analytics component of a larger project providing business intelligence queries via Amazon Athena for the application. It can be deployed together with the other system components to produce an example serverless application demonstrating real world patterns and best practices for serverless applications.

To get started with the full project, follow the [Quick Start](https://github.com/awslabs/realworld-serverless-application/wiki/Quick-Start) guide.

## License

This project is licensed under the Apache-2.0 License.     

--#

--% /realworld-serverless-application/analytics/sam/app/template.yaml
AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This application creates analytics component for a backend service.
Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-analytics
    Description: >-
      This application creates analytics component for a backend service.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [serverless, athena, glue, firehose]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    AllowedPattern: ^[a-z0-9_]+$
    Default: 'test'

Resources:
  DDBFanoutApp:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:646794253159:applications/aws-dynamodb-stream-eventbridge-fanout
        SemanticVersion: 1.0.2
      Parameters:
        DynamoDBStreamArn: !Sub '{{resolve:ssm:/applications/apprepo/${Stage}/ddb/Applications/StreamArn:1}}'

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms

  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3653

  FirehoseLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup

  FirehoseS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com

  EventBridgeToFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com

  EventBridgeToFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref EventBridgeToFirehoseRole
      PolicyName: "eventbridge-to-firehose"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource:
              - !GetAtt Firehose.Arn

  FirehoseToS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref FirehoseS3Role
      PolicyName: "firehose-to-s3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutEncryptionConfiguration
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::*
              - !Sub arn:${AWS::Partition}:s3:::*/*
          - Action:
              - glue:GetTable
              - glue:GetTableVersion
              - glue:GetTableVersions
            Effect: Allow
            Resource:
              - "*"
          - Effect: Allow
            Action: logs:PutLogEvents
            Resource: !GetAtt FirehoseLogGroup.Arn

  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        # Using a name compatible with Apache Hive (alphanumeric and underscore characters) since the intent is to use this database with Athena.
        # Names auto generated by CloudFormation do not follow this pattern.
        # See https://docs.aws.amazon.com/athena/latest/ug/create-table.html for more details
        Name: !Sub realworld_serverless_application_analytics_${Stage}
        Description: Real world serverless application analytics database

  GlueTable:
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref GlueDatabase
      CatalogId: !Ref AWS::AccountId
      TableInput:
        Name: applications
        StorageDescriptor:
          Columns:
            - Name: version
              Type: string
            - Name: id
              Type: string
            - Name: detail-type
              Type: string
            - Name: source
              Type: string
            - Name: account
              Type: string
            - Name: time
              Type: string
            - Name: region
              Type: string
            - Name: resources
              Type: array<string>
            - Name: detail
              Type: struct<eventID:string,eventName:string,eventVersion:string,eventSource:string,awsRegion:string,dynamodb:struct<approximateCreationDateTime:bigint,keys:struct<applicationId:struct<s:string>,userId:struct<s:string>>,newImage:struct<createdAt:struct<s:string>,author:struct<s:string>,description:struct<s:string>,applicationId:struct<s:string>,userId:struct<s:string>,version:struct<n:string>,homePageUrl:struct<s:string>>,sequenceNumber:string,sizeBytes:int,streamViewType:string,oldImage:struct<createdAt:struct<s:string>,author:struct<s:string>,description:struct<s:string>,applicationId:struct<s:string>,userId:struct<s:string>,version:struct<n:string>,homePageUrl:struct<s:string>>>,eventSourceARN:string>
          Location: !Sub s3://${DataBucket}/Applications/
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: '1'
          BucketColumns: []
          SortColumns: []
          StoredAsSubDirectories: false
        PartitionKeys:
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          - Name: hour
            Type: string
        TableType: EXTERNAL_TABLE

  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn: FirehoseToS3Policy
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 128
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref FirehoseLogGroup
          LogStreamName: !Ref FirehoseLogStream
        CompressionFormat: UNCOMPRESSED
        DataFormatConversionConfiguration:
          Enabled: true
          InputFormatConfiguration:
            Deserializer:
              OpenXJsonSerDe:
                CaseInsensitive: true
          OutputFormatConfiguration:
            Serializer:
              ParquetSerDe:
                Compression: SNAPPY
                EnableDictionaryCompression: false
          SchemaConfiguration:
            CatalogId: !Ref AWS::AccountId
            DatabaseName: !Ref GlueDatabase
            Region: !Ref AWS::Region
            RoleARN: !GetAtt FirehoseS3Role.Arn
            TableName: !Ref GlueTable
            VersionId: LATEST
        Prefix: "Applications/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
        ErrorOutputPrefix: "Errors/!{firehose:random-string}/!{firehose:error-output-type}/!{timestamp:yyyy/MM/dd}/"
        RoleARN: !GetAtt FirehoseS3Role.Arn

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Match DDB streams events and send them to Firehose for analytics"
      EventPattern: { "source": [ "aws-dynamodb-stream-eventbridge-fanout" ], "resources":[ !Sub '{{resolve:ssm:/applications/apprepo/${Stage}/ddb/Applications/StreamArn:1}}' ] }
      Targets:
        - Id: "firehose-analytics"
          Arn: !GetAtt Firehose.Arn
          RoleArn: !GetAtt EventBridgeToFirehoseRole.Arn

  # Storing resources names to SSM
  GlueDatabaseName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/glue/database"
      Type: "String"
      Value: !Ref GlueDatabase
      Description: "Analytics database name"

  GlueTableName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/glue/table/applications"
      Type: "String"
      Value: !Ref GlueTable
      Description: "Analytics applications table name"

  DataBucketName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/s3/DataBucket/Name"
      Type: "String"
      Value: !Ref DataBucket
      Description: "DataBucket bucket name"

--#

--% /realworld-serverless-application/analytics/sam/cicd/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates IAM roles and use them to setup CD pipeline for the analytics component.

Parameters:
  GitHubOAuthTokenSecretId:
    Type: String
    Description: The AWS Secrets Manager Secret Id that stores Github OAuth token.
    Default: 'GitHubOAuthToken'
  GitHubOwner:
    Type: String
    Description: The GitHub owner of the repository.
    Default: 'awslabs'
  ApplicationStackName:
    Type: String
    Description: The stack name the CICD will deploy the application to.
    Default: 'realworld-serverless-application-analytics'
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'
Resources:
  CD:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:646794253159:applications/aws-sam-codepipeline-cd
        SemanticVersion: 0.1.3
      Parameters:
        GitHubOAuthToken: !Sub '{{resolve:secretsmanager:${GitHubOAuthTokenSecretId}}}'
        GitHubOwner: !Ref GitHubOwner
        GitHubRepo: realworld-serverless-application
        DeployStackName: !Ref ApplicationStackName
        DeployRoleName: !Ref DeployRole
        DeployParameterOverrides: !Sub '{"Stage":"${Stage}"}'
        IntegTestRoleName: !Ref IntegTestsRole
        BuildSpecFilePath: 'analytics/buildspec.yaml'
        IntegTestBuildSpecFilePath: 'analytics/buildspec-integ-test.yaml'

  # This policy defines the minimum IAM permissions required to Create and Delete a stack for analytics component into CloudFormation
  CloudFormationDeployPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeployRole
        - !Ref IntegTestsRole
      PolicyName: "deploy-create-delete-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - cloudformation:CreateChangeSet
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include
          - Effect: Allow
            Action:
              - events:DescribeRule
              - events:DeleteRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:TagRole
              - iam:PutRolePolicy
              - iam:GetRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
          - Effect: Allow
            Action:
              - firehose:CreateDeliveryStream
              - firehose:DeleteDeliveryStream
              - firehose:DescribeDeliveryStream
              - firehose:UpdateDestination
            Resource:
              - !Sub arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*
          - Effect: Allow
            Action:
              - lambda:CreateEventSourceMapping
              - lambda:GetEventSourceMapping
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - lambda:CreateEventSourceMapping
              - lambda:DeleteEventSourceMapping
              - lambda:CreateFunction
              - lambda:DeleteFunction
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:*
          - Effect: Allow
            Action:
              - glue:BatchCreatePartition
              - glue:BatchGetPartition
              - glue:CreateDatabase
              - glue:CreatePartition
              - glue:CreateTable
              - glue:DeleteDatabase
              - glue:DeleteTable
              - glue:DeletePartition
              - glue:BatchDeletePartition
              - glue:GetDatabase
              - glue:GetDatabases
              - glue:GetPartition
              - glue:GetPartitions
              - glue:GetTable
              - glue:GetTableVersion
              - glue:UpdatePartition
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:CreateGrant
              - kms:DescribeKey
              - kms:GenerateDataKey
            Resource:
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:aliases/aws/lambda
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:aliases/aws/s3
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:PutRetentionPolicy
              - logs:DeleteLogStream
              - logs:DeleteLogGroup
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
              - sqs:CreateQueue
              - sqs:DeleteQueue
              - sqs:TagQueue
              - sqs:GetQueueAttributes
              - sqs:SetQueueAttributes
            Resource:
              - !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:GetEncryptionConfiguration
              - s3:PutEncryptionConfiguration
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::*
          - Effect: Allow
            Action:
              - serverlessrepo:CreateCloudFormationTemplate
              - serverlessrepo:GetCloudFormationTemplate
            Resource:
              - arn:aws:serverlessrepo:us-east-1:646794253159:applications/aws-dynamodb-stream-eventbridge-fanout
          - Effect: "Allow"
            Action:
              - s3:GetObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::awsserverlessrepo-changesets*/*
          - Effect: "Allow"
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:AddTagsToResource
              - ssm:RemoveTagsFromResource
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/apprepo/*

  # This policy defines the minimum IAM permissions required to Create and Delete a stack for backend component into CloudFormation
  CloudFormationDeployPolicyBackend:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref IntegTestsRole
      PolicyName: "deploy-backend-create-delete-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - cloudformation:CreateChangeSet
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include
          - Effect: "Allow"
            Action:
              - dynamodb:DescribeTable
              - dynamodb:DeleteTable
              - dynamodb:CreateTable
              - dynamodb:UpdateContinuousBackups
              - dynamodb:DescribeContinuousBackups
              - dynamodb:UpdateTimeToLive
              - dynamodb:DescribeTimeToLive
              - dynamodb:TagResource
              - dynamodb:ListTagsOfResource
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
          - Effect: "Allow"
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:TagRole
              - iam:PutRolePolicy
              - iam:GetRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
          - Effect: "Allow"
            Action:
              - apigateway:*
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/*
          - Effect: "Allow"
            Action:
              - apigateway:POST
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis
          - Effect: "Allow"
            Action:
              - apigateway:PATCH
              - apigateway:GET
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/account
          - Effect: "Allow"
            Action:
              - codedeploy:CreateApplication
              - codedeploy:DeleteApplication
            Resource:
              - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
          - Effect: "Allow"
            Action:
              - codedeploy:CreateDeploymentGroup
              - codedeploy:DeleteDeploymentGroup
              - codedeploy:CreateDeployment
            Resource:
              - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*
          - Effect: "Allow"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:CreateGrant
              - kms:DescribeKey
              - kms:GenerateDataKey
            Resource:
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:aliases/aws/lambda
          - Effect: "Allow"
            Action:
              - lambda:CreateFunction
              - lambda:GetFunctionConfiguration
              - lambda:GetFunction
              - lambda:DeleteFunction
              - lambda:CreateAlias
              - lambda:GetAlias
              - lambda:DeleteAlias
              - lambda:PublishVersion
              - lambda:ListVersionsByFunction
              - lambda:AddPermission
              - lambda:RemovePermission
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: "Allow"
            Action:
              - logs:DescribeLogGroups
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: "Allow"
            Action:
              - logs:CreateLogGroup
              - logs:DescribeLogGroups
              - logs:DeleteLogGroup
              - logs:PutRetentionPolicy
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/AccessLog-*
          - Effect: "Allow"
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:AddTagsToResource
              - ssm:RemoveTagsFromResource
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/apprepo/*
          - Effect: "Allow"
            Action:
              - cognito-idp:CreateUserPool
              - cognito-idp:DeleteUserPool
            Resource:
              - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
          - Effect: "Allow"
            Action:
              - cognito-idp:CreateUserPool
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DescribeAlarms
              - cloudwatch:DeleteAlarms
            Resource:
              - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
          - Effect: "Allow"
            Action:
              - kms:CreateKey
            Resource:
              - '*'
          - Effect: "Allow"
            Action:
              - kms:PutKeyPolicy
              - kms:DescribeKey
              - kms:ScheduleKeyDeletion
              - kms:EnableKeyRotation
              - kms:TagResource
              - kms:UntagResource
              - kms:ListResourceTags
            Resource:
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
  # This role is used to deploy analytics to CloudFormation.
  # In addition to the permissions from CloudFormationDeployPolicy, it also defines permissions that are required to update the stack in CloudFormation
  DeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Deploy CloudFormation stack ${ApplicationStackName}. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "iam-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - iam:UpdateRoleDescription
                  - iam:UpdateRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
        - PolicyName: "lambda-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateAlias
                  - lambda:ListTags
                  - lambda:TagResource
                  - lambda:UntagResource
                  - lambda:UpdateEventSourceMapping
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:*
  # This role is used to run integration tests in CodeBuild.
  # In addition to the permissions from CloudFormationDeployPolicy, it also defines permissions that is required by integration tests only.
  IntegTestsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Runs integration tests in CodeBuild for ${ApplicationStackName}. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "cloudformation-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DeleteStack
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
        - PolicyName: "cognito-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                Resource:
                  - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
        - PolicyName: "athena-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:GetQueryResultsStream
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:CreateBucket
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::*
                  - !Sub arn:${AWS::Partition}:s3:::*/*

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AbstractAWSServerlessApplicationRepository.java
/**

*/
package software.amazon.serverless.apprepo.api.client;

import javax.annotation.Generated;
import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.*;
import com.amazonaws.opensdk.*;
import com.amazonaws.opensdk.model.*;

/**
 * Abstract implementation of {@code AWSServerlessApplicationRepository}.
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class AbstractAWSServerlessApplicationRepository implements AWSServerlessApplicationRepository {

    protected AbstractAWSServerlessApplicationRepository() {
    }

    @Override
    public CreateApplicationResult createApplication(CreateApplicationRequest request) {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public DeleteApplicationResult deleteApplication(DeleteApplicationRequest request) {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public GetApplicationResult getApplication(GetApplicationRequest request) {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public ListApplicationsResult listApplications(ListApplicationsRequest request) {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public UpdateApplicationResult updateApplication(UpdateApplicationRequest request) {
        throw new java.lang.UnsupportedOperationException();
    }

    @Override
    public void shutdown() {
        throw new java.lang.UnsupportedOperationException();
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepository.java
/**

*/
package software.amazon.serverless.apprepo.api.client;

import javax.annotation.Generated;

import com.amazonaws.*;
import com.amazonaws.opensdk.*;
import com.amazonaws.opensdk.model.*;
import com.amazonaws.regions.*;

import software.amazon.serverless.apprepo.api.client.model.*;

/**
 * Interface for accessing AWSServerlessApplicationRepository.
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public interface AWSServerlessApplicationRepository {

    /**
     * @param createApplicationRequest
     * @return Result of the CreateApplication operation returned by the service.
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @throws ConflictException
     * @sample AWSServerlessApplicationRepository.CreateApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/CreateApplication"
     *      target="_top">AWS API Documentation</a>
     */
    CreateApplicationResult createApplication(CreateApplicationRequest createApplicationRequest);

    /**
     * @param deleteApplicationRequest
     * @return Result of the DeleteApplication operation returned by the service.
     * @throws NotFoundException
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.DeleteApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/DeleteApplication"
     *      target="_top">AWS API Documentation</a>
     */
    DeleteApplicationResult deleteApplication(DeleteApplicationRequest deleteApplicationRequest);

    /**
     * @param getApplicationRequest
     * @return Result of the GetApplication operation returned by the service.
     * @throws NotFoundException
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.GetApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/GetApplication" target="_top">AWS
     *      API Documentation</a>
     */
    GetApplicationResult getApplication(GetApplicationRequest getApplicationRequest);

    /**
     * @param listApplicationsRequest
     * @return Result of the ListApplications operation returned by the service.
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.ListApplications
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/ListApplications" target="_top">AWS
     *      API Documentation</a>
     */
    ListApplicationsResult listApplications(ListApplicationsRequest listApplicationsRequest);

    /**
     * @param updateApplicationRequest
     * @return Result of the UpdateApplication operation returned by the service.
     * @throws NotFoundException
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.UpdateApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/UpdateApplication"
     *      target="_top">AWS API Documentation</a>
     */
    UpdateApplicationResult updateApplication(UpdateApplicationRequest updateApplicationRequest);

    /**
     * @return Create new instance of builder with all defaults set.
     */
    public static AWSServerlessApplicationRepositoryClientBuilder builder() {
        return new AWSServerlessApplicationRepositoryClientBuilder();
    }

    /**
     * Shuts down this client object, releasing any resources that might be held open. This is an optional method, and
     * callers are not expected to call it, but can if they want to explicitly release any open resources. Once a client
     * has been shutdown, it should not be used to make any more requests.
     */
    void shutdown();

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClient.java
/**

*/
package software.amazon.serverless.apprepo.api.client;

import java.net.*;
import java.util.*;

import javax.annotation.Generated;

import org.apache.commons.logging.*;

import com.amazonaws.*;
import com.amazonaws.opensdk.*;
import com.amazonaws.opensdk.model.*;
import com.amazonaws.opensdk.protect.model.transform.*;
import com.amazonaws.auth.*;
import com.amazonaws.handlers.*;
import com.amazonaws.http.*;
import com.amazonaws.internal.*;
import com.amazonaws.metrics.*;
import com.amazonaws.regions.*;
import com.amazonaws.transform.*;
import com.amazonaws.util.*;
import com.amazonaws.protocol.json.*;

import com.amazonaws.annotation.ThreadSafe;
import com.amazonaws.client.AwsSyncClientParams;

import com.amazonaws.client.ClientHandler;
import com.amazonaws.client.ClientHandlerParams;
import com.amazonaws.client.ClientExecutionParams;
import com.amazonaws.opensdk.protect.client.SdkClientHandler;
import com.amazonaws.SdkBaseException;

import software.amazon.serverless.apprepo.api.client.model.*;
import software.amazon.serverless.apprepo.api.client.model.transform.*;

/**
 * Client for accessing AWSServerlessApplicationRepository. All service calls made using this client are blocking, and
 * will not return until the service call completes.
 * <p>
 * 
 */
@ThreadSafe
@Generated("com.amazonaws:aws-java-sdk-code-generator")
class AWSServerlessApplicationRepositoryClient implements AWSServerlessApplicationRepository {

    private final ClientHandler clientHandler;

    private static final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory = new com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl(
            new JsonClientMetadata()
                    .withProtocolVersion("1.1")
                    .withSupportsCbor(false)
                    .withSupportsIon(false)
                    .withContentTypeOverride("application/json")
                    .addErrorMetadata(
                            new JsonErrorShapeMetadata().withErrorCode("ConflictException").withModeledClass(
                                    software.amazon.serverless.apprepo.api.client.model.ConflictException.class))
                    .addErrorMetadata(
                            new JsonErrorShapeMetadata().withErrorCode("NotFoundException").withModeledClass(
                                    software.amazon.serverless.apprepo.api.client.model.NotFoundException.class))
                    .addErrorMetadata(
                            new JsonErrorShapeMetadata().withErrorCode("TooManyRequestsException").withModeledClass(
                                    software.amazon.serverless.apprepo.api.client.model.TooManyRequestsException.class))
                    .addErrorMetadata(
                            new JsonErrorShapeMetadata().withErrorCode("UnauthorizedException").withModeledClass(
                                    software.amazon.serverless.apprepo.api.client.model.UnauthorizedException.class))
                    .addErrorMetadata(
                            new JsonErrorShapeMetadata().withErrorCode("BadRequestException").withModeledClass(
                                    software.amazon.serverless.apprepo.api.client.model.BadRequestException.class))
                    .addErrorMetadata(
                            new JsonErrorShapeMetadata().withErrorCode("InternalServerErrorException").withModeledClass(
                                    software.amazon.serverless.apprepo.api.client.model.InternalServerErrorException.class))
                    .withBaseServiceExceptionClass(software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException.class));

    /**
     * Constructs a new client to invoke service methods on AWSServerlessApplicationRepository using the specified
     * parameters.
     *
     * <p>
     * All service calls made using this new client object are blocking, and will not return until the service call
     * completes.
     *
     * @param clientParams
     *        Object providing client parameters.
     */
    AWSServerlessApplicationRepositoryClient(AwsSyncClientParams clientParams) {
        this.clientHandler = new SdkClientHandler(new ClientHandlerParams().withClientParams(clientParams));
    }

    /**
     * @param createApplicationRequest
     * @return Result of the CreateApplication operation returned by the service.
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @throws ConflictException
     * @sample AWSServerlessApplicationRepository.CreateApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/CreateApplication"
     *      target="_top">AWS API Documentation</a>
     */
    @Override
    public CreateApplicationResult createApplication(CreateApplicationRequest createApplicationRequest) {
        HttpResponseHandler<CreateApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
                .withHasStreamingSuccessResponse(false), new CreateApplicationResultJsonUnmarshaller());

        HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
                new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                        .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
                new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                        .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500),
                new JsonErrorShapeMetadata().withModeledClass(ConflictException.class).withHttpStatusCode(409));

        return clientHandler.execute(new ClientExecutionParams<CreateApplicationRequest, CreateApplicationResult>()
                .withMarshaller(new CreateApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
                .withErrorResponseHandler(errorResponseHandler).withInput(createApplicationRequest));
    }

    /**
     * @param deleteApplicationRequest
     * @return Result of the DeleteApplication operation returned by the service.
     * @throws NotFoundException
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.DeleteApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/DeleteApplication"
     *      target="_top">AWS API Documentation</a>
     */
    @Override
    public DeleteApplicationResult deleteApplication(DeleteApplicationRequest deleteApplicationRequest) {
        HttpResponseHandler<DeleteApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
                .withHasStreamingSuccessResponse(false), new DeleteApplicationResultJsonUnmarshaller());

        HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
                new JsonErrorShapeMetadata().withModeledClass(NotFoundException.class).withHttpStatusCode(404),
                new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                        .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
                new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                        .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

        return clientHandler.execute(new ClientExecutionParams<DeleteApplicationRequest, DeleteApplicationResult>()
                .withMarshaller(new DeleteApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
                .withErrorResponseHandler(errorResponseHandler).withInput(deleteApplicationRequest));
    }

    /**
     * @param getApplicationRequest
     * @return Result of the GetApplication operation returned by the service.
     * @throws NotFoundException
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.GetApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/GetApplication" target="_top">AWS
     *      API Documentation</a>
     */
    @Override
    public GetApplicationResult getApplication(GetApplicationRequest getApplicationRequest) {
        HttpResponseHandler<GetApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
                .withHasStreamingSuccessResponse(false), new GetApplicationResultJsonUnmarshaller());

        HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
                new JsonErrorShapeMetadata().withModeledClass(NotFoundException.class).withHttpStatusCode(404),
                new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                        .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
                new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                        .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

        return clientHandler.execute(new ClientExecutionParams<GetApplicationRequest, GetApplicationResult>()
                .withMarshaller(new GetApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
                .withErrorResponseHandler(errorResponseHandler).withInput(getApplicationRequest));
    }

    /**
     * @param listApplicationsRequest
     * @return Result of the ListApplications operation returned by the service.
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.ListApplications
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/ListApplications" target="_top">AWS
     *      API Documentation</a>
     */
    @Override
    public ListApplicationsResult listApplications(ListApplicationsRequest listApplicationsRequest) {
        HttpResponseHandler<ListApplicationsResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
                .withHasStreamingSuccessResponse(false), new ListApplicationsResultJsonUnmarshaller());

        HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
                new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                        .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
                new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                        .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

        return clientHandler.execute(new ClientExecutionParams<ListApplicationsRequest, ListApplicationsResult>()
                .withMarshaller(new ListApplicationsRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
                .withErrorResponseHandler(errorResponseHandler).withInput(listApplicationsRequest));
    }

    /**
     * @param updateApplicationRequest
     * @return Result of the UpdateApplication operation returned by the service.
     * @throws NotFoundException
     * @throws TooManyRequestsException
     * @throws BadRequestException
     * @throws UnauthorizedException
     * @throws InternalServerErrorException
     * @sample AWSServerlessApplicationRepository.UpdateApplication
     * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/UpdateApplication"
     *      target="_top">AWS API Documentation</a>
     */
    @Override
    public UpdateApplicationResult updateApplication(UpdateApplicationRequest updateApplicationRequest) {
        HttpResponseHandler<UpdateApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
                .withHasStreamingSuccessResponse(false), new UpdateApplicationResultJsonUnmarshaller());

        HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
                new JsonErrorShapeMetadata().withModeledClass(NotFoundException.class).withHttpStatusCode(404),
                new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                        .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
                new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                        .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

        return clientHandler.execute(new ClientExecutionParams<UpdateApplicationRequest, UpdateApplicationResult>()
                .withMarshaller(new UpdateApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
                .withErrorResponseHandler(errorResponseHandler).withInput(updateApplicationRequest));
    }

    /**
     * Create the error response handler for the operation.
     * 
     * @param errorShapeMetadata
     *        Error metadata for the given operation
     * @return Configured error response handler to pass to HTTP layer
     */
    private HttpResponseHandler<SdkBaseException> createErrorResponseHandler(JsonErrorShapeMetadata... errorShapeMetadata) {
        return protocolFactory.createErrorResponseHandler(new JsonErrorResponseMetadata().withErrorShapes(Arrays.asList(errorShapeMetadata)));
    }

    @Override
    public void shutdown() {
        clientHandler.shutdown();
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClientBuilder.java
/**

*/
package software.amazon.serverless.apprepo.api.client;

import com.amazonaws.annotation.NotThreadSafe;
import com.amazonaws.client.AwsSyncClientParams;
import com.amazonaws.opensdk.protect.client.SdkSyncClientBuilder;
import com.amazonaws.opensdk.internal.config.ApiGatewayClientConfigurationFactory;
import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;
import com.amazonaws.util.RuntimeHttpUtils;
import com.amazonaws.Protocol;

import java.net.URI;
import javax.annotation.Generated;

/**
 * Fluent builder for {@link software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository}.
 * 
 * @see software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository#builder
 **/
@NotThreadSafe
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public final class AWSServerlessApplicationRepositoryClientBuilder extends
        SdkSyncClientBuilder<AWSServerlessApplicationRepositoryClientBuilder, AWSServerlessApplicationRepository> {

    private static final URI DEFAULT_ENDPOINT = RuntimeHttpUtils.toUri("k9zlvhl83e.execute-api.us-east-1.amazonaws.com", Protocol.HTTPS);
    private static final String DEFAULT_REGION = "us-east-1";

    /**
     * Package private constructor - builder should be created via {@link AWSServerlessApplicationRepository#builder()}
     */
    AWSServerlessApplicationRepositoryClientBuilder() {
        super(new ApiGatewayClientConfigurationFactory());
    }

    /**
     * Specify an implementation of the CognitoAuthorizer to be used during signing
     * 
     * @param requestSigner
     *        the requestSigner implementation to use
     * @return This object for method chaining.
     */
    public AWSServerlessApplicationRepositoryClientBuilder signer(CognitoAuthorizer requestSigner) {
        return signer(requestSigner, CognitoAuthorizer.class);
    }

    /**
     * Specify an implementation of the CognitoAuthorizer to be used during signing
     * 
     * @param requestSigner
     *        the requestSigner implementation to use
     */
    public void setSigner(CognitoAuthorizer requestSigner) {
        signer(requestSigner);
    }

    /**
     * Construct a synchronous implementation of AWSServerlessApplicationRepository using the current builder
     * configuration.
     *
     * @param params
     *        Current builder configuration represented as a parameter object.
     * @return Fully configured implementation of AWSServerlessApplicationRepository.
     */
    @Override
    protected AWSServerlessApplicationRepository build(AwsSyncClientParams params) {
        return new AWSServerlessApplicationRepositoryClient(params);
    }

    @Override
    protected URI defaultEndpoint() {
        return DEFAULT_ENDPOINT;
    }

    @Override
    protected String defaultRegion() {
        return DEFAULT_REGION;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/package-info.java
/**

*/

/**
 * 
 */
package software.amazon.serverless.apprepo.api.client;


--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/auth/CognitoAuthorizer.java
/**

*/
package software.amazon.serverless.apprepo.api.client.auth;

import javax.annotation.Generated;
import com.amazonaws.ImmutableRequest;
import com.amazonaws.SignableRequest;
import com.amazonaws.auth.RequestSigner;
import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepositoryClientBuilder;

/**
 * A default implementation of {@link RequestSigner} that puts a generated token into the header. An implementation of
 * this can to be supplied during construction of a {@link AWSServerlessApplicationRepository} via
 * {@link AWSServerlessApplicationRepositoryClientBuilder#signer(CognitoAuthorizer)} like so
 *
 * <pre>
 * <code>
 *  AWSServerlessApplicationRepository client = AWSServerlessApplicationRepository.builder().signer((CognitoAuthorizer) request -> "some token").build();
 * </code>
 * </pre>
 */
@FunctionalInterface
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public interface CognitoAuthorizer extends RequestSigner {

    /**
     * Generate a token that will be added to Authorization in the header of the request during signing
     * 
     * @param request
     *        an immutable view of the request for which to generate a token
     * @return the token to use for signing
     */
    String generateToken(ImmutableRequest<?> request);

    /**
     * @see RequestSigner#sign(SignableRequest)
     */
    @Override
    default void sign(SignableRequest<?> request) {
        request.addHeader("Authorization", generateToken(request));
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/Application.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;
import com.amazonaws.protocol.StructuredPojo;
import com.amazonaws.protocol.ProtocolMarshaller;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/Application" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class Application implements Serializable, Cloneable, StructuredPojo {

    private String applicationId;

    private String author;

    private String creationTime;

    private String description;

    private String homePageUrl;

    /**
     * @param applicationId
     */

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * @return
     */

    public String getApplicationId() {
        return this.applicationId;
    }

    /**
     * @param applicationId
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public Application applicationId(String applicationId) {
        setApplicationId(applicationId);
        return this;
    }

    /**
     * @param author
     */

    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * @return
     */

    public String getAuthor() {
        return this.author;
    }

    /**
     * @param author
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public Application author(String author) {
        setAuthor(author);
        return this;
    }

    /**
     * @param creationTime
     */

    public void setCreationTime(String creationTime) {
        this.creationTime = creationTime;
    }

    /**
     * @return
     */

    public String getCreationTime() {
        return this.creationTime;
    }

    /**
     * @param creationTime
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public Application creationTime(String creationTime) {
        setCreationTime(creationTime);
        return this;
    }

    /**
     * @param description
     */

    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * @return
     */

    public String getDescription() {
        return this.description;
    }

    /**
     * @param description
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public Application description(String description) {
        setDescription(description);
        return this;
    }

    /**
     * @param homePageUrl
     */

    public void setHomePageUrl(String homePageUrl) {
        this.homePageUrl = homePageUrl;
    }

    /**
     * @return
     */

    public String getHomePageUrl() {
        return this.homePageUrl;
    }

    /**
     * @param homePageUrl
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public Application homePageUrl(String homePageUrl) {
        setHomePageUrl(homePageUrl);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplicationId() != null)
            sb.append("ApplicationId: ").append(getApplicationId()).append(",");
        if (getAuthor() != null)
            sb.append("Author: ").append(getAuthor()).append(",");
        if (getCreationTime() != null)
            sb.append("CreationTime: ").append(getCreationTime()).append(",");
        if (getDescription() != null)
            sb.append("Description: ").append(getDescription()).append(",");
        if (getHomePageUrl() != null)
            sb.append("HomePageUrl: ").append(getHomePageUrl());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof Application == false)
            return false;
        Application other = (Application) obj;
        if (other.getApplicationId() == null ^ this.getApplicationId() == null)
            return false;
        if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
            return false;
        if (other.getAuthor() == null ^ this.getAuthor() == null)
            return false;
        if (other.getAuthor() != null && other.getAuthor().equals(this.getAuthor()) == false)
            return false;
        if (other.getCreationTime() == null ^ this.getCreationTime() == null)
            return false;
        if (other.getCreationTime() != null && other.getCreationTime().equals(this.getCreationTime()) == false)
            return false;
        if (other.getDescription() == null ^ this.getDescription() == null)
            return false;
        if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
            return false;
        if (other.getHomePageUrl() == null ^ this.getHomePageUrl() == null)
            return false;
        if (other.getHomePageUrl() != null && other.getHomePageUrl().equals(this.getHomePageUrl()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
        hashCode = prime * hashCode + ((getAuthor() == null) ? 0 : getAuthor().hashCode());
        hashCode = prime * hashCode + ((getCreationTime() == null) ? 0 : getCreationTime().hashCode());
        hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
        hashCode = prime * hashCode + ((getHomePageUrl() == null) ? 0 : getHomePageUrl().hashCode());
        return hashCode;
    }

    @Override
    public Application clone() {
        try {
            return (Application) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

    @com.amazonaws.annotation.SdkInternalApi
    @Override
    public void marshall(ProtocolMarshaller protocolMarshaller) {
        software.amazon.serverless.apprepo.api.client.model.transform.ApplicationMarshaller.getInstance().marshall(this, protocolMarshaller);
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationList.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;
import com.amazonaws.protocol.StructuredPojo;
import com.amazonaws.protocol.ProtocolMarshaller;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/ApplicationList" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationList implements Serializable, Cloneable, StructuredPojo {

    private java.util.List<ApplicationSummary> applications;

    private String nextToken;

    /**
     * @return
     */

    public java.util.List<ApplicationSummary> getApplications() {
        return applications;
    }

    /**
     * @param applications
     */

    public void setApplications(java.util.Collection<ApplicationSummary> applications) {
        if (applications == null) {
            this.applications = null;
            return;
        }

        this.applications = new java.util.ArrayList<ApplicationSummary>(applications);
    }

    /**
     * <p>
     * <b>NOTE:</b> This method appends the values to the existing list (if any). Use
     * {@link #setApplications(java.util.Collection)} or {@link #withApplications(java.util.Collection)} if you want to
     * override the existing values.
     * </p>
     * 
     * @param applications
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ApplicationList applications(ApplicationSummary... applications) {
        if (this.applications == null) {
            setApplications(new java.util.ArrayList<ApplicationSummary>(applications.length));
        }
        for (ApplicationSummary ele : applications) {
            this.applications.add(ele);
        }
        return this;
    }

    /**
     * @param applications
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ApplicationList applications(java.util.Collection<ApplicationSummary> applications) {
        setApplications(applications);
        return this;
    }

    /**
     * @param nextToken
     */

    public void setNextToken(String nextToken) {
        this.nextToken = nextToken;
    }

    /**
     * @return
     */

    public String getNextToken() {
        return this.nextToken;
    }

    /**
     * @param nextToken
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ApplicationList nextToken(String nextToken) {
        setNextToken(nextToken);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplications() != null)
            sb.append("Applications: ").append(getApplications()).append(",");
        if (getNextToken() != null)
            sb.append("NextToken: ").append(getNextToken());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof ApplicationList == false)
            return false;
        ApplicationList other = (ApplicationList) obj;
        if (other.getApplications() == null ^ this.getApplications() == null)
            return false;
        if (other.getApplications() != null && other.getApplications().equals(this.getApplications()) == false)
            return false;
        if (other.getNextToken() == null ^ this.getNextToken() == null)
            return false;
        if (other.getNextToken() != null && other.getNextToken().equals(this.getNextToken()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplications() == null) ? 0 : getApplications().hashCode());
        hashCode = prime * hashCode + ((getNextToken() == null) ? 0 : getNextToken().hashCode());
        return hashCode;
    }

    @Override
    public ApplicationList clone() {
        try {
            return (ApplicationList) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

    @com.amazonaws.annotation.SdkInternalApi
    @Override
    public void marshall(ProtocolMarshaller protocolMarshaller) {
        software.amazon.serverless.apprepo.api.client.model.transform.ApplicationListMarshaller.getInstance().marshall(this, protocolMarshaller);
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationSummary.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;
import com.amazonaws.protocol.StructuredPojo;
import com.amazonaws.protocol.ProtocolMarshaller;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/ApplicationSummary" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationSummary implements Serializable, Cloneable, StructuredPojo {

    private String applicationId;

    private String creationTime;

    private String description;

    /**
     * @param applicationId
     */

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * @return
     */

    public String getApplicationId() {
        return this.applicationId;
    }

    /**
     * @param applicationId
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ApplicationSummary applicationId(String applicationId) {
        setApplicationId(applicationId);
        return this;
    }

    /**
     * @param creationTime
     */

    public void setCreationTime(String creationTime) {
        this.creationTime = creationTime;
    }

    /**
     * @return
     */

    public String getCreationTime() {
        return this.creationTime;
    }

    /**
     * @param creationTime
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ApplicationSummary creationTime(String creationTime) {
        setCreationTime(creationTime);
        return this;
    }

    /**
     * @param description
     */

    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * @return
     */

    public String getDescription() {
        return this.description;
    }

    /**
     * @param description
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ApplicationSummary description(String description) {
        setDescription(description);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplicationId() != null)
            sb.append("ApplicationId: ").append(getApplicationId()).append(",");
        if (getCreationTime() != null)
            sb.append("CreationTime: ").append(getCreationTime()).append(",");
        if (getDescription() != null)
            sb.append("Description: ").append(getDescription());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof ApplicationSummary == false)
            return false;
        ApplicationSummary other = (ApplicationSummary) obj;
        if (other.getApplicationId() == null ^ this.getApplicationId() == null)
            return false;
        if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
            return false;
        if (other.getCreationTime() == null ^ this.getCreationTime() == null)
            return false;
        if (other.getCreationTime() != null && other.getCreationTime().equals(this.getCreationTime()) == false)
            return false;
        if (other.getDescription() == null ^ this.getDescription() == null)
            return false;
        if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
        hashCode = prime * hashCode + ((getCreationTime() == null) ? 0 : getCreationTime().hashCode());
        hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
        return hashCode;
    }

    @Override
    public ApplicationSummary clone() {
        try {
            return (ApplicationSummary) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

    @com.amazonaws.annotation.SdkInternalApi
    @Override
    public void marshall(ProtocolMarshaller protocolMarshaller) {
        software.amazon.serverless.apprepo.api.client.model.transform.ApplicationSummaryMarshaller.getInstance().marshall(this, protocolMarshaller);
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/AWSServerlessApplicationRepositoryException.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.opensdk.SdkErrorHttpMetadata;
import com.amazonaws.opensdk.internal.BaseException;
import com.amazonaws.annotation.SdkInternalApi;
import javax.annotation.Generated;

/**
 * Base exception for all service exceptions thrown by realworld-serverless-application-backend-dev
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class AWSServerlessApplicationRepositoryException extends com.amazonaws.SdkBaseException implements BaseException {

    private static final long serialVersionUID = 1L;

    private SdkErrorHttpMetadata sdkHttpMetadata;

    private String message;

    /**
     * Constructs a new AWSServerlessApplicationRepositoryException with the specified error message.
     *
     * @param message
     *        Describes the error encountered.
     */
    public AWSServerlessApplicationRepositoryException(String message) {
        super(message);
        this.message = message;
    }

    @Override
    public AWSServerlessApplicationRepositoryException sdkHttpMetadata(SdkErrorHttpMetadata sdkHttpMetadata) {
        this.sdkHttpMetadata = sdkHttpMetadata;
        return this;
    }

    @Override
    public SdkErrorHttpMetadata sdkHttpMetadata() {
        return sdkHttpMetadata;
    }

    @SdkInternalApi
    @Override
    public void setMessage(String message) {
        this.message = message;
    }

    @Override
    public String getMessage() {
        return message;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/BadRequestException.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 * 
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class BadRequestException extends software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException {
    private static final long serialVersionUID = 1L;

    private String errorCode;

    /**
     * Constructs a new BadRequestException with the specified error message.
     *
     * @param message
     *        Describes the error encountered.
     */
    public BadRequestException(String message) {
        super(message);
    }

    /**
     * @param errorCode
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * @return
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * @param errorCode
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public BadRequestException errorCode(String errorCode) {
        setErrorCode(errorCode);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ConflictException.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 * 
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ConflictException extends software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException {
    private static final long serialVersionUID = 1L;

    private String errorCode;

    /**
     * Constructs a new ConflictException with the specified error message.
     *
     * @param message
     *        Describes the error encountered.
     */
    public ConflictException(String message) {
        super(message);
    }

    /**
     * @param errorCode
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * @return
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * @param errorCode
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ConflictException errorCode(String errorCode) {
        setErrorCode(errorCode);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationInput.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;
import com.amazonaws.protocol.StructuredPojo;
import com.amazonaws.protocol.ProtocolMarshaller;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/CreateApplicationInput"
 *      target="_top">AWS API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationInput implements Serializable, Cloneable, StructuredPojo {

    private String applicationId;

    private String author;

    private String description;

    private String homePageUrl;

    /**
     * @param applicationId
     */

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * @return
     */

    public String getApplicationId() {
        return this.applicationId;
    }

    /**
     * @param applicationId
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateApplicationInput applicationId(String applicationId) {
        setApplicationId(applicationId);
        return this;
    }

    /**
     * @param author
     */

    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * @return
     */

    public String getAuthor() {
        return this.author;
    }

    /**
     * @param author
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateApplicationInput author(String author) {
        setAuthor(author);
        return this;
    }

    /**
     * @param description
     */

    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * @return
     */

    public String getDescription() {
        return this.description;
    }

    /**
     * @param description
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateApplicationInput description(String description) {
        setDescription(description);
        return this;
    }

    /**
     * @param homePageUrl
     */

    public void setHomePageUrl(String homePageUrl) {
        this.homePageUrl = homePageUrl;
    }

    /**
     * @return
     */

    public String getHomePageUrl() {
        return this.homePageUrl;
    }

    /**
     * @param homePageUrl
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateApplicationInput homePageUrl(String homePageUrl) {
        setHomePageUrl(homePageUrl);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplicationId() != null)
            sb.append("ApplicationId: ").append(getApplicationId()).append(",");
        if (getAuthor() != null)
            sb.append("Author: ").append(getAuthor()).append(",");
        if (getDescription() != null)
            sb.append("Description: ").append(getDescription()).append(",");
        if (getHomePageUrl() != null)
            sb.append("HomePageUrl: ").append(getHomePageUrl());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof CreateApplicationInput == false)
            return false;
        CreateApplicationInput other = (CreateApplicationInput) obj;
        if (other.getApplicationId() == null ^ this.getApplicationId() == null)
            return false;
        if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
            return false;
        if (other.getAuthor() == null ^ this.getAuthor() == null)
            return false;
        if (other.getAuthor() != null && other.getAuthor().equals(this.getAuthor()) == false)
            return false;
        if (other.getDescription() == null ^ this.getDescription() == null)
            return false;
        if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
            return false;
        if (other.getHomePageUrl() == null ^ this.getHomePageUrl() == null)
            return false;
        if (other.getHomePageUrl() != null && other.getHomePageUrl().equals(this.getHomePageUrl()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
        hashCode = prime * hashCode + ((getAuthor() == null) ? 0 : getAuthor().hashCode());
        hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
        hashCode = prime * hashCode + ((getHomePageUrl() == null) ? 0 : getHomePageUrl().hashCode());
        return hashCode;
    }

    @Override
    public CreateApplicationInput clone() {
        try {
            return (CreateApplicationInput) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

    @com.amazonaws.annotation.SdkInternalApi
    @Override
    public void marshall(ProtocolMarshaller protocolMarshaller) {
        software.amazon.serverless.apprepo.api.client.model.transform.CreateApplicationInputMarshaller.getInstance().marshall(this, protocolMarshaller);
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationRequest.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/CreateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

    private CreateApplicationInput createApplicationInput;

    /**
     * @param createApplicationInput
     */

    public void setCreateApplicationInput(CreateApplicationInput createApplicationInput) {
        this.createApplicationInput = createApplicationInput;
    }

    /**
     * @return
     */

    public CreateApplicationInput getCreateApplicationInput() {
        return this.createApplicationInput;
    }

    /**
     * @param createApplicationInput
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateApplicationRequest createApplicationInput(CreateApplicationInput createApplicationInput) {
        setCreateApplicationInput(createApplicationInput);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getCreateApplicationInput() != null)
            sb.append("CreateApplicationInput: ").append(getCreateApplicationInput());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof CreateApplicationRequest == false)
            return false;
        CreateApplicationRequest other = (CreateApplicationRequest) obj;
        if (other.getCreateApplicationInput() == null ^ this.getCreateApplicationInput() == null)
            return false;
        if (other.getCreateApplicationInput() != null && other.getCreateApplicationInput().equals(this.getCreateApplicationInput()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getCreateApplicationInput() == null) ? 0 : getCreateApplicationInput().hashCode());
        return hashCode;
    }

    @Override
    public CreateApplicationRequest clone() {
        return (CreateApplicationRequest) super.clone();
    }

    @Override
    public Class<? extends RequestSigner> signerType() {
        return software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer.class;
    }

    /**
     * Set the configuration for this request.
     *
     * @param sdkRequestConfig
     *        Request configuration.
     * @return This object for method chaining.
     */
    public CreateApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
        super.sdkRequestConfig(sdkRequestConfig);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationResult.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/CreateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

    private Application application;

    /**
     * @param application
     */

    public void setApplication(Application application) {
        this.application = application;
    }

    /**
     * @return
     */

    public Application getApplication() {
        return this.application;
    }

    /**
     * @param application
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateApplicationResult application(Application application) {
        setApplication(application);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplication() != null)
            sb.append("Application: ").append(getApplication());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof CreateApplicationResult == false)
            return false;
        CreateApplicationResult other = (CreateApplicationResult) obj;
        if (other.getApplication() == null ^ this.getApplication() == null)
            return false;
        if (other.getApplication() != null && other.getApplication().equals(this.getApplication()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplication() == null) ? 0 : getApplication().hashCode());
        return hashCode;
    }

    @Override
    public CreateApplicationResult clone() {
        try {
            return (CreateApplicationResult) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationRequest.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/DeleteApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class DeleteApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

    private String applicationId;

    /**
     * @param applicationId
     */

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * @return
     */

    public String getApplicationId() {
        return this.applicationId;
    }

    /**
     * @param applicationId
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public DeleteApplicationRequest applicationId(String applicationId) {
        setApplicationId(applicationId);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplicationId() != null)
            sb.append("ApplicationId: ").append(getApplicationId());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof DeleteApplicationRequest == false)
            return false;
        DeleteApplicationRequest other = (DeleteApplicationRequest) obj;
        if (other.getApplicationId() == null ^ this.getApplicationId() == null)
            return false;
        if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
        return hashCode;
    }

    @Override
    public DeleteApplicationRequest clone() {
        return (DeleteApplicationRequest) super.clone();
    }

    @Override
    public Class<? extends RequestSigner> signerType() {
        return software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer.class;
    }

    /**
     * Set the configuration for this request.
     *
     * @param sdkRequestConfig
     *        Request configuration.
     * @return This object for method chaining.
     */
    public DeleteApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
        super.sdkRequestConfig(sdkRequestConfig);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationResult.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/DeleteApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class DeleteApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof DeleteApplicationResult == false)
            return false;
        DeleteApplicationResult other = (DeleteApplicationResult) obj;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        return hashCode;
    }

    @Override
    public DeleteApplicationResult clone() {
        try {
            return (DeleteApplicationResult) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationRequest.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/GetApplication" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class GetApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

    private String applicationId;

    /**
     * @param applicationId
     */

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * @return
     */

    public String getApplicationId() {
        return this.applicationId;
    }

    /**
     * @param applicationId
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public GetApplicationRequest applicationId(String applicationId) {
        setApplicationId(applicationId);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplicationId() != null)
            sb.append("ApplicationId: ").append(getApplicationId());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof GetApplicationRequest == false)
            return false;
        GetApplicationRequest other = (GetApplicationRequest) obj;
        if (other.getApplicationId() == null ^ this.getApplicationId() == null)
            return false;
        if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
        return hashCode;
    }

    @Override
    public GetApplicationRequest clone() {
        return (GetApplicationRequest) super.clone();
    }

    @Override
    public Class<? extends RequestSigner> signerType() {
        return software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer.class;
    }

    /**
     * Set the configuration for this request.
     *
     * @param sdkRequestConfig
     *        Request configuration.
     * @return This object for method chaining.
     */
    public GetApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
        super.sdkRequestConfig(sdkRequestConfig);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationResult.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/GetApplication" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class GetApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

    private Application application;

    /**
     * @param application
     */

    public void setApplication(Application application) {
        this.application = application;
    }

    /**
     * @return
     */

    public Application getApplication() {
        return this.application;
    }

    /**
     * @param application
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public GetApplicationResult application(Application application) {
        setApplication(application);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplication() != null)
            sb.append("Application: ").append(getApplication());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof GetApplicationResult == false)
            return false;
        GetApplicationResult other = (GetApplicationResult) obj;
        if (other.getApplication() == null ^ this.getApplication() == null)
            return false;
        if (other.getApplication() != null && other.getApplication().equals(this.getApplication()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplication() == null) ? 0 : getApplication().hashCode());
        return hashCode;
    }

    @Override
    public GetApplicationResult clone() {
        try {
            return (GetApplicationResult) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/InternalServerErrorException.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 * 
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class InternalServerErrorException extends software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException {
    private static final long serialVersionUID = 1L;

    private String errorCode;

    /**
     * Constructs a new InternalServerErrorException with the specified error message.
     *
     * @param message
     *        Describes the error encountered.
     */
    public InternalServerErrorException(String message) {
        super(message);
    }

    /**
     * @param errorCode
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * @return
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * @param errorCode
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public InternalServerErrorException errorCode(String errorCode) {
        setErrorCode(errorCode);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsRequest.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/ListApplications" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ListApplicationsRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

    private String maxItems;

    private String nextToken;

    /**
     * @param maxItems
     */

    public void setMaxItems(String maxItems) {
        this.maxItems = maxItems;
    }

    /**
     * @return
     */

    public String getMaxItems() {
        return this.maxItems;
    }

    /**
     * @param maxItems
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ListApplicationsRequest maxItems(String maxItems) {
        setMaxItems(maxItems);
        return this;
    }

    /**
     * @param nextToken
     */

    public void setNextToken(String nextToken) {
        this.nextToken = nextToken;
    }

    /**
     * @return
     */

    public String getNextToken() {
        return this.nextToken;
    }

    /**
     * @param nextToken
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ListApplicationsRequest nextToken(String nextToken) {
        setNextToken(nextToken);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getMaxItems() != null)
            sb.append("MaxItems: ").append(getMaxItems()).append(",");
        if (getNextToken() != null)
            sb.append("NextToken: ").append(getNextToken());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof ListApplicationsRequest == false)
            return false;
        ListApplicationsRequest other = (ListApplicationsRequest) obj;
        if (other.getMaxItems() == null ^ this.getMaxItems() == null)
            return false;
        if (other.getMaxItems() != null && other.getMaxItems().equals(this.getMaxItems()) == false)
            return false;
        if (other.getNextToken() == null ^ this.getNextToken() == null)
            return false;
        if (other.getNextToken() != null && other.getNextToken().equals(this.getNextToken()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getMaxItems() == null) ? 0 : getMaxItems().hashCode());
        hashCode = prime * hashCode + ((getNextToken() == null) ? 0 : getNextToken().hashCode());
        return hashCode;
    }

    @Override
    public ListApplicationsRequest clone() {
        return (ListApplicationsRequest) super.clone();
    }

    @Override
    public Class<? extends RequestSigner> signerType() {
        return software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer.class;
    }

    /**
     * Set the configuration for this request.
     *
     * @param sdkRequestConfig
     *        Request configuration.
     * @return This object for method chaining.
     */
    public ListApplicationsRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
        super.sdkRequestConfig(sdkRequestConfig);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsResult.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/ListApplications" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ListApplicationsResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

    private ApplicationList applicationList;

    /**
     * @param applicationList
     */

    public void setApplicationList(ApplicationList applicationList) {
        this.applicationList = applicationList;
    }

    /**
     * @return
     */

    public ApplicationList getApplicationList() {
        return this.applicationList;
    }

    /**
     * @param applicationList
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public ListApplicationsResult applicationList(ApplicationList applicationList) {
        setApplicationList(applicationList);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplicationList() != null)
            sb.append("ApplicationList: ").append(getApplicationList());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof ListApplicationsResult == false)
            return false;
        ListApplicationsResult other = (ListApplicationsResult) obj;
        if (other.getApplicationList() == null ^ this.getApplicationList() == null)
            return false;
        if (other.getApplicationList() != null && other.getApplicationList().equals(this.getApplicationList()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplicationList() == null) ? 0 : getApplicationList().hashCode());
        return hashCode;
    }

    @Override
    public ListApplicationsResult clone() {
        try {
            return (ListApplicationsResult) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/NotFoundException.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 * 
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class NotFoundException extends software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException {
    private static final long serialVersionUID = 1L;

    private String errorCode;

    /**
     * Constructs a new NotFoundException with the specified error message.
     *
     * @param message
     *        Describes the error encountered.
     */
    public NotFoundException(String message) {
        super(message);
    }

    /**
     * @param errorCode
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * @return
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * @param errorCode
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public NotFoundException errorCode(String errorCode) {
        setErrorCode(errorCode);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/TooManyRequestsException.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 * 
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class TooManyRequestsException extends software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException {
    private static final long serialVersionUID = 1L;

    private String errorCode;

    /**
     * Constructs a new TooManyRequestsException with the specified error message.
     *
     * @param message
     *        Describes the error encountered.
     */
    public TooManyRequestsException(String message) {
        super(message);
    }

    /**
     * @param errorCode
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * @return
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * @param errorCode
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public TooManyRequestsException errorCode(String errorCode) {
        setErrorCode(errorCode);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UnauthorizedException.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 * 
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UnauthorizedException extends software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException {
    private static final long serialVersionUID = 1L;

    private String errorCode;

    /**
     * Constructs a new UnauthorizedException with the specified error message.
     *
     * @param message
     *        Describes the error encountered.
     */
    public UnauthorizedException(String message) {
        super(message);
    }

    /**
     * @param errorCode
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * @return
     */

    @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * @param errorCode
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UnauthorizedException errorCode(String errorCode) {
        setErrorCode(errorCode);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationInput.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;
import com.amazonaws.protocol.StructuredPojo;
import com.amazonaws.protocol.ProtocolMarshaller;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/UpdateApplicationInput"
 *      target="_top">AWS API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationInput implements Serializable, Cloneable, StructuredPojo {

    private String author;

    private String description;

    private String homePageUrl;

    /**
     * @param author
     */

    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * @return
     */

    public String getAuthor() {
        return this.author;
    }

    /**
     * @param author
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateApplicationInput author(String author) {
        setAuthor(author);
        return this;
    }

    /**
     * @param description
     */

    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * @return
     */

    public String getDescription() {
        return this.description;
    }

    /**
     * @param description
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateApplicationInput description(String description) {
        setDescription(description);
        return this;
    }

    /**
     * @param homePageUrl
     */

    public void setHomePageUrl(String homePageUrl) {
        this.homePageUrl = homePageUrl;
    }

    /**
     * @return
     */

    public String getHomePageUrl() {
        return this.homePageUrl;
    }

    /**
     * @param homePageUrl
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateApplicationInput homePageUrl(String homePageUrl) {
        setHomePageUrl(homePageUrl);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getAuthor() != null)
            sb.append("Author: ").append(getAuthor()).append(",");
        if (getDescription() != null)
            sb.append("Description: ").append(getDescription()).append(",");
        if (getHomePageUrl() != null)
            sb.append("HomePageUrl: ").append(getHomePageUrl());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof UpdateApplicationInput == false)
            return false;
        UpdateApplicationInput other = (UpdateApplicationInput) obj;
        if (other.getAuthor() == null ^ this.getAuthor() == null)
            return false;
        if (other.getAuthor() != null && other.getAuthor().equals(this.getAuthor()) == false)
            return false;
        if (other.getDescription() == null ^ this.getDescription() == null)
            return false;
        if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
            return false;
        if (other.getHomePageUrl() == null ^ this.getHomePageUrl() == null)
            return false;
        if (other.getHomePageUrl() != null && other.getHomePageUrl().equals(this.getHomePageUrl()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getAuthor() == null) ? 0 : getAuthor().hashCode());
        hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
        hashCode = prime * hashCode + ((getHomePageUrl() == null) ? 0 : getHomePageUrl().hashCode());
        return hashCode;
    }

    @Override
    public UpdateApplicationInput clone() {
        try {
            return (UpdateApplicationInput) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

    @com.amazonaws.annotation.SdkInternalApi
    @Override
    public void marshall(ProtocolMarshaller protocolMarshaller) {
        software.amazon.serverless.apprepo.api.client.model.transform.UpdateApplicationInputMarshaller.getInstance().marshall(this, protocolMarshaller);
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationRequest.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/UpdateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

    private String applicationId;

    private UpdateApplicationInput updateApplicationInput;

    /**
     * @param applicationId
     */

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * @return
     */

    public String getApplicationId() {
        return this.applicationId;
    }

    /**
     * @param applicationId
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateApplicationRequest applicationId(String applicationId) {
        setApplicationId(applicationId);
        return this;
    }

    /**
     * @param updateApplicationInput
     */

    public void setUpdateApplicationInput(UpdateApplicationInput updateApplicationInput) {
        this.updateApplicationInput = updateApplicationInput;
    }

    /**
     * @return
     */

    public UpdateApplicationInput getUpdateApplicationInput() {
        return this.updateApplicationInput;
    }

    /**
     * @param updateApplicationInput
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateApplicationRequest updateApplicationInput(UpdateApplicationInput updateApplicationInput) {
        setUpdateApplicationInput(updateApplicationInput);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplicationId() != null)
            sb.append("ApplicationId: ").append(getApplicationId()).append(",");
        if (getUpdateApplicationInput() != null)
            sb.append("UpdateApplicationInput: ").append(getUpdateApplicationInput());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof UpdateApplicationRequest == false)
            return false;
        UpdateApplicationRequest other = (UpdateApplicationRequest) obj;
        if (other.getApplicationId() == null ^ this.getApplicationId() == null)
            return false;
        if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
            return false;
        if (other.getUpdateApplicationInput() == null ^ this.getUpdateApplicationInput() == null)
            return false;
        if (other.getUpdateApplicationInput() != null && other.getUpdateApplicationInput().equals(this.getUpdateApplicationInput()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
        hashCode = prime * hashCode + ((getUpdateApplicationInput() == null) ? 0 : getUpdateApplicationInput().hashCode());
        return hashCode;
    }

    @Override
    public UpdateApplicationRequest clone() {
        return (UpdateApplicationRequest) super.clone();
    }

    @Override
    public Class<? extends RequestSigner> signerType() {
        return software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer.class;
    }

    /**
     * Set the configuration for this request.
     *
     * @param sdkRequestConfig
     *        Request configuration.
     * @return This object for method chaining.
     */
    public UpdateApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
        super.sdkRequestConfig(sdkRequestConfig);
        return this;
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationResult.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/k9zlvhl83e-1570924800000/UpdateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

    private Application application;

    /**
     * @param application
     */

    public void setApplication(Application application) {
        this.application = application;
    }

    /**
     * @return
     */

    public Application getApplication() {
        return this.application;
    }

    /**
     * @param application
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public UpdateApplicationResult application(Application application) {
        setApplication(application);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and debugging.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApplication() != null)
            sb.append("Application: ").append(getApplication());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof UpdateApplicationResult == false)
            return false;
        UpdateApplicationResult other = (UpdateApplicationResult) obj;
        if (other.getApplication() == null ^ this.getApplication() == null)
            return false;
        if (other.getApplication() != null && other.getApplication().equals(this.getApplication()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApplication() == null) ? 0 : getApplication().hashCode());
        return hashCode;
    }

    @Override
    public UpdateApplicationResult clone() {
        try {
            return (UpdateApplicationResult) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * Application JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationJsonUnmarshaller implements Unmarshaller<Application, JsonUnmarshallerContext> {

    public Application unmarshall(JsonUnmarshallerContext context) throws Exception {
        Application application = new Application();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return null;
        }

        while (true) {
            if (token == null)
                break;

            if (token == FIELD_NAME || token == START_OBJECT) {
                if (context.testExpression("applicationId", targetDepth)) {
                    context.nextToken();
                    application.setApplicationId(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("author", targetDepth)) {
                    context.nextToken();
                    application.setAuthor(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("creationTime", targetDepth)) {
                    context.nextToken();
                    application.setCreationTime(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("description", targetDepth)) {
                    context.nextToken();
                    application.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("homePageUrl", targetDepth)) {
                    context.nextToken();
                    application.setHomePageUrl(context.getUnmarshaller(String.class).unmarshall(context));
                }
            } else if (token == END_ARRAY || token == END_OBJECT) {
                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
                    if (context.getCurrentDepth() <= originalDepth)
                        break;
                }
            }
            token = context.nextToken();
        }

        return application;
    }

    private static ApplicationJsonUnmarshaller instance;

    public static ApplicationJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new ApplicationJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * ApplicationList JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationListJsonUnmarshaller implements Unmarshaller<ApplicationList, JsonUnmarshallerContext> {

    public ApplicationList unmarshall(JsonUnmarshallerContext context) throws Exception {
        ApplicationList applicationList = new ApplicationList();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return null;
        }

        while (true) {
            if (token == null)
                break;

            if (token == FIELD_NAME || token == START_OBJECT) {
                if (context.testExpression("applications", targetDepth)) {
                    context.nextToken();
                    applicationList.setApplications(new ListUnmarshaller<ApplicationSummary>(ApplicationSummaryJsonUnmarshaller.getInstance())
                            .unmarshall(context));
                }
                if (context.testExpression("nextToken", targetDepth)) {
                    context.nextToken();
                    applicationList.setNextToken(context.getUnmarshaller(String.class).unmarshall(context));
                }
            } else if (token == END_ARRAY || token == END_OBJECT) {
                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
                    if (context.getCurrentDepth() <= originalDepth)
                        break;
                }
            }
            token = context.nextToken();
        }

        return applicationList;
    }

    private static ApplicationListJsonUnmarshaller instance;

    public static ApplicationListJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new ApplicationListJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.util.List;
import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * ApplicationListMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ApplicationListMarshaller {

    private static final MarshallingInfo<List> APPLICATIONS_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)
            .marshallLocationName("applications").build();
    private static final MarshallingInfo<String> NEXTTOKEN_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
            .marshallLocationName("nextToken").build();

    private static final ApplicationListMarshaller instance = new ApplicationListMarshaller();

    public static ApplicationListMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(ApplicationList applicationList, ProtocolMarshaller protocolMarshaller) {

        if (applicationList == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(applicationList.getApplications(), APPLICATIONS_BINDING);
            protocolMarshaller.marshall(applicationList.getNextToken(), NEXTTOKEN_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * ApplicationMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ApplicationMarshaller {

    private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("applicationId").build();
    private static final MarshallingInfo<String> AUTHOR_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
            .marshallLocationName("author").build();
    private static final MarshallingInfo<String> CREATIONTIME_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("creationTime").build();
    private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();
    private static final MarshallingInfo<String> HOMEPAGEURL_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("homePageUrl").build();

    private static final ApplicationMarshaller instance = new ApplicationMarshaller();

    public static ApplicationMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(Application application, ProtocolMarshaller protocolMarshaller) {

        if (application == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(application.getApplicationId(), APPLICATIONID_BINDING);
            protocolMarshaller.marshall(application.getAuthor(), AUTHOR_BINDING);
            protocolMarshaller.marshall(application.getCreationTime(), CREATIONTIME_BINDING);
            protocolMarshaller.marshall(application.getDescription(), DESCRIPTION_BINDING);
            protocolMarshaller.marshall(application.getHomePageUrl(), HOMEPAGEURL_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * ApplicationSummary JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationSummaryJsonUnmarshaller implements Unmarshaller<ApplicationSummary, JsonUnmarshallerContext> {

    public ApplicationSummary unmarshall(JsonUnmarshallerContext context) throws Exception {
        ApplicationSummary applicationSummary = new ApplicationSummary();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return null;
        }

        while (true) {
            if (token == null)
                break;

            if (token == FIELD_NAME || token == START_OBJECT) {
                if (context.testExpression("applicationId", targetDepth)) {
                    context.nextToken();
                    applicationSummary.setApplicationId(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("creationTime", targetDepth)) {
                    context.nextToken();
                    applicationSummary.setCreationTime(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("description", targetDepth)) {
                    context.nextToken();
                    applicationSummary.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
                }
            } else if (token == END_ARRAY || token == END_OBJECT) {
                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
                    if (context.getCurrentDepth() <= originalDepth)
                        break;
                }
            }
            token = context.nextToken();
        }

        return applicationSummary;
    }

    private static ApplicationSummaryJsonUnmarshaller instance;

    public static ApplicationSummaryJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new ApplicationSummaryJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * ApplicationSummaryMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ApplicationSummaryMarshaller {

    private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("applicationId").build();
    private static final MarshallingInfo<String> CREATIONTIME_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("creationTime").build();
    private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();

    private static final ApplicationSummaryMarshaller instance = new ApplicationSummaryMarshaller();

    public static ApplicationSummaryMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(ApplicationSummary applicationSummary, ProtocolMarshaller protocolMarshaller) {

        if (applicationSummary == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(applicationSummary.getApplicationId(), APPLICATIONID_BINDING);
            protocolMarshaller.marshall(applicationSummary.getCreationTime(), CREATIONTIME_BINDING);
            protocolMarshaller.marshall(applicationSummary.getDescription(), DESCRIPTION_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * CreateApplicationInput JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationInputJsonUnmarshaller implements Unmarshaller<CreateApplicationInput, JsonUnmarshallerContext> {

    public CreateApplicationInput unmarshall(JsonUnmarshallerContext context) throws Exception {
        CreateApplicationInput createApplicationInput = new CreateApplicationInput();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return null;
        }

        while (true) {
            if (token == null)
                break;

            if (token == FIELD_NAME || token == START_OBJECT) {
                if (context.testExpression("applicationId", targetDepth)) {
                    context.nextToken();
                    createApplicationInput.setApplicationId(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("author", targetDepth)) {
                    context.nextToken();
                    createApplicationInput.setAuthor(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("description", targetDepth)) {
                    context.nextToken();
                    createApplicationInput.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("homePageUrl", targetDepth)) {
                    context.nextToken();
                    createApplicationInput.setHomePageUrl(context.getUnmarshaller(String.class).unmarshall(context));
                }
            } else if (token == END_ARRAY || token == END_OBJECT) {
                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
                    if (context.getCurrentDepth() <= originalDepth)
                        break;
                }
            }
            token = context.nextToken();
        }

        return createApplicationInput;
    }

    private static CreateApplicationInputJsonUnmarshaller instance;

    public static CreateApplicationInputJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new CreateApplicationInputJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * CreateApplicationInputMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class CreateApplicationInputMarshaller {

    private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("applicationId").build();
    private static final MarshallingInfo<String> AUTHOR_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
            .marshallLocationName("author").build();
    private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();
    private static final MarshallingInfo<String> HOMEPAGEURL_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("homePageUrl").build();

    private static final CreateApplicationInputMarshaller instance = new CreateApplicationInputMarshaller();

    public static CreateApplicationInputMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(CreateApplicationInput createApplicationInput, ProtocolMarshaller protocolMarshaller) {

        if (createApplicationInput == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(createApplicationInput.getApplicationId(), APPLICATIONID_BINDING);
            protocolMarshaller.marshall(createApplicationInput.getAuthor(), AUTHOR_BINDING);
            protocolMarshaller.marshall(createApplicationInput.getDescription(), DESCRIPTION_BINDING);
            protocolMarshaller.marshall(createApplicationInput.getHomePageUrl(), HOMEPAGEURL_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * CreateApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class CreateApplicationRequestMarshaller {

    private static final MarshallingInfo<StructuredPojo> CREATEAPPLICATIONINPUT_BINDING = MarshallingInfo.builder(MarshallingType.STRUCTURED)
            .marshallLocation(MarshallLocation.PAYLOAD).isExplicitPayloadMember(true).build();

    private static final CreateApplicationRequestMarshaller instance = new CreateApplicationRequestMarshaller();

    public static CreateApplicationRequestMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(CreateApplicationRequest createApplicationRequest, ProtocolMarshaller protocolMarshaller) {

        if (createApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(createApplicationRequest.getCreateApplicationInput(), CREATEAPPLICATIONINPUT_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestProtocolMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import com.amazonaws.Request;

import com.amazonaws.http.HttpMethodName;
import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.Marshaller;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * CreateApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class CreateApplicationRequestProtocolMarshaller implements Marshaller<Request<CreateApplicationRequest>, CreateApplicationRequest> {

    private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY).requestUri("/Prod/applications")
            .httpMethodName(HttpMethodName.POST).hasExplicitPayloadMember(true).hasPayloadMembers(true).serviceName("AWSServerlessApplicationRepository")
            .build();

    private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

    public CreateApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
        this.protocolFactory = protocolFactory;
    }

    public Request<CreateApplicationRequest> marshall(CreateApplicationRequest createApplicationRequest) {

        if (createApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            final ProtocolRequestMarshaller<CreateApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
                    createApplicationRequest);

            protocolMarshaller.startMarshalling();
            CreateApplicationRequestMarshaller.getInstance().marshall(createApplicationRequest, protocolMarshaller);
            return protocolMarshaller.finishMarshalling();
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationResultJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * CreateApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationResultJsonUnmarshaller implements Unmarshaller<CreateApplicationResult, JsonUnmarshallerContext> {

    public CreateApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
        CreateApplicationResult createApplicationResult = new CreateApplicationResult();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return createApplicationResult;
        }

        while (true) {
            if (token == null)
                break;

            createApplicationResult.setApplication(ApplicationJsonUnmarshaller.getInstance().unmarshall(context));
            token = context.nextToken();
        }

        return createApplicationResult;
    }

    private static CreateApplicationResultJsonUnmarshaller instance;

    public static CreateApplicationResultJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new CreateApplicationResultJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * DeleteApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class DeleteApplicationRequestMarshaller {

    private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PATH).marshallLocationName("applicationId").build();

    private static final DeleteApplicationRequestMarshaller instance = new DeleteApplicationRequestMarshaller();

    public static DeleteApplicationRequestMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(DeleteApplicationRequest deleteApplicationRequest, ProtocolMarshaller protocolMarshaller) {

        if (deleteApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(deleteApplicationRequest.getApplicationId(), APPLICATIONID_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestProtocolMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import com.amazonaws.Request;

import com.amazonaws.http.HttpMethodName;
import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.Marshaller;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * DeleteApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class DeleteApplicationRequestProtocolMarshaller implements Marshaller<Request<DeleteApplicationRequest>, DeleteApplicationRequest> {

    private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY)
            .requestUri("/Prod/applications/{applicationId}").httpMethodName(HttpMethodName.DELETE).hasExplicitPayloadMember(false).hasPayloadMembers(false)
            .serviceName("AWSServerlessApplicationRepository").build();

    private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

    public DeleteApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
        this.protocolFactory = protocolFactory;
    }

    public Request<DeleteApplicationRequest> marshall(DeleteApplicationRequest deleteApplicationRequest) {

        if (deleteApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            final ProtocolRequestMarshaller<DeleteApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
                    deleteApplicationRequest);

            protocolMarshaller.startMarshalling();
            DeleteApplicationRequestMarshaller.getInstance().marshall(deleteApplicationRequest, protocolMarshaller);
            return protocolMarshaller.finishMarshalling();
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationResultJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * DeleteApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class DeleteApplicationResultJsonUnmarshaller implements Unmarshaller<DeleteApplicationResult, JsonUnmarshallerContext> {

    public DeleteApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
        DeleteApplicationResult deleteApplicationResult = new DeleteApplicationResult();

        return deleteApplicationResult;
    }

    private static DeleteApplicationResultJsonUnmarshaller instance;

    public static DeleteApplicationResultJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new DeleteApplicationResultJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * GetApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class GetApplicationRequestMarshaller {

    private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PATH).marshallLocationName("applicationId").build();

    private static final GetApplicationRequestMarshaller instance = new GetApplicationRequestMarshaller();

    public static GetApplicationRequestMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(GetApplicationRequest getApplicationRequest, ProtocolMarshaller protocolMarshaller) {

        if (getApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(getApplicationRequest.getApplicationId(), APPLICATIONID_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestProtocolMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import com.amazonaws.Request;

import com.amazonaws.http.HttpMethodName;
import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.Marshaller;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * GetApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class GetApplicationRequestProtocolMarshaller implements Marshaller<Request<GetApplicationRequest>, GetApplicationRequest> {

    private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY)
            .requestUri("/Prod/applications/{applicationId}").httpMethodName(HttpMethodName.GET).hasExplicitPayloadMember(false).hasPayloadMembers(false)
            .serviceName("AWSServerlessApplicationRepository").build();

    private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

    public GetApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
        this.protocolFactory = protocolFactory;
    }

    public Request<GetApplicationRequest> marshall(GetApplicationRequest getApplicationRequest) {

        if (getApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            final ProtocolRequestMarshaller<GetApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
                    getApplicationRequest);

            protocolMarshaller.startMarshalling();
            GetApplicationRequestMarshaller.getInstance().marshall(getApplicationRequest, protocolMarshaller);
            return protocolMarshaller.finishMarshalling();
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationResultJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * GetApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class GetApplicationResultJsonUnmarshaller implements Unmarshaller<GetApplicationResult, JsonUnmarshallerContext> {

    public GetApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
        GetApplicationResult getApplicationResult = new GetApplicationResult();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return getApplicationResult;
        }

        while (true) {
            if (token == null)
                break;

            getApplicationResult.setApplication(ApplicationJsonUnmarshaller.getInstance().unmarshall(context));
            token = context.nextToken();
        }

        return getApplicationResult;
    }

    private static GetApplicationResultJsonUnmarshaller instance;

    public static GetApplicationResultJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new GetApplicationResultJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * ListApplicationsRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ListApplicationsRequestMarshaller {

    private static final MarshallingInfo<String> MAXITEMS_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.QUERY_PARAM).marshallLocationName("maxItems").build();
    private static final MarshallingInfo<String> NEXTTOKEN_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.QUERY_PARAM).marshallLocationName("nextToken").build();

    private static final ListApplicationsRequestMarshaller instance = new ListApplicationsRequestMarshaller();

    public static ListApplicationsRequestMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(ListApplicationsRequest listApplicationsRequest, ProtocolMarshaller protocolMarshaller) {

        if (listApplicationsRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(listApplicationsRequest.getMaxItems(), MAXITEMS_BINDING);
            protocolMarshaller.marshall(listApplicationsRequest.getNextToken(), NEXTTOKEN_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestProtocolMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import com.amazonaws.Request;

import com.amazonaws.http.HttpMethodName;
import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.Marshaller;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * ListApplicationsRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ListApplicationsRequestProtocolMarshaller implements Marshaller<Request<ListApplicationsRequest>, ListApplicationsRequest> {

    private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY).requestUri("/Prod/applications")
            .httpMethodName(HttpMethodName.GET).hasExplicitPayloadMember(false).hasPayloadMembers(false).serviceName("AWSServerlessApplicationRepository")
            .build();

    private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

    public ListApplicationsRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
        this.protocolFactory = protocolFactory;
    }

    public Request<ListApplicationsRequest> marshall(ListApplicationsRequest listApplicationsRequest) {

        if (listApplicationsRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            final ProtocolRequestMarshaller<ListApplicationsRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
                    listApplicationsRequest);

            protocolMarshaller.startMarshalling();
            ListApplicationsRequestMarshaller.getInstance().marshall(listApplicationsRequest, protocolMarshaller);
            return protocolMarshaller.finishMarshalling();
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsResultJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * ListApplicationsResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ListApplicationsResultJsonUnmarshaller implements Unmarshaller<ListApplicationsResult, JsonUnmarshallerContext> {

    public ListApplicationsResult unmarshall(JsonUnmarshallerContext context) throws Exception {
        ListApplicationsResult listApplicationsResult = new ListApplicationsResult();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return listApplicationsResult;
        }

        while (true) {
            if (token == null)
                break;

            listApplicationsResult.setApplicationList(ApplicationListJsonUnmarshaller.getInstance().unmarshall(context));
            token = context.nextToken();
        }

        return listApplicationsResult;
    }

    private static ListApplicationsResultJsonUnmarshaller instance;

    public static ListApplicationsResultJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new ListApplicationsResultJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * UpdateApplicationInput JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationInputJsonUnmarshaller implements Unmarshaller<UpdateApplicationInput, JsonUnmarshallerContext> {

    public UpdateApplicationInput unmarshall(JsonUnmarshallerContext context) throws Exception {
        UpdateApplicationInput updateApplicationInput = new UpdateApplicationInput();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return null;
        }

        while (true) {
            if (token == null)
                break;

            if (token == FIELD_NAME || token == START_OBJECT) {
                if (context.testExpression("author", targetDepth)) {
                    context.nextToken();
                    updateApplicationInput.setAuthor(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("description", targetDepth)) {
                    context.nextToken();
                    updateApplicationInput.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
                }
                if (context.testExpression("homePageUrl", targetDepth)) {
                    context.nextToken();
                    updateApplicationInput.setHomePageUrl(context.getUnmarshaller(String.class).unmarshall(context));
                }
            } else if (token == END_ARRAY || token == END_OBJECT) {
                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
                    if (context.getCurrentDepth() <= originalDepth)
                        break;
                }
            }
            token = context.nextToken();
        }

        return updateApplicationInput;
    }

    private static UpdateApplicationInputJsonUnmarshaller instance;

    public static UpdateApplicationInputJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new UpdateApplicationInputJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * UpdateApplicationInputMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class UpdateApplicationInputMarshaller {

    private static final MarshallingInfo<String> AUTHOR_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
            .marshallLocationName("author").build();
    private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();
    private static final MarshallingInfo<String> HOMEPAGEURL_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("homePageUrl").build();

    private static final UpdateApplicationInputMarshaller instance = new UpdateApplicationInputMarshaller();

    public static UpdateApplicationInputMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(UpdateApplicationInput updateApplicationInput, ProtocolMarshaller protocolMarshaller) {

        if (updateApplicationInput == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(updateApplicationInput.getAuthor(), AUTHOR_BINDING);
            protocolMarshaller.marshall(updateApplicationInput.getDescription(), DESCRIPTION_BINDING);
            protocolMarshaller.marshall(updateApplicationInput.getHomePageUrl(), HOMEPAGEURL_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import software.amazon.serverless.apprepo.api.client.model.*;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * UpdateApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class UpdateApplicationRequestMarshaller {

    private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
            .marshallLocation(MarshallLocation.PATH).marshallLocationName("applicationId").build();
    private static final MarshallingInfo<StructuredPojo> UPDATEAPPLICATIONINPUT_BINDING = MarshallingInfo.builder(MarshallingType.STRUCTURED)
            .marshallLocation(MarshallLocation.PAYLOAD).isExplicitPayloadMember(true).build();

    private static final UpdateApplicationRequestMarshaller instance = new UpdateApplicationRequestMarshaller();

    public static UpdateApplicationRequestMarshaller getInstance() {
        return instance;
    }

    /**
     * Marshall the given parameter object.
     */
    public void marshall(UpdateApplicationRequest updateApplicationRequest, ProtocolMarshaller protocolMarshaller) {

        if (updateApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            protocolMarshaller.marshall(updateApplicationRequest.getApplicationId(), APPLICATIONID_BINDING);
            protocolMarshaller.marshall(updateApplicationRequest.getUpdateApplicationInput(), UPDATEAPPLICATIONINPUT_BINDING);
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestProtocolMarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import javax.annotation.Generated;

import com.amazonaws.SdkClientException;
import com.amazonaws.Request;

import com.amazonaws.http.HttpMethodName;
import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.Marshaller;

import com.amazonaws.protocol.*;
import com.amazonaws.annotation.SdkInternalApi;

/**
 * UpdateApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class UpdateApplicationRequestProtocolMarshaller implements Marshaller<Request<UpdateApplicationRequest>, UpdateApplicationRequest> {

    private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY)
            .requestUri("/Prod/applications/{applicationId}").httpMethodName(HttpMethodName.PATCH).hasExplicitPayloadMember(true).hasPayloadMembers(true)
            .serviceName("AWSServerlessApplicationRepository").build();

    private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

    public UpdateApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
        this.protocolFactory = protocolFactory;
    }

    public Request<UpdateApplicationRequest> marshall(UpdateApplicationRequest updateApplicationRequest) {

        if (updateApplicationRequest == null) {
            throw new SdkClientException("Invalid argument passed to marshall(...)");
        }

        try {
            final ProtocolRequestMarshaller<UpdateApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
                    updateApplicationRequest);

            protocolMarshaller.startMarshalling();
            UpdateApplicationRequestMarshaller.getInstance().marshall(updateApplicationRequest, protocolMarshaller);
            return protocolMarshaller.finishMarshalling();
        } catch (Exception e) {
            throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
        }
    }

}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationResultJsonUnmarshaller.java
/**

*/
package software.amazon.serverless.apprepo.api.client.model.transform;

import java.math.*;

import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.*;
import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
import com.amazonaws.transform.*;

import com.fasterxml.jackson.core.JsonToken;
import static com.fasterxml.jackson.core.JsonToken.*;

/**
 * UpdateApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationResultJsonUnmarshaller implements Unmarshaller<UpdateApplicationResult, JsonUnmarshallerContext> {

    public UpdateApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
        UpdateApplicationResult updateApplicationResult = new UpdateApplicationResult();

        int originalDepth = context.getCurrentDepth();
        String currentParentElement = context.getCurrentParentElement();
        int targetDepth = originalDepth + 1;

        JsonToken token = context.getCurrentToken();
        if (token == null)
            token = context.nextToken();
        if (token == VALUE_NULL) {
            return updateApplicationResult;
        }

        while (true) {
            if (token == null)
                break;

            updateApplicationResult.setApplication(ApplicationJsonUnmarshaller.getInstance().unmarshall(context));
            token = context.nextToken();
        }

        return updateApplicationResult;
    }

    private static UpdateApplicationResultJsonUnmarshaller instance;

    public static UpdateApplicationResultJsonUnmarshaller getInstance() {
        if (instance == null)
            instance = new UpdateApplicationResultJsonUnmarshaller();
        return instance;
    }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/ApplicationsService_IT.java
package software.amazon.serverless.apprepo.cucumber;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

/**
 * Junit entry point for cucumber tests.
 */
@RunWith(Cucumber.class)
@CucumberOptions(features = "src/test/java/software/amazon/serverless/apprepo/cucumber/features",
      glue = "software.amazon.serverless.apprepo.cucumber.steps",
      tags = {"not @NotImplemented"},// Use @NotImplemented tag for scenarios that have not been implemented
      plugin = {"pretty"})
public class ApplicationsService_IT {
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/features/AthenaQuery.feature
Feature: Analyze Data
  As an administrator, I would like to analyze the customer usage of the service

  Scenario: User creates an application
    When a user creates an application
    Then a new application should be created
    And the administrator can analyze the data with Athena queries

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/ApplicationModule.java
package software.amazon.serverless.apprepo.cucumber.guice;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.cucumber.steps.AWSServerlessApplicationRepositoryRecordingClient;
import software.amazon.serverless.apprepo.cucumber.steps.CognitoUserManager;

import software.amazon.awssdk.services.athena.AthenaClient;
import software.amazon.awssdk.services.athena.AthenaClientBuilder;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.serverless.apprepo.cucumber.steps.S3Helper;
import software.amazon.serverless.ssmcachingclient.SsmParameterCachingClient;

import com.amazonaws.xray.AWSXRay;
import com.amazonaws.xray.AWSXRayRecorderBuilder;
import com.amazonaws.xray.strategy.LogErrorContextMissingStrategy;
import com.google.inject.AbstractModule;
import com.google.inject.Inject;
import com.google.inject.Provides;
import com.google.inject.Singleton;

import java.time.Duration;

import cucumber.runtime.java.guice.ScenarioScope;
import cucumber.runtime.java.guice.impl.SequentialScenarioScope;
import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;
import software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;
import software.amazon.awssdk.services.ssm.SsmClient;

/**
 * DI wiring for ApplicationSteps.
 */
public class ApplicationModule extends AbstractModule {
  @Override
  protected void configure() {
    // Disable AWS x-ray in integration tests.
    // See doc: https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-configuration.html#xray-sdk-java-configuration-sysprops
    AWSXRay.setGlobalRecorder(AWSXRayRecorderBuilder.standard().withContextMissingStrategy(new LogErrorContextMissingStrategy()).build());
    bind(ScenarioScope.class).toInstance(new SequentialScenarioScope());
  }

  @Singleton
  @Inject
  @Provides
  AWSServerlessApplicationRepository AWSServerlessApplicationRepository(final SsmParameterCachingClient ssm, final CognitoUserManager cognitoUserManager) {
    String endpoint = ssm.getAsString("apigateway/ApplicationsApi/Endpoint");
    return new AWSServerlessApplicationRepositoryRecordingClient(AWSServerlessApplicationRepository.builder()
        .endpoint(endpoint)
        .signer(new CognitoAuthorizerImpl(cognitoUserManager))
        .build());
  }

  @Singleton
  @Inject
  @Provides
  SsmParameterCachingClient ssmParameterCachingClient() {
    String path = String.format("/applications/apprepo/%s/", System.getProperty("integtests.stage"));
    return new SsmParameterCachingClient(SsmClient.builder()
        .httpClientBuilder(UrlConnectionHttpClient.builder())
        .build(),
        Duration.ofMinutes(5), path);
  }

  @Singleton
  @Inject
  @Provides
  CognitoUserManager cognitoUserManager(final SsmParameterCachingClient ssm) {
    String clientId = ssm.getAsString("cognito/userpoolclient/IntegTest/Id");
    String userPoolId = ssm.getAsString("cognito/userpool/ApplicationsApi/Id");
    return new CognitoUserManager(CognitoIdentityProviderClient.builder()
        .httpClientBuilder(UrlConnectionHttpClient.builder())
        .build(), clientId, userPoolId);
  }

  @Singleton
  @Inject
  @Provides
  S3Helper s3Helper(final S3Client s3Client){
    return new S3Helper(s3Client);
  }

  @Singleton
  @Inject
  @Provides
  AthenaClient athenaClient(){
    return AthenaClient.builder()
        .httpClientBuilder(UrlConnectionHttpClient.builder())
        .build();
  }

  @Singleton
  @Inject
  @Provides
  S3Client s3Client(){
    return S3Client.builder()
        .httpClientBuilder(UrlConnectionHttpClient.builder())
        .build();
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CognitoAuthorizerImpl.java
package software.amazon.serverless.apprepo.cucumber.guice;

import com.amazonaws.ImmutableRequest;
import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;
import software.amazon.serverless.apprepo.cucumber.steps.CognitoUserManager;

import java.util.UUID;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of {@link CognitoAuthorizer} to provide signer for API requests.
 */
@Slf4j
@RequiredArgsConstructor
public class CognitoAuthorizerImpl implements CognitoAuthorizer {
  private final CognitoUserManager cognitoUserManager;

  @Override
  public String generateToken(ImmutableRequest<?> request) {
    try {
      return cognitoUserManager.generateIdToken();
    } catch (Throwable t) {
      log.warn("Exception thrown when generating token", t);
      return UUID.randomUUID().toString();
    }
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CukeInjectorSource.java
package software.amazon.serverless.apprepo.cucumber.guice;

import com.google.common.collect.Lists;
import com.google.inject.Guice;
import com.google.inject.Injector;

import cucumber.runtime.java.guice.InjectorSource;

/**
 * Guice injector source for Cucumber.
 */
public class CukeInjectorSource implements InjectorSource {
  @Override
  public Injector getInjector() {
    return Guice.createInjector(Lists.newArrayList(new ApplicationModule()));
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/AthenaQuerySteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.Application;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationInput;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;

import com.google.common.base.Preconditions;
import com.google.inject.Inject;

import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import software.amazon.awssdk.services.athena.AthenaClient;
import software.amazon.awssdk.services.athena.model.GetQueryExecutionRequest;
import software.amazon.awssdk.services.athena.model.GetQueryExecutionResponse;
import software.amazon.awssdk.services.athena.model.GetQueryResultsRequest;
import software.amazon.awssdk.services.athena.model.QueryExecutionState;
import software.amazon.awssdk.services.athena.model.ResultConfiguration;
import software.amazon.awssdk.services.athena.model.Row;
import software.amazon.awssdk.services.athena.model.StartQueryExecutionRequest;
import software.amazon.awssdk.services.athena.model.StartQueryExecutionResponse;
import software.amazon.awssdk.services.athena.paginators.GetQueryResultsIterable;
import software.amazon.serverless.ssmcachingclient.SsmParameterCachingClient;

/**
 * Implementation of the steps in AthenaQuery.feature.
 */
@Slf4j
public class AthenaQuerySteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;

  @Inject
  private AthenaClient athenaClient;

  @Inject
  private SsmParameterCachingClient ssmParameterCachingClient;

  @Given("^a user has an application$")
  @When("^(?:a|the) user creates (?:an|another) application$")
  public void a_user_creates_an_application() {
    CreateApplicationInput input = new CreateApplicationInput()
        .applicationId("applicationId-" + UUID.randomUUID().toString())
        .author("author-" + UUID.randomUUID().toString())
        .description("description-" + UUID.randomUUID().toString())
        .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString());
    CreateApplicationRequest request = new CreateApplicationRequest()
        .createApplicationInput(input);

    Application application = appRepo.createApplication(request).getApplication();

    assertThat(TestEnv.getLastException()).isNull();
    assertThat(application.getApplicationId()).isEqualTo(input.getApplicationId());
    assertThat(application.getAuthor()).isEqualTo(input.getAuthor());
    assertThat(application.getDescription()).isEqualTo(input.getDescription());
    assertThat(application.getHomePageUrl()).isEqualTo(input.getHomePageUrl());
    assertThat(application.getCreationTime()).isNotBlank();
  }

  @Then("^a new application should be created|the application should be updated$")
  public void a_new_application_should_be_created() {
    assertThat(TestEnv.getLastException()).isNull();
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    GetApplicationResult result = appRepo.getApplication(new GetApplicationRequest().applicationId(TestEnv.getApplicationId()));
    assertThat(result.getApplication())
        .isNotNull()
        .isEqualTo(TestEnv.getApplication());
  }

  @And("the administrator can analyze the data with Athena queries")
  public void the_administrator_can_analyze_the_data_with_athena_queries() throws InterruptedException {
    String loadPartitionsQuery = String.format("MSCK REPAIR TABLE `%s`.`%s`;",
        ssmParameterCachingClient.getAsString("glue/database"),
        ssmParameterCachingClient.getAsString("glue/table/applications")
    );

    String createdAppQuery = "SELECT detail.eventname,\n" +
        "         detail.dynamodb.keys.applicationid.s AS applicationid,\n" +
        "         detail.dynamodb.keys.userid.s AS userid,\n" +
        "         detail.dynamodb.newimage.author.s AS author,\n" +
        "         detail.dynamodb.newimage.description.s AS description\n" +
        String.format("FROM \"%s\".\"%s\"\n",
            ssmParameterCachingClient.getAsString("glue/database"),
            ssmParameterCachingClient.getAsString("glue/table/applications")) +
        String.format("WHERE detail.dynamodb.keys.applicationid.s='%s' limit 10", TestEnv.getApplicationId());

    List<Row> rows = Collections.emptyList();
    int attempts = 0;
    while (rows.size() < 2 && attempts < 10) {
      log.info("Waiting for Firehose to flush it's buffer into S3...");
      Thread.sleep(30000);
      runAthenaQuery(loadPartitionsQuery);
      rows = runAthenaQuery(createdAppQuery);
      attempts++;
    }

    assertThat(rows).hasSizeGreaterThan(1); // Results always have 1 row of headers
    assertThat(rows.get(1).data().get(0).varCharValue()).isEqualTo("INSERT");
    assertThat(rows.get(1).data().get(1).varCharValue()).isEqualTo(TestEnv.getApplication().getApplicationId());
    assertThat(rows.get(1).data().get(3).varCharValue()).isEqualTo(TestEnv.getApplication().getAuthor());
    assertThat(rows.get(1).data().get(4).varCharValue()).isEqualTo(TestEnv.getApplication().getDescription());
  }


  private List<Row> runAthenaQuery(final String query) {
    log.info("Running Athena query: {}", query);
    StartQueryExecutionResponse startQueryExecutionResponse = athenaClient.startQueryExecution(StartQueryExecutionRequest.builder()
        .queryString(query)
        .resultConfiguration(ResultConfiguration.builder()
            .outputLocation(String.format("s3://%s",
                ssmParameterCachingClient.getAsString("s3/AthenaQueryResultsBucketName/IntegTest/Name")))
            .build())
        .build());

    String queryExecutionId = startQueryExecutionResponse.queryExecutionId();

    waitForQueryToComplete(queryExecutionId);
    List<Row> resultRows = getResultRows(queryExecutionId);
    log.info("Query results: {}", resultRows);
    return resultRows;
  }

  @SneakyThrows(InterruptedException.class)
  private void waitForQueryToComplete(String queryExecutionId) {
    GetQueryExecutionRequest getQueryExecutionRequest = GetQueryExecutionRequest.builder()
        .queryExecutionId(queryExecutionId).build();

    GetQueryExecutionResponse getQueryExecutionResponse;
    boolean isQueryStillRunning = true;
    while (isQueryStillRunning) {
      getQueryExecutionResponse = athenaClient.getQueryExecution(getQueryExecutionRequest);
      String queryState = getQueryExecutionResponse.queryExecution().status().state().toString();
      if (queryState.equals(QueryExecutionState.FAILED.toString())) {
        throw new RuntimeException("Query Failed to run with Error Message: " + getQueryExecutionResponse
            .queryExecution().status().stateChangeReason());
      } else if (queryState.equals(QueryExecutionState.CANCELLED.toString())) {
        throw new RuntimeException("Query was cancelled.");
      } else if (queryState.equals(QueryExecutionState.SUCCEEDED.toString())) {
        isQueryStillRunning = false;
      } else {
        // Sleep an amount of time before retrying again.
        Thread.sleep(5000);
      }
      log.info("Current Status is: " + queryState);
    }
  }

  private List<Row> getResultRows(String queryExecutionId) {
    GetQueryResultsRequest getQueryResultsRequest = GetQueryResultsRequest.builder()
        .queryExecutionId(queryExecutionId).build();

    GetQueryResultsIterable getQueryResultsResults = athenaClient.getQueryResultsPaginator(getQueryResultsRequest);

    return getQueryResultsResults.stream()
        .flatMap(getQueryResultsResponse -> getQueryResultsResponse.resultSet().rows().stream())
        .collect(Collectors.toList());
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/AWSServerlessApplicationRepositoryRecordingClient.java
package software.amazon.serverless.apprepo.cucumber.steps;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationInput;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsResult;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationInput;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationResult;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Client implementation that wraps {@link AWSServerlessApplicationRepository} and records results to {@link TestEnv}.
 */
@RequiredArgsConstructor
@Slf4j
public class AWSServerlessApplicationRepositoryRecordingClient implements AWSServerlessApplicationRepository {
  private final AWSServerlessApplicationRepository delegate;

  @Override
  public CreateApplicationResult createApplication(CreateApplicationRequest createApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      CreateApplicationInput input = createApplicationRequest.getCreateApplicationInput();
      TestEnv.setApplicationId(input.getApplicationId());
      TestEnv.setApplicationDescription(input.getDescription());
      TestEnv.setAuthor(input.getAuthor());
      TestEnv.setHomePageUrl(input.getHomePageUrl());

      CreateApplicationResult result = delegate.createApplication(createApplicationRequest);
      TestEnv.setApplication(result.getApplication());
      TestEnv.addApplication(result.getApplication());
      return result;
    } catch (Throwable t) {
      log.info("Exception is thrown in CreateApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public DeleteApplicationResult deleteApplication(DeleteApplicationRequest deleteApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      return delegate.deleteApplication(deleteApplicationRequest);
    } catch (Throwable t) {
      log.info("Exception is thrown in DeleteApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public GetApplicationResult getApplication(GetApplicationRequest getApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      return delegate.getApplication(getApplicationRequest);
    } catch (Throwable t) {
      log.info("Exception is thrown in GetApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public ListApplicationsResult listApplications(ListApplicationsRequest listApplicationsRequest) {
    TestEnv.setLastException(null);
    try {
      ListApplicationsResult listApplicationsResult = delegate.listApplications(listApplicationsRequest);
      TestEnv.setApplicationList(listApplicationsResult.getApplicationList());
      return listApplicationsResult;
    } catch (Throwable t) {
      log.info("Exception is thrown in listApplications", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public UpdateApplicationResult updateApplication(UpdateApplicationRequest updateApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      UpdateApplicationInput input = updateApplicationRequest.getUpdateApplicationInput();
      TestEnv.setApplicationDescription(input.getDescription());
      TestEnv.setAuthor(input.getAuthor());
      TestEnv.setHomePageUrl(input.getHomePageUrl());
      UpdateApplicationResult result = delegate.updateApplication(updateApplicationRequest);
      TestEnv.setApplication(result.getApplication());
      return result;
    } catch (Throwable t) {
      log.info("Exception is thrown in UpdateApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public void shutdown() {
    delegate.shutdown();
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CognitoUserManager.java
package software.amazon.serverless.apprepo.cucumber.steps;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminConfirmSignUpRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminDeleteUserRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminInitiateAuthRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AuthFlowType;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AuthenticationResultType;
import software.amazon.awssdk.services.cognitoidentityprovider.model.SignUpRequest;

/**
 * This class is used to manage Cognito User creation, authentication and deletion.
 */
@RequiredArgsConstructor
@Slf4j
public class CognitoUserManager {
  private final CognitoIdentityProviderClient cognito;
  private final String clientId;
  private final String userPoolId;

  public void setupCognitoUser() {
    String username = String.format("success+%s@simulator.amazonses.com", UUID.randomUUID().toString());
    String password = UUID.randomUUID().toString();
    cognito.signUp(SignUpRequest.builder()
          .clientId(clientId)
          .username(username)
          .password(password)
          .build());
    cognito.adminConfirmSignUp(AdminConfirmSignUpRequest.builder()
          .userPoolId(userPoolId)
          .username(username)
          .build());
    TestEnv.setUsername(username);
    TestEnv.setPassword(password);
    log.info("Created Cognito user {}", username);
  }

  public void cleanupCognitoUser() {
    String username = TestEnv.getUsername();
    log.info("Cleaning up Cognito user {}...", username);
    cognito.adminDeleteUser(AdminDeleteUserRequest.builder()
          .username(username)
          .userPoolId(userPoolId)
          .build());

  }

  public String generateIdToken() {
    Map<String, String> authParams = new HashMap<>();
    authParams.put("USERNAME", TestEnv.getUsername());
    authParams.put("PASSWORD", TestEnv.getPassword());
    AuthenticationResultType authResult = cognito.adminInitiateAuth(AdminInitiateAuthRequest.builder()
          .authFlow(AuthFlowType.ADMIN_NO_SRP_AUTH)
          .clientId(clientId)
          .userPoolId(userPoolId)
          .authParameters(authParams)
          .build())
          .authenticationResult();
    return authResult.idToken();
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/S3Helper.java
package software.amazon.serverless.apprepo.cucumber.steps;


import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.DeleteObjectRequest;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;
import software.amazon.awssdk.services.s3.paginators.ListObjectsV2Iterable;

@RequiredArgsConstructor
@Slf4j
public class S3Helper {
  private final S3Client s3Client;

  public void emptyBucket(String bucketName){
    log.info("Emptying bucket {}", bucketName);

    ListObjectsV2Iterable listObjectsV2Responses = s3Client.listObjectsV2Paginator(ListObjectsV2Request.builder()
        .bucket(bucketName)
        .build());

    listObjectsV2Responses.stream()
        .flatMap(r -> r.contents().stream())
        .forEach(s3Object -> {
          log.info("deleting {}", s3Object.key());
          s3Client.deleteObject(DeleteObjectRequest.builder()
              .bucket(bucketName)
              .key(s3Object.key())
              .build());
        });
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/SetupAndTeardownSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import com.google.inject.Inject;

import java.time.Duration;
import java.time.Instant;

import io.cucumber.core.api.Scenario;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import lombok.extern.slf4j.Slf4j;
import software.amazon.serverless.ssmcachingclient.SsmParameterCachingClient;

/**
 * Setup and teardown implementation.
 */
@Slf4j
public class SetupAndTeardownSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;
  @Inject
  private CognitoUserManager cognitoUserManager;
  @Inject
  private SsmParameterCachingClient ssmParameterCachingClient;
  @Inject
  private S3Helper s3Helper;

  @Before
  public void beforeScenario(final Scenario s) {
    TestEnv.reset();
    Instant startedAt = Instant.now();
    TestEnv.setScenarioStartedAt(startedAt);
    cognitoUserManager.setupCognitoUser();
    log.info("Starting scenario \"{}\" at {}", s.getName(), startedAt);
  }

  @After
  public void afterScenario(Scenario s) {
    TestEnv.getApplications().forEach(app -> tryDeleteApplication(app.getApplicationId()));

    try {
      cognitoUserManager.cleanupCognitoUser();
    } catch (Throwable t) {
      log.warn(String.format("Failed to clean up cognito user %s", TestEnv.getUsername()), t);
    }

    Instant endedAt = Instant.now();
    long durationMillis = Duration.between(TestEnv.getScenarioStartedAt(), endedAt).toMillis();
    if (s.isFailed()) {
      log.info("Failed scenario \"{}\" at {} (Duration: {} ms)", s.getName(), endedAt, durationMillis);
      log.info("TestData: {}", TestEnv.getTestData().toString());
    } else {
      log.info("Completed scenario \"{}\" at {} (Duration: {} ms)", s.getName(), endedAt, durationMillis);
    }

    tryEmptyTestBuckets();
  }

  private void tryDeleteApplication(String applicationId) {
    try {
      log.info("Cleaning up application {}", applicationId);
      appRepo.deleteApplication(new DeleteApplicationRequest().applicationId(applicationId));
    } catch (Throwable t) {
      log.warn("Failed to clean up application {}", applicationId, t);
    }
  }

  private void tryEmptyTestBuckets(){
    try {
      log.info("Emptying test buckets so that CloudFormation can delete them");
      s3Helper.emptyBucket(ssmParameterCachingClient.getAsString("s3/DataBucket/Name"));
      s3Helper.emptyBucket(ssmParameterCachingClient.getAsString("s3/AthenaQueryResultsBucketName/IntegTest/Name"));
    } catch (Throwable t) {
      log.warn("Failed to empty test buckets", t);
    }

  }
}

--#

--% /realworld-serverless-application/analytics/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/TestEnv.java
package software.amazon.serverless.apprepo.cucumber.steps;

import software.amazon.serverless.apprepo.api.client.model.Application;
import software.amazon.serverless.apprepo.api.client.model.ApplicationList;

import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lombok.ToString;

/**
 * Stores test data needed across scenario steps.
 */
public final class TestEnv {
  private static final ThreadLocal<TestData> data = new ThreadLocal<>();
  private static final String SCENARIO_STARTED_AT_KEY = TestEnv.TestData.key(TestEnv.class, "scenarioStartedAt");
  private static final String LAST_EXCEPTION_KEY = TestData.key(TestEnv.class, "lastThrowable");
  private static final String APPLICATION_ID_KEY = TestEnv.TestData.key(TestEnv.class, "applicationId");
  private static final String APPLICATION_DESCRIPTION_KEY = TestEnv.TestData.key(TestEnv.class, "applicationDescription");
  private static final String AUTHOR_KEY = TestEnv.TestData.key(TestEnv.class, "author");
  private static final String HOME_PAGE_URL_KEY = TestEnv.TestData.key(TestEnv.class, "homePageUrl");
  private static final String APPLICATION_KEY = TestEnv.TestData.key(TestEnv.class, "application");
  private static final String APPLICATION_LIST_KEY = TestEnv.TestData.key(TestEnv.class, "applicationList");
  private static final String APPLICATIONS_KEY = TestEnv.TestData.key(TestEnv.class, "applicationsKey");
  private static final String COGNITO_USERNAME = TestEnv.TestData.key(TestEnv.class, "cognitoUsername");
  private static final String COGNITO_PASSWORD = TestEnv.TestData.key(TestEnv.class, "cognitoPassword");

  private TestEnv() {
  }

  public static void reset() {
    data.set(new TestData());
  }

  public static TestData getTestData() {
    return data.get();
  }

  public static void setScenarioStartedAt(final Instant startedAt) {
    TestEnv.getTestData().set(SCENARIO_STARTED_AT_KEY, startedAt);
  }

  public static Instant getScenarioStartedAt() {
    return TestEnv.getTestData().get(SCENARIO_STARTED_AT_KEY);
  }

  public static void setLastException(final Throwable t) {
    getTestData().set(LAST_EXCEPTION_KEY, t);
  }

  public static Throwable getLastException() {
    return getTestData().get(LAST_EXCEPTION_KEY);
  }

  public static void setApplicationId(final String applicationId) {
    TestEnv.getTestData().set(APPLICATION_ID_KEY, applicationId);
  }

  public static String getApplicationId() {
    return TestEnv.getTestData().get(APPLICATION_ID_KEY);
  }

  public static void setApplicationDescription(final String description) {
    TestEnv.getTestData().set(APPLICATION_DESCRIPTION_KEY, description);
  }

  public static String getApplicationDescription() {
    return TestEnv.getTestData().get(APPLICATION_DESCRIPTION_KEY);
  }

  public static void setAuthor(final String author) {
    TestEnv.getTestData().set(AUTHOR_KEY, author);
  }

  public static String getAuthor() {
    return TestEnv.getTestData().get(AUTHOR_KEY);
  }

  public static void setHomePageUrl(final String homePageUrl) {
    TestEnv.getTestData().set(HOME_PAGE_URL_KEY, homePageUrl);
  }

  public static String getHomePageUrl() {
    return TestEnv.getTestData().get(HOME_PAGE_URL_KEY);
  }

  public static void setUsername(final String username) {
    TestEnv.getTestData().set(COGNITO_USERNAME, username);
  }

  public static String getUsername() {
    return TestEnv.getTestData().get(COGNITO_USERNAME);
  }

  public static void setPassword(final String password) {
    TestEnv.getTestData().set(COGNITO_PASSWORD, password);
  }

  public static String getPassword() {
    return TestEnv.getTestData().get(COGNITO_PASSWORD);
  }

  public static void setApplication(final Application application) {
    TestEnv.getTestData().set(APPLICATION_KEY, application);
  }

  public static Application getApplication() {
    return TestEnv.getTestData().get(APPLICATION_KEY);
  }

  public static void addApplication(Application application) {
    Map<String, Application> applications = TestEnv.getTestData().get(APPLICATIONS_KEY);
    if (applications == null) {
      applications = new HashMap<>();
      TestEnv.getTestData().set(APPLICATIONS_KEY, applications);
    }
    applications.put(application.getApplicationId(), application);
  }

  public static List<Application> getApplications() {
    Map<String, Application> applications = TestEnv.getTestData().get(APPLICATIONS_KEY);
    if (applications == null) {
      applications = new HashMap<>();
      TestEnv.getTestData().set(APPLICATIONS_KEY, applications);
    }
    return new ArrayList<>(applications.values());
  }

  public static void setApplicationList(final ApplicationList listApplicationsResponse) {
    TestEnv.getTestData().set(APPLICATION_LIST_KEY, listApplicationsResponse);
  }

  public static ApplicationList getApplicationList() {
    return TestEnv.getTestData().get(APPLICATION_LIST_KEY);
  }

  @ToString
  public static final class TestData {
    private final Map<String, Object> data = new HashMap<>();

    public static String key(final Class<?> klass, final String keyName) {
      return klass.getSimpleName() + "." + keyName;
    }

    @SuppressWarnings("unchecked")
    public <T> T get(final String key) {
      return (T) data.get(key);
    }

    public <T> void set(final String key, final T value) {
      data.put(key, value);
    }
  }
}

--#

--% /realworld-serverless-application/analytics/src/test/resources/cucumber.properties
guice.injector-source=software.amazon.serverless.apprepo.cucumber.guice.CukeInjectorSource

--#

--% /realworld-serverless-application/analytics/src/test/resources/integ-test-env.template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates the resources for integration tests.

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
Resources:
  IntegTestClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Sub '{{resolve:ssm:/applications/apprepo/${Stage}/cognito/userpool/ApplicationsApi/Id:1}}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  AthenaQueryResultsBucket:
    Type: AWS::S3::Bucket

  IntegTestClientId:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cognito/userpoolclient/IntegTest/Id"
      Type: "String"
      Value: !Ref IntegTestClient
      Description: "Integration test Cognito User Pool Client ID."

  AthenaQueryResultsBucketName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/s3/AthenaQueryResultsBucketName/IntegTest/Name"
      Type: "String"
      Value: !Ref AthenaQueryResultsBucket
      Description: "Integration test Cognito User Pool Client ID."
--#

--% /realworld-serverless-application/analytics/src/test/resources/log4j2.properties
name=config
appenders=console
appender.console.type=Console
appender.console.name=STDOUT
appender.console.layout.type=PatternLayout
appender.console.layout.pattern=%d{dd-MM-yyyy HH:mm:ss} [%-5p] (%F:%L) - %m%n
rootLogger.level=info
rootLogger.appenderRefs=stdout
rootLogger.appenderRef.stdout.ref=STDOUT
--#

--% /realworld-serverless-application/backend/buildspec-integ-test.yaml
version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8
  build:
    commands:
      - cd backend
      - STAGE=integ-tests-`date +%s`
      - mvn clean verify -Dintegtests.stage=${STAGE} -DpackageBucket=${PACKAGE_BUCKET}


--#

--% /realworld-serverless-application/backend/buildspec.yaml
version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8
  build:
    commands:
      - cd backend
      - mvn clean package -DpackageBucket=${PACKAGE_BUCKET}
artifacts:
  files:
    - backend/target/sam/app/packaged-template.yaml
  discard-paths: yes

--#

--% /realworld-serverless-application/backend/pom.xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>software.amazon.serverless</groupId>
  <artifactId>realworld-serverless-application-backend</artifactId>
  <version>1.0.1</version>

  <name>realworld-serverless-application-backend</name>
  <url>https://github.com/awslabs/realworld-serverless-application</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <packageBucket>my-bucket</packageBucket>
    <integtests.stage>integ-tests</integtests.stage>
  </properties>

  <dependencies>
    <!-- Build Dependencies -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.16.18</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>javax.ws.rs-api</artifactId>
      <version>2.1.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>2.0.1.Final</version>
    </dependency>
    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-annotations</artifactId>
      <version>2.0.9</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.swagger</groupId>
      <artifactId>swagger-annotations</artifactId>
      <version>1.5.3</version>
      <scope>provided</scope>
    </dependency>

    <!-- Regular Dependencies -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.21</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-core</artifactId>
      <version>1.1.0</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-events</artifactId>
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>url-connection-client</artifactId>
      <version>2.8.0</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-xray-recorder-sdk-aws-sdk-v2-instrumentor</artifactId>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>29.0-jre</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-server</artifactId>
      <version>2.29</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.9</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.7</version>
    </dependency>
    <dependency>
      <groupId>org.modelmapper</groupId>
      <artifactId>modelmapper</artifactId>
      <version>2.3.5</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.serverless</groupId>
      <artifactId>aws-ssm-java-caching-client</artifactId>
      <version>1.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws.serverless</groupId>
      <artifactId>aws-serverless-java-container-jersey</artifactId>
      <version>1.3.2</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-jackson</artifactId>
      <version>2.29</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.hk2</groupId>
      <artifactId>hk2-api</artifactId>
      <version>2.6.1</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>dynamodb</artifactId>
      <version>2.8.4</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>kms</artifactId>
      <version>2.8.4</version>
    </dependency>

    <!-- Test Dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>2.0.100-beta</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>3.12.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>2.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>2.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-junit</artifactId>
      <version>4.7.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-java</artifactId>
      <version>4.7.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-opensdk</artifactId>
      <version>1.11.392</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>4.2.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-guice</artifactId>
      <version>4.7.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>cognitoidentityprovider</artifactId>
      <version>2.8.4</version>
      <scope>test</scope>
    </dependency>

    <!-- Runtime Dependencies -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-log4j</artifactId>
      <version>1.0.0</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.26</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <version>2.29</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.0</version>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eluder.coveralls</groupId>
        <artifactId>coveralls-maven-plugin</artifactId>
        <version>4.3.0</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.1</version>
        <configuration>
          <createDependencyReducedPom>false</createDependencyReducedPom>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <configLocation>google_checks.xml</configLocation>
          <encoding>UTF-8</encoding>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
          <linkXRef>true</linkXRef>
          <violationSeverity>warning</violationSeverity>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <systemProperties>
            <integtests.stage>${integtests.stage}</integtests.stage>
          </systemProperties>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>Create package folder</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <mkdir dir="${project.build.directory}/sam/app"/>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <id>SAM package</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>aws</executable>
              <arguments>
                <argument>cloudformation</argument>
                <argument>package</argument>
                <argument>--s3-bucket</argument>
                <argument>${packageBucket}</argument>
                <argument>--template-file</argument>
                <argument>${project.basedir}/sam/app/template.yaml</argument>
                <argument>--output-template-file</argument>
                <argument>${project.build.directory}/sam/app/packaged-template.yaml</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>Integ Test Environment Setup - Create Stack</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>aws</executable>
              <arguments>
                <argument>cloudformation</argument>
                <argument>deploy</argument>
                <argument>--capabilities</argument>
                <argument>CAPABILITY_IAM</argument>
                <argument>CAPABILITY_AUTO_EXPAND</argument>
                <argument>--template-file</argument>
                <argument>${project.build.directory}/sam/app/packaged-template.yaml</argument>
                <argument>--stack-name</argument>
                <argument>${project.name}-${integtests.stage}</argument>
                <argument>--parameter-overrides</argument>
                <argument>Stage=${integtests.stage}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>Integ Test Environment Setup - Create Resource Stack</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>aws</executable>
              <arguments>
                <argument>cloudformation</argument>
                <argument>deploy</argument>
                <argument>--capabilities</argument>
                <argument>CAPABILITY_IAM</argument>
                <argument>CAPABILITY_AUTO_EXPAND</argument>
                <argument>--template-file</argument>
                <argument>${project.basedir}/src/test/resources/integ-test-env.template.yaml</argument>
                <argument>--stack-name</argument>
                <argument>${project.name}-${integtests.stage}-env</argument>
                <argument>--parameter-overrides</argument>
                <argument>Stage=${integtests.stage}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>Integ Test Environment Teardown</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>aws</executable>
              <arguments>
                <argument>cloudformation</argument>
                <argument>delete-stack</argument>
                <argument>--stack-name</argument>
                <argument>${project.name}-${integtests.stage}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>Integ Test Environment Teardown - Resource Stack</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>aws</executable>
              <arguments>
                <argument>cloudformation</argument>
                <argument>delete-stack</argument>
                <argument>--stack-name</argument>
                <argument>${project.name}-${integtests.stage}-env</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.swagger.codegen.v3</groupId>
        <artifactId>swagger-codegen-maven-plugin</artifactId>
        <version>3.0.11</version>
        <executions>
          <execution>
            <id>generate-swagger-model</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/swagger/api.yaml</inputSpec>
              <language>jaxrs-spec</language>
              <configOptions>
                <sourceFolder>src/main/java</sourceFolder>
                <interfaceOnly>true</interfaceOnly>
              </configOptions>
              <withXml>false</withXml>
              <generateSupportingFiles>false</generateSupportingFiles>
<!-- modelPackage and apiPackage does not work due to https://github.com/swagger-api/swagger-codegen/issues/8708             -->
              <modelPackage>${project.groupId}.apprepo.api.model</modelPackage>
              <apiPackage>${project.groupId}.apprepo.api</apiPackage>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

--#

--% /realworld-serverless-application/backend/README.md
# realworld-serverless-application-backend

realworld-serverless-application-backend is the backend component of a larger project providing a REST API for the application. It can be deployed together with the other system components to produce an example serverless application demonstrating real world patterns and best practices for serverless applications.

To get started with the full project, follow the [Quick Start](https://github.com/awslabs/realworld-serverless-application/wiki/Quick-Start) guide.

## License

This project is licensed under the Apache-2.0 License.     

--#

--% /realworld-serverless-application/backend/images/back_end_diagram.png

--#

--% /realworld-serverless-application/backend/sam/app/api.template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates API Gateway and Lambda resources for the backend service.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-backend-api
    Description: >-
      This template creates API Gateway and Lambda resources for the backend service.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
Conditions:
  IsProd:
    !Equals [!Ref Stage, "prod"]
Resources:
  ApplicationsApi:
    Type: AWS::Serverless::Api
    Properties:
      # Use DefinitionBody for swagger file so that we can use CloudFormation intrinsic functions within the swagger file
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: '../../swagger/api.yaml'
      StageName: Prod
      TracingEnabled: true # Enable AWS X-Ray to help debug API requests
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          # Disable data trace in production to avoid logging customer sensitive information from requests and responses
          DataTraceEnabled: !If [IsProd, false, true]
          LoggingLevel: INFO
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      AccessLogSetting:
        DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}'
        Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'
      OpenApiVersion: '3.0.0'
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'authorization, content-type'"

  ApplicationsApiUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          TemporaryPasswordValidityDays: 1
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Mutable: false

  ApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: '../../target/realworld-serverless-application-backend-1.0.1.jar'
      Handler: 'software.amazon.serverless.apprepo.container.ApiLambdaHandler::handleRequest'
      MemorySize: 1536
      Timeout: 30
      Runtime: java8
      Tracing: Active # Enable AWS X-Ray to help debug API requests
      Environment:
        Variables:
          STAGE: !Ref Stage
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: !Sub "applications/apprepo/${Stage}/*"
        - DynamoDBCrudPolicy:
            TableName: !Sub "{{resolve:ssm:/applications/apprepo/${Stage}/ddb/Applications/TableName:1}}"
        - Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
              - kms:Encrypt
              - kms:Decrypt
              Resource: !GetAtt PaginationKey.Arn
      Events:
        AnyApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApplicationsApi
            Path: '/*'
            Method: '*'
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        # Use AllAtOnce in non-production environment to accelerate deployment
        Type: !If [IsProd, Canary10Percent15Minutes, AllAtOnce]
        Alarms:
          - !Ref ApiAvailability
          - !Ref Api4xxErrors
          - !Ref ApiLatencyP50
    DependsOn: PaginationTokenTtlInSeconds
  PaginationKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encrypt and decrypt pagination tokens for List APIs."
      EnableKeyRotation: 'true'
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-policy
        Statement:
          - Sid: Enable Root User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
  # This role allows API Gateway to push execution and access logs to CloudWatch logs
  ApiGatewayPushToCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Push logs to CloudWatch logs from API Gateway"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
  ApiAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayPushToCloudWatchRole.Arn
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-${ApplicationsApi}
      RetentionInDays: 3653

  # Alarms used in canary deployment for Applications API.
  ApiAvailability:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: false
      AlarmDescription: !Sub 'Api availability is lower than 90%. Only used in canary deployment for Lambda ${ApiLambda}'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub realworld-serverless-application-backend-${Stage}
      EvaluationPeriods: 5
      MetricName: 5XXErrors
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Average
      Threshold: 0.1
      TreatMissingData: notBreaching
  Api4xxErrors:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: false
      AlarmDescription: !Sub 'Api 4xx Errors are more than 30%. Only used in canary deployment for Lambda ${ApiLambda}'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub realworld-serverless-application-backend-${Stage}
      EvaluationPeriods: 5
      MetricName: 4XXErrors
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Average
      Threshold: 0.3
      TreatMissingData: notBreaching
  ApiLatencyP50:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: false
      AlarmDescription: !Sub 'Api latency p50 is too high. Only used in canary deployment for Lambda ${ApiLambda}'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub realworld-serverless-application-backend-${Stage}
      EvaluationPeriods: 5
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Period: 60
      ExtendedStatistic: p50
      Threshold: 200
      TreatMissingData: notBreaching

  # Storing resources names to SSM
  ApiLambdaName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionName"
      Type: "String"
      Value: !Ref ApiLambda
      Description: "ApiLambda function name"
  ApiLambdaArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionArn"
      Type: "String"
      Value: !Ref ApiLambda
      Description: "ApiLambda function ARN"
  ApiLambdaVersion:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionVersion"
      Type: "String"
      Value: !Ref ApiLambda.Version
      Description: "ApiLambda function version for alias live"
  ApiId:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/apigateway/ApplicationsApi/Id"
      Type: "String"
      Value: !Ref ApplicationsApi
      Description: "ApplicationsApi Id"
  ApiEndpoint:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/apigateway/ApplicationsApi/Endpoint"
      Type: "String"
      Value: !Sub "https://${ApplicationsApi}.execute-api.${AWS::Region}.amazonaws.com"
      Description: "ApplicationsApi endpoint"
  ApiStage:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/apigateway/ApplicationsApi/Stage"
      Type: "String"
      Value: !Ref ApplicationsApi.Stage
      Description: "ApplicationsApi API Gateway stage"
  ApiAccessLogGroupName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/apigateway/ApplicationsApi/AccessLog/LogGroupName"
      Type: "String"
      Value: !Ref ApiAccessLogGroup
      Description: "ApplicationsApi access log CloudWatch log group name"
  ApiAccessLogGroupArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/apigateway/ApplicationsApi/AccessLog/LogGroupArn"
      Type: "String"
      Value: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}'
      Description: "ApplicationsApi access log CloudWatch log group ARN"
  ApiUserPoolUserPoolId:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cognito/userpool/ApplicationsApi/Id"
      Type: "String"
      Value: !Ref ApplicationsApiUserPool
      Description: "ApplicationsApi Cognito User Pool ID."
  ApiUserPoolUserPoolArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cognito/userpool/ApplicationsApi/Arn"
      Type: "String"
      Value: !GetAtt ApplicationsApiUserPool.Arn
      Description: "ApplicationsApi Cognito User Pool ARN."
  PaginationKeyId:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/kms/pagination/KeyId"
      Type: "String"
      Value: !Ref PaginationKey
      Description: "KMS pagination key Id."
  PaginationKeyArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/kms/pagination/KeyArn"
      Type: "String"
      Value: !GetAtt PaginationKey.Arn
      Description: "KMS pagination key ARN."
  PaginationTokenTtlInSeconds:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/configuration/pagination/TtlInSeconds"
      Type: "String"
      Value: 360
      Description: "Pagination token TTL in seconds. The pagination token is used in List APIs."

--#

--% /realworld-serverless-application/backend/sam/app/database.template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  This template creates the database resources for the backend service.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-backend-database
    Description: >-
      This template creates the database resources for the backend service.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
Resources:
  Applications:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: 'userId'
          AttributeType: 'S'
        - AttributeName: 'applicationId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'userId'
          KeyType: 'HASH'
        - AttributeName: 'applicationId'
          KeyType: 'RANGE'
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      TimeToLiveSpecification:
        AttributeName: 'ttl'
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Storing resources names to SSM
  ApplicationsTableName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/ddb/Applications/TableName"
      Type: "String"
      Value: !Ref Applications
      Description: "Applications Table name"
  ApplicationsTableArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/ddb/Applications/TableArn"
      Type: "String"
      Value: !GetAtt Applications.Arn
      Description: "Applications Table ARN"
  ApplicationsTableStreamArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/ddb/Applications/StreamArn"
      Type: "String"
      Value: !GetAtt Applications.StreamArn
      Description: "Applications DynamoDB Stream ARN"
  ApplicationsTableStreamName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/ddb/Applications/StreamName"
      Type: "String"
      Value:
        !Select
          - 2
          - !Split
            - '/'
            - !Select
              - 5
              - !Split [':', !GetAtt Applications.StreamArn]
      Description: "Applications DynamoDB Stream name"

--#

--% /realworld-serverless-application/backend/sam/app/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This application creates a backend service using serverless technologies such as API Gateway, Lambda etc.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-backend
    Description: >-
      This application creates a backend service using serverless technologies such as API Gateway, Lambda etc.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'test'

Resources:
  Api:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: 'api.template.yaml'
      Parameters:
        Stage: !Ref Stage
    DependsOn: Database
  Database:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: 'database.template.yaml'
      Parameters:
        Stage: !Ref Stage

--#

--% /realworld-serverless-application/backend/sam/cicd/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates IAM roles and use them to setup CD pipeline for the backend service.

Parameters:
  GitHubOAuthTokenSecretId:
    Type: String
    Description: The AWS Secrets Manager Secret Id that stores Github OAuth token.
    Default: 'GitHubOAuthToken'
  GitHubOwner:
    Type: String
    Description: The GitHub owner of the repository.
    Default: 'awslabs'
  ApplicationStackName:
    Type: String
    Description: The stack name the CD pipeline will use to deploy the application.
    Default: 'realworld-serverless-application-backend'
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'
Resources:
  CD:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:646794253159:applications/aws-sam-codepipeline-cd
        SemanticVersion: 0.1.3
      Parameters:
        GitHubOAuthToken: !Sub '{{resolve:secretsmanager:${GitHubOAuthTokenSecretId}}}'
        GitHubOwner: !Ref GitHubOwner
        GitHubRepo: realworld-serverless-application
        DeployStackName: !Ref ApplicationStackName
        DeployRoleName: !Ref DeployRole
        DeployParameterOverrides: !Sub '{"Stage":"${Stage}"}'
        IntegTestRoleName: !Ref IntegTestsRole
        BuildSpecFilePath: 'backend/buildspec.yaml'
        IntegTestBuildSpecFilePath: 'backend/buildspec-integ-test.yaml'

  # This policy defines the minimum IAM permissions required to Create and Delete a stack for backend component into CloudFormation
  CloudFormationDeployPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref IntegTestsRole
        - !Ref DeployRole
      PolicyName: "deploy-create-delete-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - cloudformation:CreateChangeSet
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include
          - Effect: "Allow"
            Action:
              - dynamodb:DescribeTable
              - dynamodb:DeleteTable
              - dynamodb:CreateTable
              - dynamodb:UpdateContinuousBackups
              - dynamodb:DescribeContinuousBackups
              - dynamodb:UpdateTimeToLive
              - dynamodb:DescribeTimeToLive
              - dynamodb:TagResource
              - dynamodb:ListTagsOfResource
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
          - Effect: "Allow"
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:TagRole
              - iam:PutRolePolicy
              - iam:GetRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
          - Effect: "Allow"
            Action:
              - apigateway:*
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/*
          - Effect: "Allow"
            Action:
              - apigateway:POST
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis
          - Effect: "Allow"
            Action:
              - apigateway:PATCH
              - apigateway:GET
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/account
          - Effect: "Allow"
            Action:
              - codedeploy:CreateApplication
              - codedeploy:DeleteApplication
            Resource:
              - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
          - Effect: "Allow"
            Action:
              - codedeploy:CreateDeploymentGroup
              - codedeploy:DeleteDeploymentGroup
              - codedeploy:CreateDeployment
            Resource:
              - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*
          - Effect: "Allow"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:CreateGrant
              - kms:DescribeKey
              - kms:GenerateDataKey
            Resource:
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:aliases/aws/lambda
          - Effect: "Allow"
            Action:
              - kms:CreateKey
            Resource:
              - '*'
          - Effect: "Allow"
            Action:
              - kms:PutKeyPolicy
              - kms:DescribeKey
              - kms:ScheduleKeyDeletion
              - kms:EnableKeyRotation
              - kms:TagResource
              - kms:UntagResource
              - kms:ListResourceTags
            Resource:
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
          - Effect: "Allow"
            Action:
              - lambda:CreateFunction
              - lambda:GetFunctionConfiguration
              - lambda:GetFunction
              - lambda:DeleteFunction
              - lambda:CreateAlias
              - lambda:GetAlias
              - lambda:DeleteAlias
              - lambda:PublishVersion
              - lambda:ListVersionsByFunction
              - lambda:AddPermission
              - lambda:RemovePermission
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: "Allow"
            Action:
              - logs:DescribeLogGroups
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: "Allow"
            Action:
              - logs:CreateLogGroup
              - logs:DescribeLogGroups
              - logs:DeleteLogGroup
              - logs:PutRetentionPolicy
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/AccessLog-*
          - Effect: "Allow"
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:AddTagsToResource
              - ssm:RemoveTagsFromResource
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/apprepo/*
          - Effect: "Allow"
            Action:
              - cognito-idp:CreateUserPool
              - cognito-idp:DeleteUserPool
            Resource:
              - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
          - Effect: "Allow"
            Action:
              - cognito-idp:CreateUserPool
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DescribeAlarms
              - cloudwatch:DeleteAlarms
            Resource:
              - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
  # This role is used to deploy backend to CloudFormation.
  # In addition to the permissions from CloudFormationDeployPolicy, it also defines permissions that is required to update the stack in CloudFormation
  DeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Deploy CloudFormation stack ${ApplicationStackName}. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "dynamodb-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:UpdateTable
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
        - PolicyName: "iam-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - iam:UpdateRoleDescription
                  - iam:UpdateRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
        - PolicyName: "codedeploy-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - codedeploy:UpdateApplication
                  - codedeploy:RegisterApplicationRevision
                Resource:
                  - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
              - Effect: "Allow"
                Action:
                  - codedeploy:UpdateDeploymentGroup
                  - codedeploy:GetDeployment
                Resource:
                  - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*
              - Effect: "Allow"
                Action:
                  - codedeploy:GetDeploymentConfig
                Resource:
                  - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.Lambda*
        - PolicyName: "lambda-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateAlias
                  - lambda:ListTags
                  - lambda:TagResource
                  - lambda:UntagResource
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
        - PolicyName: "cognito-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cognito-idp:UpdateUserPool
                  - cognito-idp:DescribeUserPool
                Resource:
                  - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
  # This role is used to run integration tests in CodeBuild.
  # In addition to the permissions from CloudFormationDeployPolicy, it also defines permissions that is required by integration tests only.
  IntegTestsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Runs integration tests in CodeBuild for ${ApplicationStackName}. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "cloudformation-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DeleteStack
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ApplicationStackName}-integ-tests*
        - PolicyName: "cognito-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action:
                - cognito-idp:CreateUserPoolClient
                - cognito-idp:DeleteUserPoolClient
                - cognito-idp:AdminConfirmSignUp
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminDeleteUser
              Resource:
                - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/ApiException.java
package software.amazon.serverless.apprepo.api.exception;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import lombok.extern.slf4j.Slf4j;

/**
 * API exception that can be converted to JAX-RS {@link Response}.
 */
@Slf4j
public class ApiException extends WebApplicationException {
  /**
   * Construct an ApiException with body object and status code.
   *
   * @param exception  the exception object that will be deserialized to JSON string
   *                   as the response body.
   * @param statusCode response status code.
   */
  public ApiException(final Object exception, final Response.Status statusCode) {
    super(Response.status(statusCode)
          .entity(exception)
          .type(MediaType.APPLICATION_JSON)
          .build());
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/ApiExceptionMapper.java
package software.amazon.serverless.apprepo.api.exception;

import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

import lombok.extern.slf4j.Slf4j;

/**
 * Exception mapper that maps throwables that are not {@link ApiException}
 * to {@link InternalServerApiException}.
 */
@Provider
@Slf4j
public class ApiExceptionMapper implements ExceptionMapper<Throwable> {
  @Override
  public Response toResponse(final Throwable throwable) {
    if (throwable instanceof ApiException) {
      log.info("4xx exception is thrown", throwable);
      ApiException apiException = (ApiException) throwable;
      return apiException.getResponse();
    } else {
      log.error("5xx exception is thrown", throwable);
      return new InternalServerApiException().getResponse();
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/BadRequestApiException.java
package software.amazon.serverless.apprepo.api.exception;

import io.swagger.model.BadRequestException;

import javax.ws.rs.core.Response;

/**
 * Bad Request Api exception.
 */
public class BadRequestApiException extends ApiException {
  public BadRequestApiException(final BadRequestException exception) {
    super(exception, Response.Status.BAD_REQUEST);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/ConflictApiException.java
package software.amazon.serverless.apprepo.api.exception;

import io.swagger.model.ConflictException;

import javax.ws.rs.core.Response;

/**
 * Conflict Api exception.
 */
public class ConflictApiException extends ApiException {
  public ConflictApiException(final ConflictException exception) {
    super(exception, Response.Status.CONFLICT);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/InternalServerApiException.java
package software.amazon.serverless.apprepo.api.exception;

import io.swagger.model.InternalServerErrorException;

import javax.ws.rs.core.Response;

/**
 * Internal Server Api Exception.
 */
public class InternalServerApiException extends ApiException {
  /**
   * Construct an InternalServerApiException that converts
   * to 500 Interal Server Error response.
   */
  public InternalServerApiException() {
    super(new InternalServerErrorException()
                .errorCode("InternalError")
                .message("Internal Server Error."),
          Response.Status.INTERNAL_SERVER_ERROR);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/exception/NotFoundApiException.java
package software.amazon.serverless.apprepo.api.exception;

import io.swagger.model.NotFoundException;

import javax.ws.rs.core.Response;

/**
 * Not Found Api exception.
 */
public class NotFoundApiException extends ApiException {
  public NotFoundApiException(final NotFoundException exception) {
    super(exception, Response.Status.NOT_FOUND);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/ApplicationRecord.java
package software.amazon.serverless.apprepo.api.impl;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

/**
 * ApplicationRecord represents a record in Applications DynamoDB table.
 */
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ApplicationRecord {
  public static final String USER_ID_ATTRIBUTE_NAME = "userId";
  public static final String APPLICATION_ID_ATTRIBUTE_NAME = "applicationId";
  public static final String CREATED_AT_ATTRIBUTE_NAME = "createdAt";
  public static final String AUTHOR_ATTRIBUTE_NAME = "author";
  public static final String HOME_PAGE_URL_ATTRIBUTE_NAME = "homePageUrl";
  public static final String DESCRIPTION_ATTRIBUTE_NAME = "description";
  public static final String VERSION_ATTRIBUTE_NAME = "version";
  public static final String TTL_ATTRIBUTE_NAME = "ttl";

  private String userId;
  private String applicationId;
  private Instant createdAt;
  private String author;
  private String homePageUrl;
  private String description;
  private Long version;
  private Long ttl;

  /**
   * Construct the record from a map of DynamoDB {@link AttributeValue}.
   *
   * @param record a map of DynamoDB {@link AttributeValue}
   */
  public ApplicationRecord(final Map<String, AttributeValue> record) {
    if (record.containsKey(USER_ID_ATTRIBUTE_NAME)) {
      this.userId = record.get(USER_ID_ATTRIBUTE_NAME).s();
    }
    if (record.containsKey(APPLICATION_ID_ATTRIBUTE_NAME)) {
      this.applicationId = record.get(APPLICATION_ID_ATTRIBUTE_NAME).s();
    }
    if (record.containsKey(AUTHOR_ATTRIBUTE_NAME)) {
      this.author = record.get(AUTHOR_ATTRIBUTE_NAME).s();
    }
    if (record.containsKey(CREATED_AT_ATTRIBUTE_NAME)) {
      this.createdAt = Instant.parse(record.get(CREATED_AT_ATTRIBUTE_NAME).s());
    }
    if (record.containsKey(DESCRIPTION_ATTRIBUTE_NAME)) {
      this.description = record.get(DESCRIPTION_ATTRIBUTE_NAME).s();
    }
    if (record.containsKey(HOME_PAGE_URL_ATTRIBUTE_NAME)) {
      this.homePageUrl = record.get(HOME_PAGE_URL_ATTRIBUTE_NAME).s();
    }
    if (record.containsKey(TTL_ATTRIBUTE_NAME)) {
      this.ttl = Long.parseLong(record.get(TTL_ATTRIBUTE_NAME).n());
    }
    if (record.containsKey(VERSION_ATTRIBUTE_NAME)) {
      this.version = Long.parseLong(record.get(VERSION_ATTRIBUTE_NAME).n());
    }
  }

  /**
   * Convert ApplicationRecord to a map of DynamoDB {@link AttributeValue}.
   *
   * @return a map of DynamoDB {@link AttributeValue}
   */
  public Map<String, AttributeValue> toAttributeMap() {
    Map<String, AttributeValue> applicationMap = new HashMap<>();
    if (userId != null) {
      applicationMap.put(USER_ID_ATTRIBUTE_NAME, AttributeValue.builder().s(userId).build());
    }
    if (applicationId != null) {
      applicationMap.put(APPLICATION_ID_ATTRIBUTE_NAME,
            AttributeValue.builder().s(applicationId).build());
    }
    if (author != null) {
      applicationMap.put(AUTHOR_ATTRIBUTE_NAME,
            AttributeValue.builder().s(author).build());
    }
    if (createdAt != null) {
      applicationMap.put(CREATED_AT_ATTRIBUTE_NAME,
            AttributeValue.builder().s(createdAt.toString()).build());
    }
    if (description != null) {
      applicationMap.put(DESCRIPTION_ATTRIBUTE_NAME,
            AttributeValue.builder().s(description).build());
    }
    if (homePageUrl != null) {
      applicationMap.put(HOME_PAGE_URL_ATTRIBUTE_NAME,
            AttributeValue.builder().s(homePageUrl).build());
    }
    if (ttl != null) {
      applicationMap.put(TTL_ATTRIBUTE_NAME,
            AttributeValue.builder().n(ttl.toString()).build());
    }
    if (version != null) {
      applicationMap.put(VERSION_ATTRIBUTE_NAME,
            AttributeValue.builder().n(version.toString()).build());
    }
    return applicationMap;
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/ApplicationsService.java
package software.amazon.serverless.apprepo.api.impl;

import io.swagger.api.ApplicationsApi;
import io.swagger.model.Application;
import io.swagger.model.ApplicationList;
import io.swagger.model.ApplicationSummary;
import io.swagger.model.BadRequestException;
import io.swagger.model.ConflictException;
import io.swagger.model.CreateApplicationInput;
import io.swagger.model.NotFoundException;
import io.swagger.model.UpdateApplicationInput;

import java.time.Clock;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.inject.Inject;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.SecurityContext;

import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import org.modelmapper.ModelMapper;
import org.modelmapper.PropertyMap;

import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
import software.amazon.awssdk.services.dynamodb.model.ConditionalCheckFailedException;
import software.amazon.awssdk.services.dynamodb.model.DeleteItemRequest;
import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;
import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;
import software.amazon.awssdk.services.dynamodb.model.QueryRequest;
import software.amazon.awssdk.services.dynamodb.model.QueryResponse;
import software.amazon.awssdk.services.dynamodb.model.UpdateItemRequest;

import software.amazon.serverless.apprepo.api.exception.BadRequestApiException;
import software.amazon.serverless.apprepo.api.exception.ConflictApiException;
import software.amazon.serverless.apprepo.api.exception.NotFoundApiException;
import software.amazon.serverless.apprepo.api.impl.pagination.InvalidTokenException;
import software.amazon.serverless.apprepo.api.impl.pagination.TokenSerializer;
import software.amazon.serverless.apprepo.container.config.ConfigProvider;

/**
 * ApplicationsService implements {@link ApplicationsApi}.
 *
 * <p>It interacts with DynamoDB when processing each API.
 */
@Slf4j
@RequiredArgsConstructor
public class ApplicationsService implements ApplicationsApi {
  static final Integer DEFAULT_LIST_APPLICATIONS_LIMIT = 10;
  private final TokenSerializer<Map<String, AttributeValue>> paginationTokenSerializer;
  private final DynamoDbClient dynamodb;
  private final ModelMapper modelMapper;
  private final String tableName;
  private final Clock clock;
  @Context
  @Setter
  private SecurityContext securityContext;

  @Inject
  public ApplicationsService(
        final TokenSerializer<Map<String, AttributeValue>> paginationTokenSerializer,
        final DynamoDbClient dynamodb, final ConfigProvider configProvider) {
    this(paginationTokenSerializer, dynamodb, configureModelMapper(),
          configProvider.getApplicationsTableName(), Clock.systemUTC());
  }

  public ApplicationsService(
        final TokenSerializer<Map<String, AttributeValue>> paginationTokenSerializer,
        final DynamoDbClient dynamodb, final ConfigProvider configProvider,
        final Clock clock) {
    this(paginationTokenSerializer, dynamodb, configureModelMapper(),
          configProvider.getApplicationsTableName(), clock);
  }

  private static ModelMapper configureModelMapper() {
    ModelMapper modelMapper = new ModelMapper();
    PropertyMap<ApplicationRecord, Application> applicationMap =
        new PropertyMap<ApplicationRecord, Application>() {
          protected void configure() {
            map(source.getCreatedAt()).setCreationTime(null);
          }
        };

    PropertyMap<ApplicationRecord, ApplicationSummary> applicationSummaryMap =
        new PropertyMap<ApplicationRecord, ApplicationSummary>() {
          protected void configure() {
            map(source.getCreatedAt()).setCreationTime(null);
          }
        };

    modelMapper.addMappings(applicationMap);
    modelMapper.addMappings(applicationSummaryMap);
    return modelMapper;
  }

  @Override
  public Application createApplication(final CreateApplicationInput createApplicationInput) {
    log.info("Creating application with input {}", createApplicationInput);
    ApplicationRecord applicationRecord = modelMapper.map(createApplicationInput,
          ApplicationRecord.class);
    applicationRecord.setCreatedAt(Instant.now(clock));
    applicationRecord.setVersion(1L);
    applicationRecord.setUserId(securityContext.getUserPrincipal().getName());
    try {
      dynamodb.putItem(PutItemRequest.builder()
            .tableName(tableName)
            .item(applicationRecord.toAttributeMap())
            .conditionExpression(
                  String.format("attribute_not_exists(%s) AND attribute_not_exists(%s)",
                        ApplicationRecord.USER_ID_ATTRIBUTE_NAME,
                        ApplicationRecord.APPLICATION_ID_ATTRIBUTE_NAME))
            .build());
    } catch (ConditionalCheckFailedException e) {
      throw new ConflictApiException(new ConflictException()
            .errorCode("ApplicationAlreadyExist")
            .message(String.format("Application %s already exists.",
                  createApplicationInput.getApplicationId())));
    }
    return modelMapper.map(applicationRecord, Application.class);
  }

  @Override
  public void deleteApplication(final String applicationId) {
    log.info("Deleting application {}", applicationId);
    ApplicationRecord applicationRecord = loadApplication(applicationId);
    Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();
    expressionAttributeValues.put(":v", AttributeValue.builder()
          .n(applicationRecord.getVersion().toString())
          .build());
    dynamodb.deleteItem(DeleteItemRequest.builder()
          .tableName(tableName)
          .key(toKeyRecord(applicationId))
          .conditionExpression(String.format("%s = :v", ApplicationRecord.VERSION_ATTRIBUTE_NAME))
          .expressionAttributeValues(expressionAttributeValues)
          .build());
  }

  @Override
  public Application getApplication(String applicationId) {
    log.info("Getting application {}", applicationId);
    ApplicationRecord applicationRecord = loadApplication(applicationId);
    return modelMapper.map(applicationRecord, Application.class);
  }

  @Override
  public ApplicationList listApplications(final String nextToken, final Integer maxItems) {
    log.info("Listing applications with nextToken {} and maxItems {}", nextToken, maxItems);
    Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();
    expressionAttributeValues.put(":u", AttributeValue.builder()
          .s(securityContext.getUserPrincipal().getName())
          .build());

    QueryRequest.Builder requestBuilder = QueryRequest.builder()
          .consistentRead(true)
          .tableName(tableName)
          .keyConditionExpression(String.format("%s = :u",
                ApplicationRecord.USER_ID_ATTRIBUTE_NAME))
          .expressionAttributeValues(expressionAttributeValues)
          .limit(maxItems == null ? DEFAULT_LIST_APPLICATIONS_LIMIT : maxItems);
    if (nextToken != null) {
      try {
        requestBuilder.exclusiveStartKey(paginationTokenSerializer.deserialize(nextToken));
      } catch (InvalidTokenException e) {
        throw new BadRequestApiException(new BadRequestException()
              .errorCode("InvalidRequest")
              .message(String.format("NextToken %s is invalid.", nextToken)));
      }
    }
    QueryResponse queryResponse = dynamodb.query(requestBuilder.build());

    List<ApplicationSummary> applicationSummaries = queryResponse.items()
          .stream()
          .map(ApplicationRecord::new)
          .map(record -> modelMapper.map(record, ApplicationSummary.class))
          .collect(Collectors.toList());

    ApplicationList result = new ApplicationList()
          .applications(applicationSummaries);
    Map<String, AttributeValue> lastEvaluatedKey = queryResponse.lastEvaluatedKey();
    if (lastEvaluatedKey != null && !lastEvaluatedKey.isEmpty()) {
      result.nextToken(paginationTokenSerializer.serialize(lastEvaluatedKey));
    }
    return result;
  }

  @Override
  public Application updateApplication(final UpdateApplicationInput updateApplicationInput,
                                       final String applicationId) {
    log.info("Updating application {} with input {}", applicationId, updateApplicationInput);
    if (updateApplicationInput.getHomePageUrl() == null
          && updateApplicationInput.getDescription() == null
          && updateApplicationInput.getAuthor() == null) {
      throw new BadRequestApiException(new BadRequestException()
            .errorCode("InvalidRequest")
            .message("No update is present."));
    }

    ApplicationRecord applicationRecord = loadApplication(applicationId);
    Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();
    String author = updateApplicationInput.getAuthor();
    String description = updateApplicationInput.getDescription();
    String homePageUrl = updateApplicationInput.getHomePageUrl();
    List<String> updateExpressionList = new ArrayList<>();
    if (author != null) {
      applicationRecord.setAuthor(author);
      expressionAttributeValues.put(":a", AttributeValue.builder().s(author).build());
      updateExpressionList.add(String.format("%s = :a",
            ApplicationRecord.AUTHOR_ATTRIBUTE_NAME));
    }
    if (description != null) {
      applicationRecord.setDescription(description);
      expressionAttributeValues.put(":d", AttributeValue.builder().s(description).build());
      updateExpressionList.add(String.format("%s = :d",
            ApplicationRecord.DESCRIPTION_ATTRIBUTE_NAME));
    }
    if (homePageUrl != null) {
      applicationRecord.setHomePageUrl(homePageUrl);
      expressionAttributeValues.put(":h", AttributeValue.builder().s(homePageUrl).build());
      updateExpressionList.add(String.format("%s = :h",
            ApplicationRecord.HOME_PAGE_URL_ATTRIBUTE_NAME));
    }

    long newVersion = applicationRecord.getVersion() + 1;
    expressionAttributeValues.put(":nv", AttributeValue.builder()
          .n(Long.toString(newVersion))
          .build());
    updateExpressionList.add(String.format("%s = :nv",
          ApplicationRecord.VERSION_ATTRIBUTE_NAME));
    String updateExpression = String.format("SET %s", String.join(",", updateExpressionList));
    expressionAttributeValues.put(":v", AttributeValue.builder()
          .n(applicationRecord.getVersion().toString())
          .build());
    dynamodb.updateItem(UpdateItemRequest.builder()
          .tableName(tableName)
          .key(toKeyRecord(applicationId))
          .updateExpression(updateExpression)
          .expressionAttributeValues(expressionAttributeValues)
          .conditionExpression(String.format("%s = :v", ApplicationRecord.VERSION_ATTRIBUTE_NAME))
          .build());
    return modelMapper.map(applicationRecord, Application.class);
  }

  private ApplicationRecord loadApplication(final String applicationId) {
    Map<String, AttributeValue> applicationMap = dynamodb.getItem(GetItemRequest.builder()
          .tableName(tableName)
          .consistentRead(Boolean.TRUE)
          .key(toKeyRecord(applicationId))
          .build()).item();
    if (applicationMap == null || applicationMap.isEmpty()) {
      throw new NotFoundApiException(new NotFoundException()
            .errorCode("ApplicationNotFound")
            .message(String.format("Application %s can not be found.", applicationId)));
    }
    return new ApplicationRecord(applicationMap);
  }

  private Map<String, AttributeValue> toKeyRecord(final String applicationId) {
    return ApplicationRecord.builder()
          .userId(securityContext.getUserPrincipal().getName())
          .applicationId(applicationId)
          .build()
          .toAttributeMap();
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/DynamoDbStartKeySerializer.java
package software.amazon.serverless.apprepo.api.impl.pagination;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;

import java.io.IOException;
import java.util.Map;

import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;

import org.apache.commons.lang3.StringUtils;

import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

import software.amazon.serverless.apprepo.api.impl.pagination.jackson.AttributeValueDeserializer;
import software.amazon.serverless.apprepo.api.impl.pagination.jackson.AttributeValueSerializer;
import software.amazon.serverless.apprepo.api.impl.pagination.jackson.SdkBytesDeserializer;
import software.amazon.serverless.apprepo.api.impl.pagination.jackson.SdkBytesSerializer;

/**
 * Implementation of {@link TokenSerializer} to serialize/deserialize
 * DynamoDb's pagination keys (LastEvaluatedKey and ExclusiveStartKey)
 * using Jackson.
 * See doc: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination
 */
@RequiredArgsConstructor
public class DynamoDbStartKeySerializer implements TokenSerializer<Map<String, AttributeValue>> {
  private static final ObjectMapper OBJECT_MAPPER;

  static {
    SimpleModule module = new SimpleModule();
    module.addDeserializer(AttributeValue.class, new AttributeValueDeserializer());
    module.addSerializer(AttributeValue.class, new AttributeValueSerializer());
    module.addDeserializer(SdkBytes.class, new SdkBytesDeserializer());
    module.addSerializer(SdkBytes.class, new SdkBytesSerializer());
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.registerModule(module);
    OBJECT_MAPPER = objectMapper;
  }

  @Override
  public Map<String, AttributeValue> deserialize(final String token)
        throws InvalidTokenException {
    if (StringUtils.isBlank(token)) {
      throw new InvalidTokenException("The token is blank.");
    }

    try {
      return OBJECT_MAPPER.readValue(token,
            new TypeReference<Map<String, AttributeValue>>() {
            });
    } catch (IOException e) {
      throw new InvalidTokenException(String.format(
            "Failed to deserialize token %s from Json.", token), e);
    }
  }

  @Override
  @SneakyThrows(JsonProcessingException.class)
  public String serialize(final Map<String, AttributeValue> startKey) {
    return OBJECT_MAPPER.writeValueAsString(startKey);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/EncryptedTokenSerializer.java
package software.amazon.serverless.apprepo.api.impl.pagination;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.services.kms.KmsClient;
import software.amazon.awssdk.services.kms.model.DecryptRequest;
import software.amazon.awssdk.services.kms.model.EncryptRequest;
import software.amazon.awssdk.services.kms.model.InvalidCiphertextException;

/**
 * Implementation of {@link TokenSerializer} that encrypts and decrypts the token
 * using KMS as well as encode and decode the token using Base64.
 *
 * <p>Note, this class uses KMS to encrypt and decrypt directly. KMS encrypt only allows plain text
 * that is smaller than 4096 bytes. If your plain text is larger than 4096 bytes, use envelope
 * encryption with KMS instead. See doc: https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping.
 */
@RequiredArgsConstructor
public class EncryptedTokenSerializer implements TokenSerializer<String> {
  private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;
  private final KmsClient kms;
  private final String keyId;

  @Override
  public String deserialize(final String encodedStartKey) throws InvalidTokenException {
    try {
      return kms.decrypt(DecryptRequest.builder()
            .ciphertextBlob(SdkBytes.fromByteArray(base64Decode(encodedStartKey)))
            .build())
            .plaintext()
            .asUtf8String();
    } catch (InvalidCiphertextException e) {
      throw new InvalidTokenException("Failed to decrypt token:" + encodedStartKey, e);
    }
  }

  @Override
  public String serialize(final String startKey) {
    byte[] plainText = startKey.getBytes(DEFAULT_ENCODING);
    byte[] cipherText = kms.encrypt(EncryptRequest.builder()
          .plaintext(SdkBytes.fromByteArray(plainText))
          .keyId(keyId)
          .build())
          .ciphertextBlob()
          .asByteArray();
    return base64Encode(cipherText);
  }

  private String base64Encode(final byte[] token) {
    // Using UrlEncoder to avoid url unfriendly character in next token.
    return new String(Base64.getUrlEncoder().encode(token), DEFAULT_ENCODING);
  }

  private byte[] base64Decode(final String encodedToken) throws InvalidTokenException {
    if (StringUtils.isBlank(encodedToken)) {
      throw new InvalidTokenException("The token is blank.");
    }
    try {
      return Base64.getUrlDecoder().decode(encodedToken.getBytes(DEFAULT_ENCODING));
    } catch (IllegalArgumentException e) {
      throw new InvalidTokenException(String.format(
            "Failed to base64 decode token %s", encodedToken), e);
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/InvalidTokenException.java
package software.amazon.serverless.apprepo.api.impl.pagination;

/**
 * Exception for invalid token.
 */
public class InvalidTokenException extends Exception {
  public InvalidTokenException(final String message) {
    super(message);
  }

  public InvalidTokenException(final String message, final Exception exception) {
    super(message, exception);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/PaginationTokenSerializer.java
package software.amazon.serverless.apprepo.api.impl.pagination;

import java.util.Map;

import javax.inject.Inject;

import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
import software.amazon.awssdk.services.kms.KmsClient;

import software.amazon.serverless.apprepo.container.config.ConfigProvider;

/**
 * Implementation of {@link TokenSerializer} to serialize/deserialize
 * pagination token for List APIs.
 *
 * <p>It chians {@link DynamoDbStartKeySerializer}, {@link TimeBasedTokenSerializer}
 * and {@link EncryptedTokenSerializer} to serialize/deserialize a DynamoDb start key
 * to a String token that is URL friendly.
 *
 * <p>Serialize flow:
 * DynamoDb start key -> Json string -> Json String with TTL -> base64 encoded cipher text (Token)
 *
 * <p>Deserialize flow:
 * Token -> Base64 decoded plaintext -> Json String with TTL -> Json String -> DynamoDb start key
 */
public class PaginationTokenSerializer implements TokenSerializer<Map<String, AttributeValue>> {
  private final TokenSerializer<Map<String, AttributeValue>> dynamoDbStartKeySerializer;
  private final TokenSerializer<String> timeBasedTokenSerializer;
  private final TokenSerializer<String> encryptedTokenSerializer;

  /**
   * Construct PaginationTokenSerializer from KmsClient and ConfigProvider.
   *
   * @param kms            KmsClient for token encryption and decryption.
   * @param configProvider ConfigProvider to provide configuration values.
   */
  @Inject
  public PaginationTokenSerializer(final KmsClient kms, final ConfigProvider configProvider) {
    this.dynamoDbStartKeySerializer = new DynamoDbStartKeySerializer();
    this.timeBasedTokenSerializer = new TimeBasedTokenSerializer(
          configProvider.getPaginationTokenTtl());
    this.encryptedTokenSerializer = new EncryptedTokenSerializer(
          kms, configProvider.getKmsKeyId());
  }

  @Override
  public Map<String, AttributeValue> deserialize(final String token)
        throws InvalidTokenException {
    String plaintext = encryptedTokenSerializer.deserialize(token);
    String json = timeBasedTokenSerializer.deserialize(plaintext);
    return dynamoDbStartKeySerializer.deserialize(json);
  }

  @Override
  public String serialize(final Map<String, AttributeValue> startKey) {
    String json = dynamoDbStartKeySerializer.serialize(startKey);
    String jsonWithTtl = timeBasedTokenSerializer.serialize(json);
    return encryptedTokenSerializer.serialize(jsonWithTtl);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/TimeBasedTokenSerializer.java
package software.amazon.serverless.apprepo.api.impl.pagination;

import java.time.Duration;
import java.time.Instant;
import java.time.format.DateTimeParseException;

import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;

/**
 * Implementation of {@link TokenSerializer} that adds time information
 * to ensure the token will expire.
 */
@RequiredArgsConstructor
public class TimeBasedTokenSerializer implements TokenSerializer<String> {
  static final String TIMESTAMP_DEMILITER = "&";

  private final Duration ttl;

  @Override
  public String deserialize(final String token) throws InvalidTokenException {
    validateTimestamp(token);
    String decodedToken = StringUtils.substringBeforeLast(token, TIMESTAMP_DEMILITER);
    if (StringUtils.isBlank(decodedToken)) {
      throw new InvalidTokenException("The token is blank.");
    }
    return decodedToken;
  }

  @Override
  public String serialize(final String token) {
    StringBuilder tokenBuilder = new StringBuilder(token);
    tokenBuilder.append(TIMESTAMP_DEMILITER);
    tokenBuilder.append(Instant.now().toString());
    return tokenBuilder.toString();
  }

  private void validateTimestamp(final String tokenString) throws InvalidTokenException {
    String timestampString = StringUtils.substringAfterLast(tokenString, TIMESTAMP_DEMILITER);
    Instant timestamp;
    try {
      timestamp = Instant.parse(timestampString);
    } catch (DateTimeParseException e) {
      throw new InvalidTokenException(
            String.format("Invalid timestamp string %s in token.", timestampString), e);
    }

    if (timestamp.plus(ttl).isBefore(Instant.now())) {
      throw new InvalidTokenException(
            String.format("Token %s has expired after timeout limit %s.", timestamp, ttl));
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/TokenSerializer.java
package software.amazon.serverless.apprepo.api.impl.pagination;

/**
 * Serialize/deserialize a token to/from a String.
 *
 * @param <T> type of the token
 */
public interface TokenSerializer<T> {
  /**
   * Deserialize the token into type T.
   *
   * @param tokenString token in String.
   * @return deserialized token.
   * @throws InvalidTokenException throws when the token in String is invalid.
   */
  T deserialize(String tokenString) throws InvalidTokenException;

  /**
   * Serialize the token into a String.
   *
   * @param token the token to be serialized.
   * @return serialized token in String.
   */
  String serialize(T token);
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/AttributeValueDeserializer.java
package software.amazon.serverless.apprepo.api.impl.pagination.jackson;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

/**
 * Jackson Json Deserializer for {@link AttributeValue}.
 */
public class AttributeValueDeserializer extends JsonDeserializer<AttributeValue> {

  @Override
  public AttributeValue deserialize(JsonParser jsonParser,
                                    DeserializationContext deserializationContext)
        throws IOException, JsonProcessingException {
    ObjectCodec oc = jsonParser.getCodec();
    JsonNode node = oc.readTree(jsonParser);

    AttributeValue.Builder result = AttributeValue.builder();
    JsonNode value;
    value = node.get("s");
    if (value != null) {
      result.s(value.asText());
      return result.build();
    }

    value = node.get("n");
    if (value != null) {
      result.n(Long.toString(value.asLong()));
      return result.build();
    }

    value = node.get("b");
    if (value != null) {
      result.b(SdkBytes.fromUtf8String(value.asText()));
      return result.build();
    }

    value = node.get("ss");
    if (value != null) {
      result.ss(oc.treeToValue(value, List.class));
      return result.build();
    }

    value = node.get("ns");
    if (value != null) {
      result.ns(oc.treeToValue(value, List.class));
      return result.build();
    }

    value = node.get("bs");
    if (value != null) {
      Iterator<JsonNode> iterator = value.iterator();
      List<SdkBytes> values = new ArrayList<>();
      while (iterator.hasNext()) {
        values.add(oc.treeToValue(iterator.next(), SdkBytes.class));
      }
      result.bs(values);
      return result.build();
    }

    value = node.get("m");
    if (value != null) {
      Iterator<String> iterator = value.fieldNames();
      Map<String, AttributeValue> values = new HashMap<>();
      while (iterator.hasNext()) {
        String fieldName = iterator.next();
        values.put(fieldName, oc.treeToValue(value.get(fieldName), AttributeValue.class));
      }
      result.m(values);
      return result.build();
    }

    value = node.get("l");
    if (value != null) {
      Iterator<JsonNode> iterator = value.iterator();
      List<AttributeValue> values = new ArrayList<>();
      while (iterator.hasNext()) {
        values.add(oc.treeToValue(iterator.next(), AttributeValue.class));
      }
      result.l(values);
      return result.build();
    }

    value = node.get("bool");
    if (value != null) {
      result.bool(value.asBoolean());
      return result.build();
    }

    value = node.get("nul");
    if (value != null) {
      result.nul(value.asBoolean());
      return result.build();
    }

    return result.build();
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/AttributeValueSerializer.java
package software.amazon.serverless.apprepo.api.impl.pagination.jackson;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

/**
 * Jackson Json Serializer for {@link AttributeValue}.
 */
public class AttributeValueSerializer extends JsonSerializer<AttributeValue> {
  @Override
  public void serialize(AttributeValue attributeValue, JsonGenerator jsonGenerator,
                        SerializerProvider serializerProvider) throws IOException {
    jsonGenerator.writeStartObject();

    if (attributeValue.s() != null) {
      jsonGenerator.writeStringField("s", attributeValue.s());
      jsonGenerator.writeEndObject();
      return;
    }

    if (attributeValue.n() != null) {
      jsonGenerator.writeStringField("n", attributeValue.n());
      jsonGenerator.writeEndObject();
      return;
    }

    if (attributeValue.b() != null) {
      jsonGenerator.writeStringField("b", attributeValue.b().asUtf8String());
      jsonGenerator.writeEndObject();
      return;
    }

    List<String> ss = attributeValue.ss();
    if (ss != null && !ss.isEmpty()) {
      jsonGenerator.writeObjectField("ss", attributeValue.ss());
      jsonGenerator.writeEndObject();
      return;
    }

    List<String> ns = attributeValue.ns();
    if (ns != null && !ns.isEmpty()) {
      jsonGenerator.writeObjectField("ns", attributeValue.ns());
      jsonGenerator.writeEndObject();
      return;
    }

    List<SdkBytes> bs = attributeValue.bs();
    if (bs != null && !bs.isEmpty()) {
      jsonGenerator.writeObjectField("bs", attributeValue.bs());
      jsonGenerator.writeEndObject();
      return;
    }

    Map<String, AttributeValue> mapValue = attributeValue.m();
    if (mapValue != null && !mapValue.isEmpty()) {
      jsonGenerator.writeObjectField("m", attributeValue.m());
      jsonGenerator.writeEndObject();
      return;
    }

    List<AttributeValue> attributeValueList = attributeValue.l();
    if (attributeValueList != null && !attributeValueList.isEmpty()) {
      jsonGenerator.writeArrayFieldStart("l");
      for (AttributeValue s : attributeValue.l()) {
        jsonGenerator.writeObject(s);
      }
      jsonGenerator.writeEndArray();
      jsonGenerator.writeEndObject();
      return;
    }

    if (attributeValue.bool() != null) {
      jsonGenerator.writeBooleanField("bool", attributeValue.bool());
      jsonGenerator.writeEndObject();
      return;
    }

    if (attributeValue.nul() != null) {
      jsonGenerator.writeBooleanField("nul", attributeValue.nul());
      jsonGenerator.writeEndObject();
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/SdkBytesDeserializer.java
package software.amazon.serverless.apprepo.api.impl.pagination.jackson;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;

import java.io.IOException;
import java.nio.charset.Charset;

import lombok.RequiredArgsConstructor;
import software.amazon.awssdk.core.SdkBytes;

/**
 * Jackson Json Deserializer for {@link SdkBytes}.
 */
@RequiredArgsConstructor
public class SdkBytesDeserializer extends JsonDeserializer<SdkBytes> {
  private final Charset charset;

  /**
   * Construct SdkBytesDeserializer using default charset.
   */
  public SdkBytesDeserializer() {
    this(Charset.defaultCharset());
  }

  @Override
  public SdkBytes deserialize(JsonParser jsonParser,
                              DeserializationContext deserializationContext)
        throws IOException, JsonProcessingException {
    return SdkBytes.fromString(jsonParser.getValueAsString(), charset);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/api/impl/pagination/jackson/SdkBytesSerializer.java
package software.amazon.serverless.apprepo.api.impl.pagination.jackson;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;

import java.io.IOException;
import java.nio.charset.Charset;

import lombok.RequiredArgsConstructor;
import software.amazon.awssdk.core.SdkBytes;

/**
 * Jackson Json Serializer for {@link SdkBytes}.
 */
@RequiredArgsConstructor
public class SdkBytesSerializer extends JsonSerializer<SdkBytes> {
  private final Charset charset;

  /**
   * Construct SdkBytesSerializer using default charset.
   */
  public SdkBytesSerializer() {
    this(Charset.defaultCharset());
  }

  @Override
  public void serialize(SdkBytes sdkBytes, JsonGenerator jsonGenerator,
                        SerializerProvider serializerProvider) throws IOException {
    jsonGenerator.writeString(sdkBytes.asString(charset));
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/ApiLambdaHandler.java
package software.amazon.serverless.apprepo.container;

import com.amazonaws.serverless.proxy.jersey.JerseyLambdaContainerHandler;
import com.amazonaws.serverless.proxy.model.AwsProxyRequest;
import com.amazonaws.serverless.proxy.model.AwsProxyResponse;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestStreamHandler;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Map;

import javax.inject.Singleton;

import org.glassfish.hk2.api.TypeLiteral;
import org.glassfish.hk2.utilities.binding.AbstractBinder;
import org.glassfish.jersey.jackson.JacksonFeature;
import org.glassfish.jersey.server.ResourceConfig;

import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
import software.amazon.awssdk.services.kms.KmsClient;

import software.amazon.serverless.apprepo.api.exception.ApiExceptionMapper;
import software.amazon.serverless.apprepo.api.impl.ApplicationsService;
import software.amazon.serverless.apprepo.api.impl.pagination.PaginationTokenSerializer;
import software.amazon.serverless.apprepo.api.impl.pagination.TokenSerializer;
import software.amazon.serverless.apprepo.container.config.ConfigProvider;
import software.amazon.serverless.apprepo.container.factory.DynamoDbClientFactory;
import software.amazon.serverless.apprepo.container.factory.KmsClientFactory;
import software.amazon.serverless.apprepo.container.factory.SsmConfigProviderFactory;

/**
 * API Lambda handler. This is the entry point for the API Lambda.
 */
public class ApiLambdaHandler implements RequestStreamHandler {
  private static final ResourceConfig jerseyApplication = new ResourceConfig()
        .registerClasses(ApplicationsService.class, ApiExceptionMapper.class,
                CorsHeadersResponseFilter.class)
        .register(JacksonFeature.class)
        .register(new AbstractBinder() {
          @Override
          protected void configure() {
            bindFactory(DynamoDbClientFactory.class)
                  .to(DynamoDbClient.class).in(Singleton.class);
            bindFactory(SsmConfigProviderFactory.class)
                  .to(ConfigProvider.class).in(Singleton.class);
            bindFactory(KmsClientFactory.class)
                  .to(KmsClient.class).in(Singleton.class);
            bind(PaginationTokenSerializer.class)
                  .to(new TypeLiteral<TokenSerializer<Map<String, AttributeValue>>>() {
                  })
                  .in(Singleton.class);
          }
        });

  private static final JerseyLambdaContainerHandler<AwsProxyRequest, AwsProxyResponse> handler
        = JerseyLambdaContainerHandler.getAwsProxyHandler(jerseyApplication);

  @Override
  public void handleRequest(InputStream inputStream, OutputStream outputStream, Context context)
        throws IOException {
    handler.proxyStream(inputStream, outputStream, context);
  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/CorsHeadersResponseFilter.java
package software.amazon.serverless.apprepo.container;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerResponseContext;
import javax.ws.rs.container.ContainerResponseFilter;
import javax.ws.rs.ext.Provider;

import lombok.extern.slf4j.Slf4j;

/**
 * Request filter to support CORS.
 */
@Provider
@Slf4j
public class CorsHeadersResponseFilter implements ContainerResponseFilter {
  @Override
  public void filter(ContainerRequestContext requestContext,
                     ContainerResponseContext responseContext) {
    String origin = "*";
    log.info("Set CORS header to allow request from {}", origin);
    responseContext.getHeaders().add("Access-Control-Allow-Origin", origin);
  }
}
--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/config/ConfigProvider.java
package software.amazon.serverless.apprepo.container.config;

import java.time.Duration;

/**
 * Provides configuration value based on name.
 */
public interface ConfigProvider {
  /**
   * Get Applications DynamoDB Table name.
   *
   * @return String
   */
  String getApplicationsTableName();

  /**
   * Get KMS key id.
   *
   * @return key id String.
   */
  String getKmsKeyId();

  /**
   * Get pagination token ttl.
   *
   * @return ttl duration.
   */
  Duration getPaginationTokenTtl();
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/config/Env.java
package software.amazon.serverless.apprepo.container.config;

/**
 * System environment variable helper class.
 */
public final class Env {
  private static String getEnv(final String key) {
    return System.getenv(key);
  }

  private static String getStage() {
    return getEnv("STAGE");
  }

  public static String getSsmConfigKeyPrefix() {
    return String.format("/applications/apprepo/%s/", getStage());
  }

  public static String getRegion() {
    return getEnv("AWS_REGION");
  }

}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/config/SsmConfigProvider.java
package software.amazon.serverless.apprepo.container.config;

import java.time.Duration;

import lombok.RequiredArgsConstructor;
import software.amazon.awssdk.services.ssm.model.ParameterNotFoundException;
import software.amazon.serverless.ssmcachingclient.SsmParameterCachingClient;

/**
 * Provide config value from AWS SSM.
 */
@RequiredArgsConstructor
public class SsmConfigProvider implements ConfigProvider {
  private static final Duration DEFAULT_PAGINATION_TOKEN_TTL = Duration.ofHours(1);
  private static final String APPLICATIONS_TABLE_NAME_CONFIG_KEY = "ddb/Applications/TableName";
  private static final String KMS_KEY_ID_CONFIG_KEY = "kms/pagination/KeyId";
  private static final String PAGINATION_TOKEN_TTL_IN_SECONDS_CONFIG_KEY =
        "configuration/pagination/TtlInSeconds";

  private final SsmParameterCachingClient ssm;

  @Override
  public String getApplicationsTableName() {
    return ssm.getAsString(APPLICATIONS_TABLE_NAME_CONFIG_KEY);
  }

  @Override
  public String getKmsKeyId() {
    return ssm.getAsString(KMS_KEY_ID_CONFIG_KEY);
  }

  @Override
  public Duration getPaginationTokenTtl() {
    try {
      String ttlString = ssm.getAsString(PAGINATION_TOKEN_TTL_IN_SECONDS_CONFIG_KEY);
      return Duration.ofSeconds(Long.parseLong(ttlString));
    } catch (ParameterNotFoundException e) {
      return DEFAULT_PAGINATION_TOKEN_TTL;
    }
  }
}
--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/factory/DynamoDbClientFactory.java
package software.amazon.serverless.apprepo.container.factory;

import java.time.Duration;

import org.glassfish.hk2.api.Factory;

import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration;
import software.amazon.awssdk.core.retry.RetryPolicy;
import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;

import software.amazon.serverless.apprepo.container.config.Env;

/**
 * Factory for {@link DynamoDbClient} for HK2 DI wiring.
 */
public class DynamoDbClientFactory implements Factory<DynamoDbClient> {
  // Creating the DynamoDB client followed AWS SDK v2 best practice to improve Lambda performance:
  // https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/client-configuration-starttime.html
  private static final DynamoDbClient dynamoDbClient = DynamoDbClient.builder()
        .region(Region.of(Env.getRegion()))
        .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
        .overrideConfiguration(ClientOverrideConfiguration.builder()
              .apiCallAttemptTimeout(Duration.ofSeconds(1))
              .retryPolicy(RetryPolicy.builder().numRetries(10).build())
              .build())
        .httpClientBuilder(UrlConnectionHttpClient.builder()).build();

  @Override
  public DynamoDbClient provide() {
    return dynamoDbClient;
  }

  @Override
  public void dispose(DynamoDbClient dynamoDbClient) {

  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/factory/KmsClientFactory.java
package software.amazon.serverless.apprepo.container.factory;

import org.glassfish.hk2.api.Factory;

import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.kms.KmsClient;

import software.amazon.serverless.apprepo.container.config.Env;

/**
 * Factory for {@link KmsClient} for HK2 DI wiring.
 */
public class KmsClientFactory implements Factory<KmsClient> {
  // Creating the DynamoDB client followed AWS SDK v2 best practice to improve Lambda performance:
  // https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/client-configuration-starttime.html
  private static final KmsClient kmsClient = KmsClient.builder()
        .region(Region.of(Env.getRegion()))
        .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
        .httpClientBuilder(UrlConnectionHttpClient.builder()).build();

  @Override
  public KmsClient provide() {
    return kmsClient;
  }

  @Override
  public void dispose(KmsClient kmsClient) {

  }
}

--#

--% /realworld-serverless-application/backend/src/main/java/software/amazon/serverless/apprepo/container/factory/SsmConfigProviderFactory.java
package software.amazon.serverless.apprepo.container.factory;

import java.time.Duration;

import org.glassfish.hk2.api.Factory;

import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ssm.SsmClient;

import software.amazon.serverless.apprepo.container.config.ConfigProvider;
import software.amazon.serverless.apprepo.container.config.Env;
import software.amazon.serverless.apprepo.container.config.SsmConfigProvider;
import software.amazon.serverless.ssmcachingclient.SsmParameterCachingClient;

/**
 * Factory for {@link SsmConfigProvider} for HK2 DI wiring.
 */
public class SsmConfigProviderFactory implements Factory<ConfigProvider> {
  private static final ConfigProvider configProvider;

  static {
    SsmClient ssm = SsmClient.builder()
          .region(Region.of(Env.getRegion()))
          .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
          .httpClientBuilder(UrlConnectionHttpClient.builder())
          .build();
    configProvider = new SsmConfigProvider(new SsmParameterCachingClient(ssm,
          Duration.ofMinutes(5), Env.getSsmConfigKeyPrefix()));
  }

  @Override
  public ConfigProvider provide() {
    return configProvider;
  }

  @Override
  public void dispose(ConfigProvider configProvider) {

  }
}

--#

--% /realworld-serverless-application/backend/src/main/resources/log4j.properties
log=.
log4j.rootLogger=INFO, LAMBDA
#Define the LAMBDA appender
log4j.appender.LAMBDA=com.amazonaws.services.lambda.runtime.log4j.LambdaAppender
log4j.appender.LAMBDA.layout=org.apache.log4j.PatternLayout
log4j.appender.LAMBDA.layout.conversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} <%X{AWSRequestId}> [%t] %-5p %c{1}:%L - %m%n

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AbstractAWSServerlessApplicationRepository.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client;

import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsResult;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationResult;

import javax.annotation.Generated;

/**
 * Abstract implementation of {@code AWSServerlessApplicationRepository}.
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class AbstractAWSServerlessApplicationRepository implements AWSServerlessApplicationRepository {

  protected AbstractAWSServerlessApplicationRepository() {
  }

  @Override
  public CreateApplicationResult createApplication(CreateApplicationRequest request) {
    throw new java.lang.UnsupportedOperationException();
  }

  @Override
  public DeleteApplicationResult deleteApplication(DeleteApplicationRequest request) {
    throw new java.lang.UnsupportedOperationException();
  }

  @Override
  public GetApplicationResult getApplication(GetApplicationRequest request) {
    throw new java.lang.UnsupportedOperationException();
  }

  @Override
  public ListApplicationsResult listApplications(ListApplicationsRequest request) {
    throw new java.lang.UnsupportedOperationException();
  }

  @Override
  public UpdateApplicationResult updateApplication(UpdateApplicationRequest request) {
    throw new java.lang.UnsupportedOperationException();
  }

  @Override
  public void shutdown() {
    throw new java.lang.UnsupportedOperationException();
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepository.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client;

import software.amazon.serverless.apprepo.api.client.model.BadRequestException;
import software.amazon.serverless.apprepo.api.client.model.ConflictException;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.InternalServerErrorException;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsResult;
import software.amazon.serverless.apprepo.api.client.model.NotFoundException;
import software.amazon.serverless.apprepo.api.client.model.TooManyRequestsException;
import software.amazon.serverless.apprepo.api.client.model.UnauthorizedException;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationResult;

import javax.annotation.Generated;

/**
 * Interface for accessing AWSServerlessApplicationRepository.
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public interface AWSServerlessApplicationRepository {

  /**
   * @param createApplicationRequest
   * @return Result of the CreateApplication operation returned by the service.
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @throws ConflictException
   * @sample AWSServerlessApplicationRepository.CreateApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/CreateApplication"
   *      target="_top">AWS API Documentation</a>
   */
  CreateApplicationResult createApplication(CreateApplicationRequest createApplicationRequest);

  /**
   * @param deleteApplicationRequest
   * @return Result of the DeleteApplication operation returned by the service.
   * @throws NotFoundException
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.DeleteApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/DeleteApplication"
   *      target="_top">AWS API Documentation</a>
   */
  DeleteApplicationResult deleteApplication(DeleteApplicationRequest deleteApplicationRequest);

  /**
   * @param getApplicationRequest
   * @return Result of the GetApplication operation returned by the service.
   * @throws NotFoundException
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.GetApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/GetApplication" target="_top">AWS
   *      API Documentation</a>
   */
  GetApplicationResult getApplication(GetApplicationRequest getApplicationRequest);

  /**
   * @param listApplicationsRequest
   * @return Result of the ListApplications operation returned by the service.
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.ListApplications
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/ListApplications" target="_top">AWS
   *      API Documentation</a>
   */
  ListApplicationsResult listApplications(ListApplicationsRequest listApplicationsRequest);

  /**
   * @param updateApplicationRequest
   * @return Result of the UpdateApplication operation returned by the service.
   * @throws NotFoundException
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.UpdateApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/UpdateApplication"
   *      target="_top">AWS API Documentation</a>
   */
  UpdateApplicationResult updateApplication(UpdateApplicationRequest updateApplicationRequest);

  /**
   * @return Create new instance of builder with all defaults set.
   */
  public static AWSServerlessApplicationRepositoryClientBuilder builder() {
    return new AWSServerlessApplicationRepositoryClientBuilder();
  }

  /**
   * Shuts down this client object, releasing any resources that might be held open. This is an optional method, and
   * callers are not expected to call it, but can if they want to explicitly release any open resources. Once a client
   * has been shutdown, it should not be used to make any more requests.
   */
  void shutdown();

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClient.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client;

import com.amazonaws.SdkBaseException;
import com.amazonaws.annotation.ThreadSafe;
import com.amazonaws.client.AwsSyncClientParams;
import com.amazonaws.client.ClientExecutionParams;
import com.amazonaws.client.ClientHandler;
import com.amazonaws.client.ClientHandlerParams;
import com.amazonaws.http.HttpResponseHandler;
import com.amazonaws.opensdk.protect.client.SdkClientHandler;
import com.amazonaws.protocol.json.JsonClientMetadata;
import com.amazonaws.protocol.json.JsonErrorResponseMetadata;
import com.amazonaws.protocol.json.JsonErrorShapeMetadata;
import com.amazonaws.protocol.json.JsonOperationMetadata;
import software.amazon.serverless.apprepo.api.client.model.BadRequestException;
import software.amazon.serverless.apprepo.api.client.model.ConflictException;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.InternalServerErrorException;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsResult;
import software.amazon.serverless.apprepo.api.client.model.NotFoundException;
import software.amazon.serverless.apprepo.api.client.model.TooManyRequestsException;
import software.amazon.serverless.apprepo.api.client.model.UnauthorizedException;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.transform.CreateApplicationRequestProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.CreateApplicationResultJsonUnmarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.DeleteApplicationRequestProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.DeleteApplicationResultJsonUnmarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.GetApplicationRequestProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.GetApplicationResultJsonUnmarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.ListApplicationsRequestProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.ListApplicationsResultJsonUnmarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.UpdateApplicationRequestProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.transform.UpdateApplicationResultJsonUnmarshaller;

import java.util.Arrays;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.AWSServerlessApplicationRepositoryException;

/**
 * Client for accessing AWSServerlessApplicationRepository. All service calls made using this client are blocking, and
 * will not return until the service call completes.
 * <p>
 *
 */
@ThreadSafe
@Generated("com.amazonaws:aws-java-sdk-code-generator")
class AWSServerlessApplicationRepositoryClient implements AWSServerlessApplicationRepository {

  private final ClientHandler clientHandler;

  private static final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory = new com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl(
          new JsonClientMetadata()
                  .withProtocolVersion("1.1")
                  .withSupportsCbor(false)
                  .withSupportsIon(false)
                  .withContentTypeOverride("application/json")
                  .addErrorMetadata(
                          new JsonErrorShapeMetadata().withErrorCode("ConflictException").withModeledClass(
                                  ConflictException.class))
                  .addErrorMetadata(
                          new JsonErrorShapeMetadata().withErrorCode("NotFoundException").withModeledClass(
                                  NotFoundException.class))
                  .addErrorMetadata(
                          new JsonErrorShapeMetadata().withErrorCode("TooManyRequestsException").withModeledClass(
                                  TooManyRequestsException.class))
                  .addErrorMetadata(
                          new JsonErrorShapeMetadata().withErrorCode("UnauthorizedException").withModeledClass(
                                  UnauthorizedException.class))
                  .addErrorMetadata(
                          new JsonErrorShapeMetadata().withErrorCode("BadRequestException").withModeledClass(
                                  BadRequestException.class))
                  .addErrorMetadata(
                          new JsonErrorShapeMetadata().withErrorCode("InternalServerErrorException").withModeledClass(
                                  InternalServerErrorException.class))
                  .withBaseServiceExceptionClass(AWSServerlessApplicationRepositoryException.class));

  /**
   * Constructs a new client to invoke service methods on AWSServerlessApplicationRepository using the specified
   * parameters.
   *
   * <p>
   * All service calls made using this new client object are blocking, and will not return until the service call
   * completes.
   *
   * @param clientParams
   *        Object providing client parameters.
   */
  AWSServerlessApplicationRepositoryClient(AwsSyncClientParams clientParams) {
    this.clientHandler = new SdkClientHandler(new ClientHandlerParams().withClientParams(clientParams));
  }

  /**
   * @param createApplicationRequest
   * @return Result of the CreateApplication operation returned by the service.
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @throws ConflictException
   * @sample AWSServerlessApplicationRepository.CreateApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/CreateApplication"
   *      target="_top">AWS API Documentation</a>
   */
  @Override
  public CreateApplicationResult createApplication(CreateApplicationRequest createApplicationRequest) {
    HttpResponseHandler<CreateApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
            .withHasStreamingSuccessResponse(false), new CreateApplicationResultJsonUnmarshaller());

    HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
            new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                    .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
            new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                    .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500),
            new JsonErrorShapeMetadata().withModeledClass(ConflictException.class).withHttpStatusCode(409));

    return clientHandler.execute(new ClientExecutionParams<CreateApplicationRequest, CreateApplicationResult>()
            .withMarshaller(new CreateApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
            .withErrorResponseHandler(errorResponseHandler).withInput(createApplicationRequest));
  }

  /**
   * @param deleteApplicationRequest
   * @return Result of the DeleteApplication operation returned by the service.
   * @throws NotFoundException
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.DeleteApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/DeleteApplication"
   *      target="_top">AWS API Documentation</a>
   */
  @Override
  public DeleteApplicationResult deleteApplication(DeleteApplicationRequest deleteApplicationRequest) {
    HttpResponseHandler<DeleteApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
            .withHasStreamingSuccessResponse(false), new DeleteApplicationResultJsonUnmarshaller());

    HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
            new JsonErrorShapeMetadata().withModeledClass(NotFoundException.class).withHttpStatusCode(404),
            new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                    .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
            new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                    .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

    return clientHandler.execute(new ClientExecutionParams<DeleteApplicationRequest, DeleteApplicationResult>()
            .withMarshaller(new DeleteApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
            .withErrorResponseHandler(errorResponseHandler).withInput(deleteApplicationRequest));
  }

  /**
   * @param getApplicationRequest
   * @return Result of the GetApplication operation returned by the service.
   * @throws NotFoundException
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.GetApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/GetApplication" target="_top">AWS
   *      API Documentation</a>
   */
  @Override
  public GetApplicationResult getApplication(GetApplicationRequest getApplicationRequest) {
    HttpResponseHandler<GetApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
            .withHasStreamingSuccessResponse(false), new GetApplicationResultJsonUnmarshaller());

    HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
            new JsonErrorShapeMetadata().withModeledClass(NotFoundException.class).withHttpStatusCode(404),
            new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                    .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
            new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                    .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

    return clientHandler.execute(new ClientExecutionParams<GetApplicationRequest, GetApplicationResult>()
            .withMarshaller(new GetApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
            .withErrorResponseHandler(errorResponseHandler).withInput(getApplicationRequest));
  }

  /**
   * @param listApplicationsRequest
   * @return Result of the ListApplications operation returned by the service.
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.ListApplications
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/ListApplications" target="_top">AWS
   *      API Documentation</a>
   */
  @Override
  public ListApplicationsResult listApplications(ListApplicationsRequest listApplicationsRequest) {
    HttpResponseHandler<ListApplicationsResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
            .withHasStreamingSuccessResponse(false), new ListApplicationsResultJsonUnmarshaller());

    HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
            new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                    .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
            new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                    .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

    return clientHandler.execute(new ClientExecutionParams<ListApplicationsRequest, ListApplicationsResult>()
            .withMarshaller(new ListApplicationsRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
            .withErrorResponseHandler(errorResponseHandler).withInput(listApplicationsRequest));
  }

  /**
   * @param updateApplicationRequest
   * @return Result of the UpdateApplication operation returned by the service.
   * @throws NotFoundException
   * @throws TooManyRequestsException
   * @throws BadRequestException
   * @throws UnauthorizedException
   * @throws InternalServerErrorException
   * @sample AWSServerlessApplicationRepository.UpdateApplication
   * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/UpdateApplication"
   *      target="_top">AWS API Documentation</a>
   */
  @Override
  public UpdateApplicationResult updateApplication(UpdateApplicationRequest updateApplicationRequest) {
    HttpResponseHandler<UpdateApplicationResult> responseHandler = protocolFactory.createResponseHandler(new JsonOperationMetadata().withPayloadJson(true)
            .withHasStreamingSuccessResponse(false), new UpdateApplicationResultJsonUnmarshaller());

    HttpResponseHandler<SdkBaseException> errorResponseHandler = createErrorResponseHandler(
            new JsonErrorShapeMetadata().withModeledClass(NotFoundException.class).withHttpStatusCode(404),
            new JsonErrorShapeMetadata().withModeledClass(TooManyRequestsException.class).withHttpStatusCode(429), new JsonErrorShapeMetadata()
                    .withModeledClass(BadRequestException.class).withHttpStatusCode(400),
            new JsonErrorShapeMetadata().withModeledClass(UnauthorizedException.class).withHttpStatusCode(401), new JsonErrorShapeMetadata()
                    .withModeledClass(InternalServerErrorException.class).withHttpStatusCode(500));

    return clientHandler.execute(new ClientExecutionParams<UpdateApplicationRequest, UpdateApplicationResult>()
            .withMarshaller(new UpdateApplicationRequestProtocolMarshaller(protocolFactory)).withResponseHandler(responseHandler)
            .withErrorResponseHandler(errorResponseHandler).withInput(updateApplicationRequest));
  }

  /**
   * Create the error response handler for the operation.
   *
   * @param errorShapeMetadata
   *        Error metadata for the given operation
   * @return Configured error response handler to pass to HTTP layer
   */
  private HttpResponseHandler<SdkBaseException> createErrorResponseHandler(JsonErrorShapeMetadata... errorShapeMetadata) {
    return protocolFactory.createErrorResponseHandler(new JsonErrorResponseMetadata().withErrorShapes(Arrays.asList(errorShapeMetadata)));
  }

  @Override
  public void shutdown() {
    clientHandler.shutdown();
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/AWSServerlessApplicationRepositoryClientBuilder.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client;

import com.amazonaws.Protocol;
import com.amazonaws.annotation.NotThreadSafe;
import com.amazonaws.client.AwsSyncClientParams;
import com.amazonaws.opensdk.internal.config.ApiGatewayClientConfigurationFactory;
import com.amazonaws.opensdk.protect.client.SdkSyncClientBuilder;
import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;
import com.amazonaws.util.RuntimeHttpUtils;

import java.net.URI;
import javax.annotation.Generated;

/**
 * Fluent builder for {@link AWSServerlessApplicationRepository}.
 *
 * @see AWSServerlessApplicationRepository#builder
 **/
@NotThreadSafe
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public final class AWSServerlessApplicationRepositoryClientBuilder extends
        SdkSyncClientBuilder<AWSServerlessApplicationRepositoryClientBuilder, AWSServerlessApplicationRepository> {

  private static final URI DEFAULT_ENDPOINT = RuntimeHttpUtils.toUri("xxx.execute-api.us-east-1.amazonaws.com", Protocol.HTTPS);
  private static final String DEFAULT_REGION = "us-east-1";

  /**
   * Package private constructor - builder should be created via {@link AWSServerlessApplicationRepository#builder()}
   */
  AWSServerlessApplicationRepositoryClientBuilder() {
    super(new ApiGatewayClientConfigurationFactory());
  }

  /**
   * Specify an implementation of the CognitoAuthorizer to be used during signing
   *
   * @param requestSigner
   *        the requestSigner implementation to use
   * @return This object for method chaining.
   */
  public AWSServerlessApplicationRepositoryClientBuilder signer(CognitoAuthorizer requestSigner) {
    return signer(requestSigner, CognitoAuthorizer.class);
  }

  /**
   * Specify an implementation of the CognitoAuthorizer to be used during signing
   *
   * @param requestSigner
   *        the requestSigner implementation to use
   */
  public void setSigner(CognitoAuthorizer requestSigner) {
    signer(requestSigner);
  }

  /**
   * Construct a synchronous implementation of AWSServerlessApplicationRepository using the current builder
   * configuration.
   *
   * @param params
   *        Current builder configuration represented as a parameter object.
   * @return Fully configured implementation of AWSServerlessApplicationRepository.
   */
  @Override
  protected AWSServerlessApplicationRepository build(AwsSyncClientParams params) {
    return new AWSServerlessApplicationRepositoryClient(params);
  }

  @Override
  protected URI defaultEndpoint() {
    return DEFAULT_ENDPOINT;
  }

  @Override
  protected String defaultRegion() {
    return DEFAULT_REGION;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/package-info.java
/**
 *
 */

/**
 *
 */
package software.amazon.serverless.apprepo.api.client;


--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/auth/CognitoAuthorizer.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.auth;

import com.amazonaws.ImmutableRequest;
import com.amazonaws.SignableRequest;
import com.amazonaws.auth.RequestSigner;
import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepositoryClientBuilder;

import javax.annotation.Generated;

/**
 * A default implementation of {@link RequestSigner} that puts a generated token into the header. An implementation of
 * this can to be supplied during construction of a {@link AWSServerlessApplicationRepository} via
 * {@link AWSServerlessApplicationRepositoryClientBuilder#signer(CognitoAuthorizer)} like so
 *
 * <pre>
 * <code>
 *  AWSServerlessApplicationRepository client = AWSServerlessApplicationRepository.builder().signer((CognitoAuthorizer) request -> "some token").build();
 * </code>
 * </pre>
 */
@FunctionalInterface
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public interface CognitoAuthorizer extends RequestSigner {

  /**
   * Generate a token that will be added to Authorization in the header of the request during signing
   *
   * @param request
   *        an immutable view of the request for which to generate a token
   * @return the token to use for signing
   */
  String generateToken(ImmutableRequest<?> request);

  /**
   * @see RequestSigner#sign(SignableRequest)
   */
  @Override
  default void sign(SignableRequest<?> request) {
    request.addHeader("Authorization", generateToken(request));
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/Application.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.protocol.ProtocolMarshaller;
import com.amazonaws.protocol.StructuredPojo;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.transform.ApplicationMarshaller;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/Application" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class Application implements Serializable, Cloneable, StructuredPojo {

  private String applicationId;

  private String author;

  private String creationTime;

  private String description;

  private String homePageUrl;

  /**
   * @param applicationId
   */

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  /**
   * @return
   */

  public String getApplicationId() {
    return this.applicationId;
  }

  /**
   * @param applicationId
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public Application applicationId(String applicationId) {
    setApplicationId(applicationId);
    return this;
  }

  /**
   * @param author
   */

  public void setAuthor(String author) {
    this.author = author;
  }

  /**
   * @return
   */

  public String getAuthor() {
    return this.author;
  }

  /**
   * @param author
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public Application author(String author) {
    setAuthor(author);
    return this;
  }

  /**
   * @param creationTime
   */

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }

  /**
   * @return
   */

  public String getCreationTime() {
    return this.creationTime;
  }

  /**
   * @param creationTime
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public Application creationTime(String creationTime) {
    setCreationTime(creationTime);
    return this;
  }

  /**
   * @param description
   */

  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * @return
   */

  public String getDescription() {
    return this.description;
  }

  /**
   * @param description
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public Application description(String description) {
    setDescription(description);
    return this;
  }

  /**
   * @param homePageUrl
   */

  public void setHomePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }

  /**
   * @return
   */

  public String getHomePageUrl() {
    return this.homePageUrl;
  }

  /**
   * @param homePageUrl
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public Application homePageUrl(String homePageUrl) {
    setHomePageUrl(homePageUrl);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplicationId() != null)
      sb.append("ApplicationId: ").append(getApplicationId()).append(",");
    if (getAuthor() != null)
      sb.append("Author: ").append(getAuthor()).append(",");
    if (getCreationTime() != null)
      sb.append("CreationTime: ").append(getCreationTime()).append(",");
    if (getDescription() != null)
      sb.append("Description: ").append(getDescription()).append(",");
    if (getHomePageUrl() != null)
      sb.append("HomePageUrl: ").append(getHomePageUrl());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof Application == false)
      return false;
    Application other = (Application) obj;
    if (other.getApplicationId() == null ^ this.getApplicationId() == null)
      return false;
    if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
      return false;
    if (other.getAuthor() == null ^ this.getAuthor() == null)
      return false;
    if (other.getAuthor() != null && other.getAuthor().equals(this.getAuthor()) == false)
      return false;
    if (other.getCreationTime() == null ^ this.getCreationTime() == null)
      return false;
    if (other.getCreationTime() != null && other.getCreationTime().equals(this.getCreationTime()) == false)
      return false;
    if (other.getDescription() == null ^ this.getDescription() == null)
      return false;
    if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
      return false;
    if (other.getHomePageUrl() == null ^ this.getHomePageUrl() == null)
      return false;
    if (other.getHomePageUrl() != null && other.getHomePageUrl().equals(this.getHomePageUrl()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
    hashCode = prime * hashCode + ((getAuthor() == null) ? 0 : getAuthor().hashCode());
    hashCode = prime * hashCode + ((getCreationTime() == null) ? 0 : getCreationTime().hashCode());
    hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
    hashCode = prime * hashCode + ((getHomePageUrl() == null) ? 0 : getHomePageUrl().hashCode());
    return hashCode;
  }

  @Override
  public Application clone() {
    try {
      return (Application) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

  @com.amazonaws.annotation.SdkInternalApi
  @Override
  public void marshall(ProtocolMarshaller protocolMarshaller) {
    ApplicationMarshaller.getInstance().marshall(this, protocolMarshaller);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationList.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.protocol.ProtocolMarshaller;
import com.amazonaws.protocol.StructuredPojo;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.transform.ApplicationListMarshaller;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/ApplicationList" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationList implements Serializable, Cloneable, StructuredPojo {

  private java.util.List<ApplicationSummary> applications;

  private String nextToken;

  /**
   * @return
   */

  public java.util.List<ApplicationSummary> getApplications() {
    return applications;
  }

  /**
   * @param applications
   */

  public void setApplications(java.util.Collection<ApplicationSummary> applications) {
    if (applications == null) {
      this.applications = null;
      return;
    }

    this.applications = new java.util.ArrayList<ApplicationSummary>(applications);
  }

  /**
   * <p>
   * <b>NOTE:</b> This method appends the values to the existing list (if any). Use
   * {@link #setApplications(java.util.Collection)} or {@link #withApplications(java.util.Collection)} if you want to
   * override the existing values.
   * </p>
   *
   * @param applications
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ApplicationList applications(ApplicationSummary... applications) {
    if (this.applications == null) {
      setApplications(new java.util.ArrayList<ApplicationSummary>(applications.length));
    }
    for (ApplicationSummary ele : applications) {
      this.applications.add(ele);
    }
    return this;
  }

  /**
   * @param applications
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ApplicationList applications(java.util.Collection<ApplicationSummary> applications) {
    setApplications(applications);
    return this;
  }

  /**
   * @param nextToken
   */

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }

  /**
   * @return
   */

  public String getNextToken() {
    return this.nextToken;
  }

  /**
   * @param nextToken
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ApplicationList nextToken(String nextToken) {
    setNextToken(nextToken);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplications() != null)
      sb.append("Applications: ").append(getApplications()).append(",");
    if (getNextToken() != null)
      sb.append("NextToken: ").append(getNextToken());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof ApplicationList == false)
      return false;
    ApplicationList other = (ApplicationList) obj;
    if (other.getApplications() == null ^ this.getApplications() == null)
      return false;
    if (other.getApplications() != null && other.getApplications().equals(this.getApplications()) == false)
      return false;
    if (other.getNextToken() == null ^ this.getNextToken() == null)
      return false;
    if (other.getNextToken() != null && other.getNextToken().equals(this.getNextToken()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplications() == null) ? 0 : getApplications().hashCode());
    hashCode = prime * hashCode + ((getNextToken() == null) ? 0 : getNextToken().hashCode());
    return hashCode;
  }

  @Override
  public ApplicationList clone() {
    try {
      return (ApplicationList) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

  @com.amazonaws.annotation.SdkInternalApi
  @Override
  public void marshall(ProtocolMarshaller protocolMarshaller) {
    ApplicationListMarshaller.getInstance().marshall(this, protocolMarshaller);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ApplicationSummary.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.protocol.ProtocolMarshaller;
import com.amazonaws.protocol.StructuredPojo;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.transform.ApplicationSummaryMarshaller;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/ApplicationSummary" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationSummary implements Serializable, Cloneable, StructuredPojo {

  private String applicationId;

  private String creationTime;

  private String description;

  /**
   * @param applicationId
   */

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  /**
   * @return
   */

  public String getApplicationId() {
    return this.applicationId;
  }

  /**
   * @param applicationId
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ApplicationSummary applicationId(String applicationId) {
    setApplicationId(applicationId);
    return this;
  }

  /**
   * @param creationTime
   */

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }

  /**
   * @return
   */

  public String getCreationTime() {
    return this.creationTime;
  }

  /**
   * @param creationTime
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ApplicationSummary creationTime(String creationTime) {
    setCreationTime(creationTime);
    return this;
  }

  /**
   * @param description
   */

  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * @return
   */

  public String getDescription() {
    return this.description;
  }

  /**
   * @param description
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ApplicationSummary description(String description) {
    setDescription(description);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplicationId() != null)
      sb.append("ApplicationId: ").append(getApplicationId()).append(",");
    if (getCreationTime() != null)
      sb.append("CreationTime: ").append(getCreationTime()).append(",");
    if (getDescription() != null)
      sb.append("Description: ").append(getDescription());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof ApplicationSummary == false)
      return false;
    ApplicationSummary other = (ApplicationSummary) obj;
    if (other.getApplicationId() == null ^ this.getApplicationId() == null)
      return false;
    if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
      return false;
    if (other.getCreationTime() == null ^ this.getCreationTime() == null)
      return false;
    if (other.getCreationTime() != null && other.getCreationTime().equals(this.getCreationTime()) == false)
      return false;
    if (other.getDescription() == null ^ this.getDescription() == null)
      return false;
    if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
    hashCode = prime * hashCode + ((getCreationTime() == null) ? 0 : getCreationTime().hashCode());
    hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
    return hashCode;
  }

  @Override
  public ApplicationSummary clone() {
    try {
      return (ApplicationSummary) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

  @com.amazonaws.annotation.SdkInternalApi
  @Override
  public void marshall(ProtocolMarshaller protocolMarshaller) {
    ApplicationSummaryMarshaller.getInstance().marshall(this, protocolMarshaller);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/AWSServerlessApplicationRepositoryException.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.opensdk.SdkErrorHttpMetadata;
import com.amazonaws.opensdk.internal.BaseException;

import javax.annotation.Generated;

/**
 * Base exception for all service exceptions thrown by backend service
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class AWSServerlessApplicationRepositoryException extends com.amazonaws.SdkBaseException implements BaseException {

  private static final long serialVersionUID = 1L;

  private SdkErrorHttpMetadata sdkHttpMetadata;

  private String message;

  /**
   * Constructs a new AWSServerlessApplicationRepositoryException with the specified error message.
   *
   * @param message
   *        Describes the error encountered.
   */
  public AWSServerlessApplicationRepositoryException(String message) {
    super(message);
    this.message = message;
  }

  @Override
  public AWSServerlessApplicationRepositoryException sdkHttpMetadata(SdkErrorHttpMetadata sdkHttpMetadata) {
    this.sdkHttpMetadata = sdkHttpMetadata;
    return this;
  }

  @Override
  public SdkErrorHttpMetadata sdkHttpMetadata() {
    return sdkHttpMetadata;
  }

  @SdkInternalApi
  @Override
  public void setMessage(String message) {
    this.message = message;
  }

  @Override
  public String getMessage() {
    return message;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/BadRequestException.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 *
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class BadRequestException extends AWSServerlessApplicationRepositoryException {
  private static final long serialVersionUID = 1L;

  private String errorCode;

  /**
   * Constructs a new BadRequestException with the specified error message.
   *
   * @param message
   *        Describes the error encountered.
   */
  public BadRequestException(String message) {
    super(message);
  }

  /**
   * @param errorCode
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  /**
   * @return
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public String getErrorCode() {
    return this.errorCode;
  }

  /**
   * @param errorCode
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public BadRequestException errorCode(String errorCode) {
    setErrorCode(errorCode);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ConflictException.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 *
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ConflictException extends AWSServerlessApplicationRepositoryException {
  private static final long serialVersionUID = 1L;

  private String errorCode;

  /**
   * Constructs a new ConflictException with the specified error message.
   *
   * @param message
   *        Describes the error encountered.
   */
  public ConflictException(String message) {
    super(message);
  }

  /**
   * @param errorCode
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  /**
   * @return
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public String getErrorCode() {
    return this.errorCode;
  }

  /**
   * @param errorCode
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ConflictException errorCode(String errorCode) {
    setErrorCode(errorCode);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationInput.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.protocol.ProtocolMarshaller;
import com.amazonaws.protocol.StructuredPojo;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.transform.CreateApplicationInputMarshaller;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/CreateApplicationInput"
 *      target="_top">AWS API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationInput implements Serializable, Cloneable, StructuredPojo {

  private String applicationId;

  private String author;

  private String description;

  private String homePageUrl;

  /**
   * @param applicationId
   */

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  /**
   * @return
   */

  public String getApplicationId() {
    return this.applicationId;
  }

  /**
   * @param applicationId
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public CreateApplicationInput applicationId(String applicationId) {
    setApplicationId(applicationId);
    return this;
  }

  /**
   * @param author
   */

  public void setAuthor(String author) {
    this.author = author;
  }

  /**
   * @return
   */

  public String getAuthor() {
    return this.author;
  }

  /**
   * @param author
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public CreateApplicationInput author(String author) {
    setAuthor(author);
    return this;
  }

  /**
   * @param description
   */

  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * @return
   */

  public String getDescription() {
    return this.description;
  }

  /**
   * @param description
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public CreateApplicationInput description(String description) {
    setDescription(description);
    return this;
  }

  /**
   * @param homePageUrl
   */

  public void setHomePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }

  /**
   * @return
   */

  public String getHomePageUrl() {
    return this.homePageUrl;
  }

  /**
   * @param homePageUrl
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public CreateApplicationInput homePageUrl(String homePageUrl) {
    setHomePageUrl(homePageUrl);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplicationId() != null)
      sb.append("ApplicationId: ").append(getApplicationId()).append(",");
    if (getAuthor() != null)
      sb.append("Author: ").append(getAuthor()).append(",");
    if (getDescription() != null)
      sb.append("Description: ").append(getDescription()).append(",");
    if (getHomePageUrl() != null)
      sb.append("HomePageUrl: ").append(getHomePageUrl());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof CreateApplicationInput == false)
      return false;
    CreateApplicationInput other = (CreateApplicationInput) obj;
    if (other.getApplicationId() == null ^ this.getApplicationId() == null)
      return false;
    if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
      return false;
    if (other.getAuthor() == null ^ this.getAuthor() == null)
      return false;
    if (other.getAuthor() != null && other.getAuthor().equals(this.getAuthor()) == false)
      return false;
    if (other.getDescription() == null ^ this.getDescription() == null)
      return false;
    if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
      return false;
    if (other.getHomePageUrl() == null ^ this.getHomePageUrl() == null)
      return false;
    if (other.getHomePageUrl() != null && other.getHomePageUrl().equals(this.getHomePageUrl()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
    hashCode = prime * hashCode + ((getAuthor() == null) ? 0 : getAuthor().hashCode());
    hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
    hashCode = prime * hashCode + ((getHomePageUrl() == null) ? 0 : getHomePageUrl().hashCode());
    return hashCode;
  }

  @Override
  public CreateApplicationInput clone() {
    try {
      return (CreateApplicationInput) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

  @com.amazonaws.annotation.SdkInternalApi
  @Override
  public void marshall(ProtocolMarshaller protocolMarshaller) {
    CreateApplicationInputMarshaller.getInstance().marshall(this, protocolMarshaller);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationRequest.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/CreateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

  private CreateApplicationInput createApplicationInput;

  /**
   * @param createApplicationInput
   */

  public void setCreateApplicationInput(CreateApplicationInput createApplicationInput) {
    this.createApplicationInput = createApplicationInput;
  }

  /**
   * @return
   */

  public CreateApplicationInput getCreateApplicationInput() {
    return this.createApplicationInput;
  }

  /**
   * @param createApplicationInput
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public CreateApplicationRequest createApplicationInput(CreateApplicationInput createApplicationInput) {
    setCreateApplicationInput(createApplicationInput);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getCreateApplicationInput() != null)
      sb.append("CreateApplicationInput: ").append(getCreateApplicationInput());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof CreateApplicationRequest == false)
      return false;
    CreateApplicationRequest other = (CreateApplicationRequest) obj;
    if (other.getCreateApplicationInput() == null ^ this.getCreateApplicationInput() == null)
      return false;
    if (other.getCreateApplicationInput() != null && other.getCreateApplicationInput().equals(this.getCreateApplicationInput()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getCreateApplicationInput() == null) ? 0 : getCreateApplicationInput().hashCode());
    return hashCode;
  }

  @Override
  public CreateApplicationRequest clone() {
    return (CreateApplicationRequest) super.clone();
  }

  @Override
  public Class<? extends RequestSigner> signerType() {
    return CognitoAuthorizer.class;
  }

  /**
   * Set the configuration for this request.
   *
   * @param sdkRequestConfig
   *        Request configuration.
   * @return This object for method chaining.
   */
  public CreateApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
    super.sdkRequestConfig(sdkRequestConfig);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/CreateApplicationResult.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/CreateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

  private Application application;

  /**
   * @param application
   */

  public void setApplication(Application application) {
    this.application = application;
  }

  /**
   * @return
   */

  public Application getApplication() {
    return this.application;
  }

  /**
   * @param application
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public CreateApplicationResult application(Application application) {
    setApplication(application);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplication() != null)
      sb.append("Application: ").append(getApplication());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof CreateApplicationResult == false)
      return false;
    CreateApplicationResult other = (CreateApplicationResult) obj;
    if (other.getApplication() == null ^ this.getApplication() == null)
      return false;
    if (other.getApplication() != null && other.getApplication().equals(this.getApplication()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplication() == null) ? 0 : getApplication().hashCode());
    return hashCode;
  }

  @Override
  public CreateApplicationResult clone() {
    try {
      return (CreateApplicationResult) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationRequest.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/DeleteApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class DeleteApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

  private String applicationId;

  /**
   * @param applicationId
   */

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  /**
   * @return
   */

  public String getApplicationId() {
    return this.applicationId;
  }

  /**
   * @param applicationId
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public DeleteApplicationRequest applicationId(String applicationId) {
    setApplicationId(applicationId);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplicationId() != null)
      sb.append("ApplicationId: ").append(getApplicationId());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof DeleteApplicationRequest == false)
      return false;
    DeleteApplicationRequest other = (DeleteApplicationRequest) obj;
    if (other.getApplicationId() == null ^ this.getApplicationId() == null)
      return false;
    if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
    return hashCode;
  }

  @Override
  public DeleteApplicationRequest clone() {
    return (DeleteApplicationRequest) super.clone();
  }

  @Override
  public Class<? extends RequestSigner> signerType() {
    return CognitoAuthorizer.class;
  }

  /**
   * Set the configuration for this request.
   *
   * @param sdkRequestConfig
   *        Request configuration.
   * @return This object for method chaining.
   */
  public DeleteApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
    super.sdkRequestConfig(sdkRequestConfig);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/DeleteApplicationResult.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/DeleteApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class DeleteApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof DeleteApplicationResult == false)
      return false;
    DeleteApplicationResult other = (DeleteApplicationResult) obj;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    return hashCode;
  }

  @Override
  public DeleteApplicationResult clone() {
    try {
      return (DeleteApplicationResult) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationRequest.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/GetApplication" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class GetApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

  private String applicationId;

  /**
   * @param applicationId
   */

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  /**
   * @return
   */

  public String getApplicationId() {
    return this.applicationId;
  }

  /**
   * @param applicationId
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public GetApplicationRequest applicationId(String applicationId) {
    setApplicationId(applicationId);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplicationId() != null)
      sb.append("ApplicationId: ").append(getApplicationId());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof GetApplicationRequest == false)
      return false;
    GetApplicationRequest other = (GetApplicationRequest) obj;
    if (other.getApplicationId() == null ^ this.getApplicationId() == null)
      return false;
    if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
    return hashCode;
  }

  @Override
  public GetApplicationRequest clone() {
    return (GetApplicationRequest) super.clone();
  }

  @Override
  public Class<? extends RequestSigner> signerType() {
    return CognitoAuthorizer.class;
  }

  /**
   * Set the configuration for this request.
   *
   * @param sdkRequestConfig
   *        Request configuration.
   * @return This object for method chaining.
   */
  public GetApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
    super.sdkRequestConfig(sdkRequestConfig);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/GetApplicationResult.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/GetApplication" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class GetApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

  private Application application;

  /**
   * @param application
   */

  public void setApplication(Application application) {
    this.application = application;
  }

  /**
   * @return
   */

  public Application getApplication() {
    return this.application;
  }

  /**
   * @param application
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public GetApplicationResult application(Application application) {
    setApplication(application);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplication() != null)
      sb.append("Application: ").append(getApplication());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof GetApplicationResult == false)
      return false;
    GetApplicationResult other = (GetApplicationResult) obj;
    if (other.getApplication() == null ^ this.getApplication() == null)
      return false;
    if (other.getApplication() != null && other.getApplication().equals(this.getApplication()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplication() == null) ? 0 : getApplication().hashCode());
    return hashCode;
  }

  @Override
  public GetApplicationResult clone() {
    try {
      return (GetApplicationResult) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/InternalServerErrorException.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 *
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class InternalServerErrorException extends AWSServerlessApplicationRepositoryException {
  private static final long serialVersionUID = 1L;

  private String errorCode;

  /**
   * Constructs a new InternalServerErrorException with the specified error message.
   *
   * @param message
   *        Describes the error encountered.
   */
  public InternalServerErrorException(String message) {
    super(message);
  }

  /**
   * @param errorCode
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  /**
   * @return
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public String getErrorCode() {
    return this.errorCode;
  }

  /**
   * @param errorCode
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public InternalServerErrorException errorCode(String errorCode) {
    setErrorCode(errorCode);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsRequest.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/ListApplications" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ListApplicationsRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

  private String maxItems;

  private String nextToken;

  /**
   * @param maxItems
   */

  public void setMaxItems(String maxItems) {
    this.maxItems = maxItems;
  }

  /**
   * @return
   */

  public String getMaxItems() {
    return this.maxItems;
  }

  /**
   * @param maxItems
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ListApplicationsRequest maxItems(String maxItems) {
    setMaxItems(maxItems);
    return this;
  }

  /**
   * @param nextToken
   */

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }

  /**
   * @return
   */

  public String getNextToken() {
    return this.nextToken;
  }

  /**
   * @param nextToken
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ListApplicationsRequest nextToken(String nextToken) {
    setNextToken(nextToken);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getMaxItems() != null)
      sb.append("MaxItems: ").append(getMaxItems()).append(",");
    if (getNextToken() != null)
      sb.append("NextToken: ").append(getNextToken());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof ListApplicationsRequest == false)
      return false;
    ListApplicationsRequest other = (ListApplicationsRequest) obj;
    if (other.getMaxItems() == null ^ this.getMaxItems() == null)
      return false;
    if (other.getMaxItems() != null && other.getMaxItems().equals(this.getMaxItems()) == false)
      return false;
    if (other.getNextToken() == null ^ this.getNextToken() == null)
      return false;
    if (other.getNextToken() != null && other.getNextToken().equals(this.getNextToken()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getMaxItems() == null) ? 0 : getMaxItems().hashCode());
    hashCode = prime * hashCode + ((getNextToken() == null) ? 0 : getNextToken().hashCode());
    return hashCode;
  }

  @Override
  public ListApplicationsRequest clone() {
    return (ListApplicationsRequest) super.clone();
  }

  @Override
  public Class<? extends RequestSigner> signerType() {
    return CognitoAuthorizer.class;
  }

  /**
   * Set the configuration for this request.
   *
   * @param sdkRequestConfig
   *        Request configuration.
   * @return This object for method chaining.
   */
  public ListApplicationsRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
    super.sdkRequestConfig(sdkRequestConfig);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/ListApplicationsResult.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/ListApplications" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ListApplicationsResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

  private ApplicationList applicationList;

  /**
   * @param applicationList
   */

  public void setApplicationList(ApplicationList applicationList) {
    this.applicationList = applicationList;
  }

  /**
   * @return
   */

  public ApplicationList getApplicationList() {
    return this.applicationList;
  }

  /**
   * @param applicationList
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public ListApplicationsResult applicationList(ApplicationList applicationList) {
    setApplicationList(applicationList);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplicationList() != null)
      sb.append("ApplicationList: ").append(getApplicationList());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof ListApplicationsResult == false)
      return false;
    ListApplicationsResult other = (ListApplicationsResult) obj;
    if (other.getApplicationList() == null ^ this.getApplicationList() == null)
      return false;
    if (other.getApplicationList() != null && other.getApplicationList().equals(this.getApplicationList()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplicationList() == null) ? 0 : getApplicationList().hashCode());
    return hashCode;
  }

  @Override
  public ListApplicationsResult clone() {
    try {
      return (ListApplicationsResult) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/NotFoundException.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 *
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class NotFoundException extends AWSServerlessApplicationRepositoryException {
  private static final long serialVersionUID = 1L;

  private String errorCode;

  /**
   * Constructs a new NotFoundException with the specified error message.
   *
   * @param message
   *        Describes the error encountered.
   */
  public NotFoundException(String message) {
    super(message);
  }

  /**
   * @param errorCode
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  /**
   * @return
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public String getErrorCode() {
    return this.errorCode;
  }

  /**
   * @param errorCode
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public NotFoundException errorCode(String errorCode) {
    setErrorCode(errorCode);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/TooManyRequestsException.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 *
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class TooManyRequestsException extends AWSServerlessApplicationRepositoryException {
  private static final long serialVersionUID = 1L;

  private String errorCode;

  /**
   * Constructs a new TooManyRequestsException with the specified error message.
   *
   * @param message
   *        Describes the error encountered.
   */
  public TooManyRequestsException(String message) {
    super(message);
  }

  /**
   * @param errorCode
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  /**
   * @return
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public String getErrorCode() {
    return this.errorCode;
  }

  /**
   * @param errorCode
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public TooManyRequestsException errorCode(String errorCode) {
    setErrorCode(errorCode);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UnauthorizedException.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import javax.annotation.Generated;

/**
 *
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UnauthorizedException extends AWSServerlessApplicationRepositoryException {
  private static final long serialVersionUID = 1L;

  private String errorCode;

  /**
   * Constructs a new UnauthorizedException with the specified error message.
   *
   * @param message
   *        Describes the error encountered.
   */
  public UnauthorizedException(String message) {
    super(message);
  }

  /**
   * @param errorCode
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  /**
   * @return
   */

  @com.fasterxml.jackson.annotation.JsonProperty("errorCode")
  public String getErrorCode() {
    return this.errorCode;
  }

  /**
   * @param errorCode
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public UnauthorizedException errorCode(String errorCode) {
    setErrorCode(errorCode);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationInput.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.protocol.ProtocolMarshaller;
import com.amazonaws.protocol.StructuredPojo;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.model.transform.UpdateApplicationInputMarshaller;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/UpdateApplicationInput"
 *      target="_top">AWS API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationInput implements Serializable, Cloneable, StructuredPojo {

  private String author;

  private String description;

  private String homePageUrl;

  /**
   * @param author
   */

  public void setAuthor(String author) {
    this.author = author;
  }

  /**
   * @return
   */

  public String getAuthor() {
    return this.author;
  }

  /**
   * @param author
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public UpdateApplicationInput author(String author) {
    setAuthor(author);
    return this;
  }

  /**
   * @param description
   */

  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * @return
   */

  public String getDescription() {
    return this.description;
  }

  /**
   * @param description
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public UpdateApplicationInput description(String description) {
    setDescription(description);
    return this;
  }

  /**
   * @param homePageUrl
   */

  public void setHomePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }

  /**
   * @return
   */

  public String getHomePageUrl() {
    return this.homePageUrl;
  }

  /**
   * @param homePageUrl
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public UpdateApplicationInput homePageUrl(String homePageUrl) {
    setHomePageUrl(homePageUrl);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getAuthor() != null)
      sb.append("Author: ").append(getAuthor()).append(",");
    if (getDescription() != null)
      sb.append("Description: ").append(getDescription()).append(",");
    if (getHomePageUrl() != null)
      sb.append("HomePageUrl: ").append(getHomePageUrl());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof UpdateApplicationInput == false)
      return false;
    UpdateApplicationInput other = (UpdateApplicationInput) obj;
    if (other.getAuthor() == null ^ this.getAuthor() == null)
      return false;
    if (other.getAuthor() != null && other.getAuthor().equals(this.getAuthor()) == false)
      return false;
    if (other.getDescription() == null ^ this.getDescription() == null)
      return false;
    if (other.getDescription() != null && other.getDescription().equals(this.getDescription()) == false)
      return false;
    if (other.getHomePageUrl() == null ^ this.getHomePageUrl() == null)
      return false;
    if (other.getHomePageUrl() != null && other.getHomePageUrl().equals(this.getHomePageUrl()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getAuthor() == null) ? 0 : getAuthor().hashCode());
    hashCode = prime * hashCode + ((getDescription() == null) ? 0 : getDescription().hashCode());
    hashCode = prime * hashCode + ((getHomePageUrl() == null) ? 0 : getHomePageUrl().hashCode());
    return hashCode;
  }

  @Override
  public UpdateApplicationInput clone() {
    try {
      return (UpdateApplicationInput) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

  @com.amazonaws.annotation.SdkInternalApi
  @Override
  public void marshall(ProtocolMarshaller protocolMarshaller) {
    UpdateApplicationInputMarshaller.getInstance().marshall(this, protocolMarshaller);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationRequest.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import com.amazonaws.auth.RequestSigner;
import com.amazonaws.opensdk.protect.auth.RequestSignerAware;

import java.io.Serializable;
import javax.annotation.Generated;

import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/UpdateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationRequest extends com.amazonaws.opensdk.BaseRequest implements Serializable, Cloneable, RequestSignerAware {

  private String applicationId;

  private UpdateApplicationInput updateApplicationInput;

  /**
   * @param applicationId
   */

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  /**
   * @return
   */

  public String getApplicationId() {
    return this.applicationId;
  }

  /**
   * @param applicationId
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public UpdateApplicationRequest applicationId(String applicationId) {
    setApplicationId(applicationId);
    return this;
  }

  /**
   * @param updateApplicationInput
   */

  public void setUpdateApplicationInput(UpdateApplicationInput updateApplicationInput) {
    this.updateApplicationInput = updateApplicationInput;
  }

  /**
   * @return
   */

  public UpdateApplicationInput getUpdateApplicationInput() {
    return this.updateApplicationInput;
  }

  /**
   * @param updateApplicationInput
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public UpdateApplicationRequest updateApplicationInput(UpdateApplicationInput updateApplicationInput) {
    setUpdateApplicationInput(updateApplicationInput);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplicationId() != null)
      sb.append("ApplicationId: ").append(getApplicationId()).append(",");
    if (getUpdateApplicationInput() != null)
      sb.append("UpdateApplicationInput: ").append(getUpdateApplicationInput());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof UpdateApplicationRequest == false)
      return false;
    UpdateApplicationRequest other = (UpdateApplicationRequest) obj;
    if (other.getApplicationId() == null ^ this.getApplicationId() == null)
      return false;
    if (other.getApplicationId() != null && other.getApplicationId().equals(this.getApplicationId()) == false)
      return false;
    if (other.getUpdateApplicationInput() == null ^ this.getUpdateApplicationInput() == null)
      return false;
    if (other.getUpdateApplicationInput() != null && other.getUpdateApplicationInput().equals(this.getUpdateApplicationInput()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplicationId() == null) ? 0 : getApplicationId().hashCode());
    hashCode = prime * hashCode + ((getUpdateApplicationInput() == null) ? 0 : getUpdateApplicationInput().hashCode());
    return hashCode;
  }

  @Override
  public UpdateApplicationRequest clone() {
    return (UpdateApplicationRequest) super.clone();
  }

  @Override
  public Class<? extends RequestSigner> signerType() {
    return CognitoAuthorizer.class;
  }

  /**
   * Set the configuration for this request.
   *
   * @param sdkRequestConfig
   *        Request configuration.
   * @return This object for method chaining.
   */
  public UpdateApplicationRequest sdkRequestConfig(com.amazonaws.opensdk.SdkRequestConfig sdkRequestConfig) {
    super.sdkRequestConfig(sdkRequestConfig);
    return this;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/UpdateApplicationResult.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model;

import java.io.Serializable;
import javax.annotation.Generated;

/**
 *
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/xxx-2019-10-13/UpdateApplication" target="_top">AWS
 *      API Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationResult extends com.amazonaws.opensdk.BaseResult implements Serializable, Cloneable {

  private Application application;

  /**
   * @param application
   */

  public void setApplication(Application application) {
    this.application = application;
  }

  /**
   * @return
   */

  public Application getApplication() {
    return this.application;
  }

  /**
   * @param application
   * @return Returns a reference to this object so that method calls can be chained together.
   */

  public UpdateApplicationResult application(Application application) {
    setApplication(application);
    return this;
  }

  /**
   * Returns a string representation of this object; useful for testing and debugging.
   *
   * @return A string representation of this object.
   *
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{");
    if (getApplication() != null)
      sb.append("Application: ").append(getApplication());
    sb.append("}");
    return sb.toString();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;

    if (obj instanceof UpdateApplicationResult == false)
      return false;
    UpdateApplicationResult other = (UpdateApplicationResult) obj;
    if (other.getApplication() == null ^ this.getApplication() == null)
      return false;
    if (other.getApplication() != null && other.getApplication().equals(this.getApplication()) == false)
      return false;
    return true;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int hashCode = 1;

    hashCode = prime * hashCode + ((getApplication() == null) ? 0 : getApplication().hashCode());
    return hashCode;
  }

  @Override
  public UpdateApplicationResult clone() {
    try {
      return (UpdateApplicationResult) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException("Got a CloneNotSupportedException from Object.clone() " + "even though we're Cloneable!", e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.END_ARRAY;
import static com.fasterxml.jackson.core.JsonToken.END_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;
import static com.fasterxml.jackson.core.JsonToken.START_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.Application;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * Application JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationJsonUnmarshaller implements Unmarshaller<Application, JsonUnmarshallerContext> {

  public Application unmarshall(JsonUnmarshallerContext context) throws Exception {
    Application application = new Application();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return null;
    }

    while (true) {
      if (token == null)
        break;

      if (token == FIELD_NAME || token == START_OBJECT) {
        if (context.testExpression("applicationId", targetDepth)) {
          context.nextToken();
          application.setApplicationId(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("author", targetDepth)) {
          context.nextToken();
          application.setAuthor(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("creationTime", targetDepth)) {
          context.nextToken();
          application.setCreationTime(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("description", targetDepth)) {
          context.nextToken();
          application.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("homePageUrl", targetDepth)) {
          context.nextToken();
          application.setHomePageUrl(context.getUnmarshaller(String.class).unmarshall(context));
        }
      } else if (token == END_ARRAY || token == END_OBJECT) {
        if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
          if (context.getCurrentDepth() <= originalDepth)
            break;
        }
      }
      token = context.nextToken();
    }

    return application;
  }

  private static ApplicationJsonUnmarshaller instance;

  public static ApplicationJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new ApplicationJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.END_ARRAY;
import static com.fasterxml.jackson.core.JsonToken.END_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;
import static com.fasterxml.jackson.core.JsonToken.START_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.ApplicationList;
import software.amazon.serverless.apprepo.api.client.model.ApplicationSummary;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.ListUnmarshaller;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * ApplicationList JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationListJsonUnmarshaller implements Unmarshaller<ApplicationList, JsonUnmarshallerContext> {

  public ApplicationList unmarshall(JsonUnmarshallerContext context) throws Exception {
    ApplicationList applicationList = new ApplicationList();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return null;
    }

    while (true) {
      if (token == null)
        break;

      if (token == FIELD_NAME || token == START_OBJECT) {
        if (context.testExpression("applications", targetDepth)) {
          context.nextToken();
          applicationList.setApplications(new ListUnmarshaller<ApplicationSummary>(ApplicationSummaryJsonUnmarshaller.getInstance())
                  .unmarshall(context));
        }
        if (context.testExpression("nextToken", targetDepth)) {
          context.nextToken();
          applicationList.setNextToken(context.getUnmarshaller(String.class).unmarshall(context));
        }
      } else if (token == END_ARRAY || token == END_OBJECT) {
        if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
          if (context.getCurrentDepth() <= originalDepth)
            break;
        }
      }
      token = context.nextToken();
    }

    return applicationList;
  }

  private static ApplicationListJsonUnmarshaller instance;

  public static ApplicationListJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new ApplicationListJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationListMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.ApplicationList;

import java.util.List;
import javax.annotation.Generated;

/**
 * ApplicationListMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ApplicationListMarshaller {

  private static final MarshallingInfo<List> APPLICATIONS_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)
          .marshallLocationName("applications").build();
  private static final MarshallingInfo<String> NEXTTOKEN_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
          .marshallLocationName("nextToken").build();

  private static final ApplicationListMarshaller instance = new ApplicationListMarshaller();

  public static ApplicationListMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(ApplicationList applicationList, ProtocolMarshaller protocolMarshaller) {

    if (applicationList == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(applicationList.getApplications(), APPLICATIONS_BINDING);
      protocolMarshaller.marshall(applicationList.getNextToken(), NEXTTOKEN_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.Application;

import javax.annotation.Generated;

/**
 * ApplicationMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ApplicationMarshaller {

  private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("applicationId").build();
  private static final MarshallingInfo<String> AUTHOR_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
          .marshallLocationName("author").build();
  private static final MarshallingInfo<String> CREATIONTIME_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("creationTime").build();
  private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();
  private static final MarshallingInfo<String> HOMEPAGEURL_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("homePageUrl").build();

  private static final ApplicationMarshaller instance = new ApplicationMarshaller();

  public static ApplicationMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(Application application, ProtocolMarshaller protocolMarshaller) {

    if (application == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(application.getApplicationId(), APPLICATIONID_BINDING);
      protocolMarshaller.marshall(application.getAuthor(), AUTHOR_BINDING);
      protocolMarshaller.marshall(application.getCreationTime(), CREATIONTIME_BINDING);
      protocolMarshaller.marshall(application.getDescription(), DESCRIPTION_BINDING);
      protocolMarshaller.marshall(application.getHomePageUrl(), HOMEPAGEURL_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.END_ARRAY;
import static com.fasterxml.jackson.core.JsonToken.END_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;
import static com.fasterxml.jackson.core.JsonToken.START_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.ApplicationSummary;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * ApplicationSummary JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ApplicationSummaryJsonUnmarshaller implements Unmarshaller<ApplicationSummary, JsonUnmarshallerContext> {

  public ApplicationSummary unmarshall(JsonUnmarshallerContext context) throws Exception {
    ApplicationSummary applicationSummary = new ApplicationSummary();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return null;
    }

    while (true) {
      if (token == null)
        break;

      if (token == FIELD_NAME || token == START_OBJECT) {
        if (context.testExpression("applicationId", targetDepth)) {
          context.nextToken();
          applicationSummary.setApplicationId(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("creationTime", targetDepth)) {
          context.nextToken();
          applicationSummary.setCreationTime(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("description", targetDepth)) {
          context.nextToken();
          applicationSummary.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
        }
      } else if (token == END_ARRAY || token == END_OBJECT) {
        if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
          if (context.getCurrentDepth() <= originalDepth)
            break;
        }
      }
      token = context.nextToken();
    }

    return applicationSummary;
  }

  private static ApplicationSummaryJsonUnmarshaller instance;

  public static ApplicationSummaryJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new ApplicationSummaryJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ApplicationSummaryMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.ApplicationSummary;

import javax.annotation.Generated;

/**
 * ApplicationSummaryMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ApplicationSummaryMarshaller {

  private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("applicationId").build();
  private static final MarshallingInfo<String> CREATIONTIME_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("creationTime").build();
  private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();

  private static final ApplicationSummaryMarshaller instance = new ApplicationSummaryMarshaller();

  public static ApplicationSummaryMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(ApplicationSummary applicationSummary, ProtocolMarshaller protocolMarshaller) {

    if (applicationSummary == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(applicationSummary.getApplicationId(), APPLICATIONID_BINDING);
      protocolMarshaller.marshall(applicationSummary.getCreationTime(), CREATIONTIME_BINDING);
      protocolMarshaller.marshall(applicationSummary.getDescription(), DESCRIPTION_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.END_ARRAY;
import static com.fasterxml.jackson.core.JsonToken.END_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;
import static com.fasterxml.jackson.core.JsonToken.START_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.CreateApplicationInput;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * CreateApplicationInput JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationInputJsonUnmarshaller implements Unmarshaller<CreateApplicationInput, JsonUnmarshallerContext> {

  public CreateApplicationInput unmarshall(JsonUnmarshallerContext context) throws Exception {
    CreateApplicationInput createApplicationInput = new CreateApplicationInput();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return null;
    }

    while (true) {
      if (token == null)
        break;

      if (token == FIELD_NAME || token == START_OBJECT) {
        if (context.testExpression("applicationId", targetDepth)) {
          context.nextToken();
          createApplicationInput.setApplicationId(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("author", targetDepth)) {
          context.nextToken();
          createApplicationInput.setAuthor(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("description", targetDepth)) {
          context.nextToken();
          createApplicationInput.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("homePageUrl", targetDepth)) {
          context.nextToken();
          createApplicationInput.setHomePageUrl(context.getUnmarshaller(String.class).unmarshall(context));
        }
      } else if (token == END_ARRAY || token == END_OBJECT) {
        if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
          if (context.getCurrentDepth() <= originalDepth)
            break;
        }
      }
      token = context.nextToken();
    }

    return createApplicationInput;
  }

  private static CreateApplicationInputJsonUnmarshaller instance;

  public static CreateApplicationInputJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new CreateApplicationInputJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationInputMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationInput;

import javax.annotation.Generated;

/**
 * CreateApplicationInputMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class CreateApplicationInputMarshaller {

  private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("applicationId").build();
  private static final MarshallingInfo<String> AUTHOR_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
          .marshallLocationName("author").build();
  private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();
  private static final MarshallingInfo<String> HOMEPAGEURL_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("homePageUrl").build();

  private static final CreateApplicationInputMarshaller instance = new CreateApplicationInputMarshaller();

  public static CreateApplicationInputMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(CreateApplicationInput createApplicationInput, ProtocolMarshaller protocolMarshaller) {

    if (createApplicationInput == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(createApplicationInput.getApplicationId(), APPLICATIONID_BINDING);
      protocolMarshaller.marshall(createApplicationInput.getAuthor(), AUTHOR_BINDING);
      protocolMarshaller.marshall(createApplicationInput.getDescription(), DESCRIPTION_BINDING);
      protocolMarshaller.marshall(createApplicationInput.getHomePageUrl(), HOMEPAGEURL_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import com.amazonaws.protocol.StructuredPojo;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;

import javax.annotation.Generated;

/**
 * CreateApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class CreateApplicationRequestMarshaller {

  private static final MarshallingInfo<StructuredPojo> CREATEAPPLICATIONINPUT_BINDING = MarshallingInfo.builder(MarshallingType.STRUCTURED)
          .marshallLocation(MarshallLocation.PAYLOAD).isExplicitPayloadMember(true).build();

  private static final CreateApplicationRequestMarshaller instance = new CreateApplicationRequestMarshaller();

  public static CreateApplicationRequestMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(CreateApplicationRequest createApplicationRequest, ProtocolMarshaller protocolMarshaller) {

    if (createApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(createApplicationRequest.getCreateApplicationInput(), CREATEAPPLICATIONINPUT_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationRequestProtocolMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.Request;
import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.http.HttpMethodName;
import com.amazonaws.protocol.OperationInfo;
import com.amazonaws.protocol.Protocol;
import com.amazonaws.protocol.ProtocolRequestMarshaller;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import com.amazonaws.transform.Marshaller;

import javax.annotation.Generated;

/**
 * CreateApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class CreateApplicationRequestProtocolMarshaller implements Marshaller<Request<CreateApplicationRequest>, CreateApplicationRequest> {

  private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY).requestUri("/Prod/applications")
          .httpMethodName(HttpMethodName.POST).hasExplicitPayloadMember(true).hasPayloadMembers(true).serviceName("AWSServerlessApplicationRepository")
          .build();

  private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

  public CreateApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
    this.protocolFactory = protocolFactory;
  }

  public Request<CreateApplicationRequest> marshall(CreateApplicationRequest createApplicationRequest) {

    if (createApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      final ProtocolRequestMarshaller<CreateApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
              createApplicationRequest);

      protocolMarshaller.startMarshalling();
      CreateApplicationRequestMarshaller.getInstance().marshall(createApplicationRequest, protocolMarshaller);
      return protocolMarshaller.finishMarshalling();
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/CreateApplicationResultJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.CreateApplicationResult;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * CreateApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateApplicationResultJsonUnmarshaller implements Unmarshaller<CreateApplicationResult, JsonUnmarshallerContext> {

  public CreateApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
    CreateApplicationResult createApplicationResult = new CreateApplicationResult();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return createApplicationResult;
    }

    while (true) {
      if (token == null)
        break;

      createApplicationResult.setApplication(ApplicationJsonUnmarshaller.getInstance().unmarshall(context));
      token = context.nextToken();
    }

    return createApplicationResult;
  }

  private static CreateApplicationResultJsonUnmarshaller instance;

  public static CreateApplicationResultJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new CreateApplicationResultJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;

import javax.annotation.Generated;

/**
 * DeleteApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class DeleteApplicationRequestMarshaller {

  private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PATH).marshallLocationName("applicationId").build();

  private static final DeleteApplicationRequestMarshaller instance = new DeleteApplicationRequestMarshaller();

  public static DeleteApplicationRequestMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(DeleteApplicationRequest deleteApplicationRequest, ProtocolMarshaller protocolMarshaller) {

    if (deleteApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(deleteApplicationRequest.getApplicationId(), APPLICATIONID_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationRequestProtocolMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.Request;
import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.http.HttpMethodName;
import com.amazonaws.protocol.OperationInfo;
import com.amazonaws.protocol.Protocol;
import com.amazonaws.protocol.ProtocolRequestMarshaller;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import com.amazonaws.transform.Marshaller;

import javax.annotation.Generated;

/**
 * DeleteApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class DeleteApplicationRequestProtocolMarshaller implements Marshaller<Request<DeleteApplicationRequest>, DeleteApplicationRequest> {

  private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY)
          .requestUri("/Prod/applications/{applicationId}").httpMethodName(HttpMethodName.DELETE).hasExplicitPayloadMember(false).hasPayloadMembers(false)
          .serviceName("AWSServerlessApplicationRepository").build();

  private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

  public DeleteApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
    this.protocolFactory = protocolFactory;
  }

  public Request<DeleteApplicationRequest> marshall(DeleteApplicationRequest deleteApplicationRequest) {

    if (deleteApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      final ProtocolRequestMarshaller<DeleteApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
              deleteApplicationRequest);

      protocolMarshaller.startMarshalling();
      DeleteApplicationRequestMarshaller.getInstance().marshall(deleteApplicationRequest, protocolMarshaller);
      return protocolMarshaller.finishMarshalling();
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/DeleteApplicationResultJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationResult;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;

import javax.annotation.Generated;

/**
 * DeleteApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class DeleteApplicationResultJsonUnmarshaller implements Unmarshaller<DeleteApplicationResult, JsonUnmarshallerContext> {

  public DeleteApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
    DeleteApplicationResult deleteApplicationResult = new DeleteApplicationResult();

    return deleteApplicationResult;
  }

  private static DeleteApplicationResultJsonUnmarshaller instance;

  public static DeleteApplicationResultJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new DeleteApplicationResultJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;

import javax.annotation.Generated;

/**
 * GetApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class GetApplicationRequestMarshaller {

  private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PATH).marshallLocationName("applicationId").build();

  private static final GetApplicationRequestMarshaller instance = new GetApplicationRequestMarshaller();

  public static GetApplicationRequestMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(GetApplicationRequest getApplicationRequest, ProtocolMarshaller protocolMarshaller) {

    if (getApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(getApplicationRequest.getApplicationId(), APPLICATIONID_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationRequestProtocolMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.Request;
import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.http.HttpMethodName;
import com.amazonaws.protocol.OperationInfo;
import com.amazonaws.protocol.Protocol;
import com.amazonaws.protocol.ProtocolRequestMarshaller;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import com.amazonaws.transform.Marshaller;

import javax.annotation.Generated;

/**
 * GetApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class GetApplicationRequestProtocolMarshaller implements Marshaller<Request<GetApplicationRequest>, GetApplicationRequest> {

  private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY)
          .requestUri("/Prod/applications/{applicationId}").httpMethodName(HttpMethodName.GET).hasExplicitPayloadMember(false).hasPayloadMembers(false)
          .serviceName("AWSServerlessApplicationRepository").build();

  private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

  public GetApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
    this.protocolFactory = protocolFactory;
  }

  public Request<GetApplicationRequest> marshall(GetApplicationRequest getApplicationRequest) {

    if (getApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      final ProtocolRequestMarshaller<GetApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
              getApplicationRequest);

      protocolMarshaller.startMarshalling();
      GetApplicationRequestMarshaller.getInstance().marshall(getApplicationRequest, protocolMarshaller);
      return protocolMarshaller.finishMarshalling();
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/GetApplicationResultJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * GetApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class GetApplicationResultJsonUnmarshaller implements Unmarshaller<GetApplicationResult, JsonUnmarshallerContext> {

  public GetApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
    GetApplicationResult getApplicationResult = new GetApplicationResult();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return getApplicationResult;
    }

    while (true) {
      if (token == null)
        break;

      getApplicationResult.setApplication(ApplicationJsonUnmarshaller.getInstance().unmarshall(context));
      token = context.nextToken();
    }

    return getApplicationResult;
  }

  private static GetApplicationResultJsonUnmarshaller instance;

  public static GetApplicationResultJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new GetApplicationResultJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;

import javax.annotation.Generated;

/**
 * ListApplicationsRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ListApplicationsRequestMarshaller {

  private static final MarshallingInfo<String> MAXITEMS_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.QUERY_PARAM).marshallLocationName("maxItems").build();
  private static final MarshallingInfo<String> NEXTTOKEN_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.QUERY_PARAM).marshallLocationName("nextToken").build();

  private static final ListApplicationsRequestMarshaller instance = new ListApplicationsRequestMarshaller();

  public static ListApplicationsRequestMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(ListApplicationsRequest listApplicationsRequest, ProtocolMarshaller protocolMarshaller) {

    if (listApplicationsRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(listApplicationsRequest.getMaxItems(), MAXITEMS_BINDING);
      protocolMarshaller.marshall(listApplicationsRequest.getNextToken(), NEXTTOKEN_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsRequestProtocolMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.Request;
import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.http.HttpMethodName;
import com.amazonaws.protocol.OperationInfo;
import com.amazonaws.protocol.Protocol;
import com.amazonaws.protocol.ProtocolRequestMarshaller;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;
import com.amazonaws.transform.Marshaller;

import javax.annotation.Generated;

/**
 * ListApplicationsRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class ListApplicationsRequestProtocolMarshaller implements Marshaller<Request<ListApplicationsRequest>, ListApplicationsRequest> {

  private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY).requestUri("/Prod/applications")
          .httpMethodName(HttpMethodName.GET).hasExplicitPayloadMember(false).hasPayloadMembers(false).serviceName("AWSServerlessApplicationRepository")
          .build();

  private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

  public ListApplicationsRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
    this.protocolFactory = protocolFactory;
  }

  public Request<ListApplicationsRequest> marshall(ListApplicationsRequest listApplicationsRequest) {

    if (listApplicationsRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      final ProtocolRequestMarshaller<ListApplicationsRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
              listApplicationsRequest);

      protocolMarshaller.startMarshalling();
      ListApplicationsRequestMarshaller.getInstance().marshall(listApplicationsRequest, protocolMarshaller);
      return protocolMarshaller.finishMarshalling();
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/ListApplicationsResultJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.ListApplicationsResult;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * ListApplicationsResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class ListApplicationsResultJsonUnmarshaller implements Unmarshaller<ListApplicationsResult, JsonUnmarshallerContext> {

  public ListApplicationsResult unmarshall(JsonUnmarshallerContext context) throws Exception {
    ListApplicationsResult listApplicationsResult = new ListApplicationsResult();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return listApplicationsResult;
    }

    while (true) {
      if (token == null)
        break;

      listApplicationsResult.setApplicationList(ApplicationListJsonUnmarshaller.getInstance().unmarshall(context));
      token = context.nextToken();
    }

    return listApplicationsResult;
  }

  private static ListApplicationsResultJsonUnmarshaller instance;

  public static ListApplicationsResultJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new ListApplicationsResultJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.END_ARRAY;
import static com.fasterxml.jackson.core.JsonToken.END_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;
import static com.fasterxml.jackson.core.JsonToken.START_OBJECT;
import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationInput;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * UpdateApplicationInput JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationInputJsonUnmarshaller implements Unmarshaller<UpdateApplicationInput, JsonUnmarshallerContext> {

  public UpdateApplicationInput unmarshall(JsonUnmarshallerContext context) throws Exception {
    UpdateApplicationInput updateApplicationInput = new UpdateApplicationInput();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return null;
    }

    while (true) {
      if (token == null)
        break;

      if (token == FIELD_NAME || token == START_OBJECT) {
        if (context.testExpression("author", targetDepth)) {
          context.nextToken();
          updateApplicationInput.setAuthor(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("description", targetDepth)) {
          context.nextToken();
          updateApplicationInput.setDescription(context.getUnmarshaller(String.class).unmarshall(context));
        }
        if (context.testExpression("homePageUrl", targetDepth)) {
          context.nextToken();
          updateApplicationInput.setHomePageUrl(context.getUnmarshaller(String.class).unmarshall(context));
        }
      } else if (token == END_ARRAY || token == END_OBJECT) {
        if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {
          if (context.getCurrentDepth() <= originalDepth)
            break;
        }
      }
      token = context.nextToken();
    }

    return updateApplicationInput;
  }

  private static UpdateApplicationInputJsonUnmarshaller instance;

  public static UpdateApplicationInputJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new UpdateApplicationInputJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationInputMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationInput;

import javax.annotation.Generated;

/**
 * UpdateApplicationInputMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class UpdateApplicationInputMarshaller {

  private static final MarshallingInfo<String> AUTHOR_BINDING = MarshallingInfo.builder(MarshallingType.STRING).marshallLocation(MarshallLocation.PAYLOAD)
          .marshallLocationName("author").build();
  private static final MarshallingInfo<String> DESCRIPTION_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("description").build();
  private static final MarshallingInfo<String> HOMEPAGEURL_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PAYLOAD).marshallLocationName("homePageUrl").build();

  private static final UpdateApplicationInputMarshaller instance = new UpdateApplicationInputMarshaller();

  public static UpdateApplicationInputMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(UpdateApplicationInput updateApplicationInput, ProtocolMarshaller protocolMarshaller) {

    if (updateApplicationInput == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(updateApplicationInput.getAuthor(), AUTHOR_BINDING);
      protocolMarshaller.marshall(updateApplicationInput.getDescription(), DESCRIPTION_BINDING);
      protocolMarshaller.marshall(updateApplicationInput.getHomePageUrl(), HOMEPAGEURL_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.protocol.MarshallLocation;
import com.amazonaws.protocol.MarshallingInfo;
import com.amazonaws.protocol.MarshallingType;
import com.amazonaws.protocol.ProtocolMarshaller;
import com.amazonaws.protocol.StructuredPojo;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;

import javax.annotation.Generated;

/**
 * UpdateApplicationRequestMarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class UpdateApplicationRequestMarshaller {

  private static final MarshallingInfo<String> APPLICATIONID_BINDING = MarshallingInfo.builder(MarshallingType.STRING)
          .marshallLocation(MarshallLocation.PATH).marshallLocationName("applicationId").build();
  private static final MarshallingInfo<StructuredPojo> UPDATEAPPLICATIONINPUT_BINDING = MarshallingInfo.builder(MarshallingType.STRUCTURED)
          .marshallLocation(MarshallLocation.PAYLOAD).isExplicitPayloadMember(true).build();

  private static final UpdateApplicationRequestMarshaller instance = new UpdateApplicationRequestMarshaller();

  public static UpdateApplicationRequestMarshaller getInstance() {
    return instance;
  }

  /**
   * Marshall the given parameter object.
   */
  public void marshall(UpdateApplicationRequest updateApplicationRequest, ProtocolMarshaller protocolMarshaller) {

    if (updateApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      protocolMarshaller.marshall(updateApplicationRequest.getApplicationId(), APPLICATIONID_BINDING);
      protocolMarshaller.marshall(updateApplicationRequest.getUpdateApplicationInput(), UPDATEAPPLICATIONINPUT_BINDING);
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationRequestProtocolMarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import com.amazonaws.Request;
import com.amazonaws.SdkClientException;
import com.amazonaws.annotation.SdkInternalApi;
import com.amazonaws.http.HttpMethodName;
import com.amazonaws.protocol.OperationInfo;
import com.amazonaws.protocol.Protocol;
import com.amazonaws.protocol.ProtocolRequestMarshaller;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;
import com.amazonaws.transform.Marshaller;

import javax.annotation.Generated;

/**
 * UpdateApplicationRequest Marshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
@SdkInternalApi
public class UpdateApplicationRequestProtocolMarshaller implements Marshaller<Request<UpdateApplicationRequest>, UpdateApplicationRequest> {

  private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.API_GATEWAY)
          .requestUri("/Prod/applications/{applicationId}").httpMethodName(HttpMethodName.PATCH).hasExplicitPayloadMember(true).hasPayloadMembers(true)
          .serviceName("AWSServerlessApplicationRepository").build();

  private final com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory;

  public UpdateApplicationRequestProtocolMarshaller(com.amazonaws.opensdk.protect.protocol.ApiGatewayProtocolFactoryImpl protocolFactory) {
    this.protocolFactory = protocolFactory;
  }

  public Request<UpdateApplicationRequest> marshall(UpdateApplicationRequest updateApplicationRequest) {

    if (updateApplicationRequest == null) {
      throw new SdkClientException("Invalid argument passed to marshall(...)");
    }

    try {
      final ProtocolRequestMarshaller<UpdateApplicationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(SDK_OPERATION_BINDING,
              updateApplicationRequest);

      protocolMarshaller.startMarshalling();
      UpdateApplicationRequestMarshaller.getInstance().marshall(updateApplicationRequest, protocolMarshaller);
      return protocolMarshaller.finishMarshalling();
    } catch (Exception e) {
      throw new SdkClientException("Unable to marshall request to JSON: " + e.getMessage(), e);
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/client/model/transform/UpdateApplicationResultJsonUnmarshaller.java
/**
 *
 */
package software.amazon.serverless.apprepo.api.client.model.transform;

import static com.fasterxml.jackson.core.JsonToken.VALUE_NULL;

import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationResult;
import com.amazonaws.transform.JsonUnmarshallerContext;
import com.amazonaws.transform.Unmarshaller;
import com.fasterxml.jackson.core.JsonToken;

import javax.annotation.Generated;

/**
 * UpdateApplicationResult JSON Unmarshaller
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class UpdateApplicationResultJsonUnmarshaller implements Unmarshaller<UpdateApplicationResult, JsonUnmarshallerContext> {

  public UpdateApplicationResult unmarshall(JsonUnmarshallerContext context) throws Exception {
    UpdateApplicationResult updateApplicationResult = new UpdateApplicationResult();

    int originalDepth = context.getCurrentDepth();
    String currentParentElement = context.getCurrentParentElement();
    int targetDepth = originalDepth + 1;

    JsonToken token = context.getCurrentToken();
    if (token == null)
      token = context.nextToken();
    if (token == VALUE_NULL) {
      return updateApplicationResult;
    }

    while (true) {
      if (token == null)
        break;

      updateApplicationResult.setApplication(ApplicationJsonUnmarshaller.getInstance().unmarshall(context));
      token = context.nextToken();
    }

    return updateApplicationResult;
  }

  private static UpdateApplicationResultJsonUnmarshaller instance;

  public static UpdateApplicationResultJsonUnmarshaller getInstance() {
    if (instance == null)
      instance = new UpdateApplicationResultJsonUnmarshaller();
    return instance;
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/exception/ApiExceptionMapperTest.java
package software.amazon.serverless.apprepo.api.exception;

import static org.assertj.core.api.Assertions.assertThat;

import io.swagger.model.InternalServerErrorException;
import io.swagger.model.NotFoundException;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.junit.Before;
import org.junit.Test;

public class ApiExceptionMapperTest {
  private ApiExceptionMapper exceptionMapper;

  @Before
  public void setup() {
    exceptionMapper = new ApiExceptionMapper();
  }

  @Test
  public void toResponse_apiException() {
    NotFoundException exception = new NotFoundException();
    Response response = exceptionMapper.toResponse(new NotFoundApiException(exception));
    assertThat(response.getStatus()).isEqualTo(404);
    assertThat(response.getMediaType()).isEqualTo(MediaType.APPLICATION_JSON_TYPE);
    assertThat(response.getEntity()).isEqualTo(exception);
  }

  @Test
  public void toResponse_otherException() {
    InternalServerErrorException exception = new InternalServerErrorException()
          .errorCode("InternalError")
          .message("Internal Server Error.");
    Response response = exceptionMapper.toResponse(new IllegalArgumentException());
    assertThat(response.getStatus()).isEqualTo(500);
    assertThat(response.getMediaType()).isEqualTo(MediaType.APPLICATION_JSON_TYPE);
    assertThat(response.getEntity()).isEqualTo(exception);
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/ApplicationsServiceTest.java
package software.amazon.serverless.apprepo.api.impl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import software.amazon.serverless.apprepo.api.exception.BadRequestApiException;
import software.amazon.serverless.apprepo.api.exception.ConflictApiException;
import software.amazon.serverless.apprepo.api.exception.NotFoundApiException;
import software.amazon.serverless.apprepo.api.impl.pagination.InvalidTokenException;
import software.amazon.serverless.apprepo.api.impl.pagination.TokenSerializer;
import software.amazon.serverless.apprepo.container.config.ConfigProvider;
import io.swagger.model.Application;
import io.swagger.model.ApplicationList;
import io.swagger.model.ApplicationSummary;
import io.swagger.model.CreateApplicationInput;
import io.swagger.model.UpdateApplicationInput;

import java.security.Principal;
import java.time.Clock;
import java.time.Instant;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.ws.rs.core.SecurityContext;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
import software.amazon.awssdk.services.dynamodb.model.ConditionalCheckFailedException;
import software.amazon.awssdk.services.dynamodb.model.DeleteItemRequest;
import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;
import software.amazon.awssdk.services.dynamodb.model.GetItemResponse;
import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;
import software.amazon.awssdk.services.dynamodb.model.QueryRequest;
import software.amazon.awssdk.services.dynamodb.model.QueryResponse;
import software.amazon.awssdk.services.dynamodb.model.UpdateItemRequest;

public class ApplicationsServiceTest {
  private static final String TABLE_NAME = "ApplicationsTable";

  @Mock
  private TokenSerializer<Map<String, AttributeValue>> tokenSerializer;
  @Mock
  private DynamoDbClient dynamodb;
  @Mock
  private ConfigProvider configProvider;
  @Mock
  private SecurityContext securityContext;
  @Mock
  private Principal principal;
  @Mock
  private Clock clock;

  private ApplicationsService service;

  @Before
  public void setup() {
    MockitoAnnotations.initMocks(this);
    when(configProvider.getApplicationsTableName()).thenReturn(TABLE_NAME);
    when(securityContext.getUserPrincipal()).thenReturn(principal);
    service = new ApplicationsService(tokenSerializer, dynamodb, configProvider, clock);
    service.setSecurityContext(securityContext);
  }

  @Test
  public void getApplication_null_notFound() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    GetItemResponse response = GetItemResponse.builder().build();
    when(principal.getName()).thenReturn(userId);
    when(dynamodb.getItem(any(GetItemRequest.class))).thenReturn(response);

    assertThatThrownBy(() -> service.getApplication(applicationId))
          .isInstanceOf(NotFoundApiException.class);
  }

  @Test
  public void getApplication_empty_notFound() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    GetItemResponse response = GetItemResponse.builder().item(new HashMap<>()).build();
    when(principal.getName()).thenReturn(userId);
    when(dynamodb.getItem(any(GetItemRequest.class))).thenReturn(response);

    assertThatThrownBy(() -> service.getApplication(applicationId))
          .isInstanceOf(NotFoundApiException.class);
  }

  @Test
  public void getApplication() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);
    GetItemResponse response = GetItemResponse.builder()
          .item(recordMap)
          .build();
    when(principal.getName()).thenReturn(userId);
    when(dynamodb.getItem(any(GetItemRequest.class))).thenReturn(response);

    GetItemRequest expectedGetItemRequest = GetItemRequest.builder()
          .tableName(TABLE_NAME)
          .consistentRead(Boolean.TRUE)
          .key(recordMap)
          .build();

    Application application = service.getApplication(applicationId);
    ArgumentCaptor<GetItemRequest> getItemRequestArgumentCaptor = ArgumentCaptor.forClass(GetItemRequest.class);
    verify(dynamodb).getItem(getItemRequestArgumentCaptor.capture());

    assertThat(application.getApplicationId()).isEqualTo(applicationId);
    assertThat(getItemRequestArgumentCaptor.getValue()).isEqualTo(expectedGetItemRequest);
  }

  @Test
  public void listApplications() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();

    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);

    Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();
    expressionAttributeValues.put(":u", AttributeValue.builder()
          .s(userId)
          .build());
    QueryRequest expectedQueryRequest = QueryRequest.builder()
          .consistentRead(true)
          .tableName(TABLE_NAME)
          .keyConditionExpression(String.format("%s = :u",
                ApplicationRecord.USER_ID_ATTRIBUTE_NAME))
          .expressionAttributeValues(expressionAttributeValues)
          .limit(ApplicationsService.DEFAULT_LIST_APPLICATIONS_LIMIT)
          .build();

    QueryResponse queryResponse = QueryResponse.builder()
          .items(Collections.singletonList(recordMap))
          .build();
    when(principal.getName()).thenReturn(userId);
    when(dynamodb.query(any(QueryRequest.class))).thenReturn(queryResponse);

    ApplicationList applicationList = service.listApplications(null, null);
    List<ApplicationSummary> applicationSummaries = applicationList.getApplications();

    ArgumentCaptor<QueryRequest> queryRequestArgumentCaptor = ArgumentCaptor.forClass(QueryRequest.class);
    verify(dynamodb).query(queryRequestArgumentCaptor.capture());
    assertThat(queryRequestArgumentCaptor.getValue()).isEqualTo(expectedQueryRequest);
    assertThat(applicationSummaries.get(0).getApplicationId()).isEqualTo(applicationId);
    assertThat(applicationList.getNextToken()).isNull();
  }

  @Test
  public void listApplications_maxItems() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    Integer maxItems = ApplicationsService.DEFAULT_LIST_APPLICATIONS_LIMIT * 2;

    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);

    Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();
    expressionAttributeValues.put(":u", AttributeValue.builder()
          .s(userId)
          .build());
    QueryRequest expectedQueryRequest = QueryRequest.builder()
          .consistentRead(true)
          .tableName(TABLE_NAME)
          .keyConditionExpression(String.format("%s = :u",
                ApplicationRecord.USER_ID_ATTRIBUTE_NAME))
          .expressionAttributeValues(expressionAttributeValues)
          .limit(maxItems)
          .build();

    QueryResponse queryResponse = QueryResponse.builder()
          .items(Collections.singletonList(recordMap))
          .build();
    when(principal.getName()).thenReturn(userId);
    when(dynamodb.query(any(QueryRequest.class))).thenReturn(queryResponse);

    ApplicationList applicationList = service.listApplications(null, maxItems);
    List<ApplicationSummary> applicationSummaries = applicationList.getApplications();

    ArgumentCaptor<QueryRequest> queryRequestArgumentCaptor = ArgumentCaptor.forClass(QueryRequest.class);
    verify(dynamodb).query(queryRequestArgumentCaptor.capture());
    assertThat(queryRequestArgumentCaptor.getValue()).isEqualTo(expectedQueryRequest);
    assertThat(applicationSummaries.get(0).getApplicationId()).isEqualTo(applicationId);
    assertThat(applicationList.getNextToken()).isNull();
  }

  @Test
  public void listApplications_nextToken() throws Exception {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    String nextToken = UUID.randomUUID().toString();

    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);

    Map<String, AttributeValue> expressionAttributeValues = new HashMap<>();
    expressionAttributeValues.put(":u", AttributeValue.builder()
          .s(userId)
          .build());
    QueryRequest expectedQueryRequest = QueryRequest.builder()
          .consistentRead(true)
          .tableName(TABLE_NAME)
          .keyConditionExpression(String.format("%s = :u",
                ApplicationRecord.USER_ID_ATTRIBUTE_NAME))
          .expressionAttributeValues(expressionAttributeValues)
          .limit(ApplicationsService.DEFAULT_LIST_APPLICATIONS_LIMIT)
          .exclusiveStartKey(recordMap)
          .build();

    QueryResponse queryResponse = QueryResponse.builder()
          .items(Collections.singletonList(recordMap))
          .lastEvaluatedKey(expressionAttributeValues)
          .build();
    when(principal.getName()).thenReturn(userId);
    when(dynamodb.query(any(QueryRequest.class))).thenReturn(queryResponse);
    when(tokenSerializer.deserialize(nextToken)).thenReturn(recordMap);
    when(tokenSerializer.serialize(expressionAttributeValues)).thenReturn(nextToken);

    ApplicationList applicationList = service.listApplications(nextToken, null);
    List<ApplicationSummary> applicationSummaries = applicationList.getApplications();

    ArgumentCaptor<QueryRequest> queryRequestArgumentCaptor = ArgumentCaptor.forClass(QueryRequest.class);
    verify(dynamodb).query(queryRequestArgumentCaptor.capture());
    verify(tokenSerializer).deserialize(nextToken);
    verify(tokenSerializer).serialize(expressionAttributeValues);
    assertThat(queryRequestArgumentCaptor.getValue()).isEqualTo(expectedQueryRequest);
    assertThat(applicationSummaries.get(0).getApplicationId()).isEqualTo(applicationId);
    assertThat(applicationList.getNextToken()).isEqualTo(nextToken);
  }


  @Test
  public void listApplications_nextToken_exception() throws Exception {
    String userId = UUID.randomUUID().toString();
    String nextToken = UUID.randomUUID().toString();

    when(principal.getName()).thenReturn(userId);
    Mockito.doThrow(InvalidTokenException.class).when(tokenSerializer).deserialize(nextToken);

    assertThatThrownBy(() -> service.listApplications(nextToken, null))
          .isInstanceOf(BadRequestApiException.class);
  }

  @Test
  public void deleteApplication() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    Long version = 1L;
    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);
    recordMap.put("version", AttributeValue.builder().n(version.toString()).build());
    GetItemResponse response = GetItemResponse.builder()
          .item(recordMap)
          .build();
    when(principal.getName()).thenReturn(userId);
    when(dynamodb.getItem(any(GetItemRequest.class))).thenReturn(response);

    Map<String, AttributeValue> expectedAttributeValueMap = new HashMap<>();
    expectedAttributeValueMap.put(":v", AttributeValue.builder().n(version.toString()).build());
    DeleteItemRequest expectedDeleteItemRequest = DeleteItemRequest.builder()
          .tableName(TABLE_NAME)
          .key(keyMap(userId, applicationId))
          .conditionExpression("version = :v")
          .expressionAttributeValues(expectedAttributeValueMap)
          .build();

    service.deleteApplication(applicationId);
    ArgumentCaptor<DeleteItemRequest> deleteItemRequestArgumentCaptor = ArgumentCaptor.forClass(DeleteItemRequest.class);
    verify(dynamodb).deleteItem(deleteItemRequestArgumentCaptor.capture());

    DeleteItemRequest deleteItemRequest = deleteItemRequestArgumentCaptor.getValue();
    assertThat(deleteItemRequest).isEqualTo(expectedDeleteItemRequest);
  }

  @Test
  public void createApplication_alreadyExist() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    CreateApplicationInput input = new CreateApplicationInput()
          .applicationId(applicationId);
    when(principal.getName()).thenReturn(userId);
    doThrow(ConditionalCheckFailedException.class).when(dynamodb).putItem(any(PutItemRequest.class));

    assertThatThrownBy(() -> service.createApplication(input))
          .isInstanceOf(ConflictApiException.class);
  }

  @Test
  public void createApplication() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    Instant createdAt = Instant.now();
    CreateApplicationInput input = new CreateApplicationInput()
          .applicationId(applicationId);
    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);
    recordMap.put("version", AttributeValue.builder().n("1").build());
    recordMap.put("createdAt", AttributeValue.builder().s(createdAt.toString()).build());

    when(principal.getName()).thenReturn(userId);
    when(clock.instant()).thenReturn(createdAt);

    PutItemRequest expectedPutItemRequest = PutItemRequest.builder()
          .tableName(TABLE_NAME)
          .item(recordMap)
          .conditionExpression("attribute_not_exists(userId) AND attribute_not_exists(applicationId)")
          .build();

    Application application = service.createApplication(input);

    ArgumentCaptor<PutItemRequest> putItemRequestArgumentCaptor = ArgumentCaptor.forClass(PutItemRequest.class);
    verify(dynamodb).putItem(putItemRequestArgumentCaptor.capture());

    assertThat(application.getApplicationId()).isEqualTo(applicationId);
    assertThat(putItemRequestArgumentCaptor.getValue()).isEqualTo(expectedPutItemRequest);
  }


  @Test
  public void updateApplication_noUpdate() {
    String applicationId = UUID.randomUUID().toString();
    assertThatThrownBy(() -> service.updateApplication(new UpdateApplicationInput(), applicationId))
          .isInstanceOf(BadRequestApiException.class);
  }

  @Test
  public void updateApplication_author() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    String author = UUID.randomUUID().toString();
    Long version = 1L;
    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);
    recordMap.put("version", AttributeValue.builder().n(version.toString()).build());
    GetItemResponse response = GetItemResponse.builder()
          .item(recordMap)
          .build();
    Map<String, AttributeValue> updateMap = new HashMap<>();
    updateMap.put(":nv", AttributeValue.builder().n("2").build());
    updateMap.put(":v", AttributeValue.builder().n("1").build());
    updateMap.put(":a", AttributeValue.builder().s(author).build());

    when(principal.getName()).thenReturn(userId);
    when(dynamodb.getItem(any(GetItemRequest.class))).thenReturn(response);

    UpdateApplicationInput input = new UpdateApplicationInput().author(author);
    UpdateItemRequest expectedUpdateItemRequest = UpdateItemRequest.builder()
          .tableName(TABLE_NAME)
          .key(keyMap(userId, applicationId))
          .updateExpression("SET author = :a,version = :nv")
          .expressionAttributeValues(updateMap)
          .conditionExpression("version = :v")
          .build();

    Application application = service.updateApplication(input, applicationId);
    ArgumentCaptor<UpdateItemRequest> updateItemRequestArgumentCaptor = ArgumentCaptor.forClass(UpdateItemRequest.class);
    verify(dynamodb).updateItem(updateItemRequestArgumentCaptor.capture());

    UpdateItemRequest updateItemRequest = updateItemRequestArgumentCaptor.getValue();
    assertThat(updateItemRequest).isEqualTo(expectedUpdateItemRequest);
    assertThat(application.getApplicationId()).isEqualTo(applicationId);
    assertThat(application.getAuthor()).isEqualTo(author);
  }

  @Test
  public void updateApplication_description() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    String description = UUID.randomUUID().toString();
    Long version = 1L;
    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);
    recordMap.put("version", AttributeValue.builder().n(version.toString()).build());
    GetItemResponse response = GetItemResponse.builder()
          .item(recordMap)
          .build();
    Map<String, AttributeValue> updateMap = new HashMap<>();
    updateMap.put(":nv", AttributeValue.builder().n("2").build());
    updateMap.put(":v", AttributeValue.builder().n("1").build());
    updateMap.put(":d", AttributeValue.builder().s(description).build());

    when(principal.getName()).thenReturn(userId);
    when(dynamodb.getItem(any(GetItemRequest.class))).thenReturn(response);

    UpdateApplicationInput input = new UpdateApplicationInput().description(description);
    UpdateItemRequest expectedUpdateItemRequest = UpdateItemRequest.builder()
          .tableName(TABLE_NAME)
          .key(keyMap(userId, applicationId))
          .updateExpression("SET description = :d,version = :nv")
          .expressionAttributeValues(updateMap)
          .conditionExpression("version = :v")
          .build();

    Application application = service.updateApplication(input, applicationId);
    ArgumentCaptor<UpdateItemRequest> updateItemRequestArgumentCaptor = ArgumentCaptor.forClass(UpdateItemRequest.class);
    verify(dynamodb).updateItem(updateItemRequestArgumentCaptor.capture());

    UpdateItemRequest updateItemRequest = updateItemRequestArgumentCaptor.getValue();
    assertThat(updateItemRequest).isEqualTo(expectedUpdateItemRequest);
    assertThat(application.getApplicationId()).isEqualTo(applicationId);
    assertThat(application.getDescription()).isEqualTo(description);
  }

  @Test
  public void updateApplication_homePageUrl() {
    String userId = UUID.randomUUID().toString();
    String applicationId = UUID.randomUUID().toString();
    String homePageUrl = UUID.randomUUID().toString();
    Long version = 1L;
    Map<String, AttributeValue> recordMap = keyMap(userId, applicationId);
    recordMap.put("version", AttributeValue.builder().n(version.toString()).build());
    GetItemResponse response = GetItemResponse.builder()
          .item(recordMap)
          .build();
    Map<String, AttributeValue> updateMap = new HashMap<>();
    updateMap.put(":nv", AttributeValue.builder().n("2").build());
    updateMap.put(":v", AttributeValue.builder().n("1").build());
    updateMap.put(":h", AttributeValue.builder().s(homePageUrl).build());

    when(principal.getName()).thenReturn(userId);
    when(dynamodb.getItem(any(GetItemRequest.class))).thenReturn(response);

    UpdateApplicationInput input = new UpdateApplicationInput().homePageUrl(homePageUrl);
    UpdateItemRequest expectedUpdateItemRequest = UpdateItemRequest.builder()
          .tableName(TABLE_NAME)
          .key(keyMap(userId, applicationId))
          .updateExpression("SET homePageUrl = :h,version = :nv")
          .expressionAttributeValues(updateMap)
          .conditionExpression("version = :v")
          .build();

    Application application = service.updateApplication(input, applicationId);
    ArgumentCaptor<UpdateItemRequest> updateItemRequestArgumentCaptor = ArgumentCaptor.forClass(UpdateItemRequest.class);
    verify(dynamodb).updateItem(updateItemRequestArgumentCaptor.capture());

    UpdateItemRequest updateItemRequest = updateItemRequestArgumentCaptor.getValue();
    assertThat(updateItemRequest).isEqualTo(expectedUpdateItemRequest);
    assertThat(application.getApplicationId()).isEqualTo(applicationId);
    assertThat(application.getHomePageUrl()).isEqualTo(homePageUrl);
  }

  private Map<String, AttributeValue> keyMap(final String userId, final String applicationId) {
    Map<String, AttributeValue> keyMap = new HashMap<>();
    keyMap.put("userId", AttributeValue.builder().s(userId).build());
    keyMap.put("applicationId", AttributeValue.builder().s(applicationId).build());
    return keyMap;
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/pagination/DynamoDbStartKeySerializerTest.java
package software.amazon.serverless.apprepo.api.impl.pagination;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

public class DynamoDbStartKeySerializerTest {
  private DynamoDbStartKeySerializer serializer;

  @Before
  public void setup() {
    serializer = new DynamoDbStartKeySerializer();
  }

  @Test
  public void testString() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("String", AttributeValue.builder().s("1.0.0").build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testNumber() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("Number", AttributeValue.builder().n("100").build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testByte() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("Byte", AttributeValue.builder().b(SdkBytes.fromUtf8String("test")).build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testStringList() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("StringList", AttributeValue.builder().ss("test").build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testNumberList() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("NumberList", AttributeValue.builder().ns("100").build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testByteList() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("ByteList", AttributeValue.builder().bs(SdkBytes.fromUtf8String("test")).build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testAttributeList() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("AttributeList", AttributeValue.builder().l(AttributeValue.builder().s("test").build()).build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testMap() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    Map<String, AttributeValue> nested = new HashMap<>();
    nested.put("Map", AttributeValue.builder().s("test").build());
    startKey.put("AttributeList", AttributeValue.builder().m(nested).build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testBool() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("AttributeList", AttributeValue.builder().bool(true).build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void testNul() throws Exception {
    Map<String, AttributeValue> startKey = new HashMap<>();
    startKey.put("AttributeList", AttributeValue.builder().nul(false).build());
    String startKeyString = serializer.serialize(startKey);
    assertThat(serializer.deserialize(startKeyString))
          .isEqualTo(startKey);
  }

  @Test
  public void deserialize_nonMap() {
    assertThatThrownBy(() -> serializer.deserialize("something"))
          .isInstanceOf(InvalidTokenException.class);
  }

  @Test
  public void deserialize_blankString() {
    assertThatThrownBy(() -> serializer.deserialize(" "))
          .isInstanceOf(InvalidTokenException.class);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/pagination/EncryptedTokenSerializerTest.java
package software.amazon.serverless.apprepo.api.impl.pagination;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.UUID;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.services.kms.KmsClient;
import software.amazon.awssdk.services.kms.model.DecryptRequest;
import software.amazon.awssdk.services.kms.model.DecryptResponse;
import software.amazon.awssdk.services.kms.model.EncryptRequest;
import software.amazon.awssdk.services.kms.model.EncryptResponse;

public class EncryptedTokenSerializerTest {
  private static final String KEY_ID = UUID.randomUUID().toString();

  @Mock
  private KmsClient kms;
  private TokenSerializer<String> serializer;

  @Before
  public void setup() {
    MockitoAnnotations.initMocks(this);
    serializer = new EncryptedTokenSerializer(kms, KEY_ID);
  }

  @Test
  public void testSerializeAndDeserialize() throws Exception {
    String plainText = "cat";
    String cipherText = "dog";
    EncryptResponse encryptResponse = EncryptResponse.builder()
          .ciphertextBlob(SdkBytes.fromUtf8String(cipherText))
          .build();
    DecryptResponse decryptResponse = DecryptResponse.builder()
          .plaintext(SdkBytes.fromUtf8String(plainText))
          .build();
    when(kms.encrypt(any(EncryptRequest.class))).thenReturn(encryptResponse);
    when(kms.decrypt(any(DecryptRequest.class))).thenReturn(decryptResponse);

    String encodedToken = serializer.serialize(plainText);
    assertThat(serializer.deserialize(encodedToken))
          .isEqualTo(plainText);
  }

  @Test
  public void deserialize_nonBase64() {
    assertThatThrownBy(() -> serializer.deserialize("something"))
          .isInstanceOf(InvalidTokenException.class);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/api/impl/pagination/TimeBasedTokenSerializerTest.java
package software.amazon.serverless.apprepo.api.impl.pagination;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.time.Duration;
import java.time.Instant;

import org.junit.Before;
import org.junit.Test;

public class TimeBasedTokenSerializerTest {
  private final static long TOKEN_TTL_IN_SECOND = 3600;
  private TokenSerializer<String> serializer;

  @Before
  public void setup() {
    serializer = new TimeBasedTokenSerializer(Duration.ofSeconds(TOKEN_TTL_IN_SECOND));
  }

  @Test
  public void testSerializeAndDeserialize() throws Exception {
    String plainToken = "something";
    String encodedToken = serializer.serialize(plainToken);
    assertThat(serializer.deserialize(encodedToken))
          .isEqualTo(plainToken);
  }

  @Test
  public void deserialize_noTimestamp() {
    assertThatThrownBy(() -> serializer.deserialize("something"))
          .isInstanceOf(InvalidTokenException.class);
  }

  @Test
  public void deserialize_timestampNonBase64() {
    assertThatThrownBy(() -> serializer.deserialize("&something"))
          .isInstanceOf(InvalidTokenException.class);
  }

  @Test
  public void deserialize_tokenExpired() {
    Instant expiredInstant = Instant.now().minusSeconds(TOKEN_TTL_IN_SECOND + 1);
    assertThatThrownBy(() -> serializer.deserialize("something&" + expiredInstant.toString()))
          .isInstanceOf(InvalidTokenException.class);
  }

  @Test
  public void deserialize_noToken() {
    assertThatThrownBy(() -> serializer.deserialize("&" + Instant.now().toString()))
          .isInstanceOf(InvalidTokenException.class);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/ApplicationsService_IT.java
package software.amazon.serverless.apprepo.cucumber;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

/**
 * Junit entry point for cucumber tests.
 */
@RunWith(Cucumber.class)
@CucumberOptions(features = "src/test/java/software/amazon/serverless/apprepo/cucumber/features",
      glue = "software.amazon.serverless.apprepo.cucumber.steps",
      tags = {"not @NotImplemented"},// Use @NotImplemented tag for scenarios that have not been implemented
      plugin = {"pretty"})
public class ApplicationsService_IT {
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/CreateApplication.feature
Feature: CreateApplication
  As a user, I would like to create an application.

  Scenario: User creates an application
    When a user creates an application
    Then a new application should be created

  Scenario: User creates an application with the same id
    Given a user has an application
    When the user creates an application with the same id
    Then the call should fail because the application already exists

  Scenario: User creates an application without application id
    When a user creates an application without application id
    Then the call should fail because of bad request

  Scenario: User creates an application without author
    When a user creates an application without author
    Then the call should fail because of bad request

  Scenario: User creates an application without description
    When a user creates an application without description
    Then the call should fail because of bad request

  Scenario: User creates an application with invalid application id
    When a user creates an application with invalid application id
    Then the call should fail because of bad request

  Scenario: User creates an application with invalid author
    When a user creates an application with invalid author
    Then the call should fail because of bad request

  Scenario: User creates an application with invalid description
    When a user creates an application with invalid description
    Then the call should fail because of bad request

  Scenario: User creates an application with invalid home page URL
    When a user creates an application with invalid home page URL
    Then the call should fail because of bad request
--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/DeleteApplication.feature
Feature: DeleteApplication
  As a user, I would like to delete my application.

  Scenario: User deletes an application
    Given a user has an application
    When the user deletes the application
    Then the application should be deleted
    And the application should no longer be listed

  Scenario: User deletes a non-existent application
    When a user deletes a non-existent application
    Then the call should fail because the application does not exist

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/GetApplication.feature
Feature: GetApplication
  As a user, I would like to get the details of my application.

  Scenario: User gets an application
    Given a user has an application
    When the user gets the application
    Then the application should be returned

  Scenario: User gets a non-existent application
    When a user gets a non-existent application
    Then the call should fail because the application does not exist

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/ListApplications.feature
Feature: ListApplications
  As a user, I would like to see what applications I have.

  Scenario: User lists applications
    Given a user has an application
    And the user creates another application
    When the user lists applications
    Then all applications should be listed
    And the listed applications should be in alphabetical order

  Scenario: User lists applications with pagination
    Given a user has an application
    And the user creates another application
    And the user creates another application
    When the user lists applications with 2 max items
    Then 2 applications should be listed
    And the user lists applications with next token
    Then 1 applications should be listed

  Scenario: Unauthorized user lists applications
    When an unauthorized user lists applications
    Then the call should fail because of access denied
--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/features/UpdateApplication.feature
Feature: UpdateApplication
  As a user, I would like to update my application.

  Scenario: User updates an application
    Given a user has an application
    When the user updates the application
    Then the application should be updated

  Scenario: User updates an application with no update
    Given a user has an application
    When the user updates the application with no update
    Then the call should fail because there is no update

  Scenario: User updates a non-existent application
    When a user updates a non-existent application
    Then the call should fail because the application does not exist

  Scenario: User updates an application with invalid author
    Given a user has an application
    When the user updates the application with invalid author
    Then the call should fail because of bad request

  Scenario: User updates an application with invalid description
    Given a user has an application
    When the user updates the application with invalid description
    Then the call should fail because of bad request

  Scenario: User updates an application with invalid home page URL
    Given a user has an application
    When the user updates the application with invalid home page URL
    Then the call should fail because of bad request
--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/ApplicationModule.java
package software.amazon.serverless.apprepo.cucumber.guice;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.cucumber.steps.AWSServerlessApplicationRepositoryRecordingClient;
import software.amazon.serverless.apprepo.cucumber.steps.CognitoUserManager;
import software.amazon.serverless.ssmcachingclient.SsmParameterCachingClient;
import com.amazonaws.xray.AWSXRay;
import com.amazonaws.xray.AWSXRayRecorderBuilder;
import com.amazonaws.xray.strategy.LogErrorContextMissingStrategy;
import com.google.inject.AbstractModule;
import com.google.inject.Inject;
import com.google.inject.Provides;
import com.google.inject.Singleton;

import java.time.Duration;

import cucumber.runtime.java.guice.ScenarioScope;
import cucumber.runtime.java.guice.impl.SequentialScenarioScope;
import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;
import software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;
import software.amazon.awssdk.services.ssm.SsmClient;

/**
 * DI wiring for ApplicationSteps.
 */
public class ApplicationModule extends AbstractModule {
  @Override
  protected void configure() {
    // Disable AWS x-ray in integration tests.
    // See doc: https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-java-configuration.html#xray-sdk-java-configuration-sysprops
    AWSXRay.setGlobalRecorder(AWSXRayRecorderBuilder.standard().withContextMissingStrategy(new LogErrorContextMissingStrategy()).build());
    bind(ScenarioScope.class).toInstance(new SequentialScenarioScope());
  }

  @Singleton
  @Inject
  @Provides
  AWSServerlessApplicationRepository AWSServerlessApplicationRepository(final SsmParameterCachingClient ssm, final CognitoUserManager cognitoUserManager) {
    String endpoint = ssm.getAsString("apigateway/ApplicationsApi/Endpoint");
    return new AWSServerlessApplicationRepositoryRecordingClient(AWSServerlessApplicationRepository.builder()
          .endpoint(endpoint)
          .signer(new CognitoAuthorizerImpl(cognitoUserManager))
          .build());
  }

  @Singleton
  @Inject
  @Provides
  SsmParameterCachingClient ssmParameterCachingClient() {
    String path = String.format("/applications/apprepo/%s/", System.getProperty("integtests.stage"));
    return new SsmParameterCachingClient(SsmClient.builder()
          .httpClientBuilder(UrlConnectionHttpClient.builder())
          .build(),
          Duration.ofMinutes(5), path);
  }

  @Singleton
  @Inject
  @Provides
  CognitoUserManager cognitoUserManager(final SsmParameterCachingClient ssm) {
    String clientId = ssm.getAsString(String.format(
            "cognito/userpoolclient/IntegTest/realworld-serverless-application-backend-%s-env/Id",
            System.getProperty("integtests.stage")));
    String userPoolId = ssm.getAsString("cognito/userpool/ApplicationsApi/Id");
    return new CognitoUserManager(CognitoIdentityProviderClient.builder()
          .httpClientBuilder(UrlConnectionHttpClient.builder())
          .build(), clientId, userPoolId);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CognitoAuthorizerImpl.java
package software.amazon.serverless.apprepo.cucumber.guice;

import com.amazonaws.ImmutableRequest;
import software.amazon.serverless.apprepo.api.client.auth.CognitoAuthorizer;
import software.amazon.serverless.apprepo.cucumber.steps.CognitoUserManager;

import java.util.UUID;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of {@link CognitoAuthorizer} to provide signer for API requests.
 */
@Slf4j
@RequiredArgsConstructor
public class CognitoAuthorizerImpl implements CognitoAuthorizer {
  private final CognitoUserManager cognitoUserManager;

  @Override
  public String generateToken(ImmutableRequest<?> request) {
    try {
      return cognitoUserManager.generateIdToken();
    } catch (Throwable t) {
      log.warn("Exception thrown when generating token", t);
      return UUID.randomUUID().toString();
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/guice/CukeInjectorSource.java
package software.amazon.serverless.apprepo.cucumber.guice;

import com.google.common.collect.Lists;
import com.google.inject.Guice;
import com.google.inject.Injector;

import cucumber.runtime.java.guice.InjectorSource;

/**
 * Guice injector source for Cucumber.
 */
public class CukeInjectorSource implements InjectorSource {
  @Override
  public Injector getInjector() {
    return Guice.createInjector(Lists.newArrayList(new ApplicationModule()));
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/AWSServerlessApplicationRepositoryRecordingClient.java
package software.amazon.serverless.apprepo.cucumber.steps;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationInput;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsResult;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationInput;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationResult;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Client implementation that wraps {@link AWSServerlessApplicationRepository} and records results to {@link TestEnv}.
 */
@RequiredArgsConstructor
@Slf4j
public class AWSServerlessApplicationRepositoryRecordingClient implements AWSServerlessApplicationRepository {
  private final AWSServerlessApplicationRepository delegate;

  @Override
  public CreateApplicationResult createApplication(CreateApplicationRequest createApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      CreateApplicationInput input = createApplicationRequest.getCreateApplicationInput();
      TestEnv.setApplicationId(input.getApplicationId());
      TestEnv.setApplicationDescription(input.getDescription());
      TestEnv.setAuthor(input.getAuthor());
      TestEnv.setHomePageUrl(input.getHomePageUrl());

      CreateApplicationResult result = delegate.createApplication(createApplicationRequest);
      TestEnv.setApplication(result.getApplication());
      TestEnv.addApplication(result.getApplication());
      return result;
    } catch (Throwable t) {
      log.info("Exception is thrown in CreateApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public DeleteApplicationResult deleteApplication(DeleteApplicationRequest deleteApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      return delegate.deleteApplication(deleteApplicationRequest);
    } catch (Throwable t) {
      log.info("Exception is thrown in DeleteApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public GetApplicationResult getApplication(GetApplicationRequest getApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      return delegate.getApplication(getApplicationRequest);
    } catch (Throwable t) {
      log.info("Exception is thrown in GetApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public ListApplicationsResult listApplications(ListApplicationsRequest listApplicationsRequest) {
    TestEnv.setLastException(null);
    try {
      ListApplicationsResult listApplicationsResult = delegate.listApplications(listApplicationsRequest);
      TestEnv.setApplicationList(listApplicationsResult.getApplicationList());
      return listApplicationsResult;
    } catch (Throwable t) {
      log.info("Exception is thrown in listApplications", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public UpdateApplicationResult updateApplication(UpdateApplicationRequest updateApplicationRequest) {
    TestEnv.setLastException(null);
    try {
      UpdateApplicationInput input = updateApplicationRequest.getUpdateApplicationInput();
      TestEnv.setApplicationDescription(input.getDescription());
      TestEnv.setAuthor(input.getAuthor());
      TestEnv.setHomePageUrl(input.getHomePageUrl());
      UpdateApplicationResult result = delegate.updateApplication(updateApplicationRequest);
      TestEnv.setApplication(result.getApplication());
      return result;
    } catch (Throwable t) {
      log.info("Exception is thrown in UpdateApplication", t);
      TestEnv.setLastException(t);
      throw t;
    }
  }

  @Override
  public void shutdown() {
    delegate.shutdown();
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CognitoUserManager.java
package software.amazon.serverless.apprepo.cucumber.steps;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminConfirmSignUpRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminDeleteUserRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminInitiateAuthRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AuthFlowType;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AuthenticationResultType;
import software.amazon.awssdk.services.cognitoidentityprovider.model.SignUpRequest;

/**
 * This class is used to manage Cognito User creation, authentication and deletion.
 */
@RequiredArgsConstructor
@Slf4j
public class CognitoUserManager {
  private final CognitoIdentityProviderClient cognito;
  private final String clientId;
  private final String userPoolId;

  public void setupCognitoUser() {
    String username = String.format("success+%s@simulator.amazonses.com", UUID.randomUUID().toString());
    String password = UUID.randomUUID().toString();
    cognito.signUp(SignUpRequest.builder()
          .clientId(clientId)
          .username(username)
          .password(password)
          .build());
    cognito.adminConfirmSignUp(AdminConfirmSignUpRequest.builder()
          .userPoolId(userPoolId)
          .username(username)
          .build());
    TestEnv.setUsername(username);
    TestEnv.setPassword(password);
    log.info("Created Cognito user {}", username);
  }

  public void cleanupCognitoUser() {
    String username = TestEnv.getUsername();
    log.info("Cleaning up Cognito user {}...", username);
    cognito.adminDeleteUser(AdminDeleteUserRequest.builder()
          .username(username)
          .userPoolId(userPoolId)
          .build());

  }

  public String generateIdToken() {
    Map<String, String> authParams = new HashMap<>();
    authParams.put("USERNAME", TestEnv.getUsername());
    authParams.put("PASSWORD", TestEnv.getPassword());
    AuthenticationResultType authResult = cognito.adminInitiateAuth(AdminInitiateAuthRequest.builder()
          .authFlow(AuthFlowType.ADMIN_NO_SRP_AUTH)
          .clientId(clientId)
          .userPoolId(userPoolId)
          .authParameters(authParams)
          .build())
          .authenticationResult();
    return authResult.idToken();
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CommonSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import static org.assertj.core.api.Assertions.assertThat;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.BadRequestException;
import software.amazon.serverless.apprepo.api.client.model.NotFoundException;
import software.amazon.serverless.apprepo.api.client.model.UnauthorizedException;
import com.google.inject.Inject;

import io.cucumber.java.en.Then;
import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of common steps in multiple features.
 */
@Slf4j
public class CommonSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;

  @Then("^the call should fail because the application does not exist$")
  public void the_call_should_fail_because_the_application_does_not_exist() {
    assertThat(TestEnv.getLastException())
          .isNotNull()
          .isInstanceOf(NotFoundException.class);
  }

  @Then("^the call should fail because of bad request$")
  public void the_call_should_fail_because_of_bad_request() {
    assertThat(TestEnv.getLastException())
          .isNotNull()
          .isInstanceOf(BadRequestException.class);
  }

  @Then("^the call should fail because of access denied$")
  public void the_call_should_fail_because_of_access_denied() {
    assertThat(TestEnv.getLastException())
          .isNotNull()
          .isInstanceOf(UnauthorizedException.class);
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/CreateApplicationSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import static org.assertj.core.api.Assertions.assertThat;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.Application;
import software.amazon.serverless.apprepo.api.client.model.ConflictException;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationInput;
import software.amazon.serverless.apprepo.api.client.model.CreateApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import com.google.common.base.Preconditions;
import com.google.inject.Inject;

import java.util.UUID;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang3.StringUtils;

/**
 * Implementation of the steps in CreateApplication.feature.
 */
@Slf4j
public class CreateApplicationSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;

  @Given("^a user has an application$")
  @When("^(?:a|the) user creates (?:an|another) application$")
  public void a_user_creates_an_application() {
    CreateApplicationInput input = new CreateApplicationInput()
          .applicationId("applicationId-" + UUID.randomUUID().toString())
          .author("author-" + UUID.randomUUID().toString())
          .description("description-" + UUID.randomUUID().toString())
          .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString());
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(input);

    Application application = appRepo.createApplication(request).getApplication();

    assertThat(TestEnv.getLastException()).isNull();
    assertThat(application.getApplicationId()).isEqualTo(input.getApplicationId());
    assertThat(application.getAuthor()).isEqualTo(input.getAuthor());
    assertThat(application.getDescription()).isEqualTo(input.getDescription());
    assertThat(application.getHomePageUrl()).isEqualTo(input.getHomePageUrl());
    assertThat(application.getCreationTime()).isNotBlank();
  }

  @When("^the user creates an application with the same id$")
  public void the_user_creates_an_application_with_the_same_id() {
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .applicationId(TestEnv.getApplicationId())
                .author("author-" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @When("^a user creates an application without application id$")
  public void a_user_creates_an_application_without_application_id() {
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .author("author-" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @When("^a user creates an application without author$")
  public void a_user_creates_an_application_without_author() {
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .applicationId("applicationId-" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @When("^a user creates an application without description$")
  public void a_user_creates_an_application_without_description() {
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .applicationId("applicationId-" + UUID.randomUUID().toString())
                .author("author-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @When("^a user creates an application with invalid application id$")
  public void a_user_creates_an_application_with_invalid_application_id() {
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .applicationId("applicationId?" + UUID.randomUUID().toString())
                .author("author-" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @When("^a user creates an application with invalid author$")
  public void a_user_creates_an_application_with_invalid_author() {
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .applicationId("applicationId-" + UUID.randomUUID().toString())
                .author("author?" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @When("^a user creates an application with invalid description$")
  public void a_user_creates_an_application_with_invalid_description() {
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .applicationId("applicationId-" + UUID.randomUUID().toString())
                .author("author-" + UUID.randomUUID().toString())
                .description(StringUtils.repeat("a", 300))
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @When("^a user creates an application with invalid home page URL$")
  public void a_user_creates_an_application_with_invalid_homepageurl() {
    CreateApplicationRequest request = new CreateApplicationRequest()
          .createApplicationInput(new CreateApplicationInput()
                .applicationId("applicationId-" + UUID.randomUUID().toString())
                .author("author-" + UUID.randomUUID().toString())
                .description("description?" + UUID.randomUUID().toString())
                .homePageUrl("invalid/" + UUID.randomUUID().toString()));

    createApplication(request);
  }

  @Then("^a new application should be created|the application should be updated$")
  public void a_new_application_should_be_created() {
    assertThat(TestEnv.getLastException()).isNull();
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    GetApplicationResult result = appRepo.getApplication(new GetApplicationRequest().applicationId(TestEnv.getApplicationId()));
    assertThat(result.getApplication())
          .isNotNull()
          .isEqualTo(TestEnv.getApplication());
  }

  @Then("^the call should fail because the application already exists$")
  public void the_call_should_fail_because_the_application_already_exists() {
    assertThat(TestEnv.getLastException())
          .isNotNull()
          .isInstanceOf(ConflictException.class);
  }

  private void createApplication(final CreateApplicationRequest request) {
    try {
      appRepo.createApplication(request);
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }

}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/DeleteApplicationSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.NotFoundException;
import com.google.common.base.Preconditions;
import com.google.inject.Inject;

import java.util.UUID;

import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of the steps in DeleteApplication.feature.
 */
@Slf4j
public class DeleteApplicationSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;

  @When("^the user deletes the application$")
  public void the_user_deletes_the_application() {
    assertThat(TestEnv.getLastException()).isNull();
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    appRepo.deleteApplication(new DeleteApplicationRequest().applicationId(TestEnv.getApplicationId()));
  }

  @When("^a user deletes a non-existent application$")
  public void a_user_deletes_a_non_existent_application() {
    try {
      appRepo.deleteApplication(new DeleteApplicationRequest()
            .applicationId("applicationId" + UUID.randomUUID().toString()));
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }

  @Then("^the application should be deleted$")
  public void the_application_should_be_deleted() {
    assertThat(TestEnv.getLastException()).isNull();
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");
    assertThatThrownBy(() -> appRepo.deleteApplication(new DeleteApplicationRequest()
          .applicationId("applicationId" + UUID.randomUUID().toString())))
          .isInstanceOf(NotFoundException.class);

  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/GetApplicationSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import static org.assertj.core.api.Assertions.assertThat;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.Application;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationRequest;
import software.amazon.serverless.apprepo.api.client.model.GetApplicationResult;
import com.google.common.base.Preconditions;
import com.google.inject.Inject;

import java.util.UUID;

import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of the steps in GetApplication.feature.
 */
@Slf4j
public class GetApplicationSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;

  @When("^the user gets the application$")
  public void the_user_gets_the_application() {
    assertThat(TestEnv.getLastException()).isNull();
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    GetApplicationResult result = appRepo.getApplication(new GetApplicationRequest().applicationId(TestEnv.getApplicationId()));
    TestEnv.setApplication(result.getApplication());
  }

  @When("^a user gets a non-existent application$")
  public void a_user_gets_a_non_existent_application() {
    try {
      appRepo.getApplication(new GetApplicationRequest()
            .applicationId("applicationId-" + UUID.randomUUID().toString()));
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }

  @Then("^the application should be returned$")
  public void the_application_should_be_returned() {
    assertThat(TestEnv.getLastException()).isNull();
    Application application = TestEnv.getApplication();
    assertThat(application.getApplicationId()).isEqualTo(TestEnv.getApplicationId());
    assertThat(application.getAuthor()).isEqualTo(TestEnv.getAuthor());
    assertThat(application.getDescription()).isEqualTo(TestEnv.getApplicationDescription());
    assertThat(application.getHomePageUrl()).isEqualTo(TestEnv.getHomePageUrl());
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/ListApplicationsSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import static org.assertj.core.api.Assertions.assertThat;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.ApplicationSummary;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsRequest;
import software.amazon.serverless.apprepo.api.client.model.ListApplicationsResult;
import com.google.common.base.Preconditions;
import com.google.inject.Inject;

import java.util.Comparator;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lombok.extern.slf4j.Slf4j;

/**
 * Implementation of the steps in ListApplications.feature.
 */
@Slf4j
public class ListApplicationsSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;

  @When("the user lists applications")
  public void the_user_lists_applications() {
    try {
      appRepo.listApplications(new ListApplicationsRequest());
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }

  @When("the user lists applications with ([1-9][0-9]*)? max items")
  public void the_user_lists_applications_with_max_items(int maxItems) {
    try {
      appRepo.listApplications(new ListApplicationsRequest()
            .maxItems(Integer.toString(maxItems)));
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }

  @When("the user lists applications with next token")
  public void the_user_lists_applications_with_next_token() {
    Preconditions.checkState(TestEnv.getApplicationList().getNextToken() != null, "Step assumes next token exists.");

    try {
      appRepo.listApplications(new ListApplicationsRequest()
            .nextToken(TestEnv.getApplicationList().getNextToken()));
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }

  @When("^an unauthorized user lists applications$")
  public void an_unauthorized_user_lists_applications() {
    // Set a wrong password
    TestEnv.setPassword(UUID.randomUUID().toString());
    try {
      appRepo.listApplications(new ListApplicationsRequest());
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }

  @Then("all applications should be listed")
  public void all_applications_should_be_listed() {
    assertThat(TestEnv.getLastException()).isNull();
    Preconditions.checkState(!TestEnv.getApplications().isEmpty(), "Step assumes previous applications exist");
    Preconditions.checkState(TestEnv.getApplicationList() != null, "Step assumes listApplications has been called");

    List<ApplicationSummary> expectedApplicationSummaries = TestEnv.getApplications().stream()
          .map(app -> new ApplicationSummary()
                .applicationId(app.getApplicationId())
                .description(app.getDescription())
                .creationTime(app.getCreationTime()))
          .collect(Collectors.toList());

    assertThat(TestEnv.getApplicationList().getApplications()).containsAll(expectedApplicationSummaries);
    assertThat(TestEnv.getApplicationList().getNextToken()).isNull();
  }

  @Then("([1-9][0-9]*)? applications should be listed")
  public void applications_should_be_listed(int count) {
    assertThat(TestEnv.getLastException()).isNull();
    Preconditions.checkState(!TestEnv.getApplications().isEmpty(), "Step assumes previous applications exist");
    Preconditions.checkState(TestEnv.getApplicationList() != null, "Step assumes listApplications has been called");

    List<ApplicationSummary> expectedApplicationSummaries = TestEnv.getApplications().stream()
          .map(app -> new ApplicationSummary()
                .applicationId(app.getApplicationId())
                .description(app.getDescription())
                .creationTime(app.getCreationTime()))
          .collect(Collectors.toList());

    List<ApplicationSummary> applicationSummaries = TestEnv.getApplicationList().getApplications();
    assertThat(applicationSummaries).hasSize(count);
    assertThat(expectedApplicationSummaries).containsAll(applicationSummaries);
  }

  @And("the application should no longer be listed")
  public void the_application_should_no_longer_be_listed() {
    Preconditions.checkState(TestEnv.getApplication() != null, "Step assumes an application has been created before");

    ApplicationSummary applicationSummary = new ApplicationSummary()
          .applicationId(TestEnv.getApplication().getApplicationId())
          .description(TestEnv.getApplication().getDescription())
          .creationTime(TestEnv.getApplication().getCreationTime());

    ListApplicationsResult listApplicationsResult = appRepo.listApplications(new ListApplicationsRequest());

    assertThat(listApplicationsResult.getApplicationList().getApplications())
          .doesNotContain(applicationSummary);
  }

  @And("the listed applications should be in alphabetical order")
  public void the_listed_applications_should_be_in_alphabetical_order() {
    Preconditions.checkState(TestEnv.getApplicationList() != null, "Step assumes listApplications has been called");
    assertThat(TestEnv.getApplicationList().getApplications())
          .isSortedAccordingTo(Comparator.comparing(ApplicationSummary::getApplicationId));
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/SetupAndTeardownSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.DeleteApplicationRequest;
import com.google.inject.Inject;

import java.time.Duration;
import java.time.Instant;

import io.cucumber.core.api.Scenario;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import lombok.extern.slf4j.Slf4j;

/**
 * Setup and teardown implementation.
 */
@Slf4j
public class SetupAndTeardownSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;
  @Inject
  private CognitoUserManager cognitoUserManager;

  @Before
  public void beforeScenario(final Scenario s) {
    TestEnv.reset();
    Instant startedAt = Instant.now();
    TestEnv.setScenarioStartedAt(startedAt);
    cognitoUserManager.setupCognitoUser();
    log.info("Starting scenario \"{}\" at {}", s.getName(), startedAt);
  }

  @After
  public void afterScenario(Scenario s) {
    TestEnv.getApplications().forEach(app -> tryDeleteApplication(app.getApplicationId()));

    try {
      cognitoUserManager.cleanupCognitoUser();
    } catch (Throwable t) {
      log.warn(String.format("Failed to clean up cognito user %s", TestEnv.getUsername()), t);
    }

    Instant endedAt = Instant.now();
    long durationMillis = Duration.between(TestEnv.getScenarioStartedAt(), endedAt).toMillis();
    if (s.isFailed()) {
      log.info("Failed scenario \"{}\" at {} (Duration: {} ms)", s.getName(), endedAt, durationMillis);
      log.info("TestData: {}", TestEnv.getTestData().toString());
    } else {
      log.info("Completed scenario \"{}\" at {} (Duration: {} ms)", s.getName(), endedAt, durationMillis);
    }

  }

  private void tryDeleteApplication(String applicationId) {
    try {
      log.info("Cleaning up application {}", applicationId);
      appRepo.deleteApplication(new DeleteApplicationRequest().applicationId(applicationId));
    } catch (Throwable t) {
      log.warn("Failed to clean up application {}", applicationId, t);
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/TestEnv.java
package software.amazon.serverless.apprepo.cucumber.steps;

import software.amazon.serverless.apprepo.api.client.model.Application;
import software.amazon.serverless.apprepo.api.client.model.ApplicationList;

import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lombok.ToString;

/**
 * Stores test data needed across scenario steps.
 */
public final class TestEnv {
  private static final ThreadLocal<TestData> data = new ThreadLocal<>();
  private static final String SCENARIO_STARTED_AT_KEY = TestEnv.TestData.key(TestEnv.class, "scenarioStartedAt");
  private static final String LAST_EXCEPTION_KEY = TestData.key(TestEnv.class, "lastThrowable");
  private static final String APPLICATION_ID_KEY = TestEnv.TestData.key(TestEnv.class, "applicationId");
  private static final String APPLICATION_DESCRIPTION_KEY = TestEnv.TestData.key(TestEnv.class, "applicationDescription");
  private static final String AUTHOR_KEY = TestEnv.TestData.key(TestEnv.class, "author");
  private static final String HOME_PAGE_URL_KEY = TestEnv.TestData.key(TestEnv.class, "homePageUrl");
  private static final String APPLICATION_KEY = TestEnv.TestData.key(TestEnv.class, "application");
  private static final String APPLICATION_LIST_KEY = TestEnv.TestData.key(TestEnv.class, "applicationList");
  private static final String APPLICATIONS_KEY = TestEnv.TestData.key(TestEnv.class, "applicationsKey");
  private static final String COGNITO_USERNAME = TestEnv.TestData.key(TestEnv.class, "cognitoUsername");
  private static final String COGNITO_PASSWORD = TestEnv.TestData.key(TestEnv.class, "cognitoPassword");

  private TestEnv() {
  }

  public static void reset() {
    data.set(new TestData());
  }

  public static TestData getTestData() {
    return data.get();
  }

  public static void setScenarioStartedAt(final Instant startedAt) {
    TestEnv.getTestData().set(SCENARIO_STARTED_AT_KEY, startedAt);
  }

  public static Instant getScenarioStartedAt() {
    return TestEnv.getTestData().get(SCENARIO_STARTED_AT_KEY);
  }

  public static void setLastException(final Throwable t) {
    getTestData().set(LAST_EXCEPTION_KEY, t);
  }

  public static Throwable getLastException() {
    return getTestData().get(LAST_EXCEPTION_KEY);
  }

  public static void setApplicationId(final String applicationId) {
    TestEnv.getTestData().set(APPLICATION_ID_KEY, applicationId);
  }

  public static String getApplicationId() {
    return TestEnv.getTestData().get(APPLICATION_ID_KEY);
  }

  public static void setApplicationDescription(final String description) {
    TestEnv.getTestData().set(APPLICATION_DESCRIPTION_KEY, description);
  }

  public static String getApplicationDescription() {
    return TestEnv.getTestData().get(APPLICATION_DESCRIPTION_KEY);
  }

  public static void setAuthor(final String author) {
    TestEnv.getTestData().set(AUTHOR_KEY, author);
  }

  public static String getAuthor() {
    return TestEnv.getTestData().get(AUTHOR_KEY);
  }

  public static void setHomePageUrl(final String homePageUrl) {
    TestEnv.getTestData().set(HOME_PAGE_URL_KEY, homePageUrl);
  }

  public static String getHomePageUrl() {
    return TestEnv.getTestData().get(HOME_PAGE_URL_KEY);
  }

  public static void setUsername(final String username) {
    TestEnv.getTestData().set(COGNITO_USERNAME, username);
  }

  public static String getUsername() {
    return TestEnv.getTestData().get(COGNITO_USERNAME);
  }

  public static void setPassword(final String password) {
    TestEnv.getTestData().set(COGNITO_PASSWORD, password);
  }

  public static String getPassword() {
    return TestEnv.getTestData().get(COGNITO_PASSWORD);
  }

  public static void setApplication(final Application application) {
    TestEnv.getTestData().set(APPLICATION_KEY, application);
  }

  public static Application getApplication() {
    return TestEnv.getTestData().get(APPLICATION_KEY);
  }

  public static void addApplication(Application application) {
    Map<String, Application> applications = TestEnv.getTestData().get(APPLICATIONS_KEY);
    if (applications == null) {
      applications = new HashMap<>();
      TestEnv.getTestData().set(APPLICATIONS_KEY, applications);
    }
    applications.put(application.getApplicationId(), application);
  }

  public static List<Application> getApplications() {
    Map<String, Application> applications = TestEnv.getTestData().get(APPLICATIONS_KEY);
    if (applications == null) {
      applications = new HashMap<>();
      TestEnv.getTestData().set(APPLICATIONS_KEY, applications);
    }
    return new ArrayList<>(applications.values());
  }

  public static void setApplicationList(final ApplicationList listApplicationsResponse) {
    TestEnv.getTestData().set(APPLICATION_LIST_KEY, listApplicationsResponse);
  }

  public static ApplicationList getApplicationList() {
    return TestEnv.getTestData().get(APPLICATION_LIST_KEY);
  }

  @ToString
  public static final class TestData {
    private final Map<String, Object> data = new HashMap<>();

    public static String key(final Class<?> klass, final String keyName) {
      return klass.getSimpleName() + "." + keyName;
    }

    @SuppressWarnings("unchecked")
    public <T> T get(final String key) {
      return (T) data.get(key);
    }

    public <T> void set(final String key, final T value) {
      data.put(key, value);
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/test/java/software/amazon/serverless/apprepo/cucumber/steps/UpdateApplicationSteps.java
package software.amazon.serverless.apprepo.cucumber.steps;

import static org.assertj.core.api.Assertions.assertThat;

import software.amazon.serverless.apprepo.api.client.AWSServerlessApplicationRepository;
import software.amazon.serverless.apprepo.api.client.model.Application;
import software.amazon.serverless.apprepo.api.client.model.BadRequestException;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationInput;
import software.amazon.serverless.apprepo.api.client.model.UpdateApplicationRequest;
import com.google.common.base.Preconditions;
import com.google.inject.Inject;

import java.util.UUID;

import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang3.StringUtils;

/**
 * Implementation of the steps in UpdateApplication.feature.
 */
@Slf4j
public class UpdateApplicationSteps {
  @Inject
  private AWSServerlessApplicationRepository appRepo;

  @When("^the user updates the application$")
  public void the_user_updates_the_application() {
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    UpdateApplicationInput input = new UpdateApplicationInput()
          .author("author-" + UUID.randomUUID().toString())
          .description("description-" + UUID.randomUUID().toString())
          .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString());
    UpdateApplicationRequest request = new UpdateApplicationRequest()
          .applicationId(TestEnv.getApplicationId())
          .updateApplicationInput(input);

    Application application = appRepo.updateApplication(request).getApplication();

    assertThat(TestEnv.getLastException()).isNull();
    assertThat(application.getApplicationId()).isEqualTo(TestEnv.getApplicationId());
    assertThat(application.getAuthor()).isEqualTo(input.getAuthor());
    assertThat(application.getDescription()).isEqualTo(input.getDescription());
    assertThat(application.getHomePageUrl()).isEqualTo(input.getHomePageUrl());
  }

  @When("^the user updates the application with no update$")
  public void the_user_updates_the_application_with_no_update() {
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    UpdateApplicationRequest request = new UpdateApplicationRequest()
          .applicationId(TestEnv.getApplicationId())
          .updateApplicationInput(new UpdateApplicationInput());

    updateApplication(request);
  }

  @When("^a user updates a non-existent application$")
  public void a_user_updates_a_non_existent_application() {
    UpdateApplicationRequest request = new UpdateApplicationRequest()
          .applicationId("applicationId-" + UUID.randomUUID().toString())
          .updateApplicationInput(new UpdateApplicationInput()
                .author("author-" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    updateApplication(request);
  }


  @When("^the user updates the application with invalid author$")
  public void the_user_updates_the_application_with_invalid_author() {
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    UpdateApplicationRequest request = new UpdateApplicationRequest()
          .applicationId(TestEnv.getApplicationId())
          .updateApplicationInput(new UpdateApplicationInput()
                .author("author?" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    updateApplication(request);
  }

  @When("^the user updates the application with invalid description$")
  public void the_user_updates_the_application_with_invalid_description() {
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    UpdateApplicationRequest request = new UpdateApplicationRequest()
          .applicationId(TestEnv.getApplicationId())
          .updateApplicationInput(new UpdateApplicationInput()
                .author("author-" + UUID.randomUUID().toString())
                .description(StringUtils.repeat("a", 300))
                .homePageUrl("https://github.com/awslabs/" + UUID.randomUUID().toString()));

    updateApplication(request);
  }

  @When("^the user updates the application with invalid home page URL$")
  public void the_user_updates_the_application_with_invalid_homepageurl() {
    Preconditions.checkState(TestEnv.getApplicationId() != null, "Step assumes previous application id exists");

    UpdateApplicationRequest request = new UpdateApplicationRequest()
          .applicationId(TestEnv.getApplicationId())
          .updateApplicationInput(new UpdateApplicationInput()
                .author("author-" + UUID.randomUUID().toString())
                .description("description-" + UUID.randomUUID().toString())
                .homePageUrl("invalid/" + UUID.randomUUID().toString()));

    updateApplication(request);
  }

  @Then("^the call should fail because there is no update$")
  public void the_call_should_fail_because_there_is_no_update() {
    assertThat(TestEnv.getLastException())
          .isNotNull()
          .isInstanceOf(BadRequestException.class);
  }

  private void updateApplication(final UpdateApplicationRequest request) {
    try {
      appRepo.updateApplication(request);
    } catch (Exception e) {
      // do nothing and verify exception in the next step
    }
  }
}

--#

--% /realworld-serverless-application/backend/src/test/resources/cucumber.properties
guice.injector-source=software.amazon.serverless.apprepo.cucumber.guice.CukeInjectorSource

--#

--% /realworld-serverless-application/backend/src/test/resources/integ-test-env.template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates the resources for integration tests.

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
Resources:
  IntegTestClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Sub '{{resolve:ssm:/applications/apprepo/${Stage}/cognito/userpool/ApplicationsApi/Id:1}}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  IntegTestClientId:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cognito/userpoolclient/IntegTest/${AWS::StackName}/Id"
      Type: "String"
      Value: !Ref IntegTestClient
      Description: "Integration test Cognito User Pool Client ID."
--#

--% /realworld-serverless-application/backend/swagger/api.yaml
openapi: 3.0.0

info:
  title:
    Fn::Sub: realworld-serverless-application-backend-${Stage}
  description: A simplified implementation of AWS Serverless Application Repository
  version: 2019-10-13

# Enable request validator. See doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-sample-api-swagger.html
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all

x-amazon-apigateway-gateway-responses:
  # Provide more detailed error message for bad request body errors. See doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-gateway-responses.html
  BAD_REQUEST_BODY:
    responseTemplates:
      application/json: '{"errorCode": "BadRequestBody", "message": "$context.error.validationErrorString"}'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
paths:
  /applications:
    post:
      operationId: CreateApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApplicationInput"
        required: true
      responses:
        "201":
          description: "Successfully Created an application."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "400":
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "401":
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "409":
          description: "Conflict Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "429":
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
    get:
      operationId: ListApplications
      parameters:
        - name: nextToken
          in: query
          required: false
          schema:
            type: string
        - name: maxItems
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        "200":
          description: "Successfully list applications"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationList"
        "400":
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "401":
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "429":
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
  "/applications/{applicationId}":
    get:
      operationId: GetApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9\-]{3,128}$
      responses:
        "200":
          description: "Successfully get an application"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "400":
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "401":
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "404":
          description: "Not Found Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "429":
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
    patch:
      operationId: UpdateApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9\-]{3,128}$
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApplicationInput"
        required: true
      responses:
        "200":
          description: "Successfully update an application"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        "400":
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "401":
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "404":
          description: "Not Found Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "429":
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
    delete:
      operationId: DeleteApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9\-]{3,128}$
      responses:
        "204":
          description: "Successfully delete an application"
        "400":
          description: "Bad Request Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestException"
        "401":
          description: "Unauthorized Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "404":
          description: "Not Found Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "429":
          description: "Too Many Requests Exception"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsException"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerErrorException"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}:live/invocations
        httpMethod: POST
        type: aws_proxy
        passthroughBehavior: never
      security:
        - cognitoAuthorizer: []
components:
  securitySchemes:
    cognitoAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - Fn::GetAtt: ApplicationsApiUserPool.Arn
        type: cognito_user_pools
  schemas:
    BadRequestException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    UnauthorizedException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    NotFoundException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    ConflictException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    TooManyRequestsException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    InternalServerErrorException:
      type: object
      properties:
        message:
          type: string
        errorCode:
          type: string
    CreateApplicationInput:
      type: object
      required:
        - applicationId
        - description
        - author
      properties:
        applicationId:
          type: string
          pattern: ^[a-zA-Z0-9\-]{3,128}$
        description:
          type: string
          minLength: 3
          maxLength: 256
        author:
          type: string
          pattern: ^[a-zA-Z0-9\-]{1,128}$
        homePageUrl:
          type: string
          pattern: ^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$
    UpdateApplicationInput:
      type: object
      properties:
        description:
          type: string
          minLength: 3
          maxLength: 256
        author:
          type: string
          pattern: ^[a-zA-Z0-9\-]{1,128}$
        homePageUrl:
          type: string
          pattern: ^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$
    Application:
      type: object
      required:
        - applicationId
        - description
        - author
      properties:
        applicationId:
          type: string
        description:
          type: string
        author:
          type: string
        creationTime:
          type: string
        homePageUrl:
          type: string
    ApplicationSummary:
      type: object
      properties:
        applicationId:
          type: string
        description:
          type: string
        creationTime:
          type: string
    ApplicationList:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationSummary"
        nextToken:
          type: string
--#

--% /realworld-serverless-application/images/architecture_diagram.png

--#

--% /realworld-serverless-application/ops/buildspec.yaml
version: 0.2

phases:
  install:
    runtime-versions:
       java: openjdk8 # Runtime version is required in the build spec even though this module does not use java
  build:
    commands:
      - bin/package.sh -n ops
artifacts:
  files:
    - ops/target/sam/app/packaged-template.yaml
  discard-paths: yes

--#

--% /realworld-serverless-application/ops/README.md
# realworld-serverless-application-ops

realworld-serverless-application-ops is the operations (DevOps) component of a larger project providing alarms and dashboards for the application. It can be deployed together with the other system components to produce an example serverless application demonstrating real world patterns and best practices for serverless applications.

To get started with the full project, follow the [Quick Start](https://github.com/awslabs/realworld-serverless-application/wiki/Quick-Start) guide.

## License

This project is licensed under the Apache-2.0 License.

--#

--% /realworld-serverless-application/ops/images/alarm-email.png

--#

--% /realworld-serverless-application/ops/images/alarms.png

--#

--% /realworld-serverless-application/ops/images/dashboard.png

--#

--% /realworld-serverless-application/ops/sam/app/alarm.template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates CloudWatch alarms for the backend service.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-ops-alarm
    Description: >-
      This template creates CloudWatch alarms for the backend service.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    
Resources:
  ApiAvailability:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'API Gateway API realworld-serverless-application-backend-${Stage} availability is lower than 90%'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub realworld-serverless-application-backend-${Stage}
      EvaluationPeriods: 5
      MetricName: 5XXErrors
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Average
      Threshold: 0.1
      TreatMissingData: notBreaching
      AlarmActions:
        - Ref: AlarmsTopic
  Api4xxErrors:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'API Gateway API realworld-serverless-application-backend-${Stage} 4xx Errors are more than 30%'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub realworld-serverless-application-backend-${Stage}
      EvaluationPeriods: 5
      MetricName: 4XXErrors
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Average
      Threshold: 0.3
      TreatMissingData: notBreaching
      AlarmActions:
        - Ref: AlarmsTopic
  ApiLatencyP50:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'API Gateway API realworld-serverless-application-backend-${Stage} latency p50 is too high'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub realworld-serverless-application-backend-${Stage}
      EvaluationPeriods: 5
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Period: 60
      ExtendedStatistic: p50
      Threshold: 200
      TreatMissingData: notBreaching
      AlarmActions:
        - Ref: AlarmsTopic
  ApiLatencyP90:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'API Gateway API realworld-serverless-application-backend-${Stage} latency p90 is too high'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub realworld-serverless-application-backend-${Stage}
      EvaluationPeriods: 5
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Period: 60
      ExtendedStatistic: p90
      Threshold: 2000
      TreatMissingData: notBreaching
      AlarmActions:
        - Ref: AlarmsTopic
  AlarmsTopic:
    Type: AWS::SNS::Topic

  # Storing resources names to SSM
  ApiAvailabilityAlarmName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cloudwatch/ApiAvailabilityAlarmName"
      Type: "String"
      Value: !Ref ApiAvailability
      Description: "ApiAvailability alarm name"

  Api4xxErrorsAlarmName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cloudwatch/Api4xxErrorsAlarmName"
      Type: "String"
      Value: !Ref Api4xxErrors
      Description: "Api4xxErrors alarm name"

  ApiLatencyP50AlarmName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cloudwatch/ApiLatencyP50AlarmName"
      Type: "String"
      Value: !Ref ApiLatencyP50
      Description: "ApiLatencyP50 alarm name"

  ApiLatencyP90AlarmName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cloudwatch/ApiLatencyP90AlarmName"
      Type: "String"
      Value: !Ref ApiLatencyP90
      Description: "ApiLatencyP90 alarm name"

  AlarmsTopicArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/sns/AlarmsTopicArn"
      Type: "String"
      Value: !Ref AlarmsTopic
      Description: "AlarmsTopic arn"

  AlarmsTopicName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/sns/AlarmsTopicName"
      Type: "String"
      Value: !GetAtt AlarmsTopic.TopicName
      Description: "AlarmsTopic name"

--#

--% /realworld-serverless-application/ops/sam/app/dashboard.template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates CloudWatch dashboard for a backend service.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-ops-dashboard
    Description: >-
      This template creates CloudWatch dashboard for the backend service.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.

Resources:
  Dashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardBody: !Sub >
        {
          "start": "-PT6H",
          "widgets": [
            {
                "type": "metric",
                "x": 0,
                "y": 26,
                "width": 9,
                "height": 6,
                "properties": {
                    "title": "API Lambda Invocations",
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/Lambda", "Invocations", "FunctionName", "{{resolve:ssm:/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionName:1}}", "Resource", "{{resolve:ssm:/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionName:1}}:live" ]
                    ],
                    "region": "${AWS::Region}",
                    "period": 60,
                    "stat": "Sum"
                    }
            },
            {
                "type": "metric",
                "x": 9,
                "y": 26,
                "width": 9,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "{{resolve:ssm:/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionName:1}}", "Resource", "{{resolve:ssm:/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionName:1}}:live" ],
                        [ "...", { "stat": "p50" } ]
                    ],
                    "region": "${AWS::Region}",
                    "title": "API Lambda Latency",
                    "period": 60,
                    "view": "timeSeries",
                    "stacked": false,
                    "stat": "p90"
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 7,
                "width": 9,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/ApiGateway", "Count", "ApiName", "realworld-serverless-application-backend-${Stage}" ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 60,
                    "title": "API Request Count"
                }
            },
            {
                "type": "metric",
                "x": 9,
                "y": 7,
                "width": 9,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/ApiGateway", "4XXError", "ApiName", "realworld-serverless-application-backend-${Stage}" ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 60,
                    "title": "API 4XXError Count"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 19,
                "width": 18,
                "height": 1,
                "properties": {
                    "markdown": "\n# API Lambda\n"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 0,
                "width": 18,
                "height": 1,
                "properties": {
                    "markdown": "\n# API Gateway\n"
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 13,
                "width": 9,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/ApiGateway", "Latency", "ApiName", "realworld-serverless-application-backend-${Stage}" ],
                        [ ".", "IntegrationLatency", ".", "." ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "p90",
                    "period": 60,
                    "title": "API Latency p90"
                }
            },
            {
                "type": "metric",
                "x": 9,
                "y": 13,
                "width": 9,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/ApiGateway", "Latency", "ApiName", "realworld-serverless-application-backend-${Stage}" ],
                        [ ".", "IntegrationLatency", ".", "." ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "p50",
                    "period": 60,
                    "title": "API Latency p50"
                }
            },
            {
                "type": "text",
                "x": 0,
                "y": 32,
                "width": 18,
                "height": 1,
                "properties": {
                    "markdown": "\n# Insights\n"
                }
            },
            {
                "type": "log",
                "x": 0,
                "y": 51,
                "width": 18,
                "height": 6,
                "properties": {
                    "query": "SOURCE '{{resolve:ssm:/applications/apprepo/${Stage}/apigateway/ApplicationsApi/AccessLog/LogGroupName:1}}' | parse '* * [*] \"* * *\" * * * * * * \"*\"' as ip, userId, dateTimeString, httpVerb, url, protocol, statusCode, requestId, awsEndpointRequestId, xrayTraceId, responseLatency, integrationLatency, errorMessage\n| sort responseLatency desc\n| limit 10",
                    "region": "${AWS::Region}",
                    "stacked": false,
                    "view": "table",
                    "title": "Top 10 API Latency Requests"
                }
            },
            {
                "type": "log",
                "x": 0,
                "y": 33,
                "width": 18,
                "height": 6,
                "properties": {
                    "query": "SOURCE '{{resolve:ssm:/applications/apprepo/${Stage}/apigateway/ApplicationsApi/AccessLog/LogGroupName:1}}' | parse '* * [*] \"* * *\" * * * * * * \"*\"' as ip, userId, dateTimeString, httpVerb, url, protocol, statusCode, requestId, awsEndpointRequestId, xrayTraceId, responseLatency, integrationLatency, errorMessage\n| stats count() as count by userId\n| sort by count desc\n| limit 10",
                    "region": "${AWS::Region}",
                    "stacked": false,
                    "view": "table",
                    "title": "Top 10 Customers by Request Count"
                }
            },
            {
                "type": "log",
                "x": 0,
                "y": 45,
                "width": 18,
                "height": 6,
                "properties": {
                    "query": "SOURCE '{{resolve:ssm:/applications/apprepo/${Stage}/apigateway/ApplicationsApi/AccessLog/LogGroupName:1}}' | parse '* * [*] \"* * *\" * * * * * * \"*\"' as ip, userId, dateTimeString, httpVerb, url, protocol, statusCode, requestId, awsEndpointRequestId, xrayTraceId, responseLatency, integrationLatency, errorMessage\n| filter statusCode like /4\\d\\d/\n| stats count() as count by statusCode\n| sort by count desc\n| limit 10",
                    "region": "${AWS::Region}",
                    "stacked": false,
                    "view": "table",
                    "title": "Top 10 API 4xx Errors "
                }
            },
            {
                "type": "log",
                "x": 0,
                "y": 39,
                "width": 18,
                "height": 6,
                "properties": {
                    "query": "SOURCE '{{resolve:ssm:/applications/apprepo/${Stage}/apigateway/ApplicationsApi/AccessLog/LogGroupName:1}}' | parse '* * [*] \"* * *\" * * * * * * \"*\"' as ip, userId, dateTimeString, httpVerb, url, protocol, statusCode, requestId, awsEndpointRequestId, xrayTraceId, responseLatency, integrationLatency, errorMessage\n| filter statusCode like /5\\d\\d/\n| stats count() as count by errorMessage\n| sort by count desc\n| limit 10",
                    "region": "${AWS::Region}",
                    "stacked": false,
                    "view": "table",
                    "title": "Top 10 API 5xx Errors"
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 1,
                "width": 18,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ { "expression": "100 - 100 * errorRate", "label": "Availability (%)", "id": "availability", "yAxis": "right" } ],
                        [ "AWS/ApiGateway", "5XXError", "ApiName", "realworld-serverless-application-backend-${Stage}", { "id": "errorRate", "visible": false, "label": "5XXErrorRate" } ],
                        [ "...", { "id": "errorCount", "stat": "Sum", "label": "5XXError" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 60,
                    "yAxis": {
                        "right": {
                            "showUnits": true,
                            "label": "%",
                            "max": 100
                        },
                        "left": {
                            "showUnits": true,
                            "label": ""
                        }
                    },
                    "title": "API 5XXError Count and Availability (%)"
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 20,
                "width": 18,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Errors", "FunctionName", "{{resolve:ssm:/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionName:1}}", "Resource", "{{resolve:ssm:/applications/apprepo/${Stage}/lambda/ApiLambda/FunctionName:1}}:live", { "id": "errors", "color": "#d13212" } ],
                        [ ".", "Invocations", ".", ".", ".", ".", { "id": "invocations", "visible": false } ],
                        [ { "expression": "100 - 100 * errors / invocations", "label": "Success rate (%)", "id": "availability", "yAxis": "right", "period": 60 } ]
                    ],
                    "region": "${AWS::Region}",
                    "title": "API Lambda Error Count and Success Rate (%)",
                    "yAxis": {
                        "right": {
                            "max": 100
                        }
                    },
                    "view": "timeSeries",
                    "stacked": false,
                    "period": 60,
                    "stat": "Sum"
                }
            },
            {
                "type": "log",
                "x": 0,
                "y": 39,
                "width": 18,
                "height": 6,
                "properties": {
                    "query": "SOURCE '{{resolve:ssm:/applications/apprepo/${Stage}/apigateway/ApplicationsApi/AccessLog/LogGroupName:1}}' | parse '* * [*] \"* * *\" * * * * * * \"*\"' as ip, userId, dateTimeString, httpVerb, url, protocol, statusCode, requestId, awsEndpointRequestId, xrayTraceId, responseLatency, integrationLatency, errorMessage\n| filter statusCode like /5\\d\\d/\n| stats count(statusCode) as errorCount by userId, statusCode\n| sort errorCount desc\n| limit 10",
                    "region": "${AWS::Region}",
                    "stacked": false,
                    "view": "table",
                    "title": "Top 10 Customers Impacted by API 5xx"
                }
            }
          ]   
        }   

  # Storing resources names to SSM
  DashboardName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/cloudwatch/DashboardName"
      Type: "String"
      Value: !Ref Dashboard
      Description: "Dashboard name"

--#

--% /realworld-serverless-application/ops/sam/app/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This application creates alarms and dashboards for a backend service.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-ops
    Description: >-
      This application creates alarms and dashboards for the backend service.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'test'

Resources:
  Alarm:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: 'alarm.template.yaml'
      Parameters:
        Stage: !Ref Stage
  Dashboard:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: 'dashboard.template.yaml'
      Parameters:
        Stage: !Ref Stage

--#

--% /realworld-serverless-application/ops/sam/cicd/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates IAM roles and use them to setup CD pipeline for the ops component.

Parameters:
  GitHubOAuthTokenSecretId:
    Type: String
    Description: The AWS Secrets Manager Secret Id that stores Github OAuth token.
    Default: 'GitHubOAuthToken'
  GitHubOwner:
    Type: String
    Description: The GitHub owner of the repository.
    Default: 'awslabs'
  ApplicationStackName:
    Type: String
    Description: The stack name the CICD will deploy the application to.
    Default: 'realworld-serverless-application-ops'
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'
Resources:
  CD:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:646794253159:applications/aws-sam-codepipeline-cd
        SemanticVersion: 0.1.3
      Parameters:
        GitHubOAuthToken: !Sub '{{resolve:secretsmanager:${GitHubOAuthTokenSecretId}}}'
        GitHubOwner: !Ref GitHubOwner
        GitHubRepo: realworld-serverless-application
        DeployStackName: !Ref ApplicationStackName
        DeployRoleName: !Ref DeployRole
        DeployParameterOverrides: !Sub '{"Stage":"${Stage}"}'
        BuildSpecFilePath: 'ops/buildspec.yaml'

  # This policy defines the minimum IAM permissions required to Create and Delete a stack for ops component into CloudFormation
  CloudFormationDeployPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeployRole
      PolicyName: "deploy-create-delete-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - cloudformation:CreateChangeSet
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include
          - Effect: "Allow"
            Action:
              - sns:CreateTopic
              - sns:GetTopicAttributes
              - sns:DeleteTopic
            Resource:
              - !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${ApplicationStackName}-*
          - Effect: "Allow"
            Action:
              - cloudwatch:PutDashboard
              - cloudwatch:DeleteDashboards
            Resource: 
              - !Sub arn:${AWS::Partition}:cloudwatch::${AWS::AccountId}:dashboard/*
          - Effect: "Allow"
            Action:
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DeleteAlarms
            Resource:
              - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${ApplicationStackName}-*
          - Effect: "Allow"
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:AddTagsToResource
              - ssm:RemoveTagsFromResource
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/apprepo/*

  # This role is used to deploy realworld-serverless-application-ops to CloudFormation.
  DeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Deploy CloudFormation stack ${ApplicationStackName}. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"

--#

--% /realworld-serverless-application/sam/app/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This project is an adaptation of the AWS Serverless Application Repository.
  It's primary objective is to serve as a case study of how to build a production grade service using a combination of serverless technologies and approaches.
Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application
    Description: >-
      This project is an adaptation of the AWS Serverless Application Repository.
      It's primary objective is to serve as a case study of how to build a production grade service using a combination of serverless technologies and approaches.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'test'

Resources:
  Backend:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: '../../backend/sam/app/template.yaml'
      Parameters:
        Stage: !Ref Stage
  Ops:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: '../../ops/sam/app/template.yaml'
      Parameters:
        Stage: !Ref Stage
    DependsOn: Backend
  Website:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: '../../static-website/sam/app/template.yaml'
      Parameters:
        Stage: !Ref Stage
    DependsOn: Backend
  Analytics:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location: '../../analytics/sam/app/template.yaml'
      Parameters:
        Stage: !Ref Stage
    DependsOn: Backend

Outputs:
  WebsiteUrl:
    Description: The static website URL for the service.
    Value: !GetAtt Website.Outputs.Url


--#

--% /realworld-serverless-application/static-website/.browserslistrc
> 1%
last 2 versions

--#

--% /realworld-serverless-application/static-website/.editorconfig
[*.{js,jsx,ts,tsx,vue}]
indent_style = space
indent_size = 2
end_of_line = lf
trim_trailing_whitespace = true
insert_final_newline = true
max_line_length = 100

--#

--% /realworld-serverless-application/static-website/.eslintrc.js
module.exports = {
  root: true,
  env: {
    node: true,
  },
  extends: [
    'plugin:vue/essential',
    '@vue/airbnb',
  ],
  rules: {
    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',
    'no-shadow': 'off',
    'max-len': ['error', 120, 2, {
      ignoreUrls: true,
      ignoreComments: false,
      ignoreRegExpLiterals: true,
      ignoreStrings: true,
      ignoreTemplateLiterals: true,
    }],
  },
  parserOptions: {
    parser: 'babel-eslint',
  },
  overrides: [
    {
      files: [
        '**/__tests__/*.{j,t}s?(x)',
      ],
      env: {
        mocha: true,
      },
    },
  ],
};

--#

--% /realworld-serverless-application/static-website/.gitignore
.DS_Store
node_modules
/dist

/tests/e2e/reports/
selenium-debug.log

# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

--#

--% /realworld-serverless-application/static-website/babel.config.js
module.exports = {
  presets: [
    [
      '@vue/app',
      {
        useBuiltIns: 'entry',
      },
    ],
  ],
};

--#

--% /realworld-serverless-application/static-website/buildspec-integ-test.yaml
version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 8
      java: openjdk8
    commands:
      - npm install -g @vue/cli
  build:
    commands:
      - TEST_STAGE=integ-tests-`date +%s`
      - ./static-website/bin/package-static-website.sh
      - mvn clean package -DpackageBucket=${PACKAGE_BUCKET}
      - ./bin/deploy.sh -n $TEST_STAGE-backend -t backend/sam/app/packaged-template.yaml -o "Stage=$TEST_STAGE"
      - ./bin/package.sh -n static-website
      - ./bin/deploy.sh -n $TEST_STAGE-website -t static-website/sam/app/packaged-template.yaml -o "Stage=$TEST_STAGE"
      - WEBSITE_URL=$(aws ssm get-parameter --name /applications/apprepo/$TEST_STAGE/s3/WebsiteBucket/WebsiteURL --query Parameter.Value --output text)
      - COGNITO_USER_POOL_ID=$(aws ssm get-parameter --name /applications/apprepo/$TEST_STAGE/cognito/userpool/ApplicationsApi/Id --query Parameter.Value --output text)
      - cd static-website
      - echo "Running tests in Chrome"
      - npm run test:e2e -- -e chrome
      - echo "Running tests in Firefox"
      - npm run test:e2e -- -e firefox
    finally:
      - cd $CODEBUILD_SRC_DIR
#     Cleanup commands end with "|| true" to ensure that all of them are executed. It's ok if they fail trying to delete a resource that was never created due to a build phase error.
      - WEBSITE_BUCKET=$(aws ssm get-parameter --name /applications/apprepo/$TEST_STAGE/s3/WebsiteBucket/Name --query Parameter.Value --output text) || true
      - aws s3 rm s3://$WEBSITE_BUCKET --recursive || true # S3 buckets must be emptied before being deleted
      - ./bin/delete-stack.sh -n $TEST_STAGE-website || true
      - ./bin/delete-stack.sh -n $TEST_STAGE-backend || true
--#

--% /realworld-serverless-application/static-website/buildspec.yaml
version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 8
    commands:
      - npm install -g @vue/cli
  build:
    commands:
      - ./static-website/bin/package-static-website.sh
      - ./bin/package.sh -n static-website
artifacts:
  files:
    - static-website/target/sam/app/packaged-template.yaml
  discard-paths: yes
--#

--% /realworld-serverless-application/static-website/nightwatch.conf.js
const launchUrl = process.env.WEBSITE_URL || 'http://localhost:8080';
module.exports = {
  src_folders: ['tests/e2e/specs'],
  output_folder: 'tests/e2e/reports',
  page_objects_path: 'tests/e2e/page-objects',
  test_settings: {
    default: {
      globals: {
        waitForConditionTimeout: 30000,
      },
    },
    chrome: {
      launch_url: launchUrl,
      webdriver: {
        start_process: true,
        server_path: './node_modules/.bin/chromedriver',
        port: 9515,
      },
      desiredCapabilities: {
        browserName: 'chrome',
        chromeOptions: {
          w3c: false,
          args: [
            'headless',
          ],
        },
      },
    },
    firefox: {
      launch_url: launchUrl,
      webdriver: {
        start_process: true,
        server_path: './node_modules/.bin/geckodriver',
        cli_args: [
          '--log', 'debug',
        ],
        port: 4444,
      },
      desiredCapabilities: {
        alwaysMatch: {
          browserName: 'firefox',
          'moz:firefoxOptions': {
            args: ['--headless'],
          },
        },
      },
    },
  },
};

--#

--% /realworld-serverless-application/static-website/package.json
{
  "name": "realworld-serverless-application-static-website",
  "version": "1.0.1",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint",
    "test:e2e": "nightwatch",
    "test:unit": "vue-cli-service test:unit --include ./tests/setup.js",
    "ci": "npm run lint && npm run test:unit && npm run build"
  },
  "dependencies": {
    "@aws-amplify/auth": "^1.6.3",
    "@babel/polyfill": "^7.10.1",
    "aws-amplify": "^1.3.3",
    "aws-amplify-vue": "^0.2.17",
    "axios": "^0.21.1",
    "bootstrap": "^4.5.0",
    "bootstrap-vue": "^2.15.0",
    "core-js": "^2.6.11",
    "mutationobserver-shim": "^0.3.7",
    "vue": "^2.6.11",
    "vue-axios": "^2.1.5",
    "vue-router": "^3.3.4",
    "vuex": "^3.4.0"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "^3.12.1",
    "@vue/cli-plugin-eslint": "^3.12.1",
    "@vue/cli-plugin-unit-mocha": "^4.5.4",
    "@vue/cli-service": "^4.5.12",
    "@vue/eslint-config-airbnb": "^4.0.0",
    "@vue/test-utils": "1.0.0-beta.29",
    "aws-sdk": "^2.698.0",
    "babel-eslint": "^10.1.0",
    "chai": "^4.1.2",
    "chromedriver": "^77.0.0",
    "eslint": "^5.16.0",
    "eslint-plugin-vue": "^5.0.0",
    "geckodriver": "^1.19.1",
    "nightwatch": "^1.3.6",
    "node-sass": "^4.14.1",
    "popper.js": "^1.16.1",
    "portal-vue": "^2.1.7",
    "sass-loader": "^7.1.0",
    "sinon": "^7.4.2",
    "sinon-chai": "^3.5.0",
    "uuid": "^3.4.0",
    "vue-cli-plugin-bootstrap-vue": "^0.4.0",
    "vue-template-compiler": "^2.6.11",
    "ssri": ">=8.0.1",
    "is-svg": ">=4.2.2",
    "netmask": ">=2.0.1"
  }
}

--#

--% /realworld-serverless-application/static-website/postcss.config.js
module.exports = {
  plugins: {
    autoprefixer: {},
  },
};

--#

--% /realworld-serverless-application/static-website/README.md
# realworld-serverless-application-website

realworld-serverless-application-website is the website component of a larger project providing a web UI for the application. It can be deployed together with the other system components to produce an example serverless application demonstrating real world patterns and best practices for serverless applications.

To get started with the full project, follow the [Quick Start](https://github.com/awslabs/realworld-serverless-application/wiki/Quick-Start) guide.

## License

This project is licensed under the Apache-2.0 License.

--#

--% /realworld-serverless-application/static-website/vue.config.js
module.exports = {
  css: {
    sourceMap: true,
  },
};

--#

--% /realworld-serverless-application/static-website/images/sign-in.png

--#

--% /realworld-serverless-application/static-website/public/favicon.ico
AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QQCDuEEAg7hBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIO4QQCDuEEAg7hBM4O4QTODuEEAg7hBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QQuDuEGxg7hBsYO4QQuDuEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIO4QQCDuEEAg7hBWoO4QfeDuEH3g7hBWoO4QQCDuEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QRqDuEHJg7hB/4O4Qf+DuEHJg7hBGoO4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIO4QQCDuEEAg7hBeoO4Qf6DuEH/g7hB/4O4Qf6DuEF6g7hBAIO4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDuEEAg7hBAIO4QS6DuEHfg7hB/4O4Qf+DuEH/g7hB/4O4Qd+DuEEug7hBAIO4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIO4QQCDuEEFg7hBmoO4Qf+DuEH/g7hB/4O4Qf+DuEH/g7hB/4O4QZqDuEEFg7hBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDuEEAg7hBAIO4QUiDuEHwg7hB/4O4Qf+DuEH/g7hB/4O4Qf+DuEH/g7hB8IO4QUiDuEEAg7hBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIO4QQCDuEEQg7hBuIO4Qf+DuEH/g7hB/4O4Qf+DuEH/g7hB/4O4Qf+DuEH/g7hBuIO4QRCDuEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDuEEAg7hBAIO4QWaDuEH6g7hB/4O4Qf+DuEH/g7hB/4O4Qf+DuEH/g7hB/4O4Qf+DuEH6g7hBZoO4QQCDuEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIO4QQCDuEEgg7hB0oO4Qf+DuEH/g7hB/4O4Qf+DuUH/g7lB/4O4Qf+DuEH/g7hB/4O4Qf+DuEHSg7hBIIO4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDuEEAg7hBAYO4QYaDuEH/g7hB/4O4Qf+DuEH/g7lB/3ykP/98pD//g7lB/4O4Qf+DuEH/g7hB/4O4Qf+DuEGGg7hBAYO4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QQCDuEE3g7hB5oO4Qf+DuEH/g7hB/4O4Qf+CtEH/amw5/2psOf+CtEH/g7hB/4O4Qf+DuEH/g7hB/4O4QeaDuEE3g7hBAIO4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDuEEAg7hBCYO4QaaDuEH/g7hB/4O4Qf+DuEH/g7lB/3eTPf9fTDX/X0w1/3eTPf+DuUH/g7hB/4O4Qf+DuEH/g7hB/4O4QaaDuEEJg7hBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QQCDuEFSg7hB9IO4Qf+DuEH/g7hB/4O5Qf+ArkD/ZmE4/15INf9eSDX/ZmE4/4CuQP+DuUH/g7hB/4O4Qf+DuEH/g7hB9IO4QVKDuEEAg7hBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDuEEAg7hBFYO4QcKDuEH/g7hB/4O4Qf+DuEH/g7lB/3KFPP9eSTX/Xkk1/15JNf9eSTX/coU8/4O5Qf+DuEH/g7hB/4O4Qf+DuEH/g7hBwoO4QRWDuEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QQCDuEFxg7hB/IO4Qf+DuEH/g7hB/4O5Qf99pj//Y1c3/15INf9eSTX/Xkk1/15INf9jVzf/faY//4O5Qf+DuEH/g7hB/4O4Qf+DuEH8g7hBcYO4QQCDuEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDuEEAg7hBKIO4QdqDuEH/g7hB/4O4Qf+DuEH/g7dB/212Ov9eSDX/Xkk1/15JNf9eSTX/Xkk1/15INf9tdjr/g7dB/4O4Qf+DuEH/g7hB/4O4Qf+DuEHag7hBKIO4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QQODuEGSg7hB/4O4Qf+DuEH/g7hB/4O5Qf95mz7/YFA2/15INf9eSTX/Xkk1/15JNf9eSTX/Xkg1/2BQNv95mz7/g7lB/4O4Qf+DuEH/g7hB/4O4Qf+DuEGSg7hBA4O4QQAAAAAAAAAAAAAAAAAAAAAAAAAAAIO4QQCDuEEAg7hBQIO4QeyDuEH/g7hB/4O4Qf+DuEH/gbJA/2lpOf9dRzX/Xkk1/15JNf9eSTX/Xkk1/15JNf9eSTX/XUc1/2lpOf+BskD/g7hB/4O4Qf+DuEH/g7hB/4O4QeyDuEFAg7hBAIO4QQAAAAAAAAAAAAAAAAAAAAAAg7hBAIO4QQ2DuEGxg7hB/4O4Qf+DuEH/g7hB/4O5Qf91jj3/X0s1/15JNf9eSTX/Xkk1/15JNf9eSTX/Xkk1/15JNf9eSTX/X0s1/3WOPf+DuUH/g7hB/4O4Qf+DuEH/g7hB/4O4QbGDuEENg7hBAAAAAAAAAAAAAAAAAIO4QQCDuEEAg7hBXYO4QfiDuEH/g7hB/4O4Qf+DuUH/f6xA/2VdN/9eSDX/Xkk1/15JNf9eSTX/Xko15V5KNeVeSTX/Xkk1/15JNf9eSDX/ZV03/3+sQP+DuUH/g7hB/4O4Qf+DuEH/g7hB+IO4QV2DuEEAg7hBAAAAAAAAAAAAg7hBAIO4QRuDuEHMg7hB/4O4Qf+DuEH/g7hB/4O4Qf9wfzv/Xkk1/15JNf9eSTX/Xkk1/15JNfxfTDVuX0w1bl5JNfxeSTX/Xkk1/15JNf9eSTX/cH87/4O4Qf+DuEH/g7hB/4O4Qf+DuEH/g7hBzIO4QRuDuEEAAAAAAIO4QQCDuEEAg7hBfYO4Qf6DuEH/g7hB/4O4Qf+DuUH/fKI//2JUNv9eSDX/Xkk1/15JNf9eSTX/X0o1wWFQNhNhUDYTX0o1wV5JNf9eSTX/Xkk1/15INf9iVDb/fKI//4O5Qf+DuEH/g7hB/4O4Qf+DuEH+g7hBfYO4QQCDuEEAg7hBAIO4QS+DuEHhg7hB/4O4Qf+DuEH/g7hB/4K1Qf9scTn/Xkg1/15JNf9eSTX/Xkk1/15JNfNfTDVQXkg1AF5INQBfTDVQXkk1815JNf9eSTX/Xkk1/15INf9scTn/grVB/4O4Qf+DuEH/g7hB/4O4Qf+DuEHhg7hBL4O4QQCDuEEHg7hBnIO4Qf+DuEH/g7hB/4O4Qf+EukH/eJY9/2BONv9eSTX/Xkk1/15JNf9eSTX/X0s1pGJUNwhhUTYAYVE2AGJUNwhfSzWkXkk1/15JNf9eSTX/Xkk1/2BONv94lj3/hLpB/4O4Qf+DuEH/g7hB/4O4Qf+DuEGcg7hBB4O4QVeDuEHwg7hB/4O4Qf+DuEH/g7lB/4CvQP9nZDj/Xkg1/15JNf9eSTX/Xkk1/15KNeVgTTY1X0s1AGpmOQBqZjkAX0s1AGBNNjVeSjXlXkk1/15JNf9eSTX/Xkg1/2dkOP+Ar0D/g7lB/4O4Qf+DuEH/g7hB/4O4QfCDuEFXg7hBmoO4QciDuEHGg7hBxoO4QcaEukHGdpE9xl9LNcZeSTXGXkk1xl5JNcZeSTXJX0s1dWhhOQJiUzcAAAAAAAAAAABiUzcAaGE5Al9LNXVeSTXJXkk1xl5JNcZeSTXGX0s1xnaRPcaEukHGg7hBxoO4QcaDuEHGg7hByIO4QZqDuEEOg7hBDYO4QQ2DuEENg7hBDYO5QQ1scjoNXEQ0DV5JNQ1eSTUNXkk1DV5JNQ1gTTYFXkg1AAAAAAAAAAAAAAAAAAAAAABeSDUAYE02BV5JNQ1eSTUNXkk1DV5JNQ1cRDQNbHI5DYO5QQ2DuEENg7hBDYO4QQ2DuEENg7hBDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////n////w////8P///+B////gf///wD///4Af//+AH///AA///wAP//4AB//8AAP//AAD//gAAf/4AAH/8AAA//AAAP/gAAB/wAAAP8AAAD+AAAAfgAAAHwAAAA8AAAAOAAYABAAGAAAADwAAAA8AAAAfgAP////8=
--#

--% /realworld-serverless-application/static-website/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title>AWS Serverless Application Repository</title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but aws-sar-static-website doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

--#

--% /realworld-serverless-application/static-website/sam/app/template.yaml
AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This application creates a static website that interacts with the backend service.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: realworld-serverless-application-static-website
    Description: >-
      This application creates a static website that interacts with the backend service.
    Author: AWS Serverless Application Repository
    SpdxLicenseId: Apache-2.0
    Labels: [github, serverless, sam]
    HomePageUrl: https://github.com/awslabs/realworld-serverless-application
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/awslabs/realworld-serverless-application/tree/1.0.1
    LicenseUrl: ../../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'test'

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html

  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.2.0

  # this function is used only during deployment,
  # we use the web site assets as the source of the function
  # tricking cloudformation to pack up the web site files
  # using the standard cloudformation package process
  DeploymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        # the layer contains the deployment code
        # so the function "source" can just contain the web assets
        - !GetAtt DeploymentLayer.Outputs.Arn

      # point to directory with the assets so cloudformation can
      # package and upload them
      CodeUri: ../../dist/

      # really important: this will ensure that any change in
      # the bundled files gets deployed again. we're abusing
      # the custom resource pipeline here, so this will be used
      # to change parameters of the resource and re-trigger it
      AutoPublishAlias: live

      # the following two lines are required to make the layer work
      Runtime: python3.6
      Handler: deployer.resource_handler

      # set the timeout to something reasonable depending on
      # how long it takes to upload your assets to S3
      Timeout: 600

      # give the function access to the bucket where it
      # will upload the assets
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebsiteBucket

  # This is a custom resource that
  # will trigger the function during deployment
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:

      # the following two lines are required to
      # ensure that cloudformation will trigger the
      # resource every time you change the bundled files
      ServiceToken: !GetAtt DeploymentFunction.Arn
      Version: !Ref "DeploymentFunction.Version"

      # tell the deployer where to upload the files
      TargetBucket: !Ref WebsiteBucket

      Substitutions:
        # scope string substitutions to .js and .js.map files in the production built website
        FilePattern: "js/*.js*"
        Values:
          # replaces any occurrence of ${ValueKey} in the javascript code with the following values
          SAR_BACKEND_ENDPOINT: !Sub '{{resolve:ssm:/applications/apprepo/${Stage}/apigateway/ApplicationsApi/Endpoint:1}}/Prod'
          USER_POOL_ID: !Sub '{{resolve:ssm:/applications/apprepo/${Stage}/cognito/userpool/ApplicationsApi/Id:1}}'
          USER_POOL_WEB_CLIENT_ID: !Ref CognitoClient

      # Choose the ACL and caching policies
      # eg, for directly accessible web site
      # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600
  CognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: static-website
      GenerateSecret: false
      RefreshTokenValidity: 30
      UserPoolId: !Sub '{{resolve:ssm:/applications/apprepo/${Stage}/cognito/userpool/ApplicationsApi/Id:1}}'

  # Storing resources names to SSM
  WebsiteBucketName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/s3/WebsiteBucket/Name"
      Type: "String"
      Value: !Ref WebsiteBucket
      Description: "WebsiteBucket bucket name"
  WebsiteUrl:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/applications/apprepo/${Stage}/s3/WebsiteBucket/WebsiteURL"
      Type: "String"
      Value: !GetAtt WebsiteBucket.WebsiteURL
      Description: "WebsiteBucket website URL"
Outputs:
  Url:
    Description: The static website URL for the service.
    Value: !GetAtt WebsiteBucket.WebsiteURL

--#

--% /realworld-serverless-application/static-website/sam/cicd/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates IAM roles and use them to setup CD pipeline for the static website.

Parameters:
  GitHubOAuthTokenSecretId:
    Type: String
    Description: The AWS Secrets Manager Secret Id that stores Github OAuth token.
    Default: 'GitHubOAuthToken'
  GitHubOwner:
    Type: String
    Description: The GitHub owner of the repository.
    Default: 'awslabs'
  ApplicationStackName:
    Type: String
    Description: The stack name the CD pipeline will use to deploy the application.
    Default: 'realworld-serverless-application-static-website'
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'
Resources:
  CD:
    Type: 'AWS::Serverless::Application'
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:646794253159:applications/aws-sam-codepipeline-cd
        SemanticVersion: 0.1.3
      Parameters:
        GitHubOAuthToken: !Sub '{{resolve:secretsmanager:${GitHubOAuthTokenSecretId}}}'
        GitHubOwner: !Ref GitHubOwner
        GitHubRepo: realworld-serverless-application
        DeployStackName: !Ref ApplicationStackName
        DeployRoleName: !Ref DeployRole
        DeployParameterOverrides: !Sub '{"Stage":"${Stage}"}'
        IntegTestRoleName: !Ref IntegTestsRole
        BuildSpecFilePath: 'static-website/buildspec.yaml'
        IntegTestBuildSpecFilePath: 'static-website/buildspec-integ-test.yaml'

  # This policy defines the minimum IAM permissions required to Create and Delete a stack for static-website component into CloudFormation
  CloudFormationDeployPolicyWebsite:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref IntegTestsRole
        - !Ref DeployRole
      PolicyName: "deploy-website-create-delete-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - cloudformation:CreateChangeSet
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include
          - Effect: "Allow"
            Action:
              - lambda:CreateFunction
              - lambda:GetFunctionConfiguration
              - lambda:DeleteFunction
              - lambda:CreateAlias
              - lambda:GetAlias
              - lambda:DeleteAlias
              - lambda:PublishVersion
              - lambda:ListVersionsByFunction
              - lambda:AddPermission
              - lambda:RemovePermission
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: "Allow"
            Action:
              - lambda:RemoveLayerVersionPermission
              - lambda:AddLayerVersionPermission
              - lambda:PublishLayerVersion
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:s3-deployment
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:s3-deployment:*
          - Effect: "Allow"
            Action:
              - s3:DeleteBucket
              - s3:PutBucketWebsite
              - s3:CreateBucket
              - s3:GetBucketLocation
              - s3:GetBucketAcl
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::*
              - !Sub arn:${AWS::Partition}:s3:::*/*
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::awsserverlessrepo-changesets*/*
          - Effect: "Allow"
            Action:
              - serverlessrepo:GetCloudFormationTemplate
              - serverlessrepo:CreateCloudFormationTemplate
            Resource:
              - arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
          - Effect: "Allow"
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:AddTagsToResource
              - ssm:RemoveTagsFromResource
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/apprepo/*
          - Effect: "Allow"
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:TagRole
              - iam:PutRolePolicy
              - iam:GetRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
          - Effect: "Allow"
            Action:
              - cognito-idp:CreateUserPoolClient
              - cognito-idp:DeleteUserPoolClient
              - cognito-idp:UpdateUserPoolClient
            Resource:
              - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
  # This policy defines the minimum IAM permissions required to Create and Delete a stack for realworld-serverless-application-static-website into CloudFormation
  CloudFormationDeployPolicyBackend:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref IntegTestsRole
      PolicyName: "deploy-backend-create-delete-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - cloudformation:CreateChangeSet
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include
          - Effect: "Allow"
            Action:
              - dynamodb:DescribeTable
              - dynamodb:DeleteTable
              - dynamodb:CreateTable
              - dynamodb:UpdateContinuousBackups
              - dynamodb:DescribeContinuousBackups
              - dynamodb:UpdateTimeToLive
              - dynamodb:DescribeTimeToLive
              - dynamodb:TagResource
              - dynamodb:ListTagsOfResource
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
          - Effect: "Allow"
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:TagRole
              - iam:PutRolePolicy
              - iam:GetRolePolicy
              - iam:DeleteRolePolicy
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
          - Effect: "Allow"
            Action:
              - apigateway:*
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/*
          - Effect: "Allow"
            Action:
              - apigateway:POST
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis
          - Effect: "Allow"
            Action:
              - apigateway:PATCH
              - apigateway:GET
            Resource:
              - !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/account
          - Effect: "Allow"
            Action:
              - codedeploy:CreateApplication
              - codedeploy:DeleteApplication
            Resource:
              - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
          - Effect: "Allow"
            Action:
              - codedeploy:CreateDeploymentGroup
              - codedeploy:DeleteDeploymentGroup
              - codedeploy:CreateDeployment
            Resource:
              - !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*
          - Effect: "Allow"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:CreateGrant
              - kms:DescribeKey
              - kms:GenerateDataKey
            Resource:
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:aliases/aws/lambda
          - Effect: "Allow"
            Action:
              - lambda:CreateFunction
              - lambda:GetFunctionConfiguration
              - lambda:GetFunction
              - lambda:DeleteFunction
              - lambda:CreateAlias
              - lambda:GetAlias
              - lambda:DeleteAlias
              - lambda:PublishVersion
              - lambda:ListVersionsByFunction
              - lambda:AddPermission
              - lambda:RemovePermission
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: "Allow"
            Action:
              - logs:DescribeLogGroups
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: "Allow"
            Action:
              - logs:CreateLogGroup
              - logs:DescribeLogGroups
              - logs:DeleteLogGroup
              - logs:PutRetentionPolicy
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/AccessLog-*
          - Effect: "Allow"
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
              - ssm:AddTagsToResource
              - ssm:RemoveTagsFromResource
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/applications/apprepo/*
          - Effect: "Allow"
            Action:
              - cognito-idp:CreateUserPool
              - cognito-idp:DeleteUserPool
            Resource:
              - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
          - Effect: "Allow"
            Action:
              - cognito-idp:CreateUserPool
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DescribeAlarms
              - cloudwatch:DeleteAlarms
            Resource:
              - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
          - Effect: "Allow"
            Action:
              - kms:CreateKey
            Resource:
              - '*'
          - Effect: "Allow"
            Action:
              - kms:PutKeyPolicy
              - kms:DescribeKey
              - kms:ScheduleKeyDeletion
              - kms:EnableKeyRotation
              - kms:TagResource
              - kms:UntagResource
              - kms:ListResourceTags
            Resource:
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
  # This role is used to deploy realworld-serverless-application-static-website to CloudFormation.
  # In addition to the permissions from CloudFormationDeployPolicy, it also defines permissions that is required to update the stack in CloudFormation
  DeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Deploy CloudFormation stack ${ApplicationStackName}. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "iam-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - iam:UpdateRoleDescription
                  - iam:UpdateRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
        - PolicyName: "lambda-update-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateAlias
                  - lambda:ListTags
                  - lambda:TagResource
                  - lambda:UntagResource
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
  # This role is used to run integration tests in CodeBuild.
  # In addition to the permissions from CloudFormationDeployPolicy, it also defines permissions that is required by integration tests only.
  IntegTestsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Runs integration tests in CodeBuild for ${ApplicationStackName}. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "cloudformation-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DeleteStack
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/integ-tests*
        - PolicyName: "cognito-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                Resource:
                  - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*

--#

--% /realworld-serverless-application/static-website/src/App.vue
<template>
  <div id="app">
    <Nav />
    <router-view :key="$route.fullPath" />
  </div>
</template>

<script>
import Nav from '@/components/Nav.vue';

export default {
  name: 'app',
  components: {
    Nav,
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/config.js
/* eslint no-template-curly-in-string: 0 */

// This file vends configuration values that vary per stage, e.g., test, production.
// The deployment system does string substitution on variables within ${} prior to
// uploading the website to S3.

export const SAR_API_ENDPOINT = '${SAR_BACKEND_ENDPOINT}';

export const COGNITO_USER_POOL_DATA = {
  userPoolId: '${USER_POOL_ID}',
  userPoolWebClientId: '${USER_POOL_WEB_CLIENT_ID}',
};

--#

--% /realworld-serverless-application/static-website/src/main.js
import '@babel/polyfill';
import 'mutationobserver-shim';
import Vue from 'vue';
import './plugins/bootstrap-vue';
import Amplify, * as AmplifyModules from 'aws-amplify';
import { AmplifyPlugin, AmplifyEventBus } from 'aws-amplify-vue';
import App from './App.vue';
import router from './router';
import store from './store';
import SarApi from './services/sar-api';
import { IS_AUTHENTICATED, SIGNOUT } from './store/actions.type';
import { COGNITO_USER_POOL_DATA } from './config';

Vue.config.productionTip = false;

SarApi.init();

Amplify.configure({
  Auth: {
    ...COGNITO_USER_POOL_DATA,
  },
});

Vue.use(AmplifyPlugin, AmplifyModules);

AmplifyEventBus.$on('authState', async (state) => {
  if (state === 'signedOut') {
    await store.dispatch(SIGNOUT);
    router.push({ name: 'home' });
  } else if (state === 'signedIn') {
    await store.dispatch(IS_AUTHENTICATED);
    router.push({ name: 'applications' });
  }
});

router.beforeEach((to, from, next) => {
  if (to.matched.some(route => route.meta && route.meta.checkAuth)) {
    store.dispatch(IS_AUTHENTICATED)
      .then(() => {
        const token = store.getters.jwtToken;
        if (!token) {
          return next({ name: 'signin' });
        }
        return next();
      })
      .catch(() => next({ name: 'signin' }));
  }
  return next();
});

new Vue({
  store,
  router,
  render: h => h(App),
}).$mount('#app');

--#

--% /realworld-serverless-application/static-website/src/router.js
import Vue from 'vue';
import Router from 'vue-router';
import Home from './views/Home.vue';
import SignIn from './views/SignIn.vue';
import Applications from './views/Applications.vue';
import NewApplication from './views/NewApplication.vue';
import ViewApplication from './views/ViewApplication.vue';
import EditApplication from './views/EditApplication.vue';

Vue.use(Router);

export default new Router({
  routes: [
    {
      path: '/',
      name: 'home',
      component: Home,
      meta: {
        checkAuth: false,
      },
    },
    {
      path: '/signin',
      name: 'signin',
      component: SignIn,
    },
    {
      path: '/applications',
      name: 'applications',
      component: Applications,
      meta: {
        breadcrumb: [
          {
            text: 'My applications',
            active: true,
          },
        ],
        checkAuth: true,
      },
    },
    {
      path: '/applications/new',
      name: 'new-application',
      component: NewApplication,
      meta: {
        breadcrumb: [
          {
            text: 'My applications',
            to: { name: 'applications' },
          },
          {
            text: 'Publish an application',
            active: true,
          },
        ],
        checkAuth: true,
      },
    },
    {
      path: '/applications/:id',
      name: 'view-application',
      component: ViewApplication,
      meta: {
        breadcrumb: [
          {
            text: 'My applications',
            to: { name: 'applications' },
          },
          {
            text: 'Application details',
            active: true,
          },
        ],
        checkAuth: true,
      },
    },
    {
      path: '/applications/:id/edit',
      name: 'edit-application',
      component: EditApplication,
      meta: {
        breadcrumb: [
          {
            text: 'My applications',
            to: { name: 'applications' },
          },
          {
            text: 'Edit application',
            active: true,
          },
        ],
        checkAuth: true,
      },
    },
  ],
});

--#

--% /realworld-serverless-application/static-website/src/assets/logo.png

--#

--% /realworld-serverless-application/static-website/src/components/Breadcrumb.vue
<template>
  <b-breadcrumb :items="items" v-if="items" />
</template>

<script>
export default {
  name: 'breadcrumb',
  data() {
    let items = null;
    const meta = (this.$route || {}).meta || {};
    if (meta.breadcrumb) {
      items = this.$route.meta.breadcrumb;
    }
    return {
      items,
    };
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/components/ErrorAlert.vue
<template>
  <b-alert id="error-alert" show variant="danger" class="mb-3" v-if="message">Error: {{ message }}</b-alert>
</template>

<script>
export default {
  name: 'error-alert',
  props: {
    message: {
      type: String,
    },
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/components/Nav.vue
<template>
  <b-navbar type="dark" variant="dark">
    <b-navbar-brand to="/">Serverless Application Repository</b-navbar-brand>
    <b-navbar-nav class="ml-auto" id="signed-in-nav-bar" v-if="jwtToken">
        <b-nav-item id="signout" @click="onSignout()">SignOut</b-nav-item>
    </b-navbar-nav>
    <b-navbar-nav class="ml-auto" v-else>
        <b-nav-item id="signin" to="/signin">Sign In</b-nav-item>
    </b-navbar-nav>
  </b-navbar>
</template>

<script>
import { mapGetters } from 'vuex';
import { SIGNOUT } from '../store/actions.type';

export default {
  name: 'navBar',
  computed: {
    ...mapGetters(['jwtToken']),
  },
  methods: {
    onSignout() {
      this.$store
        .dispatch(SIGNOUT)
        .then(() => {
          this.$router.push({ name: 'home' });
        });
    },
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/plugins/bootstrap-vue.js
import Vue from 'vue';

import BootstrapVue from 'bootstrap-vue';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-vue/dist/bootstrap-vue.css';

Vue.use(BootstrapVue);

--#

--% /realworld-serverless-application/static-website/src/services/sar-api.js
import Vue from 'vue';
import axios from 'axios';
import VueAxios from 'vue-axios';
import { SAR_API_ENDPOINT } from '../config';

const SarApi = {
  init() {
    Vue.use(VueAxios, axios);
    Vue.axios.defaults.baseURL = SAR_API_ENDPOINT;
  },
  listApplications(jwtToken) {
    return Vue.axios.get('/applications', {
      headers: {
        Authorization: jwtToken,
      },
    })
      .then(response => response.data.applications);
  },
  createApplication(jwtToken, request) {
    return Vue.axios.post('/applications', {
      applicationId: request.applicationId,
      author: request.author,
      description: request.description,
      homePageUrl: request.homePageUrl,
    }, {
      headers: {
        Authorization: jwtToken,
      },
    })
      .then(response => response.data);
  },
  getApplication(jwtToken, applicationId) {
    return Vue.axios.get(`/applications/${applicationId}`, {
      headers: {
        Authorization: jwtToken,
      },
    }).then(response => response.data);
  },
  updateApplication(jwtToken, request) {
    return Vue.axios.patch(`/applications/${request.applicationId}`, {
      author: request.author,
      description: request.description,
      homePageUrl: request.homePageUrl,
    }, {
      headers: {
        Authorization: jwtToken,
      },
    })
      .then(response => response.data);
  },
  deleteApplication(jwtToken, applicationId) {
    return Vue.axios.delete(`/applications/${applicationId}`, {
      headers: {
        Authorization: jwtToken,
      },
    })
      .then(response => response.data);
  },
};

export default SarApi;

--#

--% /realworld-serverless-application/static-website/src/store/actions.type.js
export const SIGNOUT = 'signout';
export const IS_AUTHENTICATED = 'isAuthenticated';
export const LIST_APPLICATIONS = 'listApplications';
export const GET_APPLICATION = 'getApplication';
export const CREATE_APPLICATION = 'createApplication';
export const UPDATE_APPLICATION = 'updateApplication';
export const DELETE_APPLICATION = 'deleteApplication';

--#

--% /realworld-serverless-application/static-website/src/store/auth.module.js
/* eslint no-shadow: ["error", { "allow": ["state"] }] */

import { AuthClass } from '@aws-amplify/auth';
import {
  SIGNOUT, IS_AUTHENTICATED,
} from './actions.type';
import { SET_ERROR, SET_TOKEN } from './mutations.type';
import { COGNITO_USER_POOL_DATA } from '../config';


const Auth = new AuthClass(COGNITO_USER_POOL_DATA);

const state = {
  error: null,
  jwtToken: null,
};

const getters = {
  jwtToken(state) {
    return state.jwtToken;
  },
  error(state) {
    return state.error;
  },
};

const actions = {
  [IS_AUTHENTICATED](context) {
    return new Promise((resolve, reject) => {
      Auth.currentSession()
        .then((user) => {
          if (user.isValid()) {
            context.commit(SET_TOKEN, user.getIdToken().getJwtToken());
            resolve();
          } else {
            reject();
          }
        })
        .catch((e) => {
          context.commit(SET_TOKEN, null);
          context.commit(SET_ERROR, e);
          reject(e);
        });
    });
  },
  [SIGNOUT](context) {
    return Auth.signOut().then(() => {
      context.commit(SET_TOKEN, null);
      context.commit(SET_ERROR, null);
    });
  },
};

const mutations = {
  [SET_ERROR](state, error) {
    state.error = error;
  },
  [SET_TOKEN](state, token) {
    state.jwtToken = token;
  },
};

export default {
  state,
  actions,
  mutations,
  getters,
};

--#

--% /realworld-serverless-application/static-website/src/store/index.js
import Vue from 'vue';
import Vuex from 'vuex';
import auth from './auth.module';
import sar from './sar.module';

Vue.use(Vuex);

export default new Vuex.Store({
  modules: {
    auth,
    sar,
  },
});

--#

--% /realworld-serverless-application/static-website/src/store/mutations.type.js
export const SET_ERROR = 'setError';
export const SET_TOKEN = 'setToken';

--#

--% /realworld-serverless-application/static-website/src/store/sar.module.js
import {
  LIST_APPLICATIONS, GET_APPLICATION, CREATE_APPLICATION, UPDATE_APPLICATION,
  DELETE_APPLICATION,
} from './actions.type';
import SarApi from '../services/sar-api';

const actions = {
  [LIST_APPLICATIONS](context) {
    return SarApi.listApplications(context.getters.jwtToken);
  },
  [GET_APPLICATION](context, applicationId) {
    return SarApi.getApplication(context.getters.jwtToken, applicationId);
  },
  [CREATE_APPLICATION](context, request) {
    return SarApi.createApplication(context.getters.jwtToken, request);
  },
  [UPDATE_APPLICATION](context, request) {
    return SarApi.updateApplication(context.getters.jwtToken, request);
  },
  [DELETE_APPLICATION](context, applicationId) {
    return SarApi.deleteApplication(context.getters.jwtToken, applicationId);
  },
};

export default {
  actions,
};

--#

--% /realworld-serverless-application/static-website/src/views/Applications.vue
<template>
  <div>
    <Breadcrumb />
    <b-container>
      <ErrorAlert :message="error" />
      <b-row>
        <b-col>
          <h2>My applications</h2>
        </b-col>
      </b-row>
      <b-row class="mb-3">
        <b-col>
          <b-button
            variant="primary"
            class="float-right"
            :to="{name: 'new-application'}"
          >Publish application</b-button>
        </b-col>
      </b-row>
      <b-row>
        <b-table striped :items="applications" :fields="fields" primary-key="applicationId" small>
          <template v-slot:cell(applicationId)="data">
            <router-link
              :to="{name: 'view-application', params: {id: data.item.applicationId}}"
            >{{ data.item.applicationId }}</router-link>
          </template>
          <template
            v-slot:cell(creationTime)="data"
          >{{ new Date(data.item.creationTime).toLocaleDateString('en-US') }}</template>
        </b-table>

        <b-container class="text-center" v-if="applications !== null && applications.length === 0">
          Once you publish an application, you'll see it here. To get started, click the 'Publish
          application' button.
        </b-container>
      </b-row>
    </b-container>
  </div>
</template>

<script>
import Breadcrumb from '@/components/Breadcrumb.vue';
import ErrorAlert from '@/components/ErrorAlert.vue';
import { LIST_APPLICATIONS } from '../store/actions.type';

export default {
  name: 'applications',
  components: {
    Breadcrumb,
    ErrorAlert,
  },
  data() {
    return {
      applications: null,
      error: null,
      fields: [
        {
          key: 'applicationId',
          label: 'Application name',
        },
        {
          key: 'description',
          label: 'Description',
        },
        {
          key: 'creationTime',
          label: 'Creation time',
        },
      ],
    };
  },
  methods: {
    fetchApplications() {
      this.$store.dispatch(LIST_APPLICATIONS)
        .then((applications) => {
          this.applications = applications;
        })
        .catch((error) => {
          this.error = error.message;
        });
    },
  },

  created() {
    this.fetchApplications();
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/views/EditApplication.vue
<template>
  <div>
    <Breadcrumb />
    <b-container>
      <ErrorAlert :message="error" />
      <b-row>
        <b-col>
          <h2>Edit {{ this.$route.params.id }}</h2>
        </b-col>
      </b-row>
      <b-row>
        <b-col>
          <b-card title="Application details">
            <b-form @submit.prevent="onSubmit()">
              <b-form-group
                id="author-group"
                label="Author"
                label-for="author"
                description="Use a name you'd like to publish your application under.
                This name is visible to the public."
              >
                <b-form-input id="author" v-model="form.author" required />
              </b-form-group>
              <b-form-group
                id="homepage-url-group"
                label="Home page - optional"
                label-for="homepage-url"
                description="Point people to your application's home page (e.g. your GitHub repository URL)."
              >
                <b-form-input id="homepage-url" v-model="form.homePageUrl" />
              </b-form-group>
              <b-form-group
                id="description-group"
                label="Description"
                label-for="description"
                description="Help people understand what your app should be used for, and how it works."
              >
                <b-form-textarea id="description" v-model="form.description" required rows="3" />
              </b-form-group>

              <b-button type="submit" variant="primary" class="float-right ml-2">Save application</b-button>
              <b-button
                id="cancel"
                :to="{name: 'view-application', params: {id: this.$route.params.id}}"
                class="float-right"
              >Cancel</b-button>
            </b-form>
          </b-card>
        </b-col>
      </b-row>
    </b-container>
  </div>
</template>

<script>
import Breadcrumb from '@/components/Breadcrumb.vue';
import ErrorAlert from '@/components/ErrorAlert.vue';
import { GET_APPLICATION, UPDATE_APPLICATION } from '../store/actions.type';

export default {
  name: 'edit-application',
  components: {
    Breadcrumb,
    ErrorAlert,
  },
  data() {
    return {
      form: {
        author: null,
        homePageUrl: null,
        description: null,
      },
      error: null,
    };
  },
  methods: {
    fetchApplication() {
      this.error = null;
      this.$store.dispatch(GET_APPLICATION, this.$route.params.id)
        .then((application) => {
          this.form.author = application.author;
          this.form.homePageUrl = application.homePageUrl;
          this.form.description = application.description;
        })
        .catch((error) => {
          this.error = error.message;
        });
    },
    onSubmit() {
      this.error = null;
      const request = {
        applicationId: this.$route.params.id,
        description: this.form.description,
        author: this.form.author,
      };
      if (this.form.homePageUrl) {
        request.homePageUrl = this.form.homePageUrl;
      }
      this.$store.dispatch(UPDATE_APPLICATION, request)
        .then(() => {
          this.$router.push({
            name: 'view-application',
            params: { id: this.$route.params.id },
          });
        })
        .catch((error) => {
          this.error = error.message;
        });
    },
  },
  created() {
    this.fetchApplication();
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/views/Home.vue
<template>
  <b-jumbotron
    header="Welcome!"
    lead="A production grade serverless application"
  >

    <hr class="my-4" />
    <p>This is a cover page for the front end module of the awslabs/realworld-serverless-application project. See more details <a href="https://github.com/awslabs/realworld-serverless-application/wiki">here</a>.</p>

    <b-button id="try-demo" variant="primary" to="/applications">Try the Demo</b-button>
    &nbsp;
    <b-button variant="success" href="https://github.com/awslabs/realworld-serverless-application">View Source Code</b-button>
  </b-jumbotron>
</template>

<script>
export default {
  name: 'home',
  components: {},
};
</script>

--#

--% /realworld-serverless-application/static-website/src/views/NewApplication.vue
<template>
  <div>
    <Breadcrumb />
    <b-container>
      <b-row>
        <b-col>
          <h2>Publish an application</h2>
        </b-col>
      </b-row>
      <b-row>
        <b-col>
          <b-card title="Application details">
            <b-form @submit.prevent="onSubmit()">
              <b-form-group
                id="application-id-group"
                label="Application name"
                label-for="application-id"
                description="Choose a short, memorable name that describes what your app does."
              >
                <b-form-input
                  id="application-id"
                  v-model="form.applicationId"
                  required
                  placeholder="my-application"
                />
              </b-form-group>
              <b-form-group
                id="author-group"
                label="Author"
                label-for="author"
                description="Use a name you'd like to publish your application under.
                This name is visible to the public."
              >
                <b-form-input id="author" v-model="form.author" required />
              </b-form-group>
              <b-form-group
                id="homepage-url-group"
                label="Home page - optional"
                label-for="homepage-url"
                description="Point people to your application's home page (e.g. your GitHub repository URL)."
              >
                <b-form-input id="homepage-url" v-model="form.homePageUrl" />
              </b-form-group>
              <b-form-group
                id="description-group"
                label="Description"
                label-for="description"
                description="Help people understand what your app should be used for, and how it works."
              >
                <b-form-textarea id="description" v-model="form.description" required rows="3" />
              </b-form-group>

              <ErrorAlert :message="error" />

              <b-button type="submit" variant="primary" class="float-right ml-2">Publish application</b-button>
              <b-button id="cancel" to="/applications" class="float-right">Cancel</b-button>
            </b-form>
          </b-card>
        </b-col>
      </b-row>
    </b-container>
  </div>
</template>

<script>
import Breadcrumb from '@/components/Breadcrumb.vue';
import ErrorAlert from '@/components/ErrorAlert.vue';
import { CREATE_APPLICATION } from '../store/actions.type';

export default {
  name: 'new-application',
  components: {
    Breadcrumb,
    ErrorAlert,
  },
  data() {
    return {
      form: {
        applicationId: null,
        author: null,
        homePageUrl: null,
        description: null,
      },
      error: null,
    };
  },
  methods: {
    onSubmit() {
      this.error = null;
      const payload = {
        applicationId: this.form.applicationId,
        author: this.form.author,
        description: this.form.description,
      };
      if (this.form.homePageUrl) {
        payload.homePageUrl = this.form.homePageUrl;
      }
      this.$store.dispatch(CREATE_APPLICATION, payload)
        .then(() => {
          this.$router.push({
            name: 'view-application',
            params: { id: this.form.applicationId },
          });
        })
        .catch((error) => {
          this.error = error.message;
        });
    },
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/views/SignIn.vue
<template>
  <b-jumbotron>
    <div style="text-align: center">
      <amplify-authenticator v-bind:authConfig="authConfig"></amplify-authenticator>
    </div>
  </b-jumbotron>
</template>

<script>
export default {
  name: 'signin',
  props: [],
  data() {
    return {
      authConfig: {
        usernameAttributes: 'email',
        signUpConfig: {
          hideAllDefaults: true,
          signUpFields: [
            {
              label: 'Email',
              key: 'email',
              required: true,
              displayOrder: 1,
              type: 'string',
              signUpWith: true,
            },
            {
              label: 'Password',
              key: 'password',
              required: true,
              displayOrder: 2,
              type: 'password',
            },
          ],
        },
      },
    };
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/src/views/ViewApplication.vue
<template>
  <div>
    <Breadcrumb />
    <b-container>
      <ErrorAlert :message="error" />
      <b-row>
        <b-col>
          <h2 v-if="application">{{ application.applicationId }}</h2>
        </b-col>
      </b-row>
      <b-row class="mb-3">
        <b-col>
          <b-button
            id="edit"
            v-if="application"
            class="float-right"
            :to="{name: 'edit-application', params: {id: application.applicationId}}"
          >Edit</b-button>
          <b-button
            id="delete"
            v-if="application"
            v-b-modal.delete-modal
            variant="danger"
            class="float-right mr-2"
          >Delete</b-button>
          <b-modal
            id="delete-modal"
            title="Delete application"
            ok-title="Delete application"
            @ok="deleteApplication()"
          >
            <p>Are you sure you want to delete this application?</p>
          </b-modal>
        </b-col>
      </b-row>
      <b-row class="mt-3">
        <b-col>
          <b-card title="Application details">
            <b-card-body>
              <b-row>
                <b-col>
                  <div>
                    <strong>Name</strong>
                  </div>
                  <div v-if="application">{{ application.applicationId }}</div>
                </b-col>
              </b-row>
              <b-row class="mt-3">
                <b-col>
                  <div>
                    <strong>Author</strong>
                  </div>
                  <div v-if="application">{{ application.author }}</div>
                </b-col>
              </b-row>
              <b-row class="mt-3">
                <b-col>
                  <div>
                    <strong>Home Page</strong>
                  </div>
                  <div v-if="application">{{ application.homePageUrl }}</div>
                </b-col>
              </b-row>
              <b-row class="mt-3">
                <b-col>
                  <div>
                    <strong>Creation time</strong>
                  </div>
                  <div v-if="application">{{ application.creationTime.toLocaleString('en-US') }}</div>
                </b-col>
              </b-row>
              <b-row class="mt-3">
                <b-col>
                  <div>
                    <strong>Description</strong>
                  </div>
                  <div v-if="application">{{ application.description }}</div>
                </b-col>
              </b-row>
            </b-card-body>
          </b-card>
        </b-col>
      </b-row>
    </b-container>
  </div>
</template>

<script>
import Breadcrumb from '@/components/Breadcrumb.vue';
import ErrorAlert from '@/components/ErrorAlert.vue';
import { GET_APPLICATION, DELETE_APPLICATION } from '../store/actions.type';

export default {
  name: 'view-application',
  components: {
    Breadcrumb,
    ErrorAlert,
  },
  data() {
    return {
      application: null,
      error: null,
    };
  },
  methods: {
    fetchApplication() {
      this.error = null;
      this.$store.dispatch(GET_APPLICATION, this.$route.params.id)
        .then((application) => {
          this.application = application;
        })
        .catch((error) => {
          this.error = error.message;
        });
    },
    deleteApplication() {
      this.error = null;
      this.$store.dispatch(DELETE_APPLICATION, this.$route.params.id)
        .then(() => {
          this.$router.push({ name: 'applications' });
        })
        .catch((error) => {
          this.error = error.message;
        });
    },
  },
  created() {
    this.fetchApplication();
  },
};
</script>

--#

--% /realworld-serverless-application/static-website/tests/setup.js
/* eslint no-undef: 0 */

// common mocha setup

import chai from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';

// support sinon-chai assertions
chai.use(sinonChai);

afterEach(() => {
  sinon.restore();
});

--#

--% /realworld-serverless-application/static-website/tests/e2e/custom-assertions/elementCount.js
// A custom Nightwatch assertion.
// The assertion name is the filename.
// Example usage:
//
//   browser.assert.elementCount(selector, count)
//
// For more information on custom assertions see:
// http://nightwatchjs.org/guide#writing-custom-assertions

exports.assertion = function elementCount(selector, count) {
  this.message = `Testing if element <${selector}> has count: ${count}`;
  this.expected = count;
  this.pass = val => val === count;
  this.value = res => res.value;
  function evaluator(_selector) {
    return document.querySelectorAll(_selector).length;
  }
  this.command = cb => this.api.execute(evaluator, [selector], cb);
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/page-objects/appDetails.js
module.exports = {
  elements: {
    deleteBtn: '#delete',
    editBtn: '#edit',
    deleteModal: '#delete-modal',
    confirmDeleteBtn: '#delete-modal footer button.btn-primary',
    details: '.card-body .card-body',
  },
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/page-objects/editApp.js
module.exports = {
  elements: {
    authorInput: '#author',
    homePageUrlInput: '#homepage-url',
    descriptionInput: '#description',
    saveBtn: 'button[type=Submit]',
    error: '#error-alert',
  },
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/page-objects/myApps.js
module.exports = {
  elements: {
    publishAppBtn: 'a.btn',
    appsTable: 'table',
    appsTableRows: 'table tbody tr',
  },
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/page-objects/publishApp.js
module.exports = {
  elements: {
    appNameInput: '#application-id',
    authorInput: '#author',
    homePageUrlInput: '#homepage-url',
    descriptionInput: '#description',
    publishBtn: 'button[type=Submit]',
    error: '#error-alert',
  },
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/page-objects/signIn.js
module.exports = {
  elements: {
    usernameInput: 'input[data-test=email-input]',
    passwordInput: 'input[data-test=sign-in-password-input]',
    signInBtn: 'button[data-test=sign-in-sign-in-button]',
    createAccount: '[data-test=sign-in-create-account-link]',
    createAccountEmailInput: 'div[signupfield=email] input',
    createAccountPasswordInput: 'div[signupfield=password] input',
    createAccountBtn: 'button[data-test=sign-up-create-account-button]',
    confirmationCodeInput: '[data-test="confirm-sign-up-confirmation-code-input"]',
  },
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/page-objects/welcome.js
module.exports = {
  elements: {
    signInBtn: 'nav .nav-link:nth-child(1)',
    tryDemoBtn: '#try-demo',
  },
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/specs/applications.js
/* eslint-disable no-param-reassign */
// For authoring Nightwatch tests, see
// http://nightwatchjs.org/guide#usage
const uuid = require('uuid');
const { createTestUser } = require('../utils/cognitoAdmin');

const generateTestData = () => {
  const id = uuid.v4();
  return {
    name: `testName-${id}`,
    author: `testAuthor-${id}`,
    homePage: `http://test.com/${id}`,
    description: `testDescription-${id}`,
  };
};

module.exports = {
  before(browser, done) {
    browser.globals.testData = { app: generateTestData() };

    createTestUser().then((testUser) => {
      browser.globals.testUser = testUser;
      done();
    });
  },
  beforeEach: (browser) => {
    // Sign in before each test
    const { username, password } = browser.globals.testUser;
    browser.url(browser.launchUrl);

    browser.page.welcome()
      .click('@signInBtn');

    browser.page.signIn()
      .setValue('@usernameInput', username)
      .setValue('@passwordInput', password)
      .click('@signInBtn');

    browser.assert.urlEquals(`${browser.launchUrl}/#/applications`, 'Should redirect to My applications page after sign in');
  },
  afterEach: (browser) => {
    browser.end();
  },
  'Publish application': (browser) => {
    browser.url(browser.launchUrl);
    browser.page.welcome()
      .click('@tryDemoBtn');

    browser.page.myApps()
      .click('@publishAppBtn');

    const testApp = browser.globals.testData.app;

    browser.page.publishApp()
      .setValue('@appNameInput', testApp.name)
      .setValue('@authorInput', testApp.author)
      .setValue('@homePageUrlInput', testApp.homePage)
      .setValue('@descriptionInput', testApp.description)
      .click('@publishBtn')
      .waitForElementNotPresent('@publishBtn');

    browser.assert.urlEquals(`${browser.launchUrl}/#/applications/${testApp.name}`, 'Should redirect to the App details page');
  },
  'Application details': (browser) => {
    const testApp = browser.globals.testData.app;
    browser.url(`${browser.launchUrl}/#/applications/${testApp.name}`);
    browser.page.appDetails().waitForElementVisible('@editBtn');

    browser.page.appDetails().assert.containsText('@details', testApp.name);
    browser.page.appDetails().assert.containsText('@details', testApp.author);
    browser.page.appDetails().assert.containsText('@details', testApp.homePage);
    browser.page.appDetails().assert.containsText('@details', testApp.description);
  },
  'My applications': (browser) => {
    const testApp = browser.globals.testData.app;
    browser.url(`${browser.launchUrl}/#/applications`);

    browser.page.myApps().waitForElementVisible('@appsTableRows');

    browser.page.myApps().assert.containsText('@appsTable', testApp.name);
    browser.page.myApps().assert.containsText('@appsTable', testApp.description);
  },
  'Edit application': (browser) => {
    const testApp = browser.globals.testData.app;

    browser.url(`${browser.launchUrl}/#/applications/${testApp.name}/edit`);

    const modifiedAuthor = 'modifiedAuthor';
    const modifiedHomePage = 'http://modified-page.com';
    const modifiedDescription = 'modifiedDescription';

    browser.page.editApp()
      .pause(2000)
      .clearValue('@authorInput')
      .setValue('@authorInput', modifiedAuthor)
      .clearValue('@homePageUrlInput')
      .setValue('@homePageUrlInput', modifiedHomePage)
      .clearValue('@descriptionInput')
      .setValue('@descriptionInput', modifiedDescription)
      .click('@saveBtn')
      .waitForElementNotPresent('@saveBtn');

    browser.assert.urlEquals(`${browser.launchUrl}/#/applications/${testApp.name}`, 'Should redirect to the App details page');
    browser.page.appDetails().assert.containsText('@details', modifiedAuthor);
    browser.page.appDetails().assert.containsText('@details', modifiedHomePage);
    browser.page.appDetails().assert.containsText('@details', modifiedDescription);
  },
  'Delete application': (browser) => {
    const testApp = browser.globals.testData.app;

    browser.url(`${browser.launchUrl}/#/applications/${testApp.name}`);

    browser.page.appDetails()
      .waitForElementVisible('@deleteBtn')
      .click('@deleteBtn')
      .waitForElementVisible('@deleteModal')
      .click('@confirmDeleteBtn')
      .waitForElementNotPresent('@confirmDeleteBtn');

    browser.assert.urlEquals(`${browser.launchUrl}/#/applications`, 'Should redirect to My applications page');
    browser.page.myApps().expect.element('@appsTable').text.to.not.contain(testApp.name, 'Deleted app should no longer be listed on My applications');
  },
};

--#

--% /realworld-serverless-application/static-website/tests/e2e/utils/cognitoAdmin.js
const AWS = require('aws-sdk');
const uuid = require('uuid');

const USER_POOL_ID = process.env.COGNITO_USER_POOL_ID;
const cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider({ region: 'us-east-1' });

const createTestUser = async () => {
  const username = `success+${uuid.v4()}@simulator.amazonses.com`;
  const password = uuid.v4();

  await cognitoidentityserviceprovider.adminCreateUser({
    UserPoolId: USER_POOL_ID,
    Username: username,
  }).promise();

  await cognitoidentityserviceprovider.adminSetUserPassword({
    Password: password,
    UserPoolId: USER_POOL_ID,
    Username: username,
    Permanent: true,
  }).promise();
  return { username, password };
};

module.exports = {
  createTestUser,
};

--#

--% /realworld-serverless-application/static-website/tests/unit/.eslintrc.js
module.exports = {
  env: {
    mocha: true,
  },
};

--#

--% /realworld-serverless-application/static-website/tests/unit/components/Nav.spec.js
/* eslint no-unused-expressions: 0 */

import Vuex from 'vuex';
import { expect } from 'chai';
import sinon from 'sinon';
import { mount, createLocalVue } from '@vue/test-utils';
import BootstrapVue from 'bootstrap-vue';
import Nav from '@/components/Nav.vue';

const localVue = createLocalVue();
localVue.use(BootstrapVue);
localVue.use(Vuex);

describe('Nav.vue', () => {
  describe('when a user is signed in', () => {
    let getters;
    let actions;
    let store;

    beforeEach(() => {
      actions = {
        signout: sinon.fake(),
      };
      getters = {
        jwtToken: () => sinon.match.any,
        error: sinon.fake(),
      };
      store = new Vuex.Store({
        modules: {
          auth: {
            actions,
            getters,
          },
        },
      });
    });
    it('renders with a SignOut button', () => {
      const wrapper = mount(Nav, {
        store,
        localVue,
      });
      expect(wrapper.contains('#signout')).to.equal(true);
    });

    it('dispatches SignOut action when button clicked', () => {
      const wrapper = mount(Nav, {
        store,
        localVue,
      });
      expect(wrapper.contains('#signout')).to.equal(true);
      wrapper.find('#signout a').trigger('click');
      expect(actions.signout).to.have.been.called;
    });
  });

  describe('when a user is not signed in', () => {
    it('renders without a SignOut button', () => {
      const getters = {
        jwtToken: () => null,
        error: sinon.fake(),
      };
      const store = new Vuex.Store({
        modules: {
          auth: {
            getters,
          },
        },
      });
      const wrapper = mount(Nav, {
        store,
        localVue,
      });
      expect(wrapper.contains('#signout')).to.equal(false);
      expect(wrapper.contains('#signin')).to.equal(true);
    });
  });
});

--#

--% /realworld-serverless-application/static-website/tests/unit/views/Applications.spec.js
/* eslint no-unused-expressions: 0 */

import Vuex from 'vuex';
import { expect } from 'chai';
import sinon from 'sinon';
import {
  mount, createLocalVue, RouterLinkStub,
} from '@vue/test-utils';
import BootstrapVue from 'bootstrap-vue';
import Applications from '@/views/Applications.vue';

// render bootstrap components
const localVue = createLocalVue();
localVue.use(BootstrapVue);
localVue.use(Vuex);

const APPLICATIONS = [
  {
    applicationId: 'test-app-1',
    description: 'test-app-1 description',
    author: 'test-author',
    creationTime: new Date('9/8/2019'),
    homePageUrl: 'https://aws.amazon.com/serverless',
  },
  {
    applicationId: 'test-app-2',
    description: 'test-app-2 description',
    author: 'test-author',
    creationTime: new Date('3/25/2019'),
    homePageUrl: 'https://aws.amazon.com/serverless',
  },
  {
    applicationId: 'test-app-3',
    description: 'test-app-3 description',
    author: 'test-author',
    creationTime: new Date('8/28/2019'),
    homePageUrl: 'https://aws.amazon.com/serverless',
  },
];

let actions;
let store;
describe('Applications.vue', () => {
  describe('with no applications', () => {
    beforeEach(() => {
      actions = {
        listApplications: sinon.stub().resolves([]),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('renders a message to the user', async () => {
      const wrapper = mount(Applications, {
        localVue,
        store,
        stubs: {
          RouterLink: RouterLinkStub,
        },
      });

      await wrapper.vm.$nextTick();

      expect(actions.listApplications).to.have.been.called;
      expect(wrapper.contains('#error-alert')).to.equal(false);

      expect(wrapper.text()).to.include('My applications');
      expect(wrapper.text()).to.include("Once you publish an application, you'll see it here");
    });
  });
  describe('with applications', () => {
    beforeEach(() => {
      actions = {
        listApplications: sinon.stub().resolves(APPLICATIONS),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('renders the applications table', async () => {
      const wrapper = mount(Applications, {
        store,
        localVue,
        stubs: {
          RouterLink: RouterLinkStub,
        },
      });

      await wrapper.vm.$nextTick();

      expect(actions.listApplications).to.have.been.called;
      expect(wrapper.contains('#error-alert')).to.equal(false);

      expect(wrapper.text()).to.include('My applications');
      expect(wrapper.text()).not.to.include("Once you publish an application, you'll see it here");

      const rows = wrapper.findAll('tr');
      expect(rows.length).to.equal(4);

      const headerRow = rows.at(0);
      const headerCols = headerRow.findAll('th');
      expect(headerCols.length).to.equal(3);
      expect(headerCols.at(0).text()).to.equal('Application name');
      expect(headerCols.at(1).text()).to.equal('Description');
      expect(headerCols.at(2).text()).to.equal('Creation time');

      const app1Row = rows.at(1);
      const app1Cols = app1Row.findAll('td');
      expect(app1Cols.at(0).text()).to.equal('test-app-1');
      expect(app1Cols.at(0).find(RouterLinkStub).props().to).to.deep.include({ name: 'view-application', params: { id: 'test-app-1' } });
      expect(app1Cols.at(1).text()).to.equal('test-app-1 description');
      expect(app1Cols.at(2).text()).to.equal('9/8/2019');

      const app2Row = rows.at(2);
      const app2Cols = app2Row.findAll('td');
      expect(app2Cols.at(0).text()).to.equal('test-app-2');
      expect(app2Cols.at(0).find(RouterLinkStub).props().to).to.deep.include({ name: 'view-application', params: { id: 'test-app-2' } });
      expect(app2Cols.at(1).text()).to.equal('test-app-2 description');
      expect(app2Cols.at(2).text()).to.equal('3/25/2019');

      const app3Row = rows.at(3);
      const app3Cols = app3Row.findAll('td');
      expect(app3Cols.at(0).text()).to.equal('test-app-3');
      expect(app3Cols.at(0).find(RouterLinkStub).props().to).to.deep.include({ name: 'view-application', params: { id: 'test-app-3' } });
      expect(app3Cols.at(1).text()).to.equal('test-app-3 description');
      expect(app3Cols.at(2).text()).to.equal('8/28/2019');
    });
  });
  describe('on error', () => {
    beforeEach(() => {
      actions = {
        listApplications: sinon.stub().rejects(new Error('boom!')),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('renders the error message', async () => {
      const wrapper = mount(Applications, {
        store,
        localVue,
        stubs: {
          RouterLink: RouterLinkStub,
        },
      });

      await wrapper.vm.$nextTick();
      expect(actions.listApplications).to.have.been.called;

      expect(wrapper.contains('#error-alert')).to.equal(true);
      expect(wrapper.find('#error-alert').text()).to.include('boom!');

      expect(wrapper.text()).to.include('My applications');
      expect(wrapper.text()).not.to.include("Once you publish an application, you'll see it here");

      const rows = wrapper.findAll('tr');
      expect(rows.length).to.equal(1);

      const headerRow = rows.at(0);
      const headerCols = headerRow.findAll('th');
      expect(headerCols.length).to.equal(3);
      expect(headerCols.at(0).text()).to.equal('Application name');
      expect(headerCols.at(1).text()).to.equal('Description');
      expect(headerCols.at(2).text()).to.equal('Creation time');
    });
  });
});

--#

--% /realworld-serverless-application/static-website/tests/unit/views/EditApplication.spec.js
/* eslint no-unused-expressions: 0 */

import Vuex from 'vuex';
import { expect } from 'chai';
import sinon from 'sinon';
import { mount, createLocalVue, RouterLinkStub } from '@vue/test-utils';
import BootstrapVue from 'bootstrap-vue';
import EditApplication from '@/views/EditApplication.vue';

// render bootstrap components
const localVue = createLocalVue();
localVue.use(BootstrapVue);

const APPLICATION = {
  applicationId: 'test-app-1',
  description: 'test-app-1 description',
  author: 'test-author',
  creationTime: new Date('9/8/2019'),
  homePageUrl: 'https://aws.amazon.com/serverless',
};

let actions;
let store;
describe('EditApplication.vue', () => {
  const route = {
    params: { id: APPLICATION.applicationId },
  };

  it('should render the form', async () => {
    actions = {
      getApplication: sinon.stub().resolves(APPLICATION),
    };
    const wrapper = mount(EditApplication, {
      localVue,
      stubs: {
        RouterLink: RouterLinkStub,
      },
      mocks: {
        $route: route,
        $store: new Vuex.Store({
          actions,
        }),
      },
    });

    await wrapper.vm.$nextTick();
    expect(actions.getApplication).to.have.been.called;
    expect(wrapper.find('h2').text()).to.equal('Edit test-app-1');
    expect(wrapper.contains('#error-alert')).to.equal(false);

    expect(wrapper.contains('#author-group')).to.equal(true);
    expect(wrapper.find('#author-group label').text()).to.equal('Author');
    expect(wrapper.contains('#author-group input#author')).to.equal(true);
    expect(wrapper.find('#author-group input#author').props().value).to.equal(APPLICATION.author);

    expect(wrapper.contains('#homepage-url-group')).to.equal(true);
    expect(wrapper.find('#homepage-url-group label').text()).to.equal('Home page - optional');
    expect(wrapper.contains('#homepage-url-group input#homepage-url')).to.equal(true);
    expect(wrapper.find('#homepage-url-group input#homepage-url').props().value).to.equal(APPLICATION.homePageUrl);

    expect(wrapper.contains('#description-group')).to.equal(true);
    expect(wrapper.find('#description-group label').text()).to.equal('Description');
    expect(wrapper.contains('#description-group textarea#description')).to.equal(true);
    expect(wrapper.find('#description-group textarea#description').props().value).to.equal(APPLICATION.description);
  });

  describe('on successful update', () => {
    beforeEach(() => {
      actions = {
        getApplication: sinon.stub().resolves(APPLICATION),
        updateApplication: sinon.stub().resolves(APPLICATION),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('should redirect to ViewApplication.vue', async () => {
      const router = {
        push: sinon.spy(),
      };
      const wrapper = mount(EditApplication, {
        localVue,
        stubs: {
          RouterLink: RouterLinkStub,
        },
        mocks: {
          $router: router,
          $route: route,
          $store: store,
        },
      });

      await wrapper.vm.$nextTick();
      wrapper.find('form').trigger('submit.prevent');

      await wrapper.vm.$nextTick();
      expect(actions.updateApplication).to.have.been.calledWith(sinon.match.any, {
        applicationId: APPLICATION.applicationId,
        author: APPLICATION.author,
        homePageUrl: APPLICATION.homePageUrl,
        description: APPLICATION.description,
      });
      expect(router.push).to.have.been.calledWith({ name: 'view-application', params: { id: 'test-app-1' } });
      expect(wrapper.contains('#error-alert')).to.equal(false);
    });
  });
  describe('on failed update', () => {
    beforeEach(() => {
      actions = {
        getApplication: sinon.stub().resolves(APPLICATION),
        updateApplication: sinon.stub().rejects(new Error('oof!')),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('should display an error', async () => {
      const router = {
        push: sinon.spy(),
      };
      const wrapper = mount(EditApplication, {
        localVue,
        stubs: {
          RouterLink: RouterLinkStub,
        },
        mocks: {
          $router: router,
          $route: route,
          $store: store,
        },
      });

      await wrapper.vm.$nextTick();
      wrapper.find('form').trigger('submit.prevent');

      await wrapper.vm.$nextTick();
      expect(actions.updateApplication).to.have.been.calledWith(sinon.match.any, {
        applicationId: APPLICATION.applicationId,
        author: APPLICATION.author,
        homePageUrl: APPLICATION.homePageUrl,
        description: APPLICATION.description,
      });
      expect(router.push).to.not.have.been.called;

      expect(wrapper.contains('#error-alert')).to.equal(true);
      expect(wrapper.find('#error-alert').text()).to.include('oof!');
    });
  });
});

--#

--% /realworld-serverless-application/static-website/tests/unit/views/Home.spec.js
/* eslint no-unused-expressions: 0 */

import { expect } from 'chai';
import { mount, createLocalVue } from '@vue/test-utils';
import BootstrapVue from 'bootstrap-vue';
import Home from '@/views/Home.vue';

// render bootstrap components
const localVue = createLocalVue();
localVue.use(BootstrapVue);

describe('Home.vue', () => {
  it('renders', () => {
    const wrapper = mount(Home, {
      localVue,
      propsData: {},
    });
    expect(wrapper.text()).to.include('Welcome!');
  });
});

--#

--% /realworld-serverless-application/static-website/tests/unit/views/NewApplication.spec.js
/* eslint no-unused-expressions: 0 */

import Vuex from 'vuex';
import { expect } from 'chai';
import sinon from 'sinon';
import { mount, createLocalVue, RouterLinkStub } from '@vue/test-utils';
import BootstrapVue from 'bootstrap-vue';
import NewApplication from '@/views/NewApplication.vue';

// render bootstrap components
const localVue = createLocalVue();
localVue.use(BootstrapVue);
localVue.use(Vuex);

const APPLICATION = {
  applicationId: 'test-app-1',
  description: 'test-app-1 description',
  author: 'test-author',
  creationTime: new Date('9/8/2019'),
  homePageUrl: 'https://aws.amazon.com/serverless',
};

function submitForm(wrapper) {
  wrapper.find('#application-id').setValue(APPLICATION.applicationId);
  wrapper.find('#description').setValue(APPLICATION.description);
  wrapper.find('#author').setValue(APPLICATION.author);
  wrapper.find('#homepage-url').setValue(APPLICATION.homePageUrl);

  wrapper.find('form').trigger('submit.prevent');
}
let actions;
let store;

describe('NewApplication.vue', () => {
  it('should render the form', () => {
    const wrapper = mount(NewApplication, {
      localVue,
      stubs: {
        RouterLink: RouterLinkStub,
      },
    });

    expect(wrapper.find('h2').text()).to.equal('Publish an application');
    expect(wrapper.contains('#error-alert')).to.equal(false);
    expect(wrapper.find('#cancel').attributes().href).to.equal('/applications');

    expect(wrapper.contains('#application-id-group')).to.equal(true);
    expect(wrapper.find('#application-id-group label').text()).to.equal('Application name');
    expect(wrapper.contains('#application-id-group input#application-id')).to.equal(true);

    expect(wrapper.contains('#author-group')).to.equal(true);
    expect(wrapper.find('#author-group label').text()).to.equal('Author');
    expect(wrapper.contains('#author-group input#author')).to.equal(true);

    expect(wrapper.contains('#homepage-url-group')).to.equal(true);
    expect(wrapper.find('#homepage-url-group label').text()).to.equal('Home page - optional');
    expect(wrapper.contains('#homepage-url-group input#homepage-url')).to.equal(true);

    expect(wrapper.contains('#description-group')).to.equal(true);
    expect(wrapper.find('#description-group label').text()).to.equal('Description');
    expect(wrapper.contains('#description-group textarea#description')).to.equal(true);
  });

  describe('on successful create', () => {
    beforeEach(() => {
      actions = {
        createApplication: sinon.stub().resolves(APPLICATION),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('should redirect to ViewApplication.vue', async () => {
      const router = {
        push: sinon.spy(),
      };
      const wrapper = mount(NewApplication, {
        localVue,
        stubs: {
          RouterLink: RouterLinkStub,
        },
        mocks: {
          $router: router,
          $store: store,
        },
      });

      submitForm(wrapper);

      await wrapper.vm.$nextTick();

      expect(actions.createApplication).to.have.been.calledWith(sinon.match.any, {
        applicationId: APPLICATION.applicationId,
        author: APPLICATION.author,
        homePageUrl: APPLICATION.homePageUrl,
        description: APPLICATION.description,
      });
      expect(router.push).to.have.been.calledWith({ name: 'view-application', params: { id: 'test-app-1' } });
      expect(wrapper.contains('#error-alert')).to.equal(false);
    });
  });
  describe('on failed create', () => {
    beforeEach(() => {
      actions = {
        createApplication: sinon.stub().rejects(new Error('nope!')),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('should display an error', async () => {
      const router = {
        push: sinon.spy(),
      };
      const wrapper = mount(NewApplication, {
        localVue,
        stubs: {
          RouterLink: RouterLinkStub,
        },
        mocks: {
          $router: router,
          $store: store,
        },
      });

      submitForm(wrapper);

      await wrapper.vm.$nextTick();

      expect(actions.createApplication).to.have.been.calledWith(sinon.match.any, {
        applicationId: APPLICATION.applicationId,
        author: APPLICATION.author,
        homePageUrl: APPLICATION.homePageUrl,
        description: APPLICATION.description,
      });
      expect(router.push).to.not.have.been.called;

      expect(wrapper.contains('#error-alert')).to.equal(true);
      expect(wrapper.find('#error-alert').text()).to.include('nope!');
    });
  });
});

--#

--% /realworld-serverless-application/static-website/tests/unit/views/ViewApplication.spec.js
/* eslint no-unused-expressions: 0 */

import Vuex from 'vuex';
import { expect } from 'chai';
import sinon from 'sinon';
import { mount, createLocalVue, RouterLinkStub } from '@vue/test-utils';
import BootstrapVue from 'bootstrap-vue';
import SarApi from '@/services/sar-api';
import ViewApplication from '@/views/ViewApplication.vue';

// render bootstrap components
const localVue = createLocalVue();
localVue.use(BootstrapVue);

const VALID_APPLICATION_ID = 'test-app-1';
const INVALID_APPLICATION_ID = 'test-app-notfound';
const APPLICATION = {
  applicationId: VALID_APPLICATION_ID,
  description: 'test-app-1 description',
  author: 'test-author',
  creationTime: new Date('9/8/2019'),
  homePageUrl: 'https://aws.amazon.com/serverless',
};

let actions;
let store;

describe('ViewApplication.vue', () => {
  describe('with a valid application', () => {
    const applicationId = VALID_APPLICATION_ID;
    const route = {
      params: { id: applicationId },
    };

    beforeEach(() => {
      sinon.stub(SarApi, 'getApplication').resolves(APPLICATION);
      sinon.stub(SarApi, 'deleteApplication');
      actions = {
        getApplication: sinon.stub().resolves(APPLICATION),
        deleteApplication: sinon.stub(),
      };
      store = new Vuex.Store({
        actions,
      });
    });

    it('should render the application details', async () => {
      const wrapper = mount(ViewApplication, {
        localVue,
        stubs: {
          RouterLink: RouterLinkStub,
        },
        mocks: {
          $route: route,
          $store: store,
        },
      });

      await wrapper.vm.$nextTick();
      expect(actions.getApplication).to.have.been.calledWith(sinon.match.any, applicationId);
      expect(actions.deleteApplication).to.not.have.been.called;

      expect(wrapper.find('h2').text()).to.equal(applicationId);
      expect(wrapper.contains('#error-alert')).to.equal(false);

      expect(wrapper.find('#delete').text()).to.equal('Delete');
      expect(wrapper.find('#edit').text()).to.equal('Edit');

      expect(wrapper.text()).to.include(APPLICATION.author);
      expect(wrapper.text()).to.include(APPLICATION.homePageUrl);
      expect(wrapper.text()).to.include(APPLICATION.creationTime.toLocaleString('en-US'));
      expect(wrapper.text()).to.include(APPLICATION.description);
    });
  });
});

describe('with an invalid application', () => {
  const applicationId = INVALID_APPLICATION_ID;
  const route = {
    params: { id: applicationId },
  };

  beforeEach(() => {
    actions = {
      getApplication: sinon.stub().rejects(new Error('what application?')),
      deleteApplication: sinon.stub(),
    };
    store = new Vuex.Store({
      actions,
    });
  });

  it('should display an error', async () => {
    const wrapper = mount(ViewApplication, {
      localVue,
      stubs: {
        RouterLink: RouterLinkStub,
      },
      mocks: {
        $route: route,
        $store: store,
      },
    });

    await wrapper.vm.$nextTick();
    expect(actions.deleteApplication).to.not.have.been.called;

    expect(wrapper.contains('#error-alert')).to.equal(true);
    expect(wrapper.find('#error-alert').text()).to.include('what application?');

    expect(wrapper.find('#error').exists()).to.equal(false);
    expect(wrapper.find('#delete').exists()).to.equal(false);
  });
});

--#

