--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#

--% index/fmus/under_pwd
__REPLACE_WITH_PROJECT_DIR_OR_INPUT__,d(/mk)
	%utama=__FILE__
	.gitignore,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/.gitignore)
	.gitmodules,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/.gitmodules)
	.travis.yml,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/.travis.yml)
	go.mod,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/go.mod)
	go.sum,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/go.sum)
	gobuild.sh,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/gobuild.sh)
	gomod.sh,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/gomod.sh)
	logo.png,f(b64=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/logo.png)
	Makefile,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/Makefile)
	readme.md,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/readme.md)
	serverless.yml,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/serverless.yml)
	angularjs-realworld-example-app,d(/mk)
	model,d(/mk)
		Article.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Article.go)
		ArticlePriorityQueue.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/ArticlePriorityQueue.go)
		Article_test.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Article_test.go)
		Auth.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Auth.go)
		Comment.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Comment.go)
		InputError.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/InputError.go)
		User.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/User.go)
	route,d(/mk)
		articles-feed-get,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-feed-get/main.go)
		articles-get,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-get/main.go)
		articles-post,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-post/main.go)
		articles-slug-delete,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-slug-delete/main.go)
		articles-slug-get,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-slug-get/main.go)
		articles-slug-put,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-slug-put/main.go)
		comments-delete,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/comments-delete/main.go)
		comments-get,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/comments-get/main.go)
		comments-post,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/comments-post/main.go)
		favorite-delete,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/favorite-delete/main.go)
		favorite-post,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/favorite-post/main.go)
		profiles-follow-delete,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/profiles-follow-delete/main.go)
		profiles-follow-post,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/profiles-follow-post/main.go)
		profiles-get,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/profiles-get/main.go)
		tags-get,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/tags-get/main.go)
		user-get,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/user-get/main.go)
		user-put,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/user-put/main.go)
		users-login-post,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/users-login-post/main.go)
		users-post,d(/mk)
			main.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/users-post/main.go)
	service,d(/mk)
		ArticleService.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/ArticleService.go)
		ArticleTagService.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/ArticleTagService.go)
		CommentService.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/CommentService.go)
		CommonDBOperation.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/CommonDBOperation.go)
		DynamoDBClient.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/DynamoDBClient.go)
		FavoriteArticleService.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/FavoriteArticleService.go)
		FollowService.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/FollowService.go)
		Rand.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/Rand.go)
		TableName.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/TableName.go)
		TagService.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/TagService.go)
		UserService.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/UserService.go)
		Util.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/Util.go)
		Util_test.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/Util_test.go)
	util,d(/mk)
		ErrorResponse.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/ErrorResponse.go)
		Math.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/Math.go)
		StringSet.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/StringSet.go)
		SuccessResponse.go,f(e=utama=E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/SuccessResponse.go)
--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/.gitignore
# Serverless directories
.serverless

# golang output binary directory
bin

# golang vendor (dependencies) directory
vendor

# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, build with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Custom
/.idea/

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/.gitmodules
[submodule "angularjs-realworld-example-app"]
	path = angularjs-realworld-example-app
	url = https://github.com/chrisxue815/angularjs-realworld-example-app.git

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/.travis.yml
language: go

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/go.mod
module github.com/chrisxue815/realworld-aws-lambda-dynamodb-go

go 1.14

require (
	github.com/aws/aws-lambda-go v1.6.0
	github.com/aws/aws-sdk-go v1.23.15
	github.com/dgrijalva/jwt-go v3.2.0+incompatible
	github.com/gosimple/slug v1.7.0
	github.com/rainycape/unidecode v0.0.0-20150907023854-cb7f23ec59be // indirect
	github.com/stretchr/testify v1.5.1
	golang.org/x/crypto v0.0.0-20190829043050-9756ffdc2472
)

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/go.sum
github.com/aws/aws-lambda-go v1.6.0 h1:T+u/g79zPKw1oJM7xYhvpq7i4Sjc0iVsXZUaqRVVSOg=
github.com/aws/aws-lambda-go v1.6.0/go.mod h1:zUsUQhAUjYzR8AuduJPCfhBuKWUaDbQiPOG+ouzmE1A=
github.com/aws/aws-sdk-go v1.23.15 h1:ut2ZzO0A34Ds18NXvvkWWKyO4aZqQ9uZquslWzCQvGU=
github.com/aws/aws-sdk-go v1.23.15/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=
github.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/dgrijalva/jwt-go v3.2.0+incompatible h1:7qlOGliEKZXTDg6OTjfoBKDXWrumCAMpl/TFQ4/5kLM=
github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=
github.com/gosimple/slug v1.7.0 h1:BlCZq+BMGn+riOZuRKnm60Fe7+jX9ck6TzzkN1r8TW8=
github.com/gosimple/slug v1.7.0/go.mod h1:ER78kgg1Mv0NQGlXiDe57DpCyfbNywXXZ9mIorhxAf0=
github.com/jmespath/go-jmespath v0.0.0-20180206201540-c2b33e8439af h1:pmfjZENx5imkbgOkpRUYLnmbU7UEFbjtDA2hxJ1ichM=
github.com/jmespath/go-jmespath v0.0.0-20180206201540-c2b33e8439af/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/rainycape/unidecode v0.0.0-20150907023854-cb7f23ec59be h1:ta7tUOvsPHVHGom5hKW5VXNc2xZIkfCKP8iaqOyYtUQ=
github.com/rainycape/unidecode v0.0.0-20150907023854-cb7f23ec59be/go.mod h1:MIDFMn7db1kT65GmV94GzpX9Qdi7N/pQlwb+AN8wh+Q=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/testify v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H4=
github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
golang.org/x/crypto v0.0.0-20190829043050-9756ffdc2472 h1:Gv7RPwsi3eZ2Fgewe3CBsuOebPwO27PoXzRpJPsvSSM=
golang.org/x/crypto v0.0.0-20190829043050-9756ffdc2472/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=
gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/gobuild.sh
#!/bin/bash
for r in route/*; do
    if [ -d "$r" ]; then
        r=$(basename "$r")
        env GO111MODULE=on GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o bin/$r route/$r/main.go
    fi
done

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/gomod.sh
#!/bin/bash
set -eu

touch go.mod

PROJECT_NAME=$(basename $(pwd | xargs dirname))
CURRENT_DIR=$(basename $(pwd))

CONTENT=$(cat <<-EOD
module github.com/${PROJECT_NAME}/${CURRENT_DIR}

require github.com/aws/aws-lambda-go v1.6.0
EOD
)

echo "$CONTENT" > go.mod

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/logo.png

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/Makefile
.PHONY: build clean deploy gomodgen

build: gomodgen
	./gobuild.sh

clean:
	rm -rf ./bin ./vendor Gopkg.lock

deploy: clean build
	sls deploy --verbose

gomodgen:
	chmod u+x gomod.sh
	./gomod.sh

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/readme.md
# ![RealWorld Example App](logo.png)

> ### AWS Lambda + DynamoDB + Go codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the [RealWorld](https://github.com/gothinkster/realworld) spec and API.

### [Demo](https://chrisxue815.github.io/realworld/build/#/)

[![Build Status](https://travis-ci.org/chrisxue815/realworld-aws-lambda-dynamodb-go.svg?branch=master)](https://travis-ci.org/chrisxue815/realworld-aws-lambda-dynamodb-go)

This codebase was created to demonstrate a fully fledged fullstack application built with **AWS Lambda + DynamoDB + Go** including CRUD operations, authentication, routing, pagination, and more.

We've gone to great lengths to adhere to the **AWS Lambda + DynamoDB + Go** community styleguides & best practices.

For more information on how to this works with other frontends/backends, head over to the [RealWorld](https://github.com/gothinkster/realworld) repo.

# Getting started

## Prerequisite

* Install Go, Node.js, Serverless CLI, AWS CLI
* In `angularjs-realworld-example-app`, run `npm install`

## Build and deploy backend

In the root directory of this project:

* `make build`
* `sls deploy --stage dev`

## Build and serve frontend

In `angularjs-realworld-example-app`:

* `npx gulp`

# How it works

Routes and their handlers are defined in `serverless.yml`.

For example, the following section means `POST /users` is handled by `bin/users-post`, which is built from `route/users-post/main.go`.

```
  users-post:
    handler: bin/users-post
    events:
      - http:
          path: users
          method: post
          cors: true
```

# Design choices
* Scrypt-based password hashing
* Input validation
* Data consistency with DynamoDB transactions

These tradeoffs were made for simpler code:
* Hardcoded Scrypt secret. Downside: tokens can't be invalidated
* Shared states (like DB and RNG) are singletons, no dependency injections used. Downside: lifecycles of shared states are not controllable. Potential memory leak. Unit-test-unfriendly
* Usernames are not changeable
* Usernames are case-sensitive
* Performance bottleneck in global secondary indices with a single hash-key value, like ArticleTable.CreatedAt and TagTable.ArticleCount
* Performance bottleneck in fan-in-based article feed aggregation

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/serverless.yml
service: realworld

frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "eu-west-1"}
  environment:
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:BatchGetItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:

  users-post:
    handler: bin/users-post
    events:
      - http:
          path: users
          method: post
          cors: true

  users-login-post:
    handler: bin/users-login-post
    events:
      - http:
          path: users/login
          method: post
          cors: true

  user-get:
    handler: bin/user-get
    events:
      - http:
          path: user
          method: get
          cors: true

  user-put:
    handler: bin/user-put
    events:
      - http:
          path: user
          method: put
          cors: true

  profiles-get:
    handler: bin/profiles-get
    events:
      - http:
          path: profiles/{username}
          method: get
          cors: true
          request:
            parameters:
              paths:
                username: true

  profiles-follow-post:
    handler: bin/profiles-follow-post
    events:
      - http:
          path: profiles/{username}/follow
          method: post
          cors: true
          request:
            parameters:
              paths:
                username: true

  profiles-follow-delete:
    handler: bin/profiles-follow-delete
    events:
      - http:
          path: profiles/{username}/follow
          method: delete
          cors: true
          request:
            parameters:
              paths:
                username: true

  articles-post:
    handler: bin/articles-post
    events:
      - http:
          path: articles
          method: post
          cors: true

  articles-get:
    handler: bin/articles-get
    events:
      - http:
          path: articles
          method: get
          cors: true

  articles-feed-get:
    handler: bin/articles-feed-get
    events:
      - http:
          path: articles/feed
          method: get
          cors: true

  articles-slug-get:
    handler: bin/articles-slug-get
    events:
      - http:
          path: articles/{slug}
          method: get
          cors: true
          request:
            parameters:
              paths:
                slug: true

  articles-slug-put:
    handler: bin/articles-slug-put
    events:
      - http:
          path: articles/{slug}
          method: put
          cors: true
          request:
            parameters:
              paths:
                slug: true

  articles-slug-delete:
    handler: bin/articles-slug-delete
    events:
      - http:
          path: articles/{slug}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                slug: true

  comments-post:
    handler: bin/comments-post
    events:
      - http:
          path: articles/{slug}/comments
          method: post
          cors: true
          request:
            parameters:
              paths:
                slug: true

  comments-get:
    handler: bin/comments-get
    events:
      - http:
          path: articles/{slug}/comments
          method: get
          cors: true
          request:
            parameters:
              paths:
                slug: true

  comments-delete:
    handler: bin/comments-delete
    events:
      - http:
          path: articles/{slug}/comments/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                slug: true
                id: true

  favorite-post:
    handler: bin/favorite-post
    events:
      - http:
          path: articles/{slug}/favorite
          method: post
          cors: true
          request:
            parameters:
              paths:
                slug: true

  favorite-delete:
    handler: bin/favorite-delete
    events:
      - http:
          path: articles/{slug}/favorite
          method: delete
          cors: true
          request:
            parameters:
              paths:
                slug: true

  tags-get:
    handler: bin/tags-get
    events:
      - http:
          path: tags
          method: get
          cors: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-user
        AttributeDefinitions:
          - AttributeName: Username
            AttributeType: S
        KeySchema:  # GET /user, GET /profiles/:username
          - AttributeName: Username
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    EmailUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-email-user
        AttributeDefinitions:
          - AttributeName: Email
            AttributeType: S
        KeySchema:  # POST /users/login
          - AttributeName: Email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    FollowTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-follow
        AttributeDefinitions:
          - AttributeName: Follower
            AttributeType: S
          - AttributeName: Publisher
            AttributeType: S
        KeySchema:  # GET /articles/feed
          - AttributeName: Follower
            KeyType: HASH
          - AttributeName: Publisher
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    ArticleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-article
        AttributeDefinitions:
          - AttributeName: ArticleId
            AttributeType: N
          - AttributeName: CreatedAt
            AttributeType: N
          - AttributeName: Dummy
            AttributeType: N
          - AttributeName: Author
            AttributeType: S
        KeySchema:  # GET /articles/:slug
          - AttributeName: ArticleId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CreatedAt
            KeySchema:  # GET /articles
              - AttributeName: Dummy
                KeyType: HASH
              - AttributeName: CreatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
          - IndexName: Author
            KeySchema:  # GET /articles?author=:author
              - AttributeName: Author
                KeyType: HASH
              - AttributeName: CreatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    ArticleTagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-article-tag
        AttributeDefinitions:
          - AttributeName: Tag
            AttributeType: S
          - AttributeName: ArticleId
            AttributeType: N
          - AttributeName: CreatedAt
            AttributeType: N
        KeySchema:  # POST /articles, PUT /articles
          - AttributeName: Tag
            KeyType: HASH
          - AttributeName: ArticleId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: CreatedAt
            KeySchema:  # GET /articles?tag=:tag
              - AttributeName: Tag
                KeyType: HASH
              - AttributeName: CreatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    TagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-tag
        AttributeDefinitions:
          - AttributeName: Tag
            AttributeType: S
          - AttributeName: ArticleCount
            AttributeType: N
          - AttributeName: Dummy
            AttributeType: N
        KeySchema:
          - AttributeName: Tag
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ArticleCount
            KeySchema:  # GET /tags
              - AttributeName: Dummy
                KeyType: HASH
              - AttributeName: ArticleCount
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    FavoriteArticleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-favorite-article
        AttributeDefinitions:
          - AttributeName: Username
            AttributeType: S
          - AttributeName: ArticleId
            AttributeType: N
          - AttributeName: FavoritedAt
            AttributeType: N
        KeySchema:  # POST /articles/:slug/favorite
          - AttributeName: Username
            KeyType: HASH
          - AttributeName: ArticleId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: FavoritedAt
            KeySchema:  # GET /articles?favorited=:favorited
              - AttributeName: Username
                KeyType: HASH
              - AttributeName: FavoritedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    CommentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-${self:provider.stage}-comment
        AttributeDefinitions:
          - AttributeName: ArticleId
            AttributeType: N
          - AttributeName: CommentId
            AttributeType: N
          - AttributeName: CreatedAt
            AttributeType: N
        KeySchema:  # POST /articles/:slug/comments
          - AttributeName: ArticleId
            KeyType: HASH
          - AttributeName: CommentId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: CreatedAt
            KeySchema:  # GET /articles/:slug/comments
              - AttributeName: ArticleId
                KeyType: HASH
              - AttributeName: CreatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Article.go
package model

import (
	"fmt"
	"github.com/gosimple/slug"
	"strconv"
	"strings"
)

const TimestampFormat = "2006-01-02T15:04:05.000Z"
const MaxArticleId = 0x1000000 // exclusive
const MaxNumTagsPerArticle = 5

type Article struct {
	ArticleId      int64
	Slug           string
	Title          string
	Description    string
	Body           string
	TagList        []string
	CreatedAt      int64
	UpdatedAt      int64
	FavoritesCount int64
	Author         string
	Dummy          byte // Always 0, used for sorting articles by index CreatedAt
}

type ArticleTag struct {
	Tag       string
	ArticleId int64
	CreatedAt int64
}

type Tag struct {
	Tag          string
	ArticleCount int64
	Dummy        byte // Always 0, used for sorting articles by index ArticleCount
}

type FavoriteArticleKey struct {
	Username  string
	ArticleId int64
}

type FavoriteArticle struct {
	FavoriteArticleKey
	FavoritedAt int64
}

func (article *Article) Validate() error {
	if article.Title == "" {
		return NewInputError("title", "can't be blank")
	}

	if article.Description == "" {
		return NewInputError("description", "can't be blank")
	}

	if article.Body == "" {
		return NewInputError("body", "can't be blank")
	}

	if article.TagList == nil {
		article.TagList = make([]string, 0)
	} else if len(article.TagList) > MaxNumTagsPerArticle {
		return NewInputError("tagList", fmt.Sprintf("cannot add more than %d tags per article", MaxNumTagsPerArticle))
	}

	return nil
}

func (article *Article) MakeSlug() {
	slugPrefix := slug.Make(article.Title)
	article.Slug = slugPrefix + "-" + strconv.FormatInt(article.ArticleId, 16)
}

func SlugToArticleId(slug string) (int64, error) {
	dashIndex := strings.LastIndexByte(slug, '-')

	articleId, err := strconv.ParseInt(slug[dashIndex+1:], 16, 64)
	if err != nil {
		return 0, NewInputError("slug", "invalid")
	}

	return articleId, nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/ArticlePriorityQueue.go
package model

import "container/heap"

type ArticlePriorityQueue [][]Article

func (pq ArticlePriorityQueue) Len() int { return len(pq) }

func (pq ArticlePriorityQueue) Less(i, j int) bool {
	// Pop empty lists first, to reduce computation complexity
	if len(pq[i]) == 0 {
		return true
	}
	if len(pq[j]) == 0 {
		return false
	}
	// We want Pop to give us the latest, not earliest, article so we use greater than here.
	return pq[i][0].CreatedAt > pq[j][0].CreatedAt
}

func (pq ArticlePriorityQueue) Swap(i, j int) {
	pq[i], pq[j] = pq[j], pq[i]
}

func (pq *ArticlePriorityQueue) Push(x interface{}) {
	item := x.([]Article)
	*pq = append(*pq, item)
}

func (pq *ArticlePriorityQueue) Pop() interface{} {
	old := *pq
	n := len(old)
	item := old[n-1]
	old[n-1] = nil // avoid memory leak
	*pq = old[0 : n-1]
	return item
}

func MergeArticles(pq ArticlePriorityQueue, offset, limit int) []Article {
	merged := make([]Article, 0, limit)
	heap.Init(&pq)
	numVisitedArticles := 0

	for len(pq) > 0 && numVisitedArticles < offset+limit {
		list := pq[0]

		if len(list) == 0 {
			heap.Pop(&pq)
		} else {
			if numVisitedArticles >= offset {
				article := list[0]
				merged = append(merged, article)
			}
			pq[0] = list[1:]
			heap.Fix(&pq, 0)
			numVisitedArticles++
		}
	}

	return merged
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Article_test.go
package model

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestSlugToArticleId(t *testing.T) {
	testCases := []struct {
		slug          string
		expected      int64
		expectedError bool
	}{
		{"how-to-train-your-dragon-74728a", 0x74728a, false},
		{"74728a", 0x74728a, false},
	}

	for _, testCase := range testCases {
		actual, err := SlugToArticleId("how-to-train-your-dragon-74728a")
		assert.Equal(t, testCase.expected, actual, "%+v", testCase)
		assert.Equal(t, testCase.expectedError, err != nil, "%+v", testCase)
	}
}

func PassArticleByValue(article Article, goPanic bool) {
	if goPanic {
		if article.ArticleId == 0 {
			// noinline
			// https://github.com/golang/go/wiki/CompilerOptimizations#function-inlining
			panic(nil)
		}
	}
}

func PassArticleByPointer(article *Article, goPanic bool) {
	if goPanic {
		if article.ArticleId == 0 {
			// noinline
			// https://github.com/golang/go/wiki/CompilerOptimizations#function-inlining
			panic(nil)
		}
	}
}

func BenchmarkPassArticleByValue(b *testing.B) {
	article := Article{}
	for i := 0; i < b.N; i++ {
		PassArticleByValue(article, false)
	}
}

func BenchmarkPassArticleByPointer(b *testing.B) {
	article := Article{}
	for i := 0; i < b.N; i++ {
		PassArticleByPointer(&article, false)
	}
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Auth.go
package model

import (
	"fmt"
	"github.com/dgrijalva/jwt-go"
	"golang.org/x/crypto/scrypt"
	"strings"
	"time"
)

const TokenExpirationDays = 60

var passwordSalt = []byte("KU2YVXA7BSNExJIvemcdz61eL86IJDCC")
var jwtSecret = []byte("C92cw5od80NCWIvu4NZ8AKp5NyTbnBmG") // TODO: Generate random secrets and store in DynamoDB

func Scrypt(password string) ([]byte, error) {
	// https://godoc.org/golang.org/x/crypto/scrypt
	passwordHash, err := scrypt.Key([]byte(password), passwordSalt, 32768, 8, 1, PasswordKeyLength)
	if err != nil {
		return nil, err
	}

	return passwordHash, nil
}

func GenerateToken(username string) (string, error) {
	now := time.Now().UTC()
	exp := now.AddDate(0, 0, TokenExpirationDays).Unix()

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"sub": username,
		"exp": exp,
	})

	return token.SignedString(jwtSecret)
}

func VerifyAuthorization(auth string) (string, string, error) {
	parts := strings.SplitN(auth, " ", 2)
	if len(parts) != 2 || parts[0] != "Token" {
		return "", "", NewInputError("Authorization", "invalid format")
	}

	token := parts[1]
	username, err := VerifyToken(token)
	return username, token, err
}

func VerifyToken(tokenString string) (string, error) {
	token, err := jwt.Parse(tokenString, validateToken)

	if err != nil {
		return "", err
	}

	if token == nil || !token.Valid {
		return "", NewInputError("Authorization", "invalid token")
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return "", NewInputError("Authorization", "invalid claims")
	}

	if !claims.VerifyExpiresAt(time.Now().UTC().Unix(), true) {
		return "", NewInputError("Authorization", "token expired")
	}

	username, ok := claims["sub"].(string)
	if !ok {
		return "", NewInputError("Authorization", "sub missing")
	}

	return username, nil
}

func validateToken(token *jwt.Token) (interface{}, error) {
	_, ok := token.Method.(*jwt.SigningMethodHMAC)
	if !ok {
		return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
	}

	return jwtSecret, nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/Comment.go
package model

const MaxCommentId = 0x1000000 // exclusive

type CommentKey struct {
	ArticleId int64
	CommentId int64
}

type Comment struct {
	CommentKey
	CreatedAt int64
	UpdatedAt int64
	Body      string
	Author    string
}

func (comment *Comment) Validate() error {
	if comment.Body == "" {
		return NewInputError("body", "can't be blank")
	}

	return nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/InputError.go
package model

import "encoding/json"

type InputError map[string][]string

func (e InputError) Error() string {
	js, err := json.Marshal(e)
	if err != nil {
		return err.Error()
	}

	return string(js)
}

func NewInputError(inputName, message string) InputError {
	return InputError{
		inputName: {message},
	}
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/model/User.go
package model

import (
	"fmt"
)

const MinPasswordLength = 0
const PasswordKeyLength = 64

type User struct {
	Username     string
	Email        string
	PasswordHash []byte
	Image        string
	Bio          string
}

type EmailUser struct {
	Email    string
	Username string
}

type Follow struct {
	Follower  string
	Publisher string
}

func (u *User) Validate() error {
	if u.Username == "" {
		return NewInputError("username", "can't be blank")
	}

	if u.Email == "" {
		return NewInputError("email", "can't be blank")
	}

	if u.PasswordHash == nil || len(u.PasswordHash) != PasswordKeyLength {
		return NewInputError("password", "can't be blank")
	}

	return nil
}

func ValidatePassword(password string) error {
	if len(password) < MinPasswordLength {
		return NewInputError("password", fmt.Sprintf("must be at least %d characters in length", MinPasswordLength))
	}

	return nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-feed-get/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"strconv"
	"time"
)

type Response struct {
	Articles      []ArticleResponse `json:"articles"`
	ArticlesCount int               `json:"articlesCount"`
}

type ArticleResponse struct {
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tagList"`
	CreatedAt      string         `json:"createdAt"`
	UpdatedAt      string         `json:"updatedAt"`
	Favorited      bool           `json:"favorited"`
	FavoritesCount int64          `json:"favoritesCount"`
	Author         AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	offset, err := strconv.Atoi(input.QueryStringParameters["offset"])
	if err != nil {
		offset = 0
	}

	limit, err := strconv.Atoi(input.QueryStringParameters["limit"])
	if err != nil {
		limit = 20
	}

	articles, err := service.GetFeed(user.Username, offset, limit)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	isFavorited, authors, _, err := service.GetArticleRelatedProperties(user, articles, false)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	articleResponses := make([]ArticleResponse, 0, len(articles))

	for i, article := range articles {
		articleResponses = append(articleResponses, ArticleResponse{
			Slug:           article.Slug,
			Title:          article.Title,
			Description:    article.Description,
			Body:           article.Body,
			TagList:        article.TagList,
			CreatedAt:      time.Unix(0, article.CreatedAt).Format(model.TimestampFormat),
			UpdatedAt:      time.Unix(0, article.UpdatedAt).Format(model.TimestampFormat),
			Favorited:      isFavorited[i],
			FavoritesCount: article.FavoritesCount,
			Author: AuthorResponse{
				Username:  authors[i].Username,
				Bio:       authors[i].Bio,
				Image:     authors[i].Image,
				Following: true,
			},
		})
	}

	response := Response{
		Articles:      articleResponses,
		ArticlesCount: len(articleResponses),
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-get/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"strconv"
	"time"
)

type Response struct {
	Articles      []ArticleResponse `json:"articles"`
	ArticlesCount int               `json:"articlesCount"`
}

type ArticleResponse struct {
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tagList"`
	CreatedAt      string         `json:"createdAt"`
	UpdatedAt      string         `json:"updatedAt"`
	Favorited      bool           `json:"favorited"`
	FavoritesCount int64          `json:"favoritesCount"`
	Author         AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, _ := service.GetCurrentUser(input.Headers["Authorization"])

	offset, err := strconv.Atoi(input.QueryStringParameters["offset"])
	if err != nil {
		offset = 0
	}

	limit, err := strconv.Atoi(input.QueryStringParameters["limit"])
	if err != nil {
		limit = 20
	}

	author := input.QueryStringParameters["author"]
	tag := input.QueryStringParameters["tag"]
	favorited := input.QueryStringParameters["favorited"]

	articles, err := service.GetArticles(offset, limit, author, tag, favorited)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	isFavorited, authors, following, err := service.GetArticleRelatedProperties(user, articles, true)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	articleResponses := make([]ArticleResponse, 0, len(articles))

	for i, article := range articles {
		articleResponses = append(articleResponses, ArticleResponse{
			Slug:           article.Slug,
			Title:          article.Title,
			Description:    article.Description,
			Body:           article.Body,
			TagList:        article.TagList,
			CreatedAt:      time.Unix(0, article.CreatedAt).Format(model.TimestampFormat),
			UpdatedAt:      time.Unix(0, article.UpdatedAt).Format(model.TimestampFormat),
			Favorited:      isFavorited[i],
			FavoritesCount: article.FavoritesCount,
			Author: AuthorResponse{
				Username:  authors[i].Username,
				Bio:       authors[i].Bio,
				Image:     authors[i].Image,
				Following: following[i],
			},
		})
	}

	response := Response{
		Articles:      articleResponses,
		ArticlesCount: len(articleResponses),
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-post/main.go
package main

import (
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"time"
)

type Request struct {
	Article ArticleRequest `json:"article"`
}

type ArticleRequest struct {
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Body        string   `json:"body"`
	TagList     []string `json:"tagList"`
}

type Response struct {
	Article ArticleResponse `json:"article"`
}

type ArticleResponse struct {
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tagList"`
	CreatedAt      string         `json:"createdAt"`
	UpdatedAt      string         `json:"updatedAt"`
	Favorited      bool           `json:"favorited"`
	FavoritesCount int64          `json:"favoritesCount"`
	Author         AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	request := Request{}
	err = json.Unmarshal([]byte(input.Body), &request)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	now := time.Now().UTC()
	nowUnixNano := now.UnixNano()
	nowStr := now.Format(model.TimestampFormat)

	article := model.Article{
		Title:       request.Article.Title,
		Description: request.Article.Description,
		Body:        request.Article.Body,
		TagList:     request.Article.TagList, // TODO .distinct()
		CreatedAt:   nowUnixNano,
		UpdatedAt:   nowUnixNano,
		Author:      user.Username,
	}

	err = service.PutArticle(&article)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Article: ArticleResponse{
			Slug:           article.Slug,
			Title:          article.Title,
			Description:    article.Description,
			Body:           article.Body,
			TagList:        article.TagList,
			CreatedAt:      nowStr,
			UpdatedAt:      nowStr,
			Favorited:      false,
			FavoritesCount: 0,
			Author: AuthorResponse{
				Username:  user.Username,
				Bio:       user.Bio,
				Image:     user.Image,
				Following: false,
			},
		},
	}

	return util.NewSuccessResponse(201, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-slug-delete/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	err = service.DeleteArticle(input.PathParameters["slug"], user.Username)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	return util.NewSuccessResponse(200, nil)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-slug-get/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"time"
)

type Response struct {
	Article ArticleResponse `json:"article"`
}

type ArticleResponse struct {
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tagList"`
	CreatedAt      string         `json:"createdAt"`
	UpdatedAt      string         `json:"updatedAt"`
	Favorited      bool           `json:"favorited"`
	FavoritesCount int64          `json:"favoritesCount"`
	Author         AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, _ := service.GetCurrentUser(input.Headers["Authorization"])

	article, err := service.GetArticleBySlug(input.PathParameters["slug"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	isFavorited, authors, following, err := service.GetArticleRelatedProperties(user, []model.Article{article}, true)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Article: ArticleResponse{
			Slug:           article.Slug,
			Title:          article.Title,
			Description:    article.Description,
			Body:           article.Body,
			TagList:        article.TagList,
			CreatedAt:      time.Unix(0, article.CreatedAt).Format(model.TimestampFormat),
			UpdatedAt:      time.Unix(0, article.UpdatedAt).Format(model.TimestampFormat),
			Favorited:      isFavorited[0],
			FavoritesCount: article.FavoritesCount,
			Author: AuthorResponse{
				Username:  authors[0].Username,
				Bio:       authors[0].Bio,
				Image:     authors[0].Image,
				Following: following[0],
			},
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/articles-slug-put/main.go
package main

import (
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"time"
)

type Request struct {
	Article ArticleRequest `json:"article"`
}

type ArticleRequest struct {
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Body        string   `json:"body"`
	TagList     []string `json:"tagList"`
}

type Response struct {
	Article ArticleResponse `json:"article"`
}

type ArticleResponse struct {
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tagList"`
	CreatedAt      string         `json:"createdAt"`
	UpdatedAt      string         `json:"updatedAt"`
	Favorited      bool           `json:"favorited"`
	FavoritesCount int64          `json:"favoritesCount"`
	Author         AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	request := Request{}
	err = json.Unmarshal([]byte(input.Body), &request)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	oldArticle, err := service.GetArticleBySlug(input.PathParameters["slug"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	newArticle := createNewArticle(request, oldArticle)

	err = service.UpdateArticle(oldArticle, &newArticle)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	isFavorited, authors, following, err := service.GetArticleRelatedProperties(user, []model.Article{newArticle}, true)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Article: ArticleResponse{
			Slug:           newArticle.Slug,
			Title:          newArticle.Title,
			Description:    newArticle.Description,
			Body:           newArticle.Body,
			TagList:        newArticle.TagList,
			CreatedAt:      time.Unix(0, newArticle.CreatedAt).Format(model.TimestampFormat),
			UpdatedAt:      time.Unix(0, newArticle.UpdatedAt).Format(model.TimestampFormat),
			Favorited:      isFavorited[0],
			FavoritesCount: newArticle.FavoritesCount,
			Author: AuthorResponse{
				Username:  authors[0].Username,
				Bio:       authors[0].Bio,
				Image:     authors[0].Image,
				Following: following[0],
			},
		},
	}

	return util.NewSuccessResponse(200, response)
}

func createNewArticle(request Request, oldArticle model.Article) model.Article {
	newArticle := model.Article{
		ArticleId:      oldArticle.ArticleId,
		Title:          request.Article.Title,
		Description:    request.Article.Description,
		Body:           request.Article.Body,
		TagList:        request.Article.TagList,
		CreatedAt:      oldArticle.CreatedAt,
		UpdatedAt:      time.Now().UTC().UnixNano(),
		FavoritesCount: oldArticle.FavoritesCount,
		Author:         oldArticle.Author,
	}

	if newArticle.Title == "" {
		newArticle.Title = oldArticle.Title
	}

	if newArticle.Description == "" {
		newArticle.Description = oldArticle.Description
	}

	if newArticle.Body == "" {
		newArticle.Body = oldArticle.Body
	}

	if newArticle.TagList == nil {
		newArticle.TagList = oldArticle.TagList
	}

	return newArticle
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/comments-delete/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"strconv"
)

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	commentId, err := strconv.ParseInt(input.PathParameters["id"], 10, 64)
	if err != nil {
		return util.NewErrorResponse(model.NewInputError("id", "invalid"))
	}

	err = service.DeleteComment(input.PathParameters["slug"], commentId, user.Username)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	return util.NewSuccessResponse(200, nil)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/comments-get/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"time"
)

type Response struct {
	Comments []CommentResponse `json:"comments"`
}

type CommentResponse struct {
	Id        int64          `json:"id"`
	CreatedAt string         `json:"createdAt"`
	UpdatedAt string         `json:"updatedAt"`
	Body      string         `json:"body"`
	Author    AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, _ := service.GetCurrentUser(input.Headers["Authorization"])

	comments, err := service.GetComments(input.PathParameters["slug"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	authors, following, err := service.GetCommentRelatedProperties(user, comments)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	commentResponses := make([]CommentResponse, 0, len(comments))

	for i, comment := range comments {
		commentResponses = append(commentResponses, CommentResponse{
			Id:        comment.CommentId,
			Body:      comment.Body,
			CreatedAt: time.Unix(0, comment.CreatedAt).Format(model.TimestampFormat),
			UpdatedAt: time.Unix(0, comment.UpdatedAt).Format(model.TimestampFormat),
			Author: AuthorResponse{
				Username:  authors[i].Username,
				Bio:       authors[i].Bio,
				Image:     authors[i].Image,
				Following: following[i],
			},
		})
	}

	response := Response{
		Comments: commentResponses,
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/comments-post/main.go
package main

import (
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"time"
)

type Request struct {
	Comment CommentRequest `json:"comment"`
}

type CommentRequest struct {
	Body string `json:"body"`
}

type Response struct {
	Comment CommentResponse `json:"comment"`
}

type CommentResponse struct {
	Id        int64          `json:"id"`
	CreatedAt string         `json:"createdAt"`
	UpdatedAt string         `json:"updatedAt"`
	Body      string         `json:"body"`
	Author    AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	request := Request{}
	err = json.Unmarshal([]byte(input.Body), &request)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	// Make sure article exists, at least at this point
	article, err := service.GetArticleBySlug(input.PathParameters["slug"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	now := time.Now().UTC()
	nowUnixNano := now.UnixNano()
	nowStr := now.Format(model.TimestampFormat)

	comment := model.Comment{
		CommentKey: model.CommentKey{
			ArticleId: article.ArticleId,
		},
		CreatedAt: nowUnixNano,
		UpdatedAt: nowUnixNano,
		Body:      request.Comment.Body,
		Author:    user.Username,
	}

	err = service.PutComment(&comment)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Comment: CommentResponse{
			Id:        comment.CommentId,
			Body:      comment.Body,
			CreatedAt: nowStr,
			UpdatedAt: nowStr,
			Author: AuthorResponse{
				Username:  user.Username,
				Bio:       user.Bio,
				Image:     user.Image,
				Following: false,
			},
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/favorite-delete/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"time"
)

type Response struct {
	Article ArticleResponse `json:"article"`
}

type ArticleResponse struct {
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tagList"`
	CreatedAt      string         `json:"createdAt"`
	UpdatedAt      string         `json:"updatedAt"`
	Favorited      bool           `json:"favorited"`
	FavoritesCount int64          `json:"favoritesCount"`
	Author         AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	articleId, err := model.SlugToArticleId(input.PathParameters["slug"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	favoriteArticleKey := model.FavoriteArticleKey{
		Username:  user.Username,
		ArticleId: articleId,
	}

	err = service.UnfavoriteArticle(favoriteArticleKey)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	article, err := service.GetArticleByArticleId(articleId)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	isFavorited, authors, following, err := service.GetArticleRelatedProperties(user, []model.Article{article}, true)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Article: ArticleResponse{
			Slug:           article.Slug,
			Title:          article.Title,
			Description:    article.Description,
			Body:           article.Body,
			TagList:        article.TagList,
			CreatedAt:      time.Unix(0, article.CreatedAt).Format(model.TimestampFormat),
			UpdatedAt:      time.Unix(0, article.UpdatedAt).Format(model.TimestampFormat),
			Favorited:      isFavorited[0],
			FavoritesCount: article.FavoritesCount,
			Author: AuthorResponse{
				Username:  authors[0].Username,
				Bio:       authors[0].Bio,
				Image:     authors[0].Image,
				Following: following[0],
			},
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/favorite-post/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
	"time"
)

type Response struct {
	Article ArticleResponse `json:"article"`
}

type ArticleResponse struct {
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tagList"`
	CreatedAt      string         `json:"createdAt"`
	UpdatedAt      string         `json:"updatedAt"`
	Favorited      bool           `json:"favorited"`
	FavoritesCount int64          `json:"favoritesCount"`
	Author         AuthorResponse `json:"author"`
}

type AuthorResponse struct {
	Username  string `json:"username"`
	Bio       string `json:"bio"`
	Image     string `json:"image"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	articleId, err := model.SlugToArticleId(input.PathParameters["slug"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	favoriteArticle := model.FavoriteArticle{
		FavoriteArticleKey: model.FavoriteArticleKey{
			Username:  user.Username,
			ArticleId: articleId,
		},
		FavoritedAt: time.Now().UTC().UnixNano(),
	}

	err = service.SetFavoriteArticle(favoriteArticle)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	article, err := service.GetArticleByArticleId(articleId)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	isFavorited, authors, following, err := service.GetArticleRelatedProperties(user, []model.Article{article}, true)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Article: ArticleResponse{
			Slug:           article.Slug,
			Title:          article.Title,
			Description:    article.Description,
			Body:           article.Body,
			TagList:        article.TagList,
			CreatedAt:      time.Unix(0, article.CreatedAt).Format(model.TimestampFormat),
			UpdatedAt:      time.Unix(0, article.UpdatedAt).Format(model.TimestampFormat),
			Favorited:      isFavorited[0],
			FavoritesCount: article.FavoritesCount,
			Author: AuthorResponse{
				Username:  authors[0].Username,
				Bio:       authors[0].Bio,
				Image:     authors[0].Image,
				Following: following[0],
			},
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/profiles-follow-delete/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Response struct {
	Profile ProfileResponse `json:"profile"`
}

type ProfileResponse struct {
	Username  string `json:"username"`
	Image     string `json:"image"`
	Bio       string `json:"bio"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	publisher, err := service.GetUserByUsername(input.PathParameters["username"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	err = service.Unfollow(user.Username, publisher.Username)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Profile: ProfileResponse{
			Username:  publisher.Username,
			Image:     publisher.Image,
			Bio:       publisher.Bio,
			Following: false,
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/profiles-follow-post/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Response struct {
	Profile ProfileResponse `json:"profile"`
}

type ProfileResponse struct {
	Username  string `json:"username"`
	Image     string `json:"image"`
	Bio       string `json:"bio"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	publisher, err := service.GetUserByUsername(input.PathParameters["username"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	err = service.Follow(user.Username, publisher.Username)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Profile: ProfileResponse{
			Username:  publisher.Username,
			Image:     publisher.Image,
			Bio:       publisher.Bio,
			Following: true,
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/profiles-get/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Response struct {
	Profile ProfileResponse `json:"profile"`
}

type ProfileResponse struct {
	Username  string `json:"username"`
	Image     string `json:"image"`
	Bio       string `json:"bio"`
	Following bool   `json:"following"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, _, _ := service.GetCurrentUser(input.Headers["Authorization"])

	publisher, err := service.GetUserByUsername(input.PathParameters["username"])
	if err != nil {
		return util.NewErrorResponse(err)
	}

	following, err := service.IsFollowing(user, []string{publisher.Username})
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Profile: ProfileResponse{
			Username:  publisher.Username,
			Image:     publisher.Image,
			Bio:       publisher.Bio,
			Following: following[0],
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/tags-get/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Response struct {
	Tags []string `json:"tags"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	tags, err := service.GetTags()
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		Tags: tags,
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/user-get/main.go
package main

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Response struct {
	User UserResponse `json:"user"`
}

type UserResponse struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Image    string `json:"image"`
	Bio      string `json:"bio"`
	Token    string `json:"token"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	user, token, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	response := Response{
		User: UserResponse{
			Username: user.Username,
			Email:    user.Email,
			Image:    user.Image,
			Bio:      user.Bio,
			Token:    token,
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/user-put/main.go
package main

import (
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Request struct {
	User UserRequest `json:"user"`
}

type UserRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Image    string `json:"image"`
	Bio      string `json:"bio"`
}

type Response struct {
	User UserResponse `json:"user"`
}

type UserResponse struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Image    string `json:"image"`
	Bio      string `json:"bio"`
	Token    string `json:"token"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	oldUser, token, err := service.GetCurrentUser(input.Headers["Authorization"])
	if err != nil {
		return util.NewUnauthorizedResponse()
	}

	request := Request{}
	err = json.Unmarshal([]byte(input.Body), &request)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	err = model.ValidatePassword(request.User.Password)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	passwordHash, err := model.Scrypt(request.User.Password)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	newUser := model.User{
		Username:     oldUser.Username,
		Email:        request.User.Email,
		PasswordHash: passwordHash,
		Image:        request.User.Image,
		Bio:          request.User.Bio,
	}

	err = service.UpdateUser(*oldUser, newUser)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		User: UserResponse{
			Username: newUser.Username,
			Email:    newUser.Email,
			Image:    newUser.Image,
			Bio:      newUser.Bio,
			Token:    token,
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/users-login-post/main.go
package main

import (
	"bytes"
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Request struct {
	User UserRequest `json:"user"`
}

type UserRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Response struct {
	User UserResponse `json:"user"`
}

type UserResponse struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Image    string `json:"image"`
	Bio      string `json:"bio"`
	Token    string `json:"token"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	request := Request{}
	err := json.Unmarshal([]byte(input.Body), &request)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	user, err := service.GetUserByEmail(request.User.Email)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	passwordHash, err := model.Scrypt(request.User.Password)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	if !bytes.Equal(passwordHash, user.PasswordHash) {
		return util.NewErrorResponse(model.NewInputError("password", "wrong password"))
	}

	token, err := model.GenerateToken(user.Username)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		User: UserResponse{
			Username: user.Username,
			Email:    user.Email,
			Image:    user.Image,
			Bio:      user.Bio,
			Token:    token,
		},
	}

	return util.NewSuccessResponse(200, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/route/users-post/main.go
package main

import (
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/service"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

type Request struct {
	User UserRequest `json:"user"`
}

type UserRequest struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Response struct {
	User UserResponse `json:"user"`
}

type UserResponse struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Image    string `json:"image"`
	Bio      string `json:"bio"`
	Token    string `json:"token"`
}

func Handle(input events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	request := Request{}
	err := json.Unmarshal([]byte(input.Body), &request)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	err = model.ValidatePassword(request.User.Password)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	passwordHash, err := model.Scrypt(request.User.Password)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	user := model.User{
		Username:     request.User.Username,
		Email:        request.User.Email,
		PasswordHash: passwordHash,
	}

	err = service.PutUser(user)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	token, err := model.GenerateToken(user.Username)
	if err != nil {
		return util.NewErrorResponse(err)
	}

	response := Response{
		User: UserResponse{
			Username: user.Username,
			Email:    user.Email,
			Image:    user.Image,
			Bio:      user.Bio,
			Token:    token,
		},
	}

	return util.NewSuccessResponse(201, response)
}

func main() {
	lambda.Start(Handle)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/ArticleService.go
package service

import (
	"errors"
	"fmt"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/aws/aws-sdk-go/service/dynamodb/expression"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

func PutArticle(article *model.Article) error {
	err := article.Validate()
	if err != nil {
		return err
	}

	const maxAttempt = 5

	// Try to find a unique article id
	for attempt := 0; ; attempt++ {
		err := putArticleWithRandomId(article)

		if err == nil {
			return nil
		}

		if attempt >= maxAttempt {
			return err
		}

		if !IsConditionalCheckFailed(err) {
			return err
		}

		ArticleIdRand.RenewSeed()
	}
}

func putArticleWithRandomId(article *model.Article) error {
	article.ArticleId = 1 + ArticleIdRand.Get().Int63n(model.MaxArticleId-1) // range: [1, MaxArticleId)
	article.MakeSlug()

	articleItem, err := dynamodbattribute.MarshalMap(article)
	if err != nil {
		return err
	}

	transactItems := make([]*dynamodb.TransactWriteItem, 0, 1+2*len(article.TagList))

	// Put a new article
	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Put: &dynamodb.Put{
			TableName:           aws.String(ArticleTableName),
			Item:                articleItem,
			ConditionExpression: aws.String("attribute_not_exists(ArticleId)"),
		},
	})

	for _, tag := range article.TagList {
		articleTag := model.ArticleTag{
			Tag:       tag,
			ArticleId: article.ArticleId,
			CreatedAt: article.CreatedAt,
		}

		item, err := dynamodbattribute.MarshalMap(articleTag)
		if err != nil {
			return err
		}

		// Link article with tag
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Put: &dynamodb.Put{
				TableName: aws.String(ArticleTagTableName),
				Item:      item,
			},
		})

		// Update article count for each tag
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Update: &dynamodb.Update{
				TableName:        aws.String(TagTableName),
				Key:              StringKey("Tag", tag),
				UpdateExpression: aws.String("ADD ArticleCount :one SET Dummy=:zero"),
				ExpressionAttributeValues: AWSObject{
					":one":  IntValue(1),
					":zero": IntValue(0),
				},
			},
		})
	}

	_, err = DynamoDB().TransactWriteItems(&dynamodb.TransactWriteItemsInput{
		TransactItems: transactItems,
	})

	return err
}

func GetArticles(offset, limit int, author, tag, favorited string) ([]model.Article, error) {
	if offset < 0 {
		return nil, model.NewInputError("offset", "must be non-negative")
	}

	if limit <= 0 {
		return nil, model.NewInputError("limit", "must be positive")
	}

	const maxDepth = 1000
	if offset+limit > maxDepth {
		return nil, model.NewInputError("offset + limit", fmt.Sprintf("must be smaller or equal to %d", maxDepth))
	}

	numFilters := getNumFilters(author, tag, favorited)
	if numFilters > 1 {
		return nil, model.NewInputError("author, tag, favorited", "only one of these can be specified")
	}

	if numFilters == 0 {
		return getAllArticles(offset, limit)
	}

	if author != "" {
		return getArticlesByAuthor(author, offset, limit)
	}

	if tag != "" {
		return getArticlesByTag(tag, offset, limit)
	}

	if favorited != "" {
		return getFavoriteArticlesByUsername(favorited, offset, limit)
	}

	return nil, errors.New("unreachable code")
}

func getNumFilters(author, tag, favorited string) int {
	numFilters := 0
	if author != "" {
		numFilters++
	}
	if tag != "" {
		numFilters++
	}
	if favorited != "" {
		numFilters++
	}
	return numFilters
}

func getAllArticles(offset, limit int) ([]model.Article, error) {
	queryArticles := dynamodb.QueryInput{
		TableName:                 aws.String(ArticleTableName),
		IndexName:                 aws.String("CreatedAt"),
		KeyConditionExpression:    aws.String("Dummy=:zero"),
		ExpressionAttributeValues: IntKey(":zero", 0),
		Limit:                     aws.Int64(int64(offset + limit)),
		ScanIndexForward:          aws.Bool(false),
	}

	items, err := QueryItems(&queryArticles, offset, limit)
	if err != nil {
		return nil, err
	}

	articles := make([]model.Article, len(items))
	err = dynamodbattribute.UnmarshalListOfMaps(items, &articles)
	if err != nil {
		return nil, err
	}

	return articles, nil
}

func getArticlesByAuthor(author string, offset, limit int) ([]model.Article, error) {
	queryArticles := dynamodb.QueryInput{
		TableName:                 aws.String(ArticleTableName),
		IndexName:                 aws.String("Author"),
		KeyConditionExpression:    aws.String("Author=:author"),
		ExpressionAttributeValues: StringKey(":author", author),
		Limit:                     aws.Int64(int64(offset + limit)),
		ScanIndexForward:          aws.Bool(false),
	}

	items, err := QueryItems(&queryArticles, offset, limit)
	if err != nil {
		return nil, err
	}

	articles := make([]model.Article, len(items))
	err = dynamodbattribute.UnmarshalListOfMaps(items, &articles)
	if err != nil {
		return nil, err
	}

	return articles, nil
}

func getArticlesByTag(tag string, offset, limit int) ([]model.Article, error) {
	articleIds, err := GetArticleIdsByTag(tag, offset, limit)
	if err != nil {
		return nil, err
	}

	return getArticlesByArticleIds(articleIds, limit)
}

func getFavoriteArticlesByUsername(username string, offset, limit int) ([]model.Article, error) {
	articleIds, err := GetFavoriteArticleIdsByUsername(username, offset, limit)
	if err != nil {
		return nil, err
	}

	return getArticlesByArticleIds(articleIds, limit)
}

func getArticlesByArticleIds(articleIds []int64, limit int) ([]model.Article, error) {
	if len(articleIds) == 0 {
		return make([]model.Article, 0), nil
	}

	keys := make([]AWSObject, 0, len(articleIds))
	for _, articleId := range articleIds {
		keys = append(keys, Int64Key("ArticleId", articleId))
	}

	batchGetArticles := dynamodb.BatchGetItemInput{
		RequestItems: map[string]*dynamodb.KeysAndAttributes{
			ArticleTableName: {
				Keys: keys,
			},
		},
	}

	responses, err := BatchGetItems(&batchGetArticles, limit)
	if err != nil {
		return nil, err
	}

	articles := make([]model.Article, len(articleIds))
	articleIdToIndex := ReverseIndexInt64(articleIds)

	for _, response := range responses {
		for _, items := range response {
			for _, item := range items {
				article := model.Article{}
				err = dynamodbattribute.UnmarshalMap(item, &article)
				if err != nil {
					return nil, err
				}

				index := articleIdToIndex[article.ArticleId]
				articles[index] = article
			}
		}
	}

	return articles, nil
}

func GetArticleRelatedProperties(user *model.User, articles []model.Article, getFollowing bool) ([]bool, []model.User, []bool, error) {
	isFavorited, err := IsArticleFavoritedByUser(user, articles)
	if err != nil {
		return nil, nil, nil, err
	}

	authorUsernames := make([]string, 0, len(articles))
	for _, article := range articles {
		authorUsernames = append(authorUsernames, article.Author)
	}

	authors, err := GetUserListByUsername(authorUsernames)
	if err != nil {
		return nil, nil, nil, err
	}

	following := make([]bool, 0)

	if getFollowing {
		following, err = IsFollowing(user, authorUsernames)
		if err != nil {
			return nil, nil, nil, err
		}
	}

	return isFavorited, authors, following, nil
}

func GetArticleBySlug(slug string) (model.Article, error) {
	articleId, err := model.SlugToArticleId(slug)
	if err != nil {
		return model.Article{}, err
	}

	return GetArticleByArticleId(articleId)
}

func GetArticleByArticleId(articleId int64) (model.Article, error) {
	article := model.Article{}
	found, err := GetItemByKey(ArticleTableName, Int64Key("ArticleId", articleId), &article)

	if err != nil {
		return model.Article{}, err
	}

	if !found {
		return model.Article{}, model.NewInputError("slug", "not found")
	}

	return article, nil
}

func UpdateArticle(oldArticle model.Article, newArticle *model.Article) error {
	err := newArticle.Validate()
	if err != nil {
		return err
	}

	newArticle.MakeSlug()

	oldTagSet := util.NewStringSetFromSlice(oldArticle.TagList)
	newTagSet := util.NewStringSetFromSlice(newArticle.TagList)
	oldTags := oldTagSet.Difference(newTagSet)
	newTags := newTagSet.Difference(oldTagSet)

	transactItems := make([]*dynamodb.TransactWriteItem, 0, 1+2*len(oldTags)+2*len(newTags))

	expr, err := buildArticleUpdateExpression(oldArticle, *newArticle, len(oldTags) != 0 || len(newTags) != 0)
	if err != nil {
		return err
	}

	// No field changed
	if expr.Update() == nil {
		return nil
	}

	// Update article
	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Update: &dynamodb.Update{
			TableName:                 aws.String(ArticleTableName),
			Key:                       Int64Key("ArticleId", oldArticle.ArticleId),
			ConditionExpression:       aws.String("attribute_exists(ArticleId)"),
			UpdateExpression:          expr.Update(),
			ExpressionAttributeNames:  expr.Names(),
			ExpressionAttributeValues: expr.Values(),
		},
	})

	for tag := range oldTags {
		// Unlink article from tag
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Delete: &dynamodb.Delete{
				TableName: aws.String(ArticleTagTableName),
				Key: AWSObject{
					"Tag":       StringValue(tag),
					"ArticleId": Int64Value(oldArticle.ArticleId),
				},
			},
		})

		// Update article count for each tag
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Update: &dynamodb.Update{
				TableName:                 aws.String(TagTableName),
				Key:                       StringKey("Tag", tag),
				UpdateExpression:          aws.String("ADD ArticleCount :minus_one"),
				ExpressionAttributeValues: IntKey(":minus_one", -1),
			},
		})
	}

	for tag := range newTags {
		articleTag := model.ArticleTag{
			Tag:       tag,
			ArticleId: oldArticle.ArticleId,
			CreatedAt: oldArticle.CreatedAt,
		}

		item, err := dynamodbattribute.MarshalMap(articleTag)
		if err != nil {
			return err
		}

		// Link article with tag.
		// Ignored benign race condition:
		//   Current tag list: A B C
		//   Request 1:        A B      (Delete C)
		//   Request 2:        A B C D  (Add    D)
		//   There's a small chance for both requests to get through, leading to inconsistent result A B D
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Put: &dynamodb.Put{
				TableName: aws.String(ArticleTagTableName),
				Item:      item,
			},
		})

		// Update article count for each tag
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Update: &dynamodb.Update{
				TableName:        aws.String(TagTableName),
				Key:              StringKey("Tag", tag),
				UpdateExpression: aws.String("ADD ArticleCount :one SET Dummy=:zero"),
				ExpressionAttributeValues: AWSObject{
					":one":  IntValue(1),
					":zero": IntValue(0),
				},
			},
		})
	}

	_, err = DynamoDB().TransactWriteItems(&dynamodb.TransactWriteItemsInput{
		TransactItems: transactItems,
	})
	if err != nil {
		return err
	}

	return nil
}

func buildArticleUpdateExpression(oldArticle model.Article, newArticle model.Article, updateTagList bool) (expression.Expression, error) {
	update := expression.UpdateBuilder{}

	if oldArticle.Slug != newArticle.Slug {
		update = update.Set(expression.Name("Slug"), expression.Value(newArticle.Slug))
	}

	if oldArticle.Title != newArticle.Title {
		update = update.Set(expression.Name("Title"), expression.Value(newArticle.Title))
	}

	if oldArticle.Description != newArticle.Description {
		update = update.Set(expression.Name("Description"), expression.Value(newArticle.Description))
	}

	if oldArticle.Body != newArticle.Body {
		update = update.Set(expression.Name("Body"), expression.Value(newArticle.Body))
	}

	if updateTagList {
		update = update.Set(expression.Name("TagList"), expression.Value(newArticle.TagList))
	}

	if oldArticle.UpdatedAt != newArticle.UpdatedAt {
		update = update.Set(expression.Name("UpdatedAt"), expression.Value(newArticle.UpdatedAt))
	}

	if IsUpdateBuilderEmpty(update) {
		return expression.Expression{}, nil
	}

	builder := expression.NewBuilder().WithUpdate(update)
	return builder.Build()
}

func DeleteArticle(slug string, username string) error {
	article, err := GetArticleBySlug(slug)
	if err != nil {
		return err
	}

	transactItems := make([]*dynamodb.TransactWriteItem, 0, 3+2*len(article.TagList))

	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Delete: &dynamodb.Delete{
			TableName:                 aws.String(ArticleTableName),
			Key:                       Int64Key("ArticleId", article.ArticleId),
			ConditionExpression:       aws.String("Author=:username"),
			ExpressionAttributeValues: StringKey(":username", username),
		},
	})

	// TODO: DynamoDB doesn't support deleting a whole partition by specifying just the partition key.
	// https://stackoverflow.com/questions/34259358/dynamodb-delete-all-items-having-same-hash-key
	// It's probably easier to delete related items in FavoriteArticleTable and CommentTable
	// offline (despite potential article id overwrite).

	for _, tag := range article.TagList {
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Delete: &dynamodb.Delete{
				TableName: aws.String(ArticleTagTableName),
				Key: AWSObject{
					"Tag":       StringValue(tag),
					"ArticleId": Int64Value(article.ArticleId),
				},
			},
		})

		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Update: &dynamodb.Update{
				TableName:                 aws.String(TagTableName),
				Key:                       StringKey("Tag", tag),
				UpdateExpression:          aws.String("ADD ArticleCount :minus_one"),
				ExpressionAttributeValues: IntKey(":minus_one", -1),
			},
		})
	}

	_, err = DynamoDB().TransactWriteItems(&dynamodb.TransactWriteItemsInput{
		TransactItems: transactItems,
	})
	if err != nil {
		return err
	}

	return nil
}

func GetFeed(username string, offset, limit int) ([]model.Article, error) {
	queryPublishers := dynamodb.QueryInput{
		TableName:                 aws.String(FollowTableName),
		KeyConditionExpression:    aws.String("Follower=:username"),
		ExpressionAttributeValues: StringKey(":username", username),
		ProjectionExpression:      aws.String("Publisher"),
	}

	const queryInitialCapacity = 16
	items, err := QueryItems(&queryPublishers, 0, queryInitialCapacity)
	if err != nil {
		return nil, err
	}

	follows := make([]model.Follow, 0, len(items))
	err = dynamodbattribute.UnmarshalListOfMaps(items, &follows)
	if err != nil {
		return nil, err
	}

	// TODO: DynamoDB doesn't support batch queries
	// https://stackoverflow.com/questions/24953783/dynamodb-batch-execute-queryrequests
	// Concurrent queries can probably improve the performance of the following operations.

	articlesByAuthor := make(model.ArticlePriorityQueue, 0, len(follows))

	for _, follow := range follows {
		articles, err := getArticlesByAuthor(follow.Publisher, 0, limit)
		if err != nil {
			return nil, err
		}

		articlesByAuthor = append(articlesByAuthor, articles)
	}

	return model.MergeArticles(articlesByAuthor, offset, limit), nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/ArticleTagService.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
)

func GetArticleIdsByTag(tag string, offset, limit int) ([]int64, error) {
	queryArticleIds := dynamodb.QueryInput{
		TableName:                 aws.String(ArticleTagTableName),
		IndexName:                 aws.String("CreatedAt"),
		KeyConditionExpression:    aws.String("Tag=:tag"),
		ExpressionAttributeValues: StringKey(":tag", tag),
		Limit:                     aws.Int64(int64(offset + limit)),
		ScanIndexForward:          aws.Bool(false),
		ProjectionExpression:      aws.String("ArticleId"),
	}

	items, err := QueryItems(&queryArticleIds, offset, limit)
	if err != nil {
		return nil, err
	}

	articleTags := make([]model.ArticleTag, len(items))
	err = dynamodbattribute.UnmarshalListOfMaps(items, &articleTags)
	if err != nil {
		return nil, err
	}

	articleIds := make([]int64, 0, len(items))

	for _, articleTag := range articleTags {
		articleIds = append(articleIds, articleTag.ArticleId)
	}

	return articleIds, nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/CommentService.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
)

func PutComment(comment *model.Comment) error {
	err := comment.Validate()
	if err != nil {
		return err
	}

	const maxAttempt = 5

	// Try to find a unique comment id
	for attempt := 0; ; attempt++ {
		err := putCommentWithRandomId(comment)

		if err == nil {
			return nil
		}

		if attempt >= maxAttempt {
			return err
		}

		if !IsConditionalCheckFailed(err) {
			return err
		}

		CommentIdRand.RenewSeed()
	}
}

func putCommentWithRandomId(comment *model.Comment) error {
	comment.CommentId = 1 + CommentIdRand.Get().Int63n(model.MaxCommentId-1) // range: [1, MaxCommentId)

	commentItem, err := dynamodbattribute.MarshalMap(comment)
	if err != nil {
		return err
	}

	// Put a new article
	_, err = DynamoDB().PutItem(&dynamodb.PutItemInput{
		TableName:           aws.String(CommentTableName),
		Item:                commentItem,
		ConditionExpression: aws.String("attribute_not_exists(CommentId)"),
	})

	return err
}

func GetCommentRelatedProperties(user *model.User, comments []model.Comment) ([]model.User, []bool, error) {
	authorUsernames := make([]string, 0, len(comments))
	for _, comment := range comments {
		authorUsernames = append(authorUsernames, comment.Author)
	}

	authors, err := GetUserListByUsername(authorUsernames)
	if err != nil {
		return nil, nil, err
	}

	following, err := IsFollowing(user, authorUsernames)
	if err != nil {
		return nil, nil, err
	}

	return authors, following, nil
}

func GetComments(slug string) ([]model.Comment, error) {
	articleId, err := model.SlugToArticleId(slug)
	if err != nil {
		return nil, err
	}

	queryComments := dynamodb.QueryInput{
		TableName:                 aws.String(CommentTableName),
		IndexName:                 aws.String("CreatedAt"),
		KeyConditionExpression:    aws.String("ArticleId=:articleId"),
		ExpressionAttributeValues: Int64Key(":articleId", articleId),
		ScanIndexForward:          aws.Bool(false),
	}

	const queryInitialCapacity = 16
	items, err := QueryItems(&queryComments, 0, queryInitialCapacity)
	if err != nil {
		return nil, err
	}

	comments := make([]model.Comment, len(items))
	err = dynamodbattribute.UnmarshalListOfMaps(items, &comments)
	if err != nil {
		return nil, err
	}

	return comments, nil
}

func DeleteComment(slug string, commentId int64, username string) error {
	articleId, err := model.SlugToArticleId(slug)
	if err != nil {
		return err
	}

	key := model.CommentKey{
		ArticleId: articleId,
		CommentId: commentId,
	}

	item, err := dynamodbattribute.MarshalMap(key)
	if err != nil {
		return err
	}

	deleteComment := dynamodb.DeleteItemInput{
		TableName:                 aws.String(CommentTableName),
		Key:                       item,
		ConditionExpression:       aws.String("Author=:username"),
		ExpressionAttributeValues: StringKey(":username", username),
	}

	_, err = DynamoDB().DeleteItem(&deleteComment)

	return err
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/CommonDBOperation.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/util"
)

func GetItemByKey(tableName string, key AWSObject, out interface{}) (bool, error) {
	input := dynamodb.GetItemInput{
		TableName: aws.String(tableName),
		Key:       key,
	}

	output, err := DynamoDB().GetItem(&input)
	if err != nil {
		return false, err
	}

	if len(output.Item) == 0 {
		return false, nil
	}

	err = dynamodbattribute.UnmarshalMap(output.Item, out)
	if err != nil {
		return false, err
	}

	return true, nil
}

func QueryItems(queryInput *dynamodb.QueryInput, offset, cap int) ([]AWSObject, error) {
	items := make([]AWSObject, 0, cap)
	resultIndex := 0

	err := DynamoDB().QueryPages(queryInput, func(page *dynamodb.QueryOutput, lastPage bool) bool {
		pageCount := len(page.Items)

		if resultIndex+pageCount > offset {
			start := util.MaxInt(0, offset-resultIndex)
			for i := start; i < pageCount; i++ {
				items = append(items, page.Items[i])
			}
		}

		resultIndex += pageCount
		return true
	})

	if err != nil {
		return nil, err
	}

	return items, nil
}

func BatchGetItems(batchGetInput *dynamodb.BatchGetItemInput, cap int) ([]map[string][]AWSObject, error) {
	responses := make([]map[string][]AWSObject, 0, cap)

	err := DynamoDB().BatchGetItemPages(batchGetInput, func(page *dynamodb.BatchGetItemOutput, lastPage bool) bool {
		responses = append(responses, page.Responses)
		return true
	})

	if err != nil {
		return nil, err
	}

	return responses, nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/DynamoDBClient.go
package service

import (
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"sync"
)

var once sync.Once
var svc *dynamodb.DynamoDB

func initializeSingletons() {
	sess := session.Must(session.NewSessionWithOptions(session.Options{
		SharedConfigState: session.SharedConfigEnable,
	}))

	svc = dynamodb.New(sess)
}

func DynamoDB() *dynamodb.DynamoDB {
	once.Do(initializeSingletons)
	return svc
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/FavoriteArticleService.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
)

func GetFavoriteArticleIdsByUsername(username string, offset, limit int) ([]int64, error) {
	queryArticleIds := dynamodb.QueryInput{
		TableName:                 aws.String(FavoriteArticleTableName),
		IndexName:                 aws.String("FavoritedAt"),
		KeyConditionExpression:    aws.String("Username=:username"),
		ExpressionAttributeValues: StringKey(":username", username),
		Limit:                     aws.Int64(int64(offset + limit)),
		ScanIndexForward:          aws.Bool(false),
		ProjectionExpression:      aws.String("ArticleId"),
	}

	items, err := QueryItems(&queryArticleIds, offset, limit)
	if err != nil {
		return nil, err
	}

	favoriteArticles := make([]model.FavoriteArticle, len(items))
	err = dynamodbattribute.UnmarshalListOfMaps(items, &favoriteArticles)
	if err != nil {
		return nil, err
	}

	articleIds := make([]int64, 0, len(items))

	for _, favoriteArticle := range favoriteArticles {
		articleIds = append(articleIds, favoriteArticle.ArticleId)
	}

	return articleIds, nil
}

func IsArticleFavoritedByUser(user *model.User, articles []model.Article) ([]bool, error) {
	if user == nil || len(articles) == 0 {
		return make([]bool, len(articles)), nil
	}

	keys := make([]AWSObject, 0, len(articles))
	for _, article := range articles {
		keys = append(keys, AWSObject{
			"Username":  StringValue(user.Username),
			"ArticleId": Int64Value(article.ArticleId),
		})
	}

	batchGetFavoriteArticles := dynamodb.BatchGetItemInput{
		RequestItems: map[string]*dynamodb.KeysAndAttributes{
			FavoriteArticleTableName: {
				Keys:                 keys,
				ProjectionExpression: aws.String("ArticleId"),
			},
		},
	}

	responses, err := BatchGetItems(&batchGetFavoriteArticles, len(articles))
	if err != nil {
		return nil, err
	}

	isFavorited := make([]bool, len(articles))
	articleIdToIndex := reverseIndexArticleIds(articles)

	for _, response := range responses {
		for _, items := range response {
			for _, item := range items {
				favoriteArticle := model.FavoriteArticle{}
				err = dynamodbattribute.UnmarshalMap(item, &favoriteArticle)
				if err != nil {
					return nil, err
				}

				index := articleIdToIndex[favoriteArticle.ArticleId]
				isFavorited[index] = true
			}
		}
	}

	return isFavorited, nil
}

func reverseIndexArticleIds(articles []model.Article) map[int64]int {
	indices := make(map[int64]int)
	for i, article := range articles {
		indices[article.ArticleId] = i
	}
	return indices
}

func SetFavoriteArticle(favoriteArticle model.FavoriteArticle) error {
	item, err := dynamodbattribute.MarshalMap(favoriteArticle)
	if err != nil {
		return err
	}

	transactItems := make([]*dynamodb.TransactWriteItem, 0, 2)

	// Favorite the article
	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Put: &dynamodb.Put{
			TableName:           aws.String(FavoriteArticleTableName),
			Item:                item,
			ConditionExpression: aws.String("attribute_not_exists(Username) AND attribute_not_exists(ArticleId)"),
		},
	})

	// Update favorites count
	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Update: &dynamodb.Update{
			TableName:                 aws.String(ArticleTableName),
			Key:                       Int64Key("ArticleId", favoriteArticle.ArticleId),
			ConditionExpression:       aws.String("attribute_exists(ArticleId)"),
			UpdateExpression:          aws.String("ADD FavoritesCount :one"),
			ExpressionAttributeValues: IntKey(":one", 1),
		},
	})

	_, err = DynamoDB().TransactWriteItems(&dynamodb.TransactWriteItemsInput{
		TransactItems: transactItems,
	})

	if err != nil {
		return model.NewInputError("slug", "not found or already favorited")
	}

	return nil
}

func UnfavoriteArticle(favoriteArticle model.FavoriteArticleKey) error {
	item, err := dynamodbattribute.MarshalMap(favoriteArticle)
	if err != nil {
		return err
	}

	transactItems := make([]*dynamodb.TransactWriteItem, 0, 2)

	// Unfavorite the article
	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Delete: &dynamodb.Delete{
			TableName:           aws.String(FavoriteArticleTableName),
			Key:                 item,
			ConditionExpression: aws.String("attribute_exists(Username) AND attribute_exists(ArticleId)"),
		},
	})

	// Update favorites count
	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Update: &dynamodb.Update{
			TableName:                 aws.String(ArticleTableName),
			Key:                       Int64Key("ArticleId", favoriteArticle.ArticleId),
			ConditionExpression:       aws.String("attribute_exists(ArticleId)"),
			UpdateExpression:          aws.String("ADD FavoritesCount :minus_one"),
			ExpressionAttributeValues: IntKey(":minus_one", -1),
		},
	})

	_, err = DynamoDB().TransactWriteItems(&dynamodb.TransactWriteItemsInput{
		TransactItems: transactItems,
	})

	if err != nil {
		return model.NewInputError("slug", "not found or not favorited")
	}

	return nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/FollowService.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
)

func IsFollowing(follower *model.User, publishers []string) ([]bool, error) {
	if follower == nil || len(publishers) == 0 {
		return make([]bool, len(publishers)), nil
	}

	publisherSet := make(map[string]bool)
	for _, publisher := range publishers {
		publisherSet[publisher] = true
	}

	keys := make([]AWSObject, 0, len(publisherSet))
	for publisher := range publisherSet {
		keys = append(keys, AWSObject{
			"Follower":  StringValue(follower.Username),
			"Publisher": StringValue(publisher),
		})
	}

	batchGetFollows := dynamodb.BatchGetItemInput{
		RequestItems: map[string]*dynamodb.KeysAndAttributes{
			FollowTableName: {
				Keys:                 keys,
				ProjectionExpression: aws.String("Publisher"),
			},
		},
	}

	responses, err := BatchGetItems(&batchGetFollows, len(publisherSet))
	if err != nil {
		return nil, err
	}

	followingUser := make(map[string]bool)

	for _, response := range responses {
		for _, items := range response {
			for _, item := range items {
				follow := model.Follow{}
				err = dynamodbattribute.UnmarshalMap(item, &follow)
				if err != nil {
					return nil, err
				}

				followingUser[follow.Publisher] = true
			}
		}
	}

	following := make([]bool, 0, len(publishers))
	for _, username := range publishers {
		following = append(following, followingUser[username])
	}

	return following, nil
}

func Follow(follower string, publisher string) error {
	follow := model.Follow{
		Follower:  follower,
		Publisher: publisher,
	}

	item, err := dynamodbattribute.MarshalMap(follow)
	if err != nil {
		return err
	}

	putFollow := dynamodb.PutItemInput{
		TableName: aws.String(FollowTableName),
		Item:      item,
	}

	_, err = DynamoDB().PutItem(&putFollow)

	return err
}

func Unfollow(follower string, publisher string) error {
	follow := model.Follow{
		Follower:  follower,
		Publisher: publisher,
	}

	item, err := dynamodbattribute.MarshalMap(follow)
	if err != nil {
		return err
	}

	deleteFollow := dynamodb.DeleteItemInput{
		TableName: aws.String(FollowTableName),
		Key:       item,
	}

	_, err = DynamoDB().DeleteItem(&deleteFollow)

	return err
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/Rand.go
package service

import (
	"math/rand"
	"time"
)

var ArticleIdRand = NewRand()
var CommentIdRand = NewRand()

type Rand struct {
	random *rand.Rand
}

func NewRand() Rand {
	r := Rand{}
	r.RenewSeed()
	return r
}

func (r *Rand) RenewSeed() {
	r.random = rand.New(rand.NewSource(time.Now().UnixNano()))
}

func (r *Rand) Get() *rand.Rand {
	return r.random
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/TableName.go
package service

import (
	"fmt"
	"os"
)

var Stage = os.Getenv("STAGE")

var UserTableName = makeTableName("user")
var EmailUserTableName = makeTableName("email-user")
var FollowTableName = makeTableName("follow")
var ArticleTableName = makeTableName("article")
var ArticleTagTableName = makeTableName("article-tag")
var TagTableName = makeTableName("tag")
var FavoriteArticleTableName = makeTableName("favorite-article")
var CommentTableName = makeTableName("comment")

func makeTableName(suffix string) string {
	return fmt.Sprintf("realworld-%s-%s", Stage, suffix)
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/TagService.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
)

func GetTags() ([]string, error) {
	const maxNumTags = 20

	queryTags := dynamodb.QueryInput{
		TableName:                 aws.String(TagTableName),
		IndexName:                 aws.String("ArticleCount"),
		KeyConditionExpression:    aws.String("Dummy=:zero"),
		ExpressionAttributeValues: IntKey(":zero", 0),
		Limit:                     aws.Int64(maxNumTags),
		ScanIndexForward:          aws.Bool(false),
	}

	items, err := QueryItems(&queryTags, 0, maxNumTags)
	if err != nil {
		return nil, err
	}

	tagObjects := make([]model.Tag, len(items))
	err = dynamodbattribute.UnmarshalListOfMaps(items, &tagObjects)
	if err != nil {
		return nil, err
	}

	tags := make([]string, 0, len(tagObjects))
	for _, tagObject := range tagObjects {
		if tagObject.ArticleCount > 0 {
			tags = append(tags, tagObject.Tag)
		}
	}

	return tags, nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/UserService.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
)

func PutUser(user model.User) error {
	err := user.Validate()
	if err != nil {
		return err
	}

	userItem, err := dynamodbattribute.MarshalMap(user)
	if err != nil {
		return err
	}

	emailUser := model.EmailUser{
		Email:    user.Email,
		Username: user.Username,
	}

	emailUserItem, err := dynamodbattribute.MarshalMap(emailUser)
	if err != nil {
		return err
	}

	// Put a new user, make sure username and email are unique
	transaction := dynamodb.TransactWriteItemsInput{
		TransactItems: []*dynamodb.TransactWriteItem{
			{
				Put: &dynamodb.Put{
					TableName:           aws.String(UserTableName),
					Item:                userItem,
					ConditionExpression: aws.String("attribute_not_exists(Username)"),
				},
			},
			{
				Put: &dynamodb.Put{
					TableName:           aws.String(EmailUserTableName),
					Item:                emailUserItem,
					ConditionExpression: aws.String("attribute_not_exists(Email)"),
				},
			},
		},
	}

	_, err = DynamoDB().TransactWriteItems(&transaction)
	if err != nil {
		// TODO: distinguish:
		// NewInputError("username", "has already been taken")
		// NewInputError("email", "has already been taken")
		return err
	}

	return nil
}

func UpdateUser(oldUser model.User, newUser model.User) error {
	err := newUser.Validate()
	if err != nil {
		return err
	}

	transactItems := make([]*dynamodb.TransactWriteItem, 0, 3)

	if oldUser.Email != newUser.Email {
		newEmailUser := model.EmailUser{
			Email:    newUser.Email,
			Username: newUser.Username,
		}

		newEmailUserItem, err := dynamodbattribute.MarshalMap(newEmailUser)
		if err != nil {
			return err
		}

		// Link user with the new email
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Put: &dynamodb.Put{
				TableName:           aws.String(EmailUserTableName),
				Item:                newEmailUserItem,
				ConditionExpression: aws.String("attribute_not_exists(Email)"),
			},
		})

		// Unlink user from the old email
		transactItems = append(transactItems, &dynamodb.TransactWriteItem{
			Delete: &dynamodb.Delete{
				TableName:           aws.String(EmailUserTableName),
				Key:                 StringKey("Email", oldUser.Email),
				ConditionExpression: aws.String("attribute_exists(Email)"),
			},
		})
	}

	newUserItem, err := dynamodbattribute.MarshalMap(newUser)
	if err != nil {
		return err
	}

	// Update user info
	transactItems = append(transactItems, &dynamodb.TransactWriteItem{
		Put: &dynamodb.Put{
			TableName:                 aws.String(UserTableName),
			Item:                      newUserItem,
			ConditionExpression:       aws.String("Email = :email"),
			ExpressionAttributeValues: StringKey(":email", oldUser.Email),
		},
	})

	_, err = DynamoDB().TransactWriteItems(&dynamodb.TransactWriteItemsInput{
		TransactItems: transactItems,
	})
	if err != nil {
		return err
	}

	return nil
}

func GetUserByEmail(email string) (model.User, error) {
	if email == "" {
		return model.User{}, model.NewInputError("email", "can't be blank")
	}

	username, err := GetUsernameByEmail(email)
	if err != nil {
		return model.User{}, err
	}

	return GetUserByUsername(username)
}

func GetUsernameByEmail(email string) (string, error) {
	emailUser := model.EmailUser{}
	found, err := GetItemByKey(EmailUserTableName, StringKey("Email", email), &emailUser)

	if err != nil {
		return "", err
	}

	if !found {
		return "", model.NewInputError("email", "not found")
	}

	return emailUser.Username, nil
}

func GetUserByUsername(username string) (model.User, error) {
	if username == "" {
		return model.User{}, model.NewInputError("username", "can't be blank")
	}

	user := model.User{}
	found, err := GetItemByKey(UserTableName, StringKey("Username", username), &user)

	if err != nil {
		return model.User{}, err
	}

	if !found {
		return model.User{}, model.NewInputError("username", "not found")
	}

	return user, err
}

func GetCurrentUser(auth string) (*model.User, string, error) {
	username, token, err := model.VerifyAuthorization(auth)
	if err != nil {
		return nil, "", err
	}

	user, err := GetUserByUsername(username)
	if err != nil {
		return nil, "", err
	}

	return &user, token, nil
}

func GetUserListByUsername(usernames []string) ([]model.User, error) {
	if len(usernames) == 0 {
		return make([]model.User, 0), nil
	}

	usernameSet := make(map[string]bool)
	for _, username := range usernames {
		usernameSet[username] = true
	}

	keys := make([]AWSObject, 0, len(usernameSet))
	for username := range usernameSet {
		keys = append(keys, StringKey("Username", username))
	}

	batchGetUsers := dynamodb.BatchGetItemInput{
		RequestItems: map[string]*dynamodb.KeysAndAttributes{
			UserTableName: {
				Keys: keys,
			},
		},
	}

	responses, err := BatchGetItems(&batchGetUsers, len(usernames))
	if err != nil {
		return nil, err
	}

	usersByUsername := make(map[string]model.User)

	for _, response := range responses {
		for _, items := range response {
			for _, item := range items {
				user := model.User{}
				err = dynamodbattribute.UnmarshalMap(item, &user)
				if err != nil {
					return nil, err
				}

				usersByUsername[user.Username] = user
			}
		}
	}

	users := make([]model.User, 0, len(usernames))
	for _, username := range usernames {
		users = append(users, usersByUsername[username])
	}

	return users, nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/Util.go
package service

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/expression"
	"reflect"
	"strconv"
	"strings"
)

type AWSObject = map[string]*dynamodb.AttributeValue

func StringKey(name, value string) AWSObject {
	return AWSObject{
		name: StringValue(value),
	}
}

func StringValue(value string) *dynamodb.AttributeValue {
	return &dynamodb.AttributeValue{
		S: aws.String(value),
	}
}

func IntKey(name string, value int) AWSObject {
	return AWSObject{
		name: IntValue(value),
	}
}

func IntValue(value int) *dynamodb.AttributeValue {
	return &dynamodb.AttributeValue{
		N: aws.String(strconv.Itoa(value)),
	}
}

func Int64Key(name string, value int64) AWSObject {
	return AWSObject{
		name: Int64Value(value),
	}
}

func Int64Value(value int64) *dynamodb.AttributeValue {
	return &dynamodb.AttributeValue{
		N: aws.String(strconv.FormatInt(value, 10)),
	}
}

func BlobValue(value []byte) *dynamodb.AttributeValue {
	return &dynamodb.AttributeValue{
		B: value,
	}
}

func ReverseIndexInt64(values []int64) map[int64]int {
	indices := make(map[int64]int)
	for i, v := range values {
		indices[v] = i
	}
	return indices
}

func IsUpdateBuilderEmpty(update expression.UpdateBuilder) bool {
	return reflect.ValueOf(&update).Elem().FieldByName("operationList").IsNil()
}

func IsConditionalCheckFailed(err error) bool {
	aerr, ok := err.(awserr.Error)
	if !ok {
		return false
	}

	switch aerr.Code() {
	case dynamodb.ErrCodeConditionalCheckFailedException:
		return true
	case dynamodb.ErrCodeTransactionCanceledException:
		// TODO: DynamoDB Go client doesn't provide individual cancellation reasons for a transaction.
		// "If using Java, DynamoDB lists the cancellation reasons on the CancellationReasons
		// property. This property is not set for other languages."
		// https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#DynamoDB.TransactWriteItems
		// Here we depend on awserr.Error.Message(), which looks like
		// "Transaction cancelled, please refer cancellation reasons for specific reasons [ConditionalCheckFailed, None]"
		// https://github.com/aws/aws-sdk-go/issues/2318
		return strings.Contains(aerr.Message(), "ConditionalCheckFailed")
	default:
		return false
	}
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/service/Util_test.go
package service

import (
	"github.com/aws/aws-sdk-go/service/dynamodb/expression"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestIsUpdateBuilderEmpty(t *testing.T) {
	assert.True(t, IsUpdateBuilderEmpty(expression.UpdateBuilder{}))
	assert.False(t, IsUpdateBuilderEmpty(expression.Set(expression.Name("Name"), expression.Value("Value"))))
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/ErrorResponse.go
package util

import (
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
	"github.com/chrisxue815/realworld-aws-lambda-dynamodb-go/model"
)

type InputErrorResponse struct {
	Errors model.InputError `json:"errors"`
}

func NewErrorResponse(err error) (events.APIGatewayProxyResponse, error) {
	inputError, ok := err.(model.InputError)
	if !ok {
		// Internal server error
		return events.APIGatewayProxyResponse{}, err
	}

	body := InputErrorResponse{
		Errors: inputError,
	}

	jsonBody, err := json.Marshal(body)
	if err != nil {
		return events.APIGatewayProxyResponse{}, err
	}

	response := events.APIGatewayProxyResponse{
		StatusCode: 422,
		Body:       string(jsonBody),
		Headers:    CORSHeaders(),
	}
	return response, nil
}

func NewUnauthorizedResponse() (events.APIGatewayProxyResponse, error) {
	response := events.APIGatewayProxyResponse{
		StatusCode: 401,
		Headers:    CORSHeaders(),
	}
	return response, nil
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/Math.go
package util

func MaxInt(x, y int) int {
	if x < y {
		return y
	}
	return x
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/StringSet.go
package util

type StringSet map[string]bool

func NewStringSetFromSlice(slice []string) StringSet {
	s := make(StringSet, len(slice))
	for _, value := range slice {
		s[value] = true
	}
	return s
}

func (s StringSet) Difference(other StringSet) StringSet {
	result := make(StringSet)
	for value := range s {
		if !other[value] {
			result[value] = true
		}
	}
	return result
}

func (s StringSet) ToSlice() []string {
	result := make([]string, 0, len(s))
	for value := range s {
		result = append(result, value)
	}
	return result
}

--#

--% E:/desktop-laptop/_rwe/realworld-aws-lambda-dynamodb-go/util/SuccessResponse.go
package util

import (
	"encoding/json"
	"github.com/aws/aws-lambda-go/events"
)

func CORSHeaders() map[string]string {
	return map[string]string{
		"Access-Control-Allow-Origin":      "*",
		"Access-Control-Allow-Credentials": "true",
	}
}

func NewSuccessResponse(statusCode int, body interface{}) (events.APIGatewayProxyResponse, error) {
	response := events.APIGatewayProxyResponse{
		StatusCode: statusCode,
		Headers:    CORSHeaders(),
	}

	if body != nil {
		jsonBody, err := json.Marshal(body)
		if err != nil {
			return NewErrorResponse(err)
		}

		response.Body = string(jsonBody)
	}

	return response, nil
}

--#

