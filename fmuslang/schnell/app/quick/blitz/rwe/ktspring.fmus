--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#

--% index/fmus/under_pwd
__REPLACE_WITH_PROJECT_DIR_OR_INPUT__,d(/mk)
	%utama=__FILE__
	.gitignore,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/.gitignore)
	kotlin-spring.png,f(b64=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/kotlin-spring.png)
	mvnw,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/mvnw)
	mvnw.cmd,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/mvnw.cmd)
	pom.xml,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/pom.xml)
	readme.md,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/readme.md)
	src,d(/mk)
		main,d(/mk)
			kotlin,d(/mk)
				io,d(/mk)
					realworld,d(/mk)
						ApiApplication.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/ApiApplication.kt)
						client,d(/mk)
							ProfileClient.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/ProfileClient.kt)
							TagClient.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/TagClient.kt)
							UserClient.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/UserClient.kt)
							response,d(/mk)
								InLogin.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/InLogin.kt)
								InRegister.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/InRegister.kt)
								OutProfile.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/OutProfile.kt)
								OutTag.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/OutTag.kt)
								OutUser.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/OutUser.kt)
						exception,d(/mk)
							ForbiddenRequestException.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/ForbiddenRequestException.kt)
							InvalidException.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/InvalidException.kt)
							InvalidLoginException.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/InvalidLoginException.kt)
							NotFoundException.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/NotFoundException.kt)
							UnauthorizedException.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/UnauthorizedException.kt)
							UserExistException.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/UserExistException.kt)
						jwt,d(/mk)
							ApiKeySecured.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/jwt/ApiKeySecured.kt)
							ApiKeySecuredAspect.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/jwt/ApiKeySecuredAspect.kt)
							ExposeResponseInterceptor.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/jwt/ExposeResponseInterceptor.kt)
						model,d(/mk)
							Article.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/Article.kt)
							Comment.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/Comment.kt)
							Tag.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/Tag.kt)
							User.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/User.kt)
							inout,d(/mk)
								Article.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Article.kt)
								Comment.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Comment.kt)
								Login.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Login.kt)
								NewArticle.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/NewArticle.kt)
								NewComment.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/NewComment.kt)
								Profile.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Profile.kt)
								Register.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Register.kt)
								UpdateArticle.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/UpdateArticle.kt)
								UpdateUser.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/UpdateUser.kt)
						repository,d(/mk)
							ArticleRepository.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/ArticleRepository.kt)
							CommentRepository.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/CommentRepository.kt)
							TagRepository.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/TagRepository.kt)
							UserRepository.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/UserRepository.kt)
							specification,d(/mk)
								ArticlesSpecifications.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/specification/ArticlesSpecifications.kt)
						service,d(/mk)
							UserService.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/service/UserService.kt)
						web,d(/mk)
							ArticleHandler.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/ArticleHandler.kt)
							InvalidRequestHandler.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/InvalidRequestHandler.kt)
							ProfileHandler.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/ProfileHandler.kt)
							TagHandler.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/TagHandler.kt)
							UserHandler.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/UserHandler.kt)
			resources,d(/mk)
				application.properties,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/resources/application.properties)
		test,d(/mk)
			kotlin,d(/mk)
				io,d(/mk)
					realworld,d(/mk)
						ApiApplicationTests.kt,f(e=utama=E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/test/kotlin/io/realworld/ApiApplicationTests.kt)
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/.gitignore
# See http://help.github.com/ignore-files/ for more about ignoring files.

# dependencies
/node_modules
/bower_components

# IDEs and editors
/.idea
.project
.classpath
*.launch
.settings/

target/
*.class
*.jar
*.iml

#System Files
.DS_Store
Thumbs.db

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/kotlin-spring.png

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/mvnw
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven2 Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Migwn, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
  # TODO classpath?
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`which java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
echo $MAVEN_PROJECTBASEDIR
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/mvnw.cmd
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven2 Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM enable echoing my setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_pre.bat" call "%HOME%\mavenrc_pre.bat"
if exist "%HOME%\mavenrc_pre.cmd" call "%HOME%\mavenrc_pre.cmd"
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"

set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%" == "" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_post.bat" call "%HOME%\mavenrc_post.bat"
if exist "%HOME%\mavenrc_post.cmd" call "%HOME%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%" == "on" pause

if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%

exit /B %ERROR_CODE%

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>io.realworld</groupId>
	<artifactId>api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>api</name>
	<description>Demo for realworld.io with Kotlin and Spring Boot Reactive</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<kotlin.compiler.incremental>true</kotlin.compiler.incremental>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<kotlin.version>1.4.32</kotlin.version>
		<feign.version>8.17.0</feign.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.1</version>
        </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib-jdk8</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-reflect</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-kotlin</artifactId>
            <version>2.12.3</version>
        </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
		<dependency>
			<groupId>com.netflix.feign</groupId>
			<artifactId>feign-core</artifactId>
			<version>${feign.version}</version>
		</dependency>
		<dependency>
			<groupId>com.netflix.feign</groupId>
			<artifactId>feign-gson</artifactId>
			<version>${feign.version}</version>
		</dependency>
        <dependency>
            <groupId>com.github.slugify</groupId>
            <artifactId>slugify</artifactId>
            <version>2.5</version>
        </dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
		<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>kotlin-maven-plugin</artifactId>
				<groupId>org.jetbrains.kotlin</groupId>
				<version>${kotlin.version}</version>
				<configuration>
					<compilerPlugins>
						<plugin>spring</plugin>
					</compilerPlugins>
					<jvmTarget>1.8</jvmTarget>
				</configuration>
				<executions>
					<execution>
						<id>compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>test-compile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>test-compile</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-allopen</artifactId>
						<version>${kotlin.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
        <repository>
            <id>jcenter</id>
            <url>https://jcenter.bintray.com/</url>
        </repository>

    </repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>


</project>

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/readme.md
# ![RealWorld Example App using Kotlin and Spring](kotlin-spring.png)

> ### Kotlin + Spring codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the [RealWorld](https://github.com/gothinkster/realworld-example-apps) spec and API.

This codebase was created to demonstrate a fully fledged fullstack application built with Kotlin + Spring including CRUD operations, authentication, routing, pagination, and more.

We've gone to great lengths to adhere to the Kotlin + Spring community styleguides & best practices.

For more information on how to this works with other frontends/backends, head over to the [RealWorld](https://github.com/gothinkster/realworld) repo.

# How it works

The application uses Spring (Web, Data, AOP, Cache) and the Kotlin language.

    + client/
        Some feign clients for testing
    + exception/
        Exceptions by the application
    + jwt/
        AOP advice that check for authentication using a defined @ApiKeySecured operation
    + model/
        + inout/
            Object for REST in/out operations
        JPA models
    + repository/
        + specification/
            Some specifications for JPA
        Spring repositories
    + service/
        Spring services
    + web/
        Spring controllers
    - ApiApplication.kt <- The main class

# Security

Instead of using Spring Security to implement an authenticator using JWT, I created a simple AOP advice that checks
the `Authorization` header and put the user to be found in a `ThreadLocal` (see `UserService`).

The secret key and jwt issuer are stored in `application.properties`.

# Database

It uses a H2 in memory database (for now), can be changed easily in the `application.properties` for any other database.
You'll need to add the correct maven dependency for the needed `Driver` in `pom.xml`.

# Getting started

You need Java and maven installed.

    mvn spring-boot:run
    open http://localhost:8080

# Help

Please fork and PR to improve the code.

# Kotlin

I've been using Kotlin for some time, but I'm no expert, so feel free to contribute and modify the code to make it more idiomatic!

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/ApiApplication.kt
package io.realworld

import io.realworld.jwt.ExposeResponseInterceptor
import org.springframework.boot.SpringApplication
import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.cache.annotation.EnableCaching
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean
import org.springframework.validation.beanvalidation.MethodValidationPostProcessor
import org.springframework.web.servlet.config.annotation.CorsRegistry
import org.springframework.web.servlet.config.annotation.InterceptorRegistry
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter


@Configuration
@EnableCaching
@SpringBootApplication
class ApiApplication : WebMvcConfigurerAdapter() {

    override fun addInterceptors(registry: InterceptorRegistry?) {
        registry!!.addInterceptor(exposeResponseInterceptor())
    }

    override fun addCorsMappings(registry: CorsRegistry?) {
        registry!!.addMapping("/api/**")
                .allowedOrigins("*")
                .allowedMethods("*")
                .allowedHeaders("*")
                .allowCredentials(false)
                .maxAge(3600)
        super.addCorsMappings(registry)
    }

    @Bean
    fun exposeResponseInterceptor() = ExposeResponseInterceptor()

    @Bean
    fun methodValidationPostProcessor(): MethodValidationPostProcessor {
        val mv = MethodValidationPostProcessor()
        mv.setValidator(validator())
        return mv
    }

    @Bean
    fun validator() = LocalValidatorFactoryBean()
}

fun main(args: Array<String>) {
    SpringApplication.run(ApiApplication::class.java, *args)
}




--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/ProfileClient.kt
package io.realworld.client

import feign.Headers
import feign.Param
import feign.RequestLine
import io.realworld.client.response.OutProfile

@Headers("Content-Type: application/json",
        "Authorization: Token {token}")
interface ProfileClient {
    @RequestLine("GET /api/profiles/{username}")
    fun profile(@Param("token") token: String, @Param("username") username: String): OutProfile

    @RequestLine("POST /api/profiles/{username}/follow")
    fun follow(@Param("token") token: String, @Param("username") username: String): OutProfile

    @RequestLine("DELETE /api/profiles/{username}/follow")
    fun unfollow(@Param("token") token: String, @Param("username") username: String): OutProfile
}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/TagClient.kt
package io.realworld.client

import feign.Headers
import feign.RequestLine
import io.realworld.client.response.OutTag

interface TagClient {
    @RequestLine("GET /api/tags")
    @Headers("Content-Type: application/json")
    fun tags(): OutTag
}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/UserClient.kt
package io.realworld.client

import feign.Headers
import feign.RequestLine
import io.realworld.client.response.InLogin
import io.realworld.client.response.InRegister
import io.realworld.client.response.OutUser

@Headers("Content-Type: application/json")
interface UserClient {
    @RequestLine("POST /api/users/login")
    fun login(login: InLogin): OutUser

    @RequestLine("POST /api/users")
    fun register(register: InRegister): OutUser
}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/InLogin.kt
package io.realworld.client.response

import io.realworld.model.inout.Login

data class InLogin(val user: Login)

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/InRegister.kt
package io.realworld.client.response

import io.realworld.model.inout.Register

data class InRegister(val user: Register)

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/OutProfile.kt
package io.realworld.client.response

import io.realworld.model.inout.Profile

data class OutProfile(var profile: Profile? = null)

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/OutTag.kt
package io.realworld.client.response

data class OutTag(var tags: List<String> = listOf())

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/client/response/OutUser.kt
package io.realworld.client.response

import io.realworld.model.User

data class OutUser(var user: User = User())

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/ForbiddenRequestException.kt
package io.realworld.exception

import org.springframework.http.HttpStatus
import org.springframework.web.bind.annotation.ResponseStatus

@ResponseStatus(HttpStatus.FORBIDDEN)
class ForbiddenRequestException : RuntimeException()
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/InvalidException.kt
package io.realworld.exception

import org.springframework.validation.Errors

data class InvalidException(val errors: Errors?) : RuntimeException()

object InvalidRequest {
    fun check(errors: Errors) {
        if (errors.hasFieldErrors())
            throw InvalidException(errors)
    }
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/InvalidLoginException.kt
package io.realworld.exception

class InvalidLoginException(val field: String, val error: String) : RuntimeException()

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/NotFoundException.kt
package io.realworld.exception

import org.springframework.http.HttpStatus
import org.springframework.web.bind.annotation.ResponseStatus

@ResponseStatus(HttpStatus.NOT_FOUND)
class NotFoundException : RuntimeException()
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/UnauthorizedException.kt
package io.realworld.exception

import org.springframework.http.HttpStatus
import org.springframework.web.bind.annotation.ResponseStatus

@ResponseStatus(HttpStatus.UNAUTHORIZED)
class UnauthorizedException : RuntimeException()
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/exception/UserExistException.kt
package io.realworld.exception

/**
 * Created by alex on 30/04/2017.
 */
class UserExistException : RuntimeException()
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/jwt/ApiKeySecured.kt
package io.realworld.jwt

import java.lang.annotation.Inherited

@MustBeDocumented
@Inherited
@Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER)
@Retention(AnnotationRetention.RUNTIME)
annotation class ApiKeySecured(val mandatory: Boolean = true)

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/jwt/ApiKeySecuredAspect.kt
package io.realworld.jwt

import io.realworld.model.User
import io.realworld.service.UserService
import org.aspectj.lang.ProceedingJoinPoint
import org.aspectj.lang.annotation.Around
import org.aspectj.lang.annotation.Aspect
import org.aspectj.lang.annotation.Pointcut
import org.aspectj.lang.reflect.MethodSignature
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component
import org.springframework.util.StringUtils
import org.springframework.web.bind.annotation.ResponseStatus
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

/**
 * Aspect whose goal is to check automatically that methods
 * having a @ApiKeySecured annotation are correctly accessed
 * by users having a valid API Key (JWT).

 * A check against the user service is done to find the user
 * having the api key passed as request header/parameter.

 * If the API Key is valid the annotated method is executed,
 * otherwise the response is set with an UNAUTHORIZED status and the annotated
 * method is not executed.
 */
@Aspect
@Component
class ApiKeySecuredAspect(@Autowired val userService: UserService) {

    @Autowired
    lateinit var request: HttpServletRequest

    @Pointcut(value = "execution(@io.realworld.jwt.ApiKeySecured * *.*(..))")
    fun securedApiPointcut() {
    }

    @Around("securedApiPointcut()")
    @Throws(Throwable::class)
    fun aroundSecuredApiPointcut(joinPoint: ProceedingJoinPoint): Any? {
        if (request.method == "OPTIONS")
            return joinPoint.proceed()

        // see the ExposeResponseInterceptor class.
        val response = request.getAttribute(ExposeResponseInterceptor.KEY) as HttpServletResponse

        // check for needed roles
        val signature = joinPoint.signature as MethodSignature
        val method = signature.method
        val anno = method.getAnnotation(ApiKeySecured::class.java)

        val apiKey = request.getHeader("Authorization")?.replace("Token ", "")

        if (!StringUtils.hasText(apiKey) && anno.mandatory) {
            LOG.info("No Authorization part of the request header/parameters, returning {}.", HttpServletResponse.SC_UNAUTHORIZED)

            issueError(response)
            return null
        }

        // find the user associated to the given api key.
        var user = userService.findByToken(apiKey ?: "")
        LOG.info("user by token: ${user?.email}")
        if (user == null && anno.mandatory) {
            LOG.info("No user with Authorization: {}, returning {}.", apiKey, HttpServletResponse.SC_UNAUTHORIZED)

            issueError(response)
            return null
        } else {
            // validate JWT
            try {
                LOG.info("Validating JWT")
                if (!userService.validToken(apiKey ?: "", user ?: User())) {
                    LOG.info("JWT invalid")
                    if (!anno.mandatory && user == null) {
                        LOG.info("No problem because not mandatory")
                        user = User()
                    } else { // error
                        LOG.info("Authorization: {} is an invalid JWT.", apiKey, HttpServletResponse.SC_UNAUTHORIZED)

                        issueError(response)
                        return null
                    }
                }
            } catch (e: Exception) {
                if (anno.mandatory) {
                    issueError(response)
                    return null
                } else
                    user = User()
            }
        }

        LOG.info("User is: ${user?.email}")
        userService.setCurrentUser(user ?: User())

        LOG.info("OK accessing resource, proceeding.")

        // execute
        try {
            val result = joinPoint.proceed()
            // remove user from thread local
            userService.clearCurrentUser()

            LOG.info("DONE accessing resource.")

            return result
        } catch (e: Throwable) {
            // check for custom exception
            val rs = e.javaClass.getAnnotation(ResponseStatus::class.java)
            if (rs != null) {
                LOG.error("ERROR accessing resource, reason: '{}', status: {}.",
                        if (!StringUtils.hasText(e.message)) rs.reason else e.message,
                        rs.value)
            } else {
                LOG.error("ERROR accessing resource")
            }
            throw e
        }

    }

    private fun issueError(response: HttpServletResponse) {
        setStatus(response, HttpServletResponse.SC_UNAUTHORIZED)
        response.setHeader("Authorization", "You shall not pass without providing a valid API Key")
        response.writer.write("{\"errors\": {\"Authorization\": [\"You must provide a valid Authorization header.\"]}}")
        response.writer.flush()
    }

    fun setStatus(response: HttpServletResponse?, sc: Int) {
        if (response != null)
            response.status = sc
    }

    companion object {
        private val LOG = LoggerFactory.getLogger(ApiKeySecuredAspect::class.java)
    }
}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/jwt/ExposeResponseInterceptor.kt
package io.realworld.jwt

import org.springframework.web.servlet.handler.HandlerInterceptorAdapter

import javax.servlet.ServletException
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

/**
 * This is an interceptor that saves a reference from the response into the request.
 * Spring can autowire HttpServletRequest but not HttpServletResponses.

 * We've got 3 solutions there:
 * 1) We inject HttpServletResponse as a parameter of every @Controller methods.
 * 2) We create a scoped-proxy factory bean that instantiate a filter which holds a threadlocal containing the response.
 * 3) We create an interceptor and save a reference to the response, inside the request which can be autowired by spring.

 * This is the solution number 3. It's kind of hacky, but it's being accessed only from the ApiKeySecuredAspect class.

 * Trust me, I'm an engineer.
 */
class ExposeResponseInterceptor : HandlerInterceptorAdapter() {
    @Throws(ServletException::class)
    override fun preHandle(request: HttpServletRequest?, response: HttpServletResponse?, handler: Any?): Boolean {
        request!!.setAttribute(KEY, response)
        return true
    }

    companion object {
        const val KEY = "spring.internal.httpServletResponse"
    }
}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/Article.kt
package io.realworld.model

import java.time.OffsetDateTime
import javax.persistence.*

@Entity
data class Article(var slug: String = "",
                   var title: String = "",
                   var description: String = "",
                   var body: String = "",
                   @ManyToMany
                   val tagList: MutableList<Tag> = mutableListOf(),
                   var createdAt: OffsetDateTime = OffsetDateTime.now(),
                   var updatedAt: OffsetDateTime = OffsetDateTime.now(),
                   @ManyToMany
                   var favorited: MutableList<User> = mutableListOf(),
                   @ManyToOne
                   var author: User = User(),
                   @Id @GeneratedValue(strategy = GenerationType.AUTO)
                   var id: Long = 0) {
    fun favoritesCount() = favorited.size
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/Comment.kt
package io.realworld.model

import java.time.OffsetDateTime
import javax.persistence.*

@Entity
data class Comment(var createdAt: OffsetDateTime = OffsetDateTime.now(),
                   var updatedAt: OffsetDateTime = OffsetDateTime.now(),
                   var body: String = "",
                   @ManyToOne
                   var article: Article = Article(),
                   @ManyToOne
                   var author: User = User(),
                   @Id @GeneratedValue(strategy = GenerationType.AUTO)
                   var id: Long = 0)
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/Tag.kt
package io.realworld.model

import com.fasterxml.jackson.annotation.JsonIgnore
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id

@Entity
data class Tag(val name: String = "",
               @Id @GeneratedValue(strategy = GenerationType.AUTO)
               @JsonIgnore
               var id: Long = 0)
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/User.kt
package io.realworld.model

import com.fasterxml.jackson.annotation.JsonIgnore
import com.fasterxml.jackson.annotation.JsonRootName
import javax.persistence.*

@Entity
@JsonRootName("user")
data class User(var email: String = "",
                @JsonIgnore
                var password: String = "",
                var token: String = "",
                var username: String = "",
                var bio: String = "",
                var image: String = "",
                @ManyToMany
                @JsonIgnore
                var follows: MutableList<User> = mutableListOf(),
                @Id @GeneratedValue(strategy = GenerationType.AUTO)
                var id: Long = 0) {
    override fun toString(): String = "User($email, $username)"
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Article.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import io.realworld.model.User
import java.time.OffsetDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

@JsonRootName("article")
data class Article(var title: String? = null,
                   var description: String? = null,
                   var body: String? = null,
                   var tagList: List<String> = listOf(),
                   var slug: String = "",
                   var createdAt: String = "",
                   var updatedAt: String = "",
                   var author: Profile = Profile(username = "", bio = "", image = "", following = false),
                   var favorited: Boolean = false,
                   var favoritesCount: Int = 0) {
    companion object {
        private fun dateFormat(date: OffsetDateTime): String {
            return date.toZonedDateTime().withZoneSameInstant(ZoneId.of("Z")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        }

        fun fromModel(model: io.realworld.model.Article, currentUser: User): Article {
            return Article(
                    slug = model.slug,
                    title = model.title,
                    description = model.description,
                    body = model.body,
                    tagList = model.tagList.map { it.name },
                    createdAt = dateFormat(model.createdAt),
                    updatedAt = dateFormat(model.updatedAt),
                    author = Profile.fromUser(model.author, currentUser),
                    favorited = model.favorited.contains(currentUser),
                    favoritesCount = model.favorited.size)
        }
    }
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Comment.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import io.realworld.model.User
import java.time.OffsetDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

@JsonRootName("comment")
data class Comment(val createdAt: String,
                   val updatedAt: String,
                   val body: String,
                   val author: Profile,
                   val id: Long) {
    companion object {
        private fun dateFormat(date: OffsetDateTime): String {
            return date.toZonedDateTime().withZoneSameInstant(ZoneId.of("Z")).format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        }

        fun fromModel(model: io.realworld.model.Comment, currentUser: User): Comment {
            return Comment(
                    id = model.id,
                    body = model.body,
                    createdAt = dateFormat(model.createdAt),
                    updatedAt = dateFormat(model.updatedAt),
                    author = Profile.fromUser(model.author, currentUser)
            )
        }
    }
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Login.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

@JsonRootName("user")
class Login(
    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty")
    @Pattern(
        regexp = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
        message = "must be a valid email"
    ) var email: String?, @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty") var password: String?
) {

}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/NewArticle.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

@JsonRootName("article")
class NewArticle {
    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty")
    var title: String? = ""

    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty")
    var description: String? = ""

    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty")
    var body: String? = ""

    var tagList: List<String> = listOf()
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/NewComment.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

@JsonRootName("comment")
class NewComment {
    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty")
    var body: String? = ""
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Profile.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import io.realworld.model.User

@JsonRootName("profile")
data class Profile(var username: String,
                   var bio: String,
                   var image: String?,
                   var following: Boolean) {
    companion object {
        fun fromUser(user: User, currentUser: User): Profile {
            return Profile(username = user.username, bio = user.bio, image = user.image,
                    following = currentUser.follows.contains(user))
        }
    }
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/Register.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

@JsonRootName("user")
class Register(
    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty")
    @Pattern(regexp = "^\\w+$", message = "must be alphanumeric") var username: String?,
    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty")
    @Pattern(
        regexp = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
        message = "must be a valid email"
    ) var email: String?,
    @NotNull(message = "can't be missing")
    @Size(min = 1, message = "can't be empty") var password: String?
) {

}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/UpdateArticle.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName

@JsonRootName("article")
data class UpdateArticle(var title: String? = null,
                         var description: String? = null,
                         var body: String? = null,
                         var tagList: List<String>? = null)
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/model/inout/UpdateUser.kt
package io.realworld.model.inout

import com.fasterxml.jackson.annotation.JsonRootName
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

@JsonRootName("user")
class UpdateUser {
    @Size(min = 1, message = "can't be empty")
    @Pattern(regexp="^\\w+$", message = "must be alphanumeric")
    var username: String? = null

    @Size(min = 1, message = "can't be empty")
    @Pattern(regexp="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$", message="must be a valid email")
    var email: String? = null

    var password: String? = null
    var image: String? = ""
    var bio: String? = ""
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/ArticleRepository.kt
package io.realworld.repository

import io.realworld.model.Article
import org.springframework.data.domain.Pageable
import org.springframework.data.jpa.repository.JpaSpecificationExecutor
import org.springframework.data.repository.PagingAndSortingRepository
import org.springframework.stereotype.Repository

@Repository
interface ArticleRepository : PagingAndSortingRepository<Article, Long>, JpaSpecificationExecutor<Article> {
    fun existsBySlug(slug: String): Boolean
    fun findBySlug(slug: String): Article?
    fun findByAuthorIdInOrderByCreatedAtDesc(ids: List<Long>, pageable: Pageable): List<Article>
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/CommentRepository.kt
package io.realworld.repository

import io.realworld.model.Article
import io.realworld.model.Comment
import org.springframework.data.repository.CrudRepository
import org.springframework.stereotype.Repository

@Repository
interface CommentRepository : CrudRepository<Comment, Long> {
    fun findByArticle(article: Article): List<Comment>
    fun findByArticleOrderByCreatedAtDesc(article: Article): List<Comment>
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/TagRepository.kt
package io.realworld.repository

import io.realworld.model.Tag
import org.springframework.data.repository.CrudRepository
import org.springframework.stereotype.Repository

@Repository
interface TagRepository : CrudRepository<Tag, Long> {
    fun findByName(name: String): Tag?
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/UserRepository.kt
package io.realworld.repository

import io.realworld.model.User
import org.springframework.data.repository.CrudRepository
import org.springframework.stereotype.Repository

@Repository
interface UserRepository : CrudRepository<User, Long> {
    fun existsByEmail(email: String): Boolean
    fun existsByUsername(username: String): Boolean
    fun findByEmail(email: String): User?
    fun findByToken(token: String): User?
    fun findByEmailAndPassword(email: String, password: String): User?
    fun findByUsername(username: String): User?
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/repository/specification/ArticlesSpecifications.kt
package io.realworld.repository.specification

import io.realworld.model.Article
import io.realworld.model.Tag
import io.realworld.model.User
import org.springframework.data.jpa.domain.Specification
import javax.persistence.criteria.Predicate

object ArticlesSpecifications {
    fun lastArticles(tag: Tag?, author: User?, fav: User?): Specification<Article> {
        return Specification { root, _, cb ->
            val predicates = mutableListOf<Predicate>()

            tag?.let {
                val tagList = root.get<Collection<Tag>>("tagList")
                predicates.add(cb.isMember(tag, tagList))
            }

            author?.let {
                val user = root.get<String>("author")
                predicates.add(cb.equal(user, author))
            }

            fav?.let {
                val favorited = root.get<Collection<User>>("favorited")
                predicates.add(cb.isMember(fav, favorited))
            }

            cb.and(*predicates.toTypedArray())
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/service/UserService.kt
package io.realworld.service

import io.jsonwebtoken.Jwts
import io.jsonwebtoken.SignatureAlgorithm
import io.realworld.exception.InvalidLoginException
import io.realworld.model.User
import io.realworld.model.inout.Login
import io.realworld.repository.UserRepository
import org.mindrot.jbcrypt.BCrypt
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import java.util.*

@Service
class UserService(val userRepository: UserRepository,
                  @Value("\${jwt.secret}") val jwtSecret: String,
                  @Value("\${jwt.issuer}") val jwtIssuer: String) {

    val currentUser = ThreadLocal<User>()

    //@Cacheable(cacheNames=arrayOf("usersByToken"), key="#token")
    fun findByToken(token: String) = userRepository.findByToken(token)

    //@Cacheable("usersByName")
    fun findByUsername(username: String) = userRepository.findByUsername(username)

    fun clearCurrentUser() = currentUser.remove()

    fun setCurrentUser(user: User): User {
        currentUser.set(user)
        return user
    }

    fun currentUser(): User = currentUser.get()

    fun newToken(user: User): String {
        return Jwts.builder()
                .setIssuedAt(Date())
                .setSubject(user.email)
                .setIssuer(jwtIssuer)
                .setExpiration(Date(System.currentTimeMillis() + 10 * 24 * 60 * 60 * 1000)) // 10 days
                .signWith(SignatureAlgorithm.HS256, jwtSecret).compact()
    }

    fun validToken(token: String, user: User): Boolean {
        val claims = Jwts.parser().setSigningKey(jwtSecret)
                .parseClaimsJws(token).body
        return claims.subject == user.email && claims.issuer == jwtIssuer
                && Date().before(claims.expiration)
    }

    //@CachePut(cacheNames=arrayOf("usersByToken"), key="#user.token")
    fun updateToken(user: User): User {
        user.token = newToken(user)
        return userRepository.save(user)
    }

    fun login(login: Login): User? {
        userRepository.findByEmail(login.email!!)?.let {
            if (BCrypt.checkpw(login.password!!, it.password)) {
                return updateToken(it)
            }
            throw InvalidLoginException("password", "invalid password")
        }
        throw InvalidLoginException("email", "unknown email")
    }

}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/ArticleHandler.kt
package io.realworld.web

import com.github.slugify.Slugify
import io.realworld.exception.ForbiddenRequestException
import io.realworld.exception.InvalidRequest
import io.realworld.exception.NotFoundException
import io.realworld.jwt.ApiKeySecured
import io.realworld.model.Article
import io.realworld.model.Comment
import io.realworld.model.Tag
import io.realworld.model.User
import io.realworld.model.inout.NewArticle
import io.realworld.model.inout.NewComment
import io.realworld.model.inout.UpdateArticle
import io.realworld.repository.ArticleRepository
import io.realworld.repository.CommentRepository
import io.realworld.repository.TagRepository
import io.realworld.repository.UserRepository
import io.realworld.repository.specification.ArticlesSpecifications
import io.realworld.service.UserService
import org.springframework.data.domain.PageRequest
import org.springframework.data.domain.Sort
import org.springframework.http.HttpStatus
import org.springframework.validation.Errors
import org.springframework.validation.FieldError
import org.springframework.web.bind.annotation.*
import java.time.OffsetDateTime
import java.util.*
import javax.validation.Valid
import io.realworld.model.inout.Article as ArticleIO
import io.realworld.model.inout.Comment as CommentOut

@RestController
class ArticleHandler(val repository: ArticleRepository,
                     val userService: UserService,
                     val userRepository: UserRepository,
                     val commentRepository: CommentRepository,
                     val tagRepository: TagRepository) {

    @ApiKeySecured(mandatory = false)
    @GetMapping("/api/articles")
    fun articles(@RequestParam(defaultValue = "20") limit: Int,
                 @RequestParam(defaultValue = "0") offset: Int,
                 @RequestParam(defaultValue = "") tag: String,
                 @RequestParam(defaultValue = "") author: String,
                 @RequestParam(defaultValue = "") favorited: String): Any {
        val p = PageRequest.of(offset, limit, Sort.Direction.DESC, "createdAt")

        val articles = repository.findAll(ArticlesSpecifications.lastArticles(
                if (tag != "") tagRepository.findByName(tag) else null,
                if (author != "") userRepository.findByUsername(author) else null,
                if (favorited != "") userRepository.findByUsername(favorited) else null
        ), p).toList()

        return articlesView(articles, userService.currentUser())
    }

    @ApiKeySecured
    @GetMapping("/api/articles/feed")
    fun feed(@RequestParam(defaultValue = "20") limit: Int,
             @RequestParam(defaultValue = "0") offset: Int): Any {
        val currentUser = userService.currentUser()
        val articles = repository.findByAuthorIdInOrderByCreatedAtDesc(currentUser.follows.map { it.id },
                PageRequest.of(offset, limit))
        return articlesView(articles, currentUser)
    }

    @ApiKeySecured(mandatory = false)
    @GetMapping("/api/articles/{slug}")
    fun article(@PathVariable slug: String): Any {
        repository.findBySlug(slug)?.let {
            return articleView(it, userService.currentUser())
        }
        throw NotFoundException()
    }

    @ApiKeySecured
    @PostMapping("/api/articles")
    fun newArticle(@Valid @RequestBody newArticle: NewArticle, errors: Errors): Any {
        InvalidRequest.check(errors)

        var slug = Slugify().slugify(newArticle.title!!)

        if (repository.existsBySlug(slug)) {
            slug += "-" + UUID.randomUUID().toString().substring(0, 8)
        }

        val currentUser = userService.currentUser()

        // search for tags
        val tagList = newArticle.tagList.map {
            tagRepository.findByName(it) ?: tagRepository.save(Tag(name = it))
        }

        val article = Article(slug = slug,
                author = currentUser, title = newArticle.title!!, description = newArticle.description!!,
                body = newArticle.body!!, tagList = tagList.toMutableList())

        return articleView(repository.save(article), currentUser)
    }

    @ApiKeySecured
    @PutMapping("/api/articles/{slug}")
    fun updateArticle(@PathVariable slug: String, @RequestBody article: UpdateArticle): Any {
        repository.findBySlug(slug)?.let { it ->
            val currentUser = userService.currentUser()
            if (it.author.id != currentUser.id)
                throw ForbiddenRequestException()

            // check for errors
            val errors = org.springframework.validation.BindException(this, "")
            if (article.title == "")
                errors.addError(FieldError("", "title", "can't be empty"))
            if (article.description == "")
                errors.addError(FieldError("", "description", "can't be empty"))
            if (article.body == "")
                errors.addError(FieldError("", "body", "can't be empty"))
            InvalidRequest.check(errors)

            var articleSlug: String = it.slug
            article.title?.let { newTitle ->
                if (newTitle != it.title) {
                    // we don't want conflicting slugs
                    articleSlug = Slugify().slugify(article.title!!)
                    if (repository.existsBySlug(articleSlug)) {
                        articleSlug += "-" + UUID.randomUUID().toString().substring(0, 8)
                    }
                }
            }

            // search for tags
            val tagList = article.tagList?.map {
                tagRepository.findByName(it) ?: tagRepository.save(Tag(name = it))
            }

            val updated = it.copy(title = article.title ?: it.title,
                    description = article.description ?: it.description,
                    body = article.body ?: it.body,
                    slug = articleSlug,
                    updatedAt = OffsetDateTime.now(),
                    tagList = if (tagList == null || tagList.isEmpty()) it.tagList
                    else tagList.toMutableList())

            return articleView(repository.save(updated), currentUser)
        }

        throw NotFoundException()
    }

    @ApiKeySecured
    @ResponseStatus(HttpStatus.OK)
    @DeleteMapping("/api/articles/{slug}")
    fun deleteArticle(@PathVariable slug: String) {
        repository.findBySlug(slug)?.let {
            if (it.author.id != userService.currentUser().id)
                throw ForbiddenRequestException()

            commentRepository.deleteAll(commentRepository.findByArticle(it))
            return repository.delete(it)
        }
        throw NotFoundException()
    }

    @ApiKeySecured(mandatory = false)
    @GetMapping("/api/articles/{slug}/comments")
    fun articleComments(@PathVariable slug: String): Any {
        repository.findBySlug(slug)?.let {
            val currentUser = userService.currentUser()
            return commentsView(commentRepository.findByArticleOrderByCreatedAtDesc(it), currentUser)
        }
        throw NotFoundException()
    }

    @ApiKeySecured
    @PostMapping("/api/articles/{slug}/comments")
    fun addComment(@PathVariable slug: String, @Valid @RequestBody comment: NewComment, errors: Errors): Any {
        InvalidRequest.check(errors)

        repository.findBySlug(slug)?.let {
            val currentUser = userService.currentUser()
            val newComment = Comment(body = comment.body!!, article = it, author = currentUser)
            return commentView(commentRepository.save(newComment), currentUser)
        }
        throw NotFoundException()
    }

    @ApiKeySecured
    @ResponseStatus(HttpStatus.OK)
    @DeleteMapping("/api/articles/{slug}/comments/{id}")
    fun deleteComment(@PathVariable slug: String, @PathVariable id: Long) {
        repository.findBySlug(slug)?.let {
            val currentUser = userService.currentUser()
            val comment = commentRepository.findById(id).orElseThrow { NotFoundException() }
            if (comment.article.id != it.id)
                throw ForbiddenRequestException()
            if (comment.author.id != currentUser.id)
                throw ForbiddenRequestException()

            return commentRepository.delete(comment)
        }
        throw NotFoundException()
    }

    @ApiKeySecured
    @PostMapping("/api/articles/{slug}/favorite")
    fun favoriteArticle(@PathVariable slug: String): Any {
        repository.findBySlug(slug)?.let {
            val currentUser = userService.currentUser()
            if (!it.favorited.contains(currentUser)) {
                it.favorited.add(currentUser)
                return articleView(repository.save(it), currentUser)
            }
            return articleView(it, currentUser)
        }
        throw NotFoundException()
    }

    @ApiKeySecured
    @DeleteMapping("/api/articles/{slug}/favorite")
    fun unfavoriteArticle(@PathVariable slug: String): Any {
        repository.findBySlug(slug)?.let {
            val currentUser = userService.currentUser()
            if (it.favorited.contains(currentUser)) {
                it.favorited.remove(currentUser)
                return articleView(repository.save(it), currentUser)
            }
            return articleView(it, currentUser)
        }
        throw NotFoundException()
    }

    // helpers

    fun articleView(article: Article, currentUser: User)
            = mapOf("article" to ArticleIO.fromModel(article, currentUser))

    fun articlesView(articles: List<Article>, currentUser: User)
            = mapOf("articles" to articles.map { ArticleIO.fromModel(it, userService.currentUser()) },
            "articlesCount" to articles.size)

    fun commentView(comment: Comment, currentUser: User)
            = mapOf("comment" to CommentOut.fromModel(comment, currentUser))

    fun commentsView(comments: List<Comment>, currentUser: User)
            = mapOf("comments" to comments.map { CommentOut.fromModel(it, currentUser) })
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/InvalidRequestHandler.kt
package io.realworld.web

import io.realworld.exception.InvalidException
import org.springframework.http.HttpStatus
import org.springframework.stereotype.Component
import org.springframework.web.bind.annotation.ExceptionHandler
import org.springframework.web.bind.annotation.ResponseBody
import org.springframework.web.bind.annotation.ResponseStatus
import org.springframework.web.bind.annotation.RestControllerAdvice

/**
 * Generates an error with the following format:
 *
<pre>
{
"errors":{
"body": [
"can't be empty"
]
}
}
</pre>
 */
@Component
@RestControllerAdvice
class InvalidRequestHandler {
    @ResponseBody
    @ExceptionHandler
    @ResponseStatus(HttpStatus.UNPROCESSABLE_ENTITY)
    fun processValidationError(ex: InvalidException): Any {
        val errors = mutableMapOf<String, MutableList<String>>()
        ex.errors?.fieldErrors?.forEach {
            if (errors.containsKey(it.field))
                errors[it.field]!!.add(it.defaultMessage)
            else
                errors[it.field] = mutableListOf(it.defaultMessage)
        }
        return mapOf("errors" to errors)
    }
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/ProfileHandler.kt
package io.realworld.web

import io.realworld.exception.NotFoundException
import io.realworld.jwt.ApiKeySecured
import io.realworld.model.User
import io.realworld.model.inout.Profile
import io.realworld.repository.UserRepository
import io.realworld.service.UserService
import org.springframework.web.bind.annotation.*

@RestController
class ProfileHandler(val userRepository: UserRepository,
                     val userService: UserService) {

    @ApiKeySecured(mandatory = false)
    @GetMapping("/api/profiles/{username}")
    fun profile(@PathVariable username: String): Any {
        userRepository.findByUsername(username)?.let {
            return view(it, userService.currentUser())
        }
        throw NotFoundException()
    }

    @ApiKeySecured
    @PostMapping("/api/profiles/{username}/follow")
    fun follow(@PathVariable username: String): Any {
        userRepository.findByUsername(username)?.let {
            var currentUser = userService.currentUser()
            if (!currentUser.follows.contains(it)) {
                currentUser.follows.add(it)
                currentUser = userService.setCurrentUser(userRepository.save(currentUser))
            }
            return view(it, currentUser)
        }
        throw NotFoundException()
    }

    @ApiKeySecured
    @DeleteMapping("/api/profiles/{username}/follow")
    fun unfollow(@PathVariable username: String): Any {
        userRepository.findByUsername(username)?.let {
            var currentUser = userService.currentUser()
            if (currentUser.follows.contains(it)) {
                currentUser.follows.remove(it)
                currentUser = userService.setCurrentUser(userRepository.save(currentUser))
            }
            return view(it, currentUser)
        }
        throw NotFoundException()
    }

    fun view(user: User, currentUser: User) = mapOf("profile" to Profile.fromUser(user, currentUser))

}

--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/TagHandler.kt
package io.realworld.web

import io.realworld.model.Tag
import io.realworld.repository.TagRepository
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RestController

@RestController
class TagHandler(val repository: TagRepository) {
    @GetMapping("/api/tags")
    fun allTags() = mapOf("tags" to repository.findAll().map(Tag::name))
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/kotlin/io/realworld/web/UserHandler.kt
package io.realworld.web

import io.realworld.exception.*
import io.realworld.jwt.ApiKeySecured
import io.realworld.model.User
import io.realworld.model.inout.Login
import io.realworld.model.inout.Register
import io.realworld.model.inout.UpdateUser
import io.realworld.repository.UserRepository
import io.realworld.service.UserService
import org.mindrot.jbcrypt.BCrypt
import org.springframework.validation.BindException
import org.springframework.validation.Errors
import org.springframework.validation.FieldError
import org.springframework.web.bind.annotation.*
import javax.validation.Valid

@RestController
class UserHandler(val repository: UserRepository,
                  val service: UserService) {

    @PostMapping("/api/users/login")
    fun login(@Valid @RequestBody login: Login, errors: Errors): Any {
        InvalidRequest.check(errors)

        try {
            service.login(login)?.let {
                return view(service.updateToken(it))
            }
            return ForbiddenRequestException()
        } catch (e: InvalidLoginException) {
            val loginErrors = BindException(this, "")
            loginErrors.addError(FieldError("", e.field, e.error))
            throw InvalidException(loginErrors)
        }
    }

    @PostMapping("/api/users")
    fun register(@Valid @RequestBody register: Register, errors: Errors): Any {
        InvalidRequest.check(errors)

        // check for duplicate user
        val registerErrors = BindException(this, "")
        checkUserAvailability(registerErrors, register.email, register.username)
        InvalidRequest.check(registerErrors)

        val user = User(username = register.username!!,
                email = register.email!!, password = BCrypt.hashpw(register.password, BCrypt.gensalt()))
        user.token = service.newToken(user)

        return view(repository.save(user))
    }

    @ApiKeySecured
    @GetMapping("/api/user")
    fun currentUser() = view(service.currentUser())

    @ApiKeySecured
    @PutMapping("/api/user")
    fun updateUser(@Valid @RequestBody user: UpdateUser, errors: Errors): Any {
        InvalidRequest.check(errors)

        val currentUser = service.currentUser()

        // check for errors
        val updateErrors = BindException(this, "")
        if (currentUser.email != user.email && user.email != null) {
            if (repository.existsByEmail(user.email!!)) {
                updateErrors.addError(FieldError("", "email", "already taken"))
            }
        }
        if (currentUser.username != user.username && user.username != null) {
            if (repository.existsByUsername(user.username!!)) {
                updateErrors.addError(FieldError("", "username", "already taken"))
            }
        }
        if (user.password == "") {
            updateErrors.addError(FieldError("", "password", "can't be empty"))
        }
        InvalidRequest.check(updateErrors)

        // update the user
        val u = currentUser.copy(email = user.email ?: currentUser.email, username = user.username ?: currentUser.username,
                password = BCrypt.hashpw(user.password, BCrypt.gensalt()), image = user.image ?: currentUser.image,
                bio = user.bio ?: currentUser.bio)
        // update token only if email changed
        if (currentUser.email != u.email) {
            u.token = service.newToken(u)
        }

        return view(repository.save(u))
    }

    private fun checkUserAvailability(errors: BindException, email: String?, username: String?) {
        email?.let {
            if (repository.existsByEmail(it)) {
                errors.addError(FieldError("", "email", "already taken"))
            }
        }
        username?.let {
            if (repository.existsByUsername(it)) {
                errors.addError(FieldError("", "username", "already taken"))
            }
        }
    }

    fun view(user: User) = mapOf("user" to user)
}
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/main/resources/application.properties
spring.datasource.url=jdbc:h2:mem:AZ;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jackson.deserialization.UNWRAP_ROOT_VALUE=true

jwt.secret=Em3u7dCZ2QSvSGSGSRFUTfrwgu3WjfU2rHZxSjNSqU5x89C3jXPL6WLMW7dTE6rd9NRgWAwUWHkj8ZLfbCNU8uVfv9kuBmWCYPkk776A5jQ2LeJ76bZbdhXN
jwt.issuer=Kotlin&Spring

#logging.level.org.springframework.web=DEBUG
--#

--% E:/desktop-laptop/_rwe/kotlin-spring-realworld-example-app/src/test/kotlin/io/realworld/ApiApplicationTests.kt
package io.realworld

import feign.Feign
import feign.gson.GsonDecoder
import feign.gson.GsonEncoder
import io.realworld.client.ProfileClient
import io.realworld.client.TagClient
import io.realworld.client.UserClient
import io.realworld.client.response.InLogin
import io.realworld.client.response.InRegister
import io.realworld.model.inout.Login
import io.realworld.model.inout.Register
import org.hamcrest.Matchers
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.core.env.Environment
import org.springframework.test.context.junit4.SpringRunner


@RunWith(SpringRunner::class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class ApiApplicationTests {

    var randomServerPort: Int = 0
    @Autowired
    var environment: Environment? = null
    var tagClient: TagClient? = null
    var userClient: UserClient? = null
    var profileClient: ProfileClient? = null

    fun <T> buildClient(t: Class<T>): T {
        environment.let {
            randomServerPort = Integer.valueOf(it!!.getProperty("local.server.port"))
            return Feign.builder()
                    .encoder(GsonEncoder()).decoder(GsonDecoder())
                    .target(t, "http://localhost:${randomServerPort}")
        }
    }

    @Before
    fun before() {
        tagClient = buildClient(TagClient::class.java)
        userClient = buildClient(UserClient::class.java)
        profileClient = buildClient(ProfileClient::class.java)
    }

    @Test
    fun retrieveTags() {
        println("> tags: " + tagClient?.tags()?.tags)
    }

    @Test
    fun userAndProfileTest() {
        val fooRegister = userClient?.register(
                InRegister(Register(username = "foo", email = "foo@foo.com", password = "foo")))
        Assert.assertEquals("foo", fooRegister?.user?.username)
        Assert.assertEquals("foo@foo.com", fooRegister?.user?.email)
        Assert.assertThat(fooRegister?.user?.token, Matchers.notNullValue())
        println("Register foo OK")

        val fooLogin = userClient?.login(InLogin(Login(email = "foo@foo.com", password = "foo")))
        Assert.assertEquals("foo", fooLogin?.user?.username)
        Assert.assertEquals("foo@foo.com", fooLogin?.user?.email)
        Assert.assertThat(fooLogin?.user?.token, Matchers.notNullValue())
        println("Login foo OK")

        val barRegister = userClient?.register(
                InRegister(Register(username = "bar", email = "bar@bar.com", password = "bar")))
        Assert.assertEquals("bar", barRegister?.user?.username)
        Assert.assertEquals("bar@bar.com", barRegister?.user?.email)
        Assert.assertThat(barRegister?.user?.token, Matchers.notNullValue())
        println("Register bar OK")

        val barLogin = userClient?.login(InLogin(Login(email = "bar@bar.com", password = "bar")))
        Assert.assertEquals("bar", barLogin?.user?.username)
        Assert.assertEquals("bar@bar.com", barLogin?.user?.email)
        Assert.assertThat(barLogin?.user?.token, Matchers.notNullValue())
        println("Login bar OK")

        var profile = profileClient?.profile(barLogin?.user?.token!!, "foo")?.profile
        Assert.assertEquals("foo", profile?.username)
        Assert.assertFalse(profile?.following!!)
        println("Profile foo requested by bar OK")

        profile = profileClient?.follow(barLogin?.user?.token!!, "foo")?.profile
        Assert.assertEquals("foo", profile?.username)
        Assert.assertTrue(profile?.following!!)
        println("Foo is followed by bar OK")

        profile = profileClient?.unfollow(barLogin?.user?.token!!, "foo")?.profile
        Assert.assertEquals("foo", profile?.username)
        Assert.assertFalse(profile?.following!!)
        println("Foo is unfollowed by bar OK")
    }
}

--#

