--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#

--% index/fmus/under_pwd
__REPLACE_WITH_PROJECT_DIR_OR_INPUT__,d(/mk)
	%utama=__FILE__
	.gitignore,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.gitignore)
	.travis.yml,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.travis.yml)
	ci-build.sh,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/ci-build.sh)
	HELP.md,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/HELP.md)
	mvnw,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/mvnw)
	mvnw.cmd,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/mvnw.cmd)
	pom.xml,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/pom.xml)
	readme.md,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/readme.md)
	vertx-logo.png,f(b64=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/vertx-logo.png)
	.mvn,d(/mk)
		wrapper,d(/mk)
			maven-wrapper.jar,f(b64=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.mvn/wrapper/maven-wrapper.jar)
			maven-wrapper.properties,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.mvn/wrapper/maven-wrapper.properties)
			MavenWrapperDownloader.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.mvn/wrapper/MavenWrapperDownloader.java)
	collections,d(/mk)
		Conduit.postman_collection.json,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/collections/Conduit.postman_collection.json)
		run-api-tests.sh,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/collections/run-api-tests.sh)
	src,d(/mk)
		main,d(/mk)
			asciidoc,d(/mk)
				dataobjects.adoc,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/asciidoc/dataobjects.adoc)
			generated,d(/mk)
				com,d(/mk)
					example,d(/mk)
						realworld,d(/mk)
							infrastructure,d(/mk)
								vertx,d(/mk)
									proxy,d(/mk)
										ArticleOperationsVertxEBProxy.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ArticleOperationsVertxEBProxy.java)
										ArticleOperationsVertxProxyHandler.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ArticleOperationsVertxProxyHandler.java)
										ProfileOperationsVertxEBProxy.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ProfileOperationsVertxEBProxy.java)
										ProfileOperationsVertxProxyHandler.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ProfileOperationsVertxProxyHandler.java)
										TagsOperationsVertxEBProxy.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/TagsOperationsVertxEBProxy.java)
										TagsOperationsVertxProxyHandler.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/TagsOperationsVertxProxyHandler.java)
										UserOperationsVertxEBProxy.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/UserOperationsVertxEBProxy.java)
										UserOperationsVertxProxyHandler.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/UserOperationsVertxProxyHandler.java)
								web,d(/mk)
									model,d(/mk)
										request,d(/mk)
											LoginRequestConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/LoginRequestConverter.java)
											NewArticleRequestConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/NewArticleRequestConverter.java)
											NewCommentRequestConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/NewCommentRequestConverter.java)
											NewUserRequestConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/NewUserRequestConverter.java)
											UpdateArticleRequestConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/UpdateArticleRequestConverter.java)
											UpdateUserRequestConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/UpdateUserRequestConverter.java)
										response,d(/mk)
											ArticleResponseConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/ArticleResponseConverter.java)
											ArticlesResponseConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/ArticlesResponseConverter.java)
											CommentResponseConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/CommentResponseConverter.java)
											CommentsResponseConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/CommentsResponseConverter.java)
											ProfileResponseConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/ProfileResponseConverter.java)
											TagsResponseConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/TagsResponseConverter.java)
											UserResponseConverter.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/UserResponseConverter.java)
			java,d(/mk)
				com,d(/mk)
					example,d(/mk)
						realworld,d(/mk)
							RealworldApplication.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/RealworldApplication.java)
							application,d(/mk)
								ApplicationService.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/ApplicationService.java)
								ArticleServiceImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/ArticleServiceImpl.java)
								ProfileServiceImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/ProfileServiceImpl.java)
								TagServiceImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/TagServiceImpl.java)
								UserServiceImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/UserServiceImpl.java)
								constants,d(/mk)
									ValidationMessages.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/constants/ValidationMessages.java)
								data,d(/mk)
									ArticleData.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/ArticleData.java)
									ArticlesData.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/ArticlesData.java)
									CommentData.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/CommentData.java)
									ProfileData.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/ProfileData.java)
							domain,d(/mk)
								article,d(/mk)
									exception,d(/mk)
										ArticleAlreadyFavoritedException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/exception/ArticleAlreadyFavoritedException.java)
										ArticleAlreadyUnfavoritedException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/exception/ArticleAlreadyUnfavoritedException.java)
										ArticleNotFoundException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/exception/ArticleNotFoundException.java)
									model,d(/mk)
										Article.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/Article.java)
										ArticleRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/ArticleRepository.java)
										Comment.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/Comment.java)
										CommentRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/CommentRepository.java)
										FavoritesRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/FavoritesRepository.java)
										NewArticle.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/NewArticle.java)
										SlugProvider.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/SlugProvider.java)
										UpdateArticle.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/UpdateArticle.java)
									service,d(/mk)
										ArticleService.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/service/ArticleService.java)
								general,d(/mk)
									exception,d(/mk)
										BusinessException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/general/exception/BusinessException.java)
								profile,d(/mk)
									exception,d(/mk)
										SelfFollowException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/profile/exception/SelfFollowException.java)
									model,d(/mk)
										UsersFollowedRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/profile/model/UsersFollowedRepository.java)
									service,d(/mk)
										ProfileService.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/profile/service/ProfileService.java)
								tag,d(/mk)
									exception,d(/mk)
										TagAlreadyExistsException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/exception/TagAlreadyExistsException.java)
										TagNotFoundException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/exception/TagNotFoundException.java)
									model,d(/mk)
										ArticlesTagsRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/model/ArticlesTagsRepository.java)
										Tag.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/model/Tag.java)
										TagRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/model/TagRepository.java)
									service,d(/mk)
										TagService.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/service/TagService.java)
								user,d(/mk)
									exception,d(/mk)
										EmailAlreadyExistsException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/EmailAlreadyExistsException.java)
										InvalidLoginException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/InvalidLoginException.java)
										InvalidPasswordException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/InvalidPasswordException.java)
										UserAlreadyFollowedException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/UserAlreadyFollowedException.java)
										UsernameAlreadyExistsException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/UsernameAlreadyExistsException.java)
										UserNotFoundException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/UserNotFoundException.java)
									model,d(/mk)
										HashProvider.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/HashProvider.java)
										Login.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/Login.java)
										ModelValidator.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/ModelValidator.java)
										NewUser.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/NewUser.java)
										TokenProvider.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/TokenProvider.java)
										UpdateUser.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/UpdateUser.java)
										User.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/User.java)
										UserRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/UserRepository.java)
									service,d(/mk)
										UserService.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/service/UserService.java)
							infrastructure,d(/mk)
								configuration,d(/mk)
									RealworldApplicationConfiguration.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/configuration/RealworldApplicationConfiguration.java)
								persistence,d(/mk)
									ArticleRepositoryJDBC.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/ArticleRepositoryJDBC.java)
									ArticlesTagsRepositoryJDBC.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/ArticlesTagsRepositoryJDBC.java)
									CommentRepositoryJDBC.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/CommentRepositoryJDBC.java)
									FavoritesRepositoryJDBC.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/FavoritesRepositoryJDBC.java)
									JDBCRepository.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/JDBCRepository.java)
									TagRepositoryJDBC.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/TagRepositoryJDBC.java)
									UserRepositoryJDBC.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/UserRepositoryJDBC.java)
									UsersFollowedRepositoryJDBC.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/UsersFollowedRepositoryJDBC.java)
									statement,d(/mk)
										ArticlesTagsStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/ArticlesTagsStatements.java)
										ArticleStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/ArticleStatements.java)
										ArticlesUsersStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/ArticlesUsersStatements.java)
										CommentStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/CommentStatements.java)
										Statement.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/Statement.java)
										TagStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/TagStatements.java)
										UsersFollowedStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/UsersFollowedStatements.java)
										UserStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/UserStatements.java)
										impl,d(/mk)
											AbstractStatements.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/AbstractStatements.java)
											ArticlesTagsStatementsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/ArticlesTagsStatementsImpl.java)
											ArticleStatementsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/ArticleStatementsImpl.java)
											ArticlesUsersStatementsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/ArticlesUsersStatementsImpl.java)
											CommentStatementsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/CommentStatementsImpl.java)
											JsonArrayStatement.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/JsonArrayStatement.java)
											TagStatementsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/TagStatementsImpl.java)
											UsersFollowedStatementsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/UsersFollowedStatementsImpl.java)
											UserStatementsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/UserStatementsImpl.java)
									utils,d(/mk)
										ParserUtils.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/utils/ParserUtils.java)
								provider,d(/mk)
									BCryptProvider.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/provider/BCryptProvider.java)
									JWTAuthProvider.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/provider/JWTAuthProvider.java)
									SlugifyProvider.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/provider/SlugifyProvider.java)
								utils,d(/mk)
									SimpleQueryBuilder.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/utils/SimpleQueryBuilder.java)
								validator,d(/mk)
									ModelValidatorImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/validator/ModelValidatorImpl.java)
								vertx,d(/mk)
									configuration,d(/mk)
										VertxConfiguration.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/configuration/VertxConfiguration.java)
									exception,d(/mk)
										mapper,d(/mk)
											BusinessExceptionMapper.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/exception/mapper/BusinessExceptionMapper.java)
									proxy,d(/mk)
										ArticleOperations.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/ArticleOperations.java)
										package-info.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/package-info.java)
										ProfileOperations.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/ProfileOperations.java)
										TagsOperations.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/TagsOperations.java)
										UserOperations.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/UserOperations.java)
										error,d(/mk)
											Error.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/error/Error.java)
										impl,d(/mk)
											AbstractOperations.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/AbstractOperations.java)
											ArticleOperationsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/ArticleOperationsImpl.java)
											ProfileOperationsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/ProfileOperationsImpl.java)
											TagsOperationsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/TagsOperationsImpl.java)
											UserOperationsImpl.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/UserOperationsImpl.java)
									verticle,d(/mk)
										AbstractHttpVerticle.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/verticle/AbstractHttpVerticle.java)
										HttpVerticle.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/verticle/HttpVerticle.java)
								web,d(/mk)
									exception,d(/mk)
										RequestValidationException.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/exception/RequestValidationException.java)
									model,d(/mk)
										package-info.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/package-info.java)
										request,d(/mk)
											LoginRequest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/LoginRequest.java)
											NewArticleRequest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/NewArticleRequest.java)
											NewCommentRequest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/NewCommentRequest.java)
											NewUserRequest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/NewUserRequest.java)
											UpdateArticleRequest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/UpdateArticleRequest.java)
											UpdateUserRequest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/UpdateUserRequest.java)
										response,d(/mk)
											ArticleResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ArticleResponse.java)
											ArticlesResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ArticlesResponse.java)
											CommentResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/CommentResponse.java)
											CommentsResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/CommentsResponse.java)
											ErrorResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ErrorResponse.java)
											ProfileResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ProfileResponse.java)
											TagsResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/TagsResponse.java)
											UserResponse.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/UserResponse.java)
									route,d(/mk)
										AbstractHttpRoute.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/AbstractHttpRoute.java)
										ArticlesRoute.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/ArticlesRoute.java)
										HttpRoute.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/HttpRoute.java)
										ProfilesRoute.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/ProfilesRoute.java)
										TagsRoute.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/TagsRoute.java)
										UserRoute.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/UserRoute.java)
										UsersRoute.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/UsersRoute.java)
									validation,d(/mk)
										constraint,d(/mk)
											AtLeastOneFieldMustBeNotNull.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/validation/constraint/AtLeastOneFieldMustBeNotNull.java)
										validator,d(/mk)
											AtLeastOneFieldMustBeNotNullValidator.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/validation/validator/AtLeastOneFieldMustBeNotNullValidator.java)
			resources,d(/mk)
				application.yml,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/resources/application.yml)
				db,d(/mk)
					migration,d(/mk)
						V1__schema.sql,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/resources/db/migration/V1__schema.sql)
		test,d(/mk)
			java,d(/mk)
				com,d(/mk)
					example,d(/mk)
						realworld,d(/mk)
							RealworldApplicationDatabaseIntegrationTest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/RealworldApplicationDatabaseIntegrationTest.java)
							RealworldApplicationIntegrationTest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/RealworldApplicationIntegrationTest.java)
							RealworldDataIntegrationTest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/RealworldDataIntegrationTest.java)
							api,d(/mk)
								ArticlesAPITest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/ArticlesAPITest.java)
								ProfilesAPITest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/ProfilesAPITest.java)
								TagsAPITest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/TagsAPITest.java)
								UsersAPITest.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/UsersAPITest.java)
							constants,d(/mk)
								TestsConstants.java,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/constants/TestsConstants.java)
			resources,d(/mk)
				application.yml,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/resources/application.yml)
				db,d(/mk)
					migration,d(/mk)
						V1__schema.sql,f(e=utama=E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/resources/db/migration/V1__schema.sql)
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.gitignore
### Vert.x ###
.vertx/

### Eclipse ###

.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# PyDev specific (Python IDE for Eclipse)
*.pydevproject

# CDT-specific (C/C++ Development Tooling)
.cproject

# Java annotation processor (APT)
.factorypath

# PDT-specific (PHP Development Tools)
.buildpath

# sbteclipse plugin
.target

# Tern plugin
.tern-project

# TeXlipse plugin
.texlipse

# STS (Spring Tool Suite)
.springBeans

# Code Recommenders
.recommenders/

# Scala IDE specific (Scala & Java development for Eclipse)
.cache-main
.scala_dependencies
.worksheet

### Intellij+iml ###
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff:
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/dictionaries

# Sensitive or high-churn files:
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.xml
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml

# Gradle:
.idea/**/gradle.xml
.idea/**/libraries

# CMake
cmake-buildTool-debug/

# Mongo Explorer plugin:
.idea/**/mongoSettings.xml

## File-based project format:
*.iws

## Plugin-specific files:

# IntelliJ
/out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-buildTool.properties
fabric.properties

### Intellij+iml Patch ###
# Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-249601023

*.iml
modules.xml
.idea/misc.xml
*.ipr

### macOS ###
*.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### Maven ###
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties

# Avoid ignoring Maven wrapper jar file (.jar files are usually ignored)
!/.mvn/wrapper/maven-wrapper.jar

### Gradle ###
.gradle
/buildTool/

# Ignore Gradle GUI config
gradle-app.setting

# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
!gradle-wrapper.jar

# Cache of project
.gradletasknamecache

# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898
# gradle/wrapper/gradle-wrapper.properties

### NetBeans ###
nbproject/private/
buildTool/
nbbuild/
dist/
nbdist/
.nb-gradle/

### VisualStudioCode ###
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

.idea
.mvn
.editorconfig
conf

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.travis.yml
language: java
jdk: openjdk8
script:
  - ./ci-build.sh
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/ci-build.sh
#!/bin/bash
./mvnw clean package
java -jar target/vertx-springboot-realworld-example-app.jar > service.log &
SERVICE_PROCESS=$!
tail -f -n0 service.log | grep -q 'vertx-springboot-realworld-example-app.jar started'
echo "Application started"
./collections/run-api-tests.sh
kill $SERVICE_PROCESS
rm service.log


--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/HELP.md
# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/maven-plugin/)


--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/mvnw
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven2 Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`which java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi
        
    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=`cygpath --path --windows "$javaClass"`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/mvnw.cmd
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven2 Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_pre.bat" call "%HOME%\mavenrc_pre.bat"
if exist "%HOME%\mavenrc_pre.cmd" call "%HOME%\mavenrc_pre.cmd"
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"

FOR /F "tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.5/maven-wrapper-0.5.5.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%" == "" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_post.bat" call "%HOME%\mavenrc_post.bat"
if exist "%HOME%\mavenrc_post.cmd" call "%HOME%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%" == "on" pause

if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%

exit /B %ERROR_CODE%

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>vertx-springboot-realworld-example-app</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>realworld</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <vertx.version>3.8.1</vertx.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-jdbc-client</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-client</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-rx-java2</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-auth-jwt</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-service-proxy</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-config</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-codegen</artifactId>
            <classifier>processor</classifier>
            <scope>provided</scope>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.199</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.10.0</version>
        </dependency>
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <dependency>
            <groupId>com.github.slugify</groupId>
            <artifactId>slugify</artifactId>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.10</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-junit5</artifactId>
            <version>${vertx.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.4.10.Final</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <useIncrementalCompilation>false</useIncrementalCompilation>
                    <annotationProcessors>
                        <annotationProcessor>io.vertx.codegen.CodeGenProcessor</annotationProcessor>
                    </annotationProcessors>
                    <generatedSourcesDirectory>${project.basedir}/src/main/generated</generatedSourcesDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
        <finalName>vertx-springboot-realworld-example-app</finalName>
    </build>

</project>

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/readme.md
# ![RealWorld Example App](vertx-logo.png)

> ### Eclipse Vert.x tool-kit codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the [RealWorld](https://github.com/gothinkster/realworld) spec and API.


### [Demo](https://github.com/gothinkster/realworld)&nbsp;&nbsp;&nbsp;&nbsp;[RealWorld](https://github.com/gothinkster/realworld)


This codebase was created to demonstrate a fully fledged fullstack application built with [Eclipse Vert.x](https://vertx.io/)) including CRUD operations, authentication, routing, pagination, and more.

We've gone to great lengths to adhere to the Eclipse Vert.x community styleguides & best practices.

For more information on how to this works with other frontends/backends, head over to the [RealWorld](https://github.com/gothinkster/realworld) repo.

[![Build Status](https://travis-ci.org/diegocamara/vertx-springboot-realworld-example-app.svg?branch=master)](https://travis-ci.org/diegocamara/vertx-springboot-realworld-example-app)

# How it works

This application demonstrates an approach to using Eclipse Vert.x infrastructure to implement a web api. 

Some modules used in this app:

* [Spring](https://spring.io/) to perform dependency injection 
* [Jackson](https://github.com/FasterXML/jackson) to perform Serialization/Deserialization on the web layer
* [Flyway](https://flywaydb.org/) to perform database version control
* [H2 Database Engine](https://www.h2database.com) to persist data
* [JBCrypt](https://github.com/jeremyh/jBCrypt) for hash passwords
* [Slugify](https://github.com/slugify/slugify) to get title slugs
* [Vert.x JDBC Client](https://vertx.io/docs/vertx-jdbc-client/java/) to execute async queries
* [Vert.x Service Proxy](https://vertx.io/docs/vertx-service-proxy/java/) to expose services on the event bus
* [Vert.x RxJava](https://vertx.io/docs/vertx-rx/java2/) to perform async operations in business layer

### Project Structure
```
main/generated   ->   VertxEBProxy, VertxProxyHandler and Request/Response converters
+--java
|  +--com
|     +--example
|        +--realworld
|           +-- application     ->     spec logic implementation
|           +-- domain          ->     domain model objects
|           +-- infrastructure  ->     technical details package
```

# Getting started

### Start local server

```bash
./mvnw spring-boot:run
```
The server should be running at http://localhost:8080

### Running the application's integrated tests

``` 
./mvnw test
```

### Running postman collection tests

```
./collections/run-api-tests.sh
```

### Building jar file

```
./mvnw package
```

file location: target/vertx-springboot-realworld-example-app.jar

#### Database changes can be made to the application.yml file.

```yaml
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1
    username: sa
    password:
```

## Help
Improvements are welcome, feel free to contribute.


--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/vertx-logo.png

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.mvn/wrapper/maven-wrapper.jar

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.mvn/wrapper/maven-wrapper.properties
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.3/apache-maven-3.6.3-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/.mvn/wrapper/MavenWrapperDownloader.java
/*
 * Copyright 2007-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.net.*;
import java.io.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
        + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
     * use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
            ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH =
            ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if(mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if(mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if(!outputFile.getParentFile().exists()) {
            if(!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/collections/Conduit.postman_collection.json
{
  "info": {
    "_postman_id": "0574ad8a-a525-43ae-8e1e-5fd9756037f4",
    "name": "Conduit",
    "description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login and Remember Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7674032-bf09-4ae7-8224-4afa2fb1a9f9",
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "",
                  "if(tests['User has \"token\" property']){",
                  "    pm.globals.set('token', user.token);",
                  "}",
                  "",
                  "tests['Global variable \"token\" has been set'] = pm.globals.get('token') === user.token;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/user",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/user",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles",
      "item": [
        {
          "name": "All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?author=johnjacob",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "author",
                  "value": "johnjacob"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?favorited=jane",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?tag=dragons",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles, Favorite, Comments",
      "item": [
        {
          "name": "Create Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e711dbf8-8065-4ba8-8b74-f1639a7d8208",
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "pm.globals.set('slug', article.slug);",
                  "",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"dragons\",\"training\"]}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/feed",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "feed"
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Articles with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?author={{USERNAME}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "author",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Author with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?author={{USERNAME}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "author",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?favorited=jane",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?favorited=jane",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Single Article by slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Articles by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?tag=dragons",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"body\":\"With two hands\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Favorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests[\"Article's 'favorited' property is true\"] = article.favorited === true;",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "tests[\"Article's 'favoritesCount' property is greater than 0\"] = article.favoritesCount > 0;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/favorite",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "favorite"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unfavorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "tests[\"Article's \\\"favorited\\\" property is false\"] = article.favorited === false;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/favorite",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "favorite"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment for Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f90c364-cc68-4728-961a-85eb00197d7b",
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"comment\" property'] = responseJSON.hasOwnProperty('comment');",
                  "",
                  "var comment = responseJSON.comment || {};",
                  "",
                  "tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                  "pm.globals.set('commentId', comment.id);",
                  "",
                  "tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                  "tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                  "tests['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
                  "tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
                  "tests['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
                  "tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"comment\":{\"body\":\"Thank you so much!\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Comments for Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"comments\" property'] = responseJSON.hasOwnProperty('comments');",
                  "",
                  "    if(responseJSON.comments.length){",
                  "        var comment = responseJSON.comments[0];",
                  "",
                  "        tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                  "        tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                  "        tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                  "        tests['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
                  "        tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
                  "        tests['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
                  "        tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment for Article",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments/{{commentId}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Article",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "67853a4a-e972-4573-a295-dad12a46a9d7",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "3057f989-15e4-484e-b8fa-a041043d0ac0",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Profiles",
      "item": [
        {
          "name": "Register Celeb",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"celeb_{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"celeb_{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "profiles",
                "celeb_{{USERNAME}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Follow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "    tests['Profile\\'s \"following\" property is true'] = profile.following === true;",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "profiles",
                "celeb_{{USERNAME}}",
                "follow"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unfollow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "    tests['Profile\\'s \"following\" property is false'] = profile.following === false;",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "profiles",
                "celeb_{{USERNAME}}",
                "follow"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tags",
      "item": [
        {
          "name": "All Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
                  "    tests['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/tags",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "tags"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/collections/run-api-tests.sh
#!/usr/bin/env bash
set -x

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

APIURL=${APIURL:-http://localhost:8080/api}
USERNAME=${USERNAME:-u`date +%s`}
EMAIL=${EMAIL:-$USERNAME@mail.com}
PASSWORD=${PASSWORD:-password}

npx newman run $SCRIPTDIR/Conduit.postman_collection.json \
  --delay-request 500 \
  --global-var "APIURL=$APIURL" \
  --global-var "USERNAME=$USERNAME" \
  --global-var "EMAIL=$EMAIL" \
  --global-var "PASSWORD=$PASSWORD"
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/asciidoc/dataobjects.adoc
= Cheatsheets

[[TagsResponse]]
== TagsResponse


[cols=">25%,25%,50%"]
[frame="topbot"]
|===
^|Name | Type ^| Description
|[[tags]]`@tags`|`Array of String`|-
|===


--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ArticleOperationsVertxEBProxy.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.Vertx;
import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.function.Function;
import io.vertx.serviceproxy.ServiceProxyBuilder;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.ProxyUtils;

import java.util.List;
import com.example.realworld.infrastructure.web.model.request.NewArticleRequest;
import com.example.realworld.infrastructure.web.model.response.ArticleResponse;
import com.example.realworld.infrastructure.web.model.request.NewCommentRequest;
import com.example.realworld.infrastructure.web.model.response.ArticlesResponse;
import com.example.realworld.infrastructure.web.model.response.CommentsResponse;
import com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import com.example.realworld.infrastructure.web.model.response.CommentResponse;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class ArticleOperationsVertxEBProxy implements ArticleOperations {
  private Vertx _vertx;
  private String _address;
  private DeliveryOptions _options;
  private boolean closed;

  public ArticleOperationsVertxEBProxy(Vertx vertx, String address) {
    this(vertx, address, null);
  }

  public ArticleOperationsVertxEBProxy(Vertx vertx, String address, DeliveryOptions options) {
    this._vertx = vertx;
    this._address = address;
    this._options = options;
    try{
      this._vertx.eventBus().registerDefaultCodec(ServiceException.class, new ServiceExceptionMessageCodec());
    } catch (IllegalStateException ex) {}
  }

  @Override
  public  void findRecentArticles(String currentUserId, int offset, int limit, Handler<AsyncResult<ArticlesResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("currentUserId", currentUserId);
    _json.put("offset", offset);
    _json.put("limit", limit);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "findRecentArticles");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ArticlesResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void findArticles(String currentUserId, int offset, int limit, List<String> tags, List<String> authors, List<String> favorited, Handler<AsyncResult<ArticlesResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("currentUserId", currentUserId);
    _json.put("offset", offset);
    _json.put("limit", limit);
    _json.put("tags", new JsonArray(tags));
    _json.put("authors", new JsonArray(authors));
    _json.put("favorited", new JsonArray(favorited));

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "findArticles");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ArticlesResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void create(String currentUserId, NewArticleRequest newArticleRequest, Handler<AsyncResult<ArticleResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("currentUserId", currentUserId);
    _json.put("newArticleRequest", newArticleRequest == null ? null : newArticleRequest.toJson());

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "create");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ArticleResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void findBySlug(String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("slug", slug);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "findBySlug");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ArticleResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void updateBySlug(String slug, String currentUserId, UpdateArticleRequest updateArticleRequest, Handler<AsyncResult<ArticleResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("slug", slug);
    _json.put("currentUserId", currentUserId);
    _json.put("updateArticleRequest", updateArticleRequest == null ? null : updateArticleRequest.toJson());

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "updateBySlug");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ArticleResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void deleteArticleBySlug(String slug, String currentUserId, Handler<AsyncResult<Void>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("slug", slug);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "deleteArticleBySlug");
    _vertx.eventBus().<Void>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body()));
      }
    });
  }
  @Override
  public  void createCommentBySlug(String slug, String currentUserId, NewCommentRequest newCommentRequest, Handler<AsyncResult<CommentResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("slug", slug);
    _json.put("currentUserId", currentUserId);
    _json.put("newCommentRequest", newCommentRequest == null ? null : newCommentRequest.toJson());

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "createCommentBySlug");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new CommentResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void deleteCommentByIdAndAuthorId(String commentId, String currentUserId, Handler<AsyncResult<Void>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("commentId", commentId);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "deleteCommentByIdAndAuthorId");
    _vertx.eventBus().<Void>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body()));
      }
    });
  }
  @Override
  public  void findCommentsBySlug(String slug, String currentUserId, Handler<AsyncResult<CommentsResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("slug", slug);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "findCommentsBySlug");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new CommentsResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void favoriteArticle(String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("slug", slug);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "favoriteArticle");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ArticleResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void unfavoriteArticle(String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("slug", slug);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "unfavoriteArticle");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ArticleResponse(res.result().body())));
      }
    });
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ArticleOperationsVertxProxyHandler.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.vertx.proxy.ArticleOperations;
import io.vertx.core.Vertx;
import io.vertx.core.Handler;
import io.vertx.core.AsyncResult;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.eventbus.Message;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.ReplyException;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.Collection;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
import io.vertx.serviceproxy.ServiceBinder;
import io.vertx.serviceproxy.ProxyHandler;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.HelperUtils;

import java.util.List;
import com.example.realworld.infrastructure.web.model.request.NewArticleRequest;
import com.example.realworld.infrastructure.web.model.response.ArticleResponse;
import com.example.realworld.infrastructure.web.model.request.NewCommentRequest;
import com.example.realworld.infrastructure.web.model.response.ArticlesResponse;
import com.example.realworld.infrastructure.web.model.response.CommentsResponse;
import com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import com.example.realworld.infrastructure.web.model.response.CommentResponse;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class ArticleOperationsVertxProxyHandler extends ProxyHandler {

  public static final long DEFAULT_CONNECTION_TIMEOUT = 5 * 60; // 5 minutes 
  private final Vertx vertx;
  private final ArticleOperations service;
  private final long timerID;
  private long lastAccessed;
  private final long timeoutSeconds;

  public ArticleOperationsVertxProxyHandler(Vertx vertx, ArticleOperations service){
    this(vertx, service, DEFAULT_CONNECTION_TIMEOUT);
  }

  public ArticleOperationsVertxProxyHandler(Vertx vertx, ArticleOperations service, long timeoutInSecond){
    this(vertx, service, true, timeoutInSecond);
  }

  public ArticleOperationsVertxProxyHandler(Vertx vertx, ArticleOperations service, boolean topLevel, long timeoutSeconds) {
      this.vertx = vertx;
      this.service = service;
      this.timeoutSeconds = timeoutSeconds;
      try {
        this.vertx.eventBus().registerDefaultCodec(ServiceException.class,
            new ServiceExceptionMessageCodec());
      } catch (IllegalStateException ex) {}
      if (timeoutSeconds != -1 && !topLevel) {
        long period = timeoutSeconds * 1000 / 2;
        if (period > 10000) {
          period = 10000;
        }
        this.timerID = vertx.setPeriodic(period, this::checkTimedOut);
      } else {
        this.timerID = -1;
      }
      accessed();
    }


  private void checkTimedOut(long id) {
    long now = System.nanoTime();
    if (now - lastAccessed > timeoutSeconds * 1000000000) {
      close();
    }
  }

    @Override
    public void close() {
      if (timerID != -1) {
        vertx.cancelTimer(timerID);
      }
      super.close();
    }

    private void accessed() {
      this.lastAccessed = System.nanoTime();
    }

  public void handle(Message<JsonObject> msg) {
    try{
      JsonObject json = msg.body();
      String action = msg.headers().get("action");
      if (action == null) throw new IllegalStateException("action not specified");
      accessed();
      switch (action) {
        case "findRecentArticles": {
          service.findRecentArticles((java.lang.String)json.getValue("currentUserId"),
                        json.getValue("offset") == null ? null : (json.getLong("offset").intValue()),
                        json.getValue("limit") == null ? null : (json.getLong("limit").intValue()),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "findArticles": {
          service.findArticles((java.lang.String)json.getValue("currentUserId"),
                        json.getValue("offset") == null ? null : (json.getLong("offset").intValue()),
                        json.getValue("limit") == null ? null : (json.getLong("limit").intValue()),
                        HelperUtils.convertList(json.getJsonArray("tags").getList()),
                        HelperUtils.convertList(json.getJsonArray("authors").getList()),
                        HelperUtils.convertList(json.getJsonArray("favorited").getList()),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "create": {
          service.create((java.lang.String)json.getValue("currentUserId"),
                        json.getJsonObject("newArticleRequest") == null ? null : new com.example.realworld.infrastructure.web.model.request.NewArticleRequest(json.getJsonObject("newArticleRequest")),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "findBySlug": {
          service.findBySlug((java.lang.String)json.getValue("slug"),
                        (java.lang.String)json.getValue("currentUserId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "updateBySlug": {
          service.updateBySlug((java.lang.String)json.getValue("slug"),
                        (java.lang.String)json.getValue("currentUserId"),
                        json.getJsonObject("updateArticleRequest") == null ? null : new com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest(json.getJsonObject("updateArticleRequest")),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "deleteArticleBySlug": {
          service.deleteArticleBySlug((java.lang.String)json.getValue("slug"),
                        (java.lang.String)json.getValue("currentUserId"),
                        HelperUtils.createHandler(msg));
          break;
        }
        case "createCommentBySlug": {
          service.createCommentBySlug((java.lang.String)json.getValue("slug"),
                        (java.lang.String)json.getValue("currentUserId"),
                        json.getJsonObject("newCommentRequest") == null ? null : new com.example.realworld.infrastructure.web.model.request.NewCommentRequest(json.getJsonObject("newCommentRequest")),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "deleteCommentByIdAndAuthorId": {
          service.deleteCommentByIdAndAuthorId((java.lang.String)json.getValue("commentId"),
                        (java.lang.String)json.getValue("currentUserId"),
                        HelperUtils.createHandler(msg));
          break;
        }
        case "findCommentsBySlug": {
          service.findCommentsBySlug((java.lang.String)json.getValue("slug"),
                        (java.lang.String)json.getValue("currentUserId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "favoriteArticle": {
          service.favoriteArticle((java.lang.String)json.getValue("slug"),
                        (java.lang.String)json.getValue("currentUserId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "unfavoriteArticle": {
          service.unfavoriteArticle((java.lang.String)json.getValue("slug"),
                        (java.lang.String)json.getValue("currentUserId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        default: throw new IllegalStateException("Invalid action: " + action);
      }
    } catch (Throwable t) {
      msg.reply(new ServiceException(500, t.getMessage()));
      throw t;
    }
  }
}
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ProfileOperationsVertxEBProxy.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.Vertx;
import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.function.Function;
import io.vertx.serviceproxy.ServiceProxyBuilder;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.ProxyUtils;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import com.example.realworld.infrastructure.web.model.response.ProfileResponse;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class ProfileOperationsVertxEBProxy implements ProfileOperations {
  private Vertx _vertx;
  private String _address;
  private DeliveryOptions _options;
  private boolean closed;

  public ProfileOperationsVertxEBProxy(Vertx vertx, String address) {
    this(vertx, address, null);
  }

  public ProfileOperationsVertxEBProxy(Vertx vertx, String address, DeliveryOptions options) {
    this._vertx = vertx;
    this._address = address;
    this._options = options;
    try{
      this._vertx.eventBus().registerDefaultCodec(ServiceException.class, new ServiceExceptionMessageCodec());
    } catch (IllegalStateException ex) {}
  }

  @Override
  public  void getProfile(String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("username", username);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "getProfile");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ProfileResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void follow(String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("username", username);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "follow");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ProfileResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void unfollow(String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("username", username);
    _json.put("currentUserId", currentUserId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "unfollow");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new ProfileResponse(res.result().body())));
      }
    });
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/ProfileOperationsVertxProxyHandler.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.vertx.proxy.ProfileOperations;
import io.vertx.core.Vertx;
import io.vertx.core.Handler;
import io.vertx.core.AsyncResult;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.eventbus.Message;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.ReplyException;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.Collection;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
import io.vertx.serviceproxy.ServiceBinder;
import io.vertx.serviceproxy.ProxyHandler;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.HelperUtils;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import com.example.realworld.infrastructure.web.model.response.ProfileResponse;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class ProfileOperationsVertxProxyHandler extends ProxyHandler {

  public static final long DEFAULT_CONNECTION_TIMEOUT = 5 * 60; // 5 minutes 
  private final Vertx vertx;
  private final ProfileOperations service;
  private final long timerID;
  private long lastAccessed;
  private final long timeoutSeconds;

  public ProfileOperationsVertxProxyHandler(Vertx vertx, ProfileOperations service){
    this(vertx, service, DEFAULT_CONNECTION_TIMEOUT);
  }

  public ProfileOperationsVertxProxyHandler(Vertx vertx, ProfileOperations service, long timeoutInSecond){
    this(vertx, service, true, timeoutInSecond);
  }

  public ProfileOperationsVertxProxyHandler(Vertx vertx, ProfileOperations service, boolean topLevel, long timeoutSeconds) {
      this.vertx = vertx;
      this.service = service;
      this.timeoutSeconds = timeoutSeconds;
      try {
        this.vertx.eventBus().registerDefaultCodec(ServiceException.class,
            new ServiceExceptionMessageCodec());
      } catch (IllegalStateException ex) {}
      if (timeoutSeconds != -1 && !topLevel) {
        long period = timeoutSeconds * 1000 / 2;
        if (period > 10000) {
          period = 10000;
        }
        this.timerID = vertx.setPeriodic(period, this::checkTimedOut);
      } else {
        this.timerID = -1;
      }
      accessed();
    }


  private void checkTimedOut(long id) {
    long now = System.nanoTime();
    if (now - lastAccessed > timeoutSeconds * 1000000000) {
      close();
    }
  }

    @Override
    public void close() {
      if (timerID != -1) {
        vertx.cancelTimer(timerID);
      }
      super.close();
    }

    private void accessed() {
      this.lastAccessed = System.nanoTime();
    }

  public void handle(Message<JsonObject> msg) {
    try{
      JsonObject json = msg.body();
      String action = msg.headers().get("action");
      if (action == null) throw new IllegalStateException("action not specified");
      accessed();
      switch (action) {
        case "getProfile": {
          service.getProfile((java.lang.String)json.getValue("username"),
                        (java.lang.String)json.getValue("currentUserId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "follow": {
          service.follow((java.lang.String)json.getValue("username"),
                        (java.lang.String)json.getValue("currentUserId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "unfollow": {
          service.unfollow((java.lang.String)json.getValue("username"),
                        (java.lang.String)json.getValue("currentUserId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        default: throw new IllegalStateException("Invalid action: " + action);
      }
    } catch (Throwable t) {
      msg.reply(new ServiceException(500, t.getMessage()));
      throw t;
    }
  }
}
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/TagsOperationsVertxEBProxy.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.Vertx;
import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.function.Function;
import io.vertx.serviceproxy.ServiceProxyBuilder;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.ProxyUtils;

import com.example.realworld.infrastructure.web.model.response.TagsResponse;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class TagsOperationsVertxEBProxy implements TagsOperations {
  private Vertx _vertx;
  private String _address;
  private DeliveryOptions _options;
  private boolean closed;

  public TagsOperationsVertxEBProxy(Vertx vertx, String address) {
    this(vertx, address, null);
  }

  public TagsOperationsVertxEBProxy(Vertx vertx, String address, DeliveryOptions options) {
    this._vertx = vertx;
    this._address = address;
    this._options = options;
    try{
      this._vertx.eventBus().registerDefaultCodec(ServiceException.class, new ServiceExceptionMessageCodec());
    } catch (IllegalStateException ex) {}
  }

  @Override
  public  void findTags(Handler<AsyncResult<TagsResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "findTags");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new TagsResponse(res.result().body())));
      }
    });
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/TagsOperationsVertxProxyHandler.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.vertx.proxy.TagsOperations;
import io.vertx.core.Vertx;
import io.vertx.core.Handler;
import io.vertx.core.AsyncResult;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.eventbus.Message;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.ReplyException;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.Collection;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
import io.vertx.serviceproxy.ServiceBinder;
import io.vertx.serviceproxy.ProxyHandler;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.HelperUtils;

import com.example.realworld.infrastructure.web.model.response.TagsResponse;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class TagsOperationsVertxProxyHandler extends ProxyHandler {

  public static final long DEFAULT_CONNECTION_TIMEOUT = 5 * 60; // 5 minutes 
  private final Vertx vertx;
  private final TagsOperations service;
  private final long timerID;
  private long lastAccessed;
  private final long timeoutSeconds;

  public TagsOperationsVertxProxyHandler(Vertx vertx, TagsOperations service){
    this(vertx, service, DEFAULT_CONNECTION_TIMEOUT);
  }

  public TagsOperationsVertxProxyHandler(Vertx vertx, TagsOperations service, long timeoutInSecond){
    this(vertx, service, true, timeoutInSecond);
  }

  public TagsOperationsVertxProxyHandler(Vertx vertx, TagsOperations service, boolean topLevel, long timeoutSeconds) {
      this.vertx = vertx;
      this.service = service;
      this.timeoutSeconds = timeoutSeconds;
      try {
        this.vertx.eventBus().registerDefaultCodec(ServiceException.class,
            new ServiceExceptionMessageCodec());
      } catch (IllegalStateException ex) {}
      if (timeoutSeconds != -1 && !topLevel) {
        long period = timeoutSeconds * 1000 / 2;
        if (period > 10000) {
          period = 10000;
        }
        this.timerID = vertx.setPeriodic(period, this::checkTimedOut);
      } else {
        this.timerID = -1;
      }
      accessed();
    }


  private void checkTimedOut(long id) {
    long now = System.nanoTime();
    if (now - lastAccessed > timeoutSeconds * 1000000000) {
      close();
    }
  }

    @Override
    public void close() {
      if (timerID != -1) {
        vertx.cancelTimer(timerID);
      }
      super.close();
    }

    private void accessed() {
      this.lastAccessed = System.nanoTime();
    }

  public void handle(Message<JsonObject> msg) {
    try{
      JsonObject json = msg.body();
      String action = msg.headers().get("action");
      if (action == null) throw new IllegalStateException("action not specified");
      accessed();
      switch (action) {
        case "findTags": {
          service.findTags(res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        default: throw new IllegalStateException("Invalid action: " + action);
      }
    } catch (Throwable t) {
      msg.reply(new ServiceException(500, t.getMessage()));
      throw t;
    }
  }
}
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/UserOperationsVertxEBProxy.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.Vertx;
import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.function.Function;
import io.vertx.serviceproxy.ServiceProxyBuilder;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.ProxyUtils;

import com.example.realworld.infrastructure.web.model.request.UpdateUserRequest;
import io.vertx.core.AsyncResult;
import com.example.realworld.infrastructure.web.model.request.LoginRequest;
import io.vertx.core.Handler;
import com.example.realworld.infrastructure.web.model.response.UserResponse;
import com.example.realworld.infrastructure.web.model.request.NewUserRequest;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class UserOperationsVertxEBProxy implements UserOperations {
  private Vertx _vertx;
  private String _address;
  private DeliveryOptions _options;
  private boolean closed;

  public UserOperationsVertxEBProxy(Vertx vertx, String address) {
    this(vertx, address, null);
  }

  public UserOperationsVertxEBProxy(Vertx vertx, String address, DeliveryOptions options) {
    this._vertx = vertx;
    this._address = address;
    this._options = options;
    try{
      this._vertx.eventBus().registerDefaultCodec(ServiceException.class, new ServiceExceptionMessageCodec());
    } catch (IllegalStateException ex) {}
  }

  @Override
  public  void create(NewUserRequest newUserRequest, Handler<AsyncResult<UserResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("newUserRequest", newUserRequest == null ? null : newUserRequest.toJson());

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "create");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new UserResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void login(LoginRequest loginRequest, Handler<AsyncResult<UserResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("loginRequest", loginRequest == null ? null : loginRequest.toJson());

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "login");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new UserResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void findById(String userId, Handler<AsyncResult<UserResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("userId", userId);

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "findById");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new UserResponse(res.result().body())));
      }
    });
  }
  @Override
  public  void update(String currentUserId, UpdateUserRequest updateUserRequest, Handler<AsyncResult<UserResponse>> handler){
    if (closed) {
      handler.handle(Future.failedFuture(new IllegalStateException("Proxy is closed")));
      return;
    }
    JsonObject _json = new JsonObject();
    _json.put("currentUserId", currentUserId);
    _json.put("updateUserRequest", updateUserRequest == null ? null : updateUserRequest.toJson());

    DeliveryOptions _deliveryOptions = (_options != null) ? new DeliveryOptions(_options) : new DeliveryOptions();
    _deliveryOptions.addHeader("action", "update");
    _vertx.eventBus().<JsonObject>send(_address, _json, _deliveryOptions, res -> {
      if (res.failed()) {
        handler.handle(Future.failedFuture(res.cause()));
      } else {
        handler.handle(Future.succeededFuture(res.result().body() == null ? null : new UserResponse(res.result().body())));
      }
    });
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/vertx/proxy/UserOperationsVertxProxyHandler.java
/*
* Copyright 2014 Red Hat, Inc.
*
* Red Hat licenses this file to you under the Apache License, version 2.0
* (the "License"); you may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*/

package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.vertx.proxy.UserOperations;
import io.vertx.core.Vertx;
import io.vertx.core.Handler;
import io.vertx.core.AsyncResult;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.eventbus.Message;
import io.vertx.core.eventbus.MessageConsumer;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.ReplyException;
import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.util.Collection;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
import io.vertx.serviceproxy.ServiceBinder;
import io.vertx.serviceproxy.ProxyHandler;
import io.vertx.serviceproxy.ServiceException;
import io.vertx.serviceproxy.ServiceExceptionMessageCodec;
import io.vertx.serviceproxy.HelperUtils;

import com.example.realworld.infrastructure.web.model.request.UpdateUserRequest;
import io.vertx.core.AsyncResult;
import com.example.realworld.infrastructure.web.model.request.LoginRequest;
import io.vertx.core.Handler;
import com.example.realworld.infrastructure.web.model.response.UserResponse;
import com.example.realworld.infrastructure.web.model.request.NewUserRequest;
/*
  Generated Proxy code - DO NOT EDIT
  @author Roger the Robot
*/

@SuppressWarnings({"unchecked", "rawtypes"})
public class UserOperationsVertxProxyHandler extends ProxyHandler {

  public static final long DEFAULT_CONNECTION_TIMEOUT = 5 * 60; // 5 minutes 
  private final Vertx vertx;
  private final UserOperations service;
  private final long timerID;
  private long lastAccessed;
  private final long timeoutSeconds;

  public UserOperationsVertxProxyHandler(Vertx vertx, UserOperations service){
    this(vertx, service, DEFAULT_CONNECTION_TIMEOUT);
  }

  public UserOperationsVertxProxyHandler(Vertx vertx, UserOperations service, long timeoutInSecond){
    this(vertx, service, true, timeoutInSecond);
  }

  public UserOperationsVertxProxyHandler(Vertx vertx, UserOperations service, boolean topLevel, long timeoutSeconds) {
      this.vertx = vertx;
      this.service = service;
      this.timeoutSeconds = timeoutSeconds;
      try {
        this.vertx.eventBus().registerDefaultCodec(ServiceException.class,
            new ServiceExceptionMessageCodec());
      } catch (IllegalStateException ex) {}
      if (timeoutSeconds != -1 && !topLevel) {
        long period = timeoutSeconds * 1000 / 2;
        if (period > 10000) {
          period = 10000;
        }
        this.timerID = vertx.setPeriodic(period, this::checkTimedOut);
      } else {
        this.timerID = -1;
      }
      accessed();
    }


  private void checkTimedOut(long id) {
    long now = System.nanoTime();
    if (now - lastAccessed > timeoutSeconds * 1000000000) {
      close();
    }
  }

    @Override
    public void close() {
      if (timerID != -1) {
        vertx.cancelTimer(timerID);
      }
      super.close();
    }

    private void accessed() {
      this.lastAccessed = System.nanoTime();
    }

  public void handle(Message<JsonObject> msg) {
    try{
      JsonObject json = msg.body();
      String action = msg.headers().get("action");
      if (action == null) throw new IllegalStateException("action not specified");
      accessed();
      switch (action) {
        case "create": {
          service.create(json.getJsonObject("newUserRequest") == null ? null : new com.example.realworld.infrastructure.web.model.request.NewUserRequest(json.getJsonObject("newUserRequest")),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "login": {
          service.login(json.getJsonObject("loginRequest") == null ? null : new com.example.realworld.infrastructure.web.model.request.LoginRequest(json.getJsonObject("loginRequest")),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "findById": {
          service.findById((java.lang.String)json.getValue("userId"),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        case "update": {
          service.update((java.lang.String)json.getValue("currentUserId"),
                        json.getJsonObject("updateUserRequest") == null ? null : new com.example.realworld.infrastructure.web.model.request.UpdateUserRequest(json.getJsonObject("updateUserRequest")),
                        res -> {
                        if (res.failed()) {
                          if (res.cause() instanceof ServiceException) {
                            msg.reply(res.cause());
                          } else {
                            msg.reply(new ServiceException(-1, res.cause().getMessage()));
                          }
                        } else {
                          msg.reply(res.result() == null ? null : res.result().toJson());
                        }
                     });
          break;
        }
        default: throw new IllegalStateException("Invalid action: " + action);
      }
    } catch (Throwable t) {
      msg.reply(new ServiceException(500, t.getMessage()));
      throw t;
    }
  }
}
--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/LoginRequestConverter.java
package com.example.realworld.infrastructure.web.model.request;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.request.LoginRequest}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.request.LoginRequest} original class using Vert.x codegen.
 */
public class LoginRequestConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, LoginRequest obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "email":
          if (member.getValue() instanceof String) {
            obj.setEmail((String)member.getValue());
          }
          break;
        case "password":
          if (member.getValue() instanceof String) {
            obj.setPassword((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(LoginRequest obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(LoginRequest obj, java.util.Map<String, Object> json) {
    if (obj.getEmail() != null) {
      json.put("email", obj.getEmail());
    }
    if (obj.getPassword() != null) {
      json.put("password", obj.getPassword());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/NewArticleRequestConverter.java
package com.example.realworld.infrastructure.web.model.request;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.request.NewArticleRequest}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.request.NewArticleRequest} original class using Vert.x codegen.
 */
public class NewArticleRequestConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, NewArticleRequest obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "body":
          if (member.getValue() instanceof String) {
            obj.setBody((String)member.getValue());
          }
          break;
        case "description":
          if (member.getValue() instanceof String) {
            obj.setDescription((String)member.getValue());
          }
          break;
        case "tagList":
          if (member.getValue() instanceof JsonArray) {
            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();
            ((Iterable<Object>)member.getValue()).forEach( item -> {
              if (item instanceof String)
                list.add((String)item);
            });
            obj.setTagList(list);
          }
          break;
        case "title":
          if (member.getValue() instanceof String) {
            obj.setTitle((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(NewArticleRequest obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(NewArticleRequest obj, java.util.Map<String, Object> json) {
    if (obj.getBody() != null) {
      json.put("body", obj.getBody());
    }
    if (obj.getDescription() != null) {
      json.put("description", obj.getDescription());
    }
    if (obj.getTagList() != null) {
      JsonArray array = new JsonArray();
      obj.getTagList().forEach(item -> array.add(item));
      json.put("tagList", array);
    }
    if (obj.getTitle() != null) {
      json.put("title", obj.getTitle());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/NewCommentRequestConverter.java
package com.example.realworld.infrastructure.web.model.request;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.request.NewCommentRequest}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.request.NewCommentRequest} original class using Vert.x codegen.
 */
public class NewCommentRequestConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, NewCommentRequest obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "body":
          if (member.getValue() instanceof String) {
            obj.setBody((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(NewCommentRequest obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(NewCommentRequest obj, java.util.Map<String, Object> json) {
    if (obj.getBody() != null) {
      json.put("body", obj.getBody());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/NewUserRequestConverter.java
package com.example.realworld.infrastructure.web.model.request;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.request.NewUserRequest}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.request.NewUserRequest} original class using Vert.x codegen.
 */
public class NewUserRequestConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, NewUserRequest obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "email":
          if (member.getValue() instanceof String) {
            obj.setEmail((String)member.getValue());
          }
          break;
        case "password":
          if (member.getValue() instanceof String) {
            obj.setPassword((String)member.getValue());
          }
          break;
        case "username":
          if (member.getValue() instanceof String) {
            obj.setUsername((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(NewUserRequest obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(NewUserRequest obj, java.util.Map<String, Object> json) {
    if (obj.getEmail() != null) {
      json.put("email", obj.getEmail());
    }
    if (obj.getPassword() != null) {
      json.put("password", obj.getPassword());
    }
    if (obj.getUsername() != null) {
      json.put("username", obj.getUsername());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/UpdateArticleRequestConverter.java
package com.example.realworld.infrastructure.web.model.request;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest} original class using Vert.x codegen.
 */
public class UpdateArticleRequestConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, UpdateArticleRequest obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "body":
          if (member.getValue() instanceof String) {
            obj.setBody((String)member.getValue());
          }
          break;
        case "description":
          if (member.getValue() instanceof String) {
            obj.setDescription((String)member.getValue());
          }
          break;
        case "title":
          if (member.getValue() instanceof String) {
            obj.setTitle((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(UpdateArticleRequest obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(UpdateArticleRequest obj, java.util.Map<String, Object> json) {
    if (obj.getBody() != null) {
      json.put("body", obj.getBody());
    }
    if (obj.getDescription() != null) {
      json.put("description", obj.getDescription());
    }
    if (obj.getTitle() != null) {
      json.put("title", obj.getTitle());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/request/UpdateUserRequestConverter.java
package com.example.realworld.infrastructure.web.model.request;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.request.UpdateUserRequest}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.request.UpdateUserRequest} original class using Vert.x codegen.
 */
public class UpdateUserRequestConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, UpdateUserRequest obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "bio":
          if (member.getValue() instanceof String) {
            obj.setBio((String)member.getValue());
          }
          break;
        case "email":
          if (member.getValue() instanceof String) {
            obj.setEmail((String)member.getValue());
          }
          break;
        case "image":
          if (member.getValue() instanceof String) {
            obj.setImage((String)member.getValue());
          }
          break;
        case "username":
          if (member.getValue() instanceof String) {
            obj.setUsername((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(UpdateUserRequest obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(UpdateUserRequest obj, java.util.Map<String, Object> json) {
    if (obj.getBio() != null) {
      json.put("bio", obj.getBio());
    }
    if (obj.getEmail() != null) {
      json.put("email", obj.getEmail());
    }
    if (obj.getImage() != null) {
      json.put("image", obj.getImage());
    }
    if (obj.getUsername() != null) {
      json.put("username", obj.getUsername());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/ArticleResponseConverter.java
package com.example.realworld.infrastructure.web.model.response;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.response.ArticleResponse}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.response.ArticleResponse} original class using Vert.x codegen.
 */
public class ArticleResponseConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, ArticleResponse obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "author":
          if (member.getValue() instanceof JsonObject) {
            obj.setAuthor(new com.example.realworld.infrastructure.web.model.response.ProfileResponse((JsonObject)member.getValue()));
          }
          break;
        case "body":
          if (member.getValue() instanceof String) {
            obj.setBody((String)member.getValue());
          }
          break;
        case "createdAt":
          if (member.getValue() instanceof String) {
            obj.setCreatedAt((String)member.getValue());
          }
          break;
        case "description":
          if (member.getValue() instanceof String) {
            obj.setDescription((String)member.getValue());
          }
          break;
        case "favorited":
          if (member.getValue() instanceof Boolean) {
            obj.setFavorited((Boolean)member.getValue());
          }
          break;
        case "favoritesCount":
          if (member.getValue() instanceof Number) {
            obj.setFavoritesCount(((Number)member.getValue()).longValue());
          }
          break;
        case "slug":
          if (member.getValue() instanceof String) {
            obj.setSlug((String)member.getValue());
          }
          break;
        case "tagList":
          if (member.getValue() instanceof JsonArray) {
            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();
            ((Iterable<Object>)member.getValue()).forEach( item -> {
              if (item instanceof String)
                list.add((String)item);
            });
            obj.setTagList(list);
          }
          break;
        case "title":
          if (member.getValue() instanceof String) {
            obj.setTitle((String)member.getValue());
          }
          break;
        case "updatedAt":
          if (member.getValue() instanceof String) {
            obj.setUpdatedAt((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(ArticleResponse obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(ArticleResponse obj, java.util.Map<String, Object> json) {
    if (obj.getAuthor() != null) {
      json.put("author", obj.getAuthor().toJson());
    }
    if (obj.getBody() != null) {
      json.put("body", obj.getBody());
    }
    if (obj.getCreatedAt() != null) {
      json.put("createdAt", obj.getCreatedAt());
    }
    if (obj.getDescription() != null) {
      json.put("description", obj.getDescription());
    }
    json.put("favorited", obj.isFavorited());
    if (obj.getFavoritesCount() != null) {
      json.put("favoritesCount", obj.getFavoritesCount());
    }
    if (obj.getSlug() != null) {
      json.put("slug", obj.getSlug());
    }
    if (obj.getTagList() != null) {
      JsonArray array = new JsonArray();
      obj.getTagList().forEach(item -> array.add(item));
      json.put("tagList", array);
    }
    if (obj.getTitle() != null) {
      json.put("title", obj.getTitle());
    }
    if (obj.getUpdatedAt() != null) {
      json.put("updatedAt", obj.getUpdatedAt());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/ArticlesResponseConverter.java
package com.example.realworld.infrastructure.web.model.response;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.response.ArticlesResponse}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.response.ArticlesResponse} original class using Vert.x codegen.
 */
public class ArticlesResponseConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, ArticlesResponse obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "articles":
          if (member.getValue() instanceof JsonArray) {
            java.util.ArrayList<com.example.realworld.infrastructure.web.model.response.ArticleResponse> list =  new java.util.ArrayList<>();
            ((Iterable<Object>)member.getValue()).forEach( item -> {
              if (item instanceof JsonObject)
                list.add(new com.example.realworld.infrastructure.web.model.response.ArticleResponse((JsonObject)item));
            });
            obj.setArticles(list);
          }
          break;
        case "articlesCount":
          if (member.getValue() instanceof Number) {
            obj.setArticlesCount(((Number)member.getValue()).longValue());
          }
          break;
      }
    }
  }

  public static void toJson(ArticlesResponse obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(ArticlesResponse obj, java.util.Map<String, Object> json) {
    if (obj.getArticles() != null) {
      JsonArray array = new JsonArray();
      obj.getArticles().forEach(item -> array.add(item.toJson()));
      json.put("articles", array);
    }
    json.put("articlesCount", obj.getArticlesCount());
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/CommentResponseConverter.java
package com.example.realworld.infrastructure.web.model.response;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.response.CommentResponse}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.response.CommentResponse} original class using Vert.x codegen.
 */
public class CommentResponseConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, CommentResponse obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "author":
          if (member.getValue() instanceof JsonObject) {
            obj.setAuthor(new com.example.realworld.infrastructure.web.model.response.ProfileResponse((JsonObject)member.getValue()));
          }
          break;
        case "body":
          if (member.getValue() instanceof String) {
            obj.setBody((String)member.getValue());
          }
          break;
        case "createdAt":
          if (member.getValue() instanceof String) {
            obj.setCreatedAt((String)member.getValue());
          }
          break;
        case "id":
          if (member.getValue() instanceof String) {
            obj.setId((String)member.getValue());
          }
          break;
        case "updatedAt":
          if (member.getValue() instanceof String) {
            obj.setUpdatedAt((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(CommentResponse obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(CommentResponse obj, java.util.Map<String, Object> json) {
    if (obj.getAuthor() != null) {
      json.put("author", obj.getAuthor().toJson());
    }
    if (obj.getBody() != null) {
      json.put("body", obj.getBody());
    }
    if (obj.getCreatedAt() != null) {
      json.put("createdAt", obj.getCreatedAt());
    }
    if (obj.getId() != null) {
      json.put("id", obj.getId());
    }
    if (obj.getUpdatedAt() != null) {
      json.put("updatedAt", obj.getUpdatedAt());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/CommentsResponseConverter.java
package com.example.realworld.infrastructure.web.model.response;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.response.CommentsResponse}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.response.CommentsResponse} original class using Vert.x codegen.
 */
public class CommentsResponseConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, CommentsResponse obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "comments":
          if (member.getValue() instanceof JsonArray) {
            java.util.ArrayList<com.example.realworld.infrastructure.web.model.response.CommentResponse> list =  new java.util.ArrayList<>();
            ((Iterable<Object>)member.getValue()).forEach( item -> {
              if (item instanceof JsonObject)
                list.add(new com.example.realworld.infrastructure.web.model.response.CommentResponse((JsonObject)item));
            });
            obj.setComments(list);
          }
          break;
      }
    }
  }

  public static void toJson(CommentsResponse obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(CommentsResponse obj, java.util.Map<String, Object> json) {
    if (obj.getComments() != null) {
      JsonArray array = new JsonArray();
      obj.getComments().forEach(item -> array.add(item.toJson()));
      json.put("comments", array);
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/ProfileResponseConverter.java
package com.example.realworld.infrastructure.web.model.response;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.response.ProfileResponse}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.response.ProfileResponse} original class using Vert.x codegen.
 */
public class ProfileResponseConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, ProfileResponse obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "bio":
          if (member.getValue() instanceof String) {
            obj.setBio((String)member.getValue());
          }
          break;
        case "following":
          if (member.getValue() instanceof Boolean) {
            obj.setFollowing((Boolean)member.getValue());
          }
          break;
        case "image":
          if (member.getValue() instanceof String) {
            obj.setImage((String)member.getValue());
          }
          break;
        case "username":
          if (member.getValue() instanceof String) {
            obj.setUsername((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(ProfileResponse obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(ProfileResponse obj, java.util.Map<String, Object> json) {
    if (obj.getBio() != null) {
      json.put("bio", obj.getBio());
    }
    json.put("following", obj.isFollowing());
    if (obj.getImage() != null) {
      json.put("image", obj.getImage());
    }
    if (obj.getUsername() != null) {
      json.put("username", obj.getUsername());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/TagsResponseConverter.java
package com.example.realworld.infrastructure.web.model.response;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.response.TagsResponse}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.response.TagsResponse} original class using Vert.x codegen.
 */
public class TagsResponseConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, TagsResponse obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "tags":
          if (member.getValue() instanceof JsonArray) {
            java.util.ArrayList<java.lang.String> list =  new java.util.ArrayList<>();
            ((Iterable<Object>)member.getValue()).forEach( item -> {
              if (item instanceof String)
                list.add((String)item);
            });
            obj.setTags(list);
          }
          break;
      }
    }
  }

  public static void toJson(TagsResponse obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(TagsResponse obj, java.util.Map<String, Object> json) {
    if (obj.getTags() != null) {
      JsonArray array = new JsonArray();
      obj.getTags().forEach(item -> array.add(item));
      json.put("tags", array);
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/generated/com/example/realworld/infrastructure/web/model/response/UserResponseConverter.java
package com.example.realworld.infrastructure.web.model.response;

import io.vertx.core.json.JsonObject;
import io.vertx.core.json.JsonArray;
import java.time.Instant;
import java.time.format.DateTimeFormatter;

/**
 * Converter for {@link com.example.realworld.infrastructure.web.model.response.UserResponse}.
 * NOTE: This class has been automatically generated from the {@link com.example.realworld.infrastructure.web.model.response.UserResponse} original class using Vert.x codegen.
 */
public class UserResponseConverter {

  public static void fromJson(Iterable<java.util.Map.Entry<String, Object>> json, UserResponse obj) {
    for (java.util.Map.Entry<String, Object> member : json) {
      switch (member.getKey()) {
        case "bio":
          if (member.getValue() instanceof String) {
            obj.setBio((String)member.getValue());
          }
          break;
        case "email":
          if (member.getValue() instanceof String) {
            obj.setEmail((String)member.getValue());
          }
          break;
        case "image":
          if (member.getValue() instanceof String) {
            obj.setImage((String)member.getValue());
          }
          break;
        case "token":
          if (member.getValue() instanceof String) {
            obj.setToken((String)member.getValue());
          }
          break;
        case "username":
          if (member.getValue() instanceof String) {
            obj.setUsername((String)member.getValue());
          }
          break;
      }
    }
  }

  public static void toJson(UserResponse obj, JsonObject json) {
    toJson(obj, json.getMap());
  }

  public static void toJson(UserResponse obj, java.util.Map<String, Object> json) {
    if (obj.getBio() != null) {
      json.put("bio", obj.getBio());
    }
    if (obj.getEmail() != null) {
      json.put("email", obj.getEmail());
    }
    if (obj.getImage() != null) {
      json.put("image", obj.getImage());
    }
    if (obj.getToken() != null) {
      json.put("token", obj.getToken());
    }
    if (obj.getUsername() != null) {
      json.put("username", obj.getUsername());
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/RealworldApplication.java
package com.example.realworld;

import com.example.realworld.infrastructure.vertx.configuration.VertxConfiguration;
import com.example.realworld.infrastructure.vertx.verticle.HttpVerticle;
import io.vertx.reactivex.core.Vertx;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;

import javax.annotation.PostConstruct;

@SpringBootApplication
@EnableConfigurationProperties(VertxConfiguration.class)
public class RealworldApplication {

  @Autowired private Vertx vertx;
  @Autowired private HttpVerticle httpVerticle;

  public static void main(String[] args) {
    SpringApplication.run(RealworldApplication.class, args);
  }

  @PostConstruct
  public void deployMainVerticle() {
    vertx.rxDeployVerticle(httpVerticle).blockingGet();
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/ApplicationService.java
package com.example.realworld.application;

class ApplicationService {

  boolean isCountResultGreaterThanZero(Long countResult) {
    return countResult > 0;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/ArticleServiceImpl.java
package com.example.realworld.application;

import com.example.realworld.application.data.ArticleData;
import com.example.realworld.application.data.ArticlesData;
import com.example.realworld.application.data.CommentData;
import com.example.realworld.application.data.ProfileData;
import com.example.realworld.domain.article.exception.ArticleAlreadyFavoritedException;
import com.example.realworld.domain.article.exception.ArticleAlreadyUnfavoritedException;
import com.example.realworld.domain.article.exception.ArticleNotFoundException;
import com.example.realworld.domain.article.model.*;
import com.example.realworld.domain.article.service.ArticleService;
import com.example.realworld.domain.profile.model.UsersFollowedRepository;
import com.example.realworld.domain.profile.service.ProfileService;
import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.domain.tag.service.TagService;
import com.example.realworld.domain.user.model.ModelValidator;
import com.example.realworld.domain.user.model.User;
import com.example.realworld.domain.user.service.UserService;
import io.reactivex.Completable;
import io.reactivex.Flowable;
import io.reactivex.Single;

import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

public class ArticleServiceImpl extends ApplicationService implements ArticleService {

  private static final int DEFAULT_LIMIT = 20;

  private ArticleRepository articleRepository;
  private UsersFollowedRepository usersFollowedRepository;
  private FavoritesRepository favoritesRepository;
  private CommentRepository commentRepository;
  private SlugProvider slugProvider;
  private ModelValidator modelValidator;
  private ProfileService profileService;
  private TagService tagService;
  private UserService userService;

  public ArticleServiceImpl(
      ArticleRepository articleRepository,
      UsersFollowedRepository usersFollowedRepository,
      FavoritesRepository favoritesRepository,
      CommentRepository commentRepository,
      SlugProvider slugProvider,
      ModelValidator modelValidator,
      ProfileService profileService,
      TagService tagService,
      UserService userService) {
    this.articleRepository = articleRepository;
    this.usersFollowedRepository = usersFollowedRepository;
    this.favoritesRepository = favoritesRepository;
    this.commentRepository = commentRepository;
    this.slugProvider = slugProvider;
    this.modelValidator = modelValidator;
    this.profileService = profileService;
    this.tagService = tagService;
    this.userService = userService;
  }

  @Override
  public Single<ArticlesData> findRecentArticles(String currentUserId, int offset, int limit) {
    return usersFollowedRepository
        .findRecentArticles(currentUserId, offset, getLimit(limit))
        .flattenAsFlowable(articles -> articles)
        .flatMapSingle(article -> toArticleData(article, currentUserId))
        .sorted(articleComparator())
        .toList()
        .flatMap(
            articles ->
                totalUserArticlesFollowed(currentUserId)
                    .map(articlesCount -> new ArticlesData(articles, articlesCount)));
  }

  private Single<ArticleData> toArticleData(Article article, String currentUserId) {
    return isFavorited(article.getId(), currentUserId)
        .flatMap(
            isFavorited ->
                favoritesCount(article.getId())
                    .flatMap(
                        favoritesCount ->
                            tagService
                                .findTagsByArticle(article.getId())
                                .flatMap(
                                    tags ->
                                        profileService
                                            .getProfile(
                                                article.getAuthor().getUsername(), currentUserId)
                                            .map(
                                                profileData ->
                                                    configArticleData(
                                                        article,
                                                        profileData,
                                                        tags,
                                                        isFavorited,
                                                        favoritesCount)))));
  }

  private ArticleData configArticleData(
      Article article,
      ProfileData authorProfile,
      List<Tag> tags,
      boolean isFavorited,
      Long favoritesCount) {
    ArticleData articleData = new ArticleData(article, authorProfile);
    articleData.setTagList(tags.stream().map(Tag::getName).collect(Collectors.toList()));
    articleData.setFavorited(isFavorited);
    articleData.setFavoritesCount(favoritesCount);
    return articleData;
  }

  @Override
  public Single<ArticleData> create(String currentUserId, NewArticle newArticle) {
    modelValidator.validate(newArticle);
    Article article = createFromNewArticle(currentUserId, newArticle);
    return validAndConfigSlug(article)
        .andThen(configTags(article, newArticle.getTags()))
        .andThen(articleRepository.store(article))
        .flatMap(this::configAuthor)
        .flatMap(persistedArticle -> toArticleData(persistedArticle, currentUserId));
  }

  private Single<Article> configAuthor(Article article) {
    return userService
        .findById(article.getAuthor().getId())
        .map(
            author -> {
              article.setAuthor(author);
              return article;
            });
  }

  @Override
  public Single<Long> totalUserArticlesFollowed(String currentUserId) {
    return usersFollowedRepository.totalUserArticlesFollowed(currentUserId);
  }

  @Override
  public Single<Long> totalArticles(
      List<String> tags, List<String> authors, List<String> favorited) {
    return articleRepository.totalArticles(tags, authors, favorited);
  }

  @Override
  public Single<ArticleData> findBySlug(String slug, String currentUserId) {
    return findBySlug(slug)
        .flatMap(this::configAuthor)
        .flatMap(article -> toArticleData(article, currentUserId));
  }

  @Override
  public Single<ArticleData> updateBySlug(
      String slug, String currentUserId, UpdateArticle updateArticle) {
    modelValidator.validate(updateArticle);
    return findBySlugAndAuthorId(slug, currentUserId)
        .flatMap(
            article ->
                configUpdateFields(article, updateArticle)
                    .flatMapCompletable(this::validAndConfigSlug)
                    .andThen(articleRepository.update(article))
                    .flatMap(this::configAuthor)
                    .flatMap(updatedArticle -> toArticleData(updatedArticle, currentUserId)));
  }

  @Override
  public Completable deleteArticleBySlugAndAuthorId(String slug, String currentUserId) {
    return findBySlugAndAuthorId(slug, currentUserId)
        .flatMapCompletable(
            article ->
                articleRepository.deleteByArticleIdAndAuthorId(article.getId(), currentUserId));
  }

  @Override
  public Single<CommentData> createCommentBySlug(
      String slug, String currentUserId, String commentBody) {
    return findBySlug(slug)
        .flatMap(
            article ->
                userService
                    .findById(currentUserId)
                    .flatMap(
                        commentAuthor ->
                            createComment(article, commentAuthor, commentBody)
                                .flatMap(
                                    comment ->
                                        commentRepository
                                            .store(comment)
                                            .flatMap(
                                                persistedComment ->
                                                    profileService
                                                        .getProfileById(commentAuthor.getId())
                                                        .map(
                                                            authorProfile ->
                                                                new CommentData(
                                                                    persistedComment,
                                                                    authorProfile))))));
  }

  @Override
  public Completable deleteCommentByIdAndAuthorId(String commentId, String currentUserId) {
    return commentRepository.deleteByCommentIdAndAuthorId(commentId, currentUserId);
  }

  @Override
  public Single<List<CommentData>> findCommentsBySlug(String slug, String currentUserId) {
    return findBySlug(slug)
        .flatMap(
            article ->
                commentRepository
                    .findCommentsByArticleId(article.getId())
                    .flattenAsFlowable(comments -> comments)
                    .flatMapSingle(
                        comment ->
                            profileService
                                .getProfile(comment.getAuthor().getUsername(), currentUserId)
                                .map(profileData -> new CommentData(comment, profileData)))
                    .toList());
  }

  @Override
  public Single<ArticleData> favoriteArticle(String slug, String currentUserId) {
    return findBySlug(slug)
        .flatMapCompletable(
            article ->
                validFavorited(article.getId(), currentUserId)
                    .andThen(favoritesRepository.store(article.getId(), currentUserId)))
        .andThen(findBySlug(slug, currentUserId));
  }

  @Override
  public Single<ArticleData> unfavoriteArticle(String slug, String currentUserId) {
    return findBySlug(slug)
        .flatMapCompletable(
            article ->
                validUnfavorited(article.getId(), currentUserId)
                    .andThen(
                        favoritesRepository.deleteByArticleAndAuthor(
                            article.getId(), currentUserId)))
        .andThen(findBySlug(slug, currentUserId));
  }

  private Completable validUnfavorited(String articleId, String currentUserId) {
    return isFavorited(articleId, currentUserId)
        .flatMapCompletable(
            isFavorited -> {
              if (!isFavorited) {
                throw new ArticleAlreadyUnfavoritedException();
              }
              return Completable.complete();
            });
  }

  private Completable validFavorited(String articleId, String currentUserId) {
    return isFavorited(articleId, currentUserId)
        .flatMapCompletable(
            isFavorited -> {
              if (isFavorited) {
                throw new ArticleAlreadyFavoritedException();
              }
              return Completable.complete();
            });
  }

  private Single<Comment> createComment(Article article, User author, String commentBody) {
    Comment comment = new Comment();
    comment.setArticle(article);
    comment.setAuthor(author);
    comment.setBody(commentBody);
    LocalDateTime now = LocalDateTime.now();
    comment.setCreatedAt(now);
    comment.setUpdatedAt(now);
    return Single.just(comment);
  }

  private Single<Article> configUpdateFields(Article article, UpdateArticle updateArticle) {
    article.setTitle(updateArticle.getTitle());
    article.setDescription(updateArticle.getDescription());
    article.setBody(updateArticle.getBody());
    return Single.just(article);
  }

  public Single<Article> findBySlug(String slug) {
    return articleRepository
        .findBySlug(slug)
        .map(article -> article.orElseThrow(ArticleNotFoundException::new));
  }

  public Single<Article> findBySlugAndAuthorId(String slug, String authorId) {
    return articleRepository
        .findBySlugAndAuthorId(slug, authorId)
        .map(article -> article.orElseThrow(ArticleNotFoundException::new));
  }

  @Override
  public Single<ArticlesData> findArticles(
      String currentUserId,
      int offset,
      int limit,
      List<String> tags,
      List<String> authors,
      List<String> favorited) {
    return articleRepository
        .findArticles(offset, getLimit(limit), tags, authors, favorited)
        .flattenAsFlowable(articles -> articles)
        .flatMapSingle(article -> toArticleData(article, currentUserId))
        .sorted(articleComparator())
        .toList()
        .flatMap(
            articles ->
                totalArticles(tags, authors, favorited)
                    .map(articlesCount -> new ArticlesData(articles, articlesCount)));
  }

  public Single<Boolean> isFavorited(String articleId, String currentUserId) {
    return favoritesRepository
        .countByArticleIdAndUserId(articleId, currentUserId)
        .map(this::isCountResultGreaterThanZero);
  }

  public Single<Long> favoritesCount(String articleId) {
    return favoritesRepository.countByArticleId(articleId);
  }

  private Completable validAndConfigSlug(Article article) {
    return Single.just(article.getId() != null)
        .flatMap(
            isArticleIdPresent -> {
              if (isArticleIdPresent) {
                return isSlugAlreadyExists(article.getSlug(), article.getId());
              } else {
                return isSlugAlreadyExists(article.getSlug());
              }
            })
        .flatMapCompletable(
            isSlugAlreadyExists -> configNewSlugIfExists(article, isSlugAlreadyExists));
  }

  private Completable configNewSlugIfExists(Article article, boolean isSlugAlreadyExists) {
    if (isSlugAlreadyExists) {
      article.setSlug(article.getSlug() + "_" + UUID.randomUUID().toString());
    }
    return Completable.complete();
  }

  private Completable configTags(Article article, List<String> tags) {
    return Flowable.fromIterable(tags)
        .flatMapCompletable(
            tagName ->
                tagService
                    .findTagByName(tagName)
                    .flatMap(persistedTag -> createTagIfNotExists(persistedTag, tagName))
                    .flatMapCompletable(
                        tag -> {
                          article.getTags().add(tag);
                          return Completable.complete();
                        }));
  }

  private Single<Tag> createTagIfNotExists(Optional<Tag> tagOptional, String tagName) {
    if (tagOptional.isPresent()) {
      return Single.just(tagOptional.get());
    } else {
      return tagService.create(tagName);
    }
  }

  private Single<Boolean> isSlugAlreadyExists(String slug) {
    return articleRepository.countBySlug(slug).map(this::isCountResultGreaterThanZero);
  }

  private Single<Boolean> isSlugAlreadyExists(String slug, String excludeArticleId) {
    return articleRepository
        .countBySlug(slug, excludeArticleId)
        .map(this::isCountResultGreaterThanZero);
  }

  private Comparator<ArticleData> articleComparator() {
    return (article1, article2) -> {
      if (article1.getCreatedAt().isBefore(article2.getCreatedAt())) {
        return 1;
      }
      if (article1.getCreatedAt().isAfter(article2.getCreatedAt())) {
        return -1;
      }
      return 0;
    };
  }

  private Article createFromNewArticle(String currentUserId, NewArticle newArticle) {
    Article article = new Article();
    article.setTitle(newArticle.getTitle());
    article.setSlug(slugProvider.slugify(article.getTitle()));
    article.setDescription(newArticle.getDescription());
    article.setBody(newArticle.getBody());
    article.setAuthor(new User(currentUserId));
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    return article;
  }

  private int getLimit(int limit) {
    return limit > 0 ? limit : DEFAULT_LIMIT;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/ProfileServiceImpl.java
package com.example.realworld.application;

import com.example.realworld.application.data.ProfileData;
import com.example.realworld.domain.profile.exception.SelfFollowException;
import com.example.realworld.domain.profile.service.ProfileService;
import com.example.realworld.domain.user.exception.UserAlreadyFollowedException;
import com.example.realworld.domain.user.service.UserService;
import io.reactivex.Completable;
import io.reactivex.Single;

public class ProfileServiceImpl extends ApplicationService implements ProfileService {

  private UserService userService;

  public ProfileServiceImpl(UserService userService) {
    this.userService = userService;
  }

  @Override
  public Single<ProfileData> getProfile(String username, String loggedUserId) {
    return userService
        .findByUsername(username)
        .flatMap(
            user ->
                isFollowing(loggedUserId, user.getId())
                    .flatMap(isFollowing -> Single.just(new ProfileData(user, isFollowing))));
  }

  @Override
  public Single<ProfileData> follow(String username, String loggedUserId) {
    return userService
        .findByUsername(username)
        .flatMap(
            user ->
                validSelfFollow(loggedUserId, user.getId())
                    .andThen(validAlreadyFollowing(loggedUserId, user.getId()))
                    .andThen(userService.follow(loggedUserId, user.getId()))
                    .andThen(getProfile(username, loggedUserId)));
  }

  private Completable validAlreadyFollowing(String currentUserId, String userFollowedId) {
    return isFollowing(currentUserId, userFollowedId)
        .flatMapCompletable(
            isFollowing -> {
              if (isFollowing) {
                throw new UserAlreadyFollowedException();
              }
              return Completable.complete();
            });
  }

  private Completable validSelfFollow(String loggedUserId, String userFollowedId) {
    return Completable.create(
        completableEmitter -> {
          if (loggedUserId.equals(userFollowedId)) {
            throw new SelfFollowException();
          }
          completableEmitter.onComplete();
        });
  }

  @Override
  public Single<ProfileData> unfollow(String username, String loggedUserId) {
    return userService
        .findByUsername(username)
        .flatMap(
            user ->
                userService
                    .unfollow(loggedUserId, user.getId())
                    .andThen(getProfile(username, loggedUserId)));
  }

  @Override
  public Single<ProfileData> getProfileById(String currentUserId) {
    return userService.findById(currentUserId).map(ProfileData::new);
  }

  private Single<Boolean> isFollowing(String currentUserId, String followedUserId) {
    return Single.just(currentUserId != null)
        .flatMap(
            isLoggedUserIdPresent -> {
              if (isLoggedUserIdPresent) {
                return userService.isFollowing(currentUserId, followedUserId);
              } else {
                return Single.just(false);
              }
            });
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/TagServiceImpl.java
package com.example.realworld.application;

import com.example.realworld.domain.tag.exception.TagAlreadyExistsException;
import com.example.realworld.domain.tag.model.ArticlesTagsRepository;
import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.domain.tag.model.TagRepository;
import com.example.realworld.domain.tag.service.TagService;
import com.example.realworld.domain.user.model.ModelValidator;
import io.reactivex.Completable;
import io.reactivex.Single;

import java.util.List;
import java.util.Optional;

public class TagServiceImpl extends ApplicationService implements TagService {

  private TagRepository tagRepository;
  private ArticlesTagsRepository articlesTagsRepository;
  private ModelValidator modelValidator;

  public TagServiceImpl(
      TagRepository tagRepository,
      ArticlesTagsRepository articlesTagsRepository,
      ModelValidator modelValidator) {
    this.tagRepository = tagRepository;
    this.articlesTagsRepository = articlesTagsRepository;
    this.modelValidator = modelValidator;
  }

  @Override
  public Single<Tag> create(String tagName) {
    Tag tag = new Tag();
    tag.setName(tagName);
    return validTagName(tag.getName()).andThen(tagRepository.store(tag));
  }

  @Override
  public Single<List<Tag>> findTagsByArticle(String articleId) {
    return articlesTagsRepository.findTagsByArticle(articleId);
  }

  @Override
  public Single<Optional<Tag>> findTagByName(String name) {
    return tagRepository.findByName(name);
  }

  @Override
  public Single<List<Tag>> findAll() {
    return tagRepository.findAll();
  }

  private Completable validTagName(String tagName) {
    return isTagNameExists(tagName)
        .flatMapCompletable(
            isTagNameExists -> {
              if (isTagNameExists) {
                throw new TagAlreadyExistsException();
              }
              return Completable.complete();
            });
  }

  private Single<Boolean> isTagNameExists(String tagName) {
    return tagRepository.countByName(tagName).map(this::isCountResultGreaterThanZero);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/UserServiceImpl.java
package com.example.realworld.application;

import com.example.realworld.domain.profile.model.UsersFollowedRepository;
import com.example.realworld.domain.user.exception.EmailAlreadyExistsException;
import com.example.realworld.domain.user.exception.InvalidLoginException;
import com.example.realworld.domain.user.exception.UserNotFoundException;
import com.example.realworld.domain.user.exception.UsernameAlreadyExistsException;
import com.example.realworld.domain.user.model.*;
import com.example.realworld.domain.user.service.UserService;
import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.Single;

import java.util.Optional;
import java.util.UUID;

public class UserServiceImpl extends ApplicationService implements UserService {

  private UserRepository userRepository;
  private UsersFollowedRepository usersFollowedRepository;
  private HashProvider hashProvider;
  private TokenProvider tokenProvider;
  private ModelValidator modelValidator;

  public UserServiceImpl(
      UserRepository userRepository,
      UsersFollowedRepository usersFollowedRepository,
      HashProvider hashProvider,
      TokenProvider tokenProvider,
      ModelValidator modelValidator) {
    this.userRepository = userRepository;
    this.usersFollowedRepository = usersFollowedRepository;
    this.hashProvider = hashProvider;
    this.tokenProvider = tokenProvider;
    this.modelValidator = modelValidator;
  }

  @Override
  public Single<User> create(NewUser newUser) {
    modelValidator.validate(newUser);
    User user = new User();
    user.setId(UUID.randomUUID().toString());
    user.setUsername(newUser.getUsername());
    user.setEmail(newUser.getEmail());
    user.setPassword(hashProvider.hashPassword(newUser.getPassword()));
    user.setToken(tokenProvider.generateToken(user.getId()));

    return validUsername(user.getUsername())
        .andThen(validEmail(user.getEmail()))
        .andThen(
            userRepository
                .store(user)
                .flatMap(
                    persistedUser ->
                        userRepository.findById(persistedUser.getId()).map(this::extractUser)));
  }

  private Completable validUsername(String username) {
    return isUsernameExists(username)
        .flatMapCompletable(
            isUsernameExists -> {
              if (isUsernameExists) {
                throw new UsernameAlreadyExistsException();
              }
              return CompletableObserver::onComplete;
            });
  }

  private Completable validEmail(String email) {
    return isEmailAlreadyExists(email)
        .flatMapCompletable(
            isEmailAlreadyExists -> {
              if (isEmailAlreadyExists) {
                throw new EmailAlreadyExistsException();
              }
              return CompletableObserver::onComplete;
            });
  }

  private User extractUser(Optional<User> userOptional) {
    return userOptional.orElseThrow(UserNotFoundException::new);
  }

  @Override
  public Single<User> login(Login login) {
    modelValidator.validate(login);
    return userRepository
        .findUserByEmail(login.getEmail())
        .flatMap(
            userOptional -> {
              if (!userOptional.isPresent()
                  || isPasswordInvalid(login.getPassword(), userOptional.get())) {
                throw new InvalidLoginException();
              }
              User user = userOptional.get();
              user.setToken(tokenProvider.generateToken(user.getId()));
              return userRepository.update(user);
            });
  }

  @Override
  public Single<User> findById(String userId) {
    return userRepository
        .findById(userId)
        .map(userOptional -> userOptional.orElseThrow(UserNotFoundException::new));
  }

  @Override
  public Single<User> update(UpdateUser updateUser, String exclusionId) {
    modelValidator.validate(updateUser);
    return checkValidations(updateUser, exclusionId)
        .andThen(
            userRepository
                .update(updateUser.toUser(exclusionId))
                .flatMap(user -> userRepository.findById(user.getId()).map(this::extractUser)));
  }

  @Override
  public Single<User> findByUsername(String username) {
    return userRepository
        .findUserByUsername(username)
        .map(userOptional -> userOptional.orElseThrow(UserNotFoundException::new));
  }

  @Override
  public Single<Boolean> isFollowing(String currentUserId, String followedUserId) {
    return usersFollowedRepository
        .countByCurrentUserIdAndFollowedUserId(currentUserId, followedUserId)
        .map(this::isCountResultGreaterThanZero);
  }

  @Override
  public Completable follow(String currentUserId, String followedUserId) {
    return usersFollowedRepository.follow(currentUserId, followedUserId);
  }

  @Override
  public Completable unfollow(String currentUserId, String followedUserId) {
    return usersFollowedRepository.unfollow(currentUserId, followedUserId);
  }

  private Completable checkValidations(UpdateUser updateUser, String exclusionId) {
    return Single.just(isPresent(updateUser.getUsername()))
        .flatMap(
            usernameIsPresent -> {
              if (usernameIsPresent) {
                return isUsernameExists(updateUser.getUsername(), exclusionId);
              }
              return Single.just(false);
            })
        .flatMap(
            isUsernameExists -> {
              if (isUsernameExists) {
                throw new UsernameAlreadyExistsException();
              }
              return Single.just(isPresent(updateUser.getEmail()));
            })
        .flatMap(
            emailIsPresent -> {
              if (emailIsPresent) {
                return isEmailAlreadyExists(updateUser.getEmail(), exclusionId);
              }
              return Single.just(false);
            })
        .flatMapCompletable(
            isEmailAlreadyExists -> {
              if (isEmailAlreadyExists) {
                throw new EmailAlreadyExistsException();
              }
              return Completable.complete();
            });
  }

  private boolean isPasswordInvalid(String password, User user) {
    return !hashProvider.isPasswordValid(password, user.getPassword());
  }

  private Single<Boolean> isUsernameExists(String username) {
    return userRepository.countByUsername(username).map(this::isCountResultGreaterThanZero);
  }

  private Single<Boolean> isUsernameExists(String username, String exclusionId) {
    return userRepository
        .countByUsername(username, exclusionId)
        .map(this::isCountResultGreaterThanZero);
  }

  private Single<Boolean> isEmailAlreadyExists(String email) {
    return userRepository.countByEmail(email).map(this::isCountResultGreaterThanZero);
  }

  private Single<Boolean> isEmailAlreadyExists(String email, String excludeUserId) {
    return userRepository
        .countByEmail(email, excludeUserId)
        .map(this::isCountResultGreaterThanZero);
  }

  private boolean isPresent(String property) {
    return property != null && !property.isEmpty();
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/constants/ValidationMessages.java
package com.example.realworld.application.constants;

public class ValidationMessages {

  public static final String USERNAME_MUST_BE_NOT_BLANK = "username must be not blank";
  public static final String EMAIL_MUST_BE_NOT_BLANK = "email must be not blank";
  public static final String PASSWORD_MUST_BE_NOT_BLANK = "password must be not blank";
  public static final String TITLE_MUST_BE_NOT_BLANK = "title must not be blank";
  public static final String DESCRIPTION_MUST_BE_NOT_BLANK = "description must not be blank";
  public static final String BODY_MUST_BE_NOT_BLANK = "body must not be blank";
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/ArticleData.java
package com.example.realworld.application.data;

import com.example.realworld.domain.article.model.Article;
import com.example.realworld.domain.tag.model.Tag;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

public class ArticleData {

  private String slug;
  private String title;
  private String description;
  private String body;
  private List<String> tagList;
  private boolean favorited;
  private long favoritesCount;
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
  private ProfileData author;

  public ArticleData(Article article, ProfileData author) {
    this.slug = article.getSlug();
    this.title = article.getTitle();
    this.description = article.getDescription();
    this.body = article.getBody();
    this.createdAt = article.getCreatedAt();
    this.updatedAt = article.getUpdatedAt();
    this.author = author;
  }

  public ArticleData(Article article, List<Tag> tags) {
    this.slug = article.getSlug();
    this.title = article.getTitle();
    this.description = article.getDescription();
    this.body = article.getBody();
    this.createdAt = article.getCreatedAt();
    this.updatedAt = article.getUpdatedAt();
    this.tagList = tags.stream().map(Tag::getName).collect(Collectors.toList());
  }

  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public List<String> getTagList() {
    return tagList;
  }

  public void setTagList(List<String> tagList) {
    this.tagList = tagList;
  }

  public boolean isFavorited() {
    return favorited;
  }

  public void setFavorited(boolean favorited) {
    this.favorited = favorited;
  }

  public long getFavoritesCount() {
    return favoritesCount;
  }

  public void setFavoritesCount(long favoritesCount) {
    this.favoritesCount = favoritesCount;
  }

  public LocalDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public LocalDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(LocalDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public ProfileData getAuthor() {
    return author;
  }

  public void setAuthor(ProfileData author) {
    this.author = author;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/ArticlesData.java
package com.example.realworld.application.data;

import java.util.List;

public class ArticlesData {
  private List<ArticleData> articles;
  private long articlesCount;

  public ArticlesData(List<ArticleData> articles, long articlesCount) {
    this.articles = articles;
    this.articlesCount = articlesCount;
  }

  public List<ArticleData> getArticles() {
    return articles;
  }

  public void setArticles(List<ArticleData> articles) {
    this.articles = articles;
  }

  public long getArticlesCount() {
    return articlesCount;
  }

  public void setArticlesCount(long articlesCount) {
    this.articlesCount = articlesCount;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/CommentData.java
package com.example.realworld.application.data;

import com.example.realworld.domain.article.model.Comment;

import java.time.LocalDateTime;

public class CommentData {

  private String id;
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
  private String body;
  private ProfileData author;

  public CommentData() {}

  public CommentData(Comment comment, ProfileData author) {
    this.id = comment.getId();
    this.createdAt = comment.getCreatedAt();
    this.updatedAt = comment.getUpdatedAt();
    this.body = comment.getBody();
    this.author = author;
  }

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public LocalDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public LocalDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(LocalDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public ProfileData getAuthor() {
    return author;
  }

  public void setAuthor(ProfileData author) {
    this.author = author;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/application/data/ProfileData.java
package com.example.realworld.application.data;

import com.example.realworld.domain.user.model.User;

public class ProfileData {

  private String username;
  private String bio;
  private String image;
  private boolean following;

  public ProfileData(User user, boolean isFollowing) {
    this(user);
    this.following = isFollowing;
  }

  public ProfileData(User user) {
    this.username = user.getUsername();
    this.bio = user.getBio();
    this.image = user.getImage();
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public boolean isFollowing() {
    return following;
  }

  public void setFollowing(boolean following) {
    this.following = following;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/exception/ArticleAlreadyFavoritedException.java
package com.example.realworld.domain.article.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class ArticleAlreadyFavoritedException extends BusinessException {

  public ArticleAlreadyFavoritedException() {
    super("article already favorited");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/exception/ArticleAlreadyUnfavoritedException.java
package com.example.realworld.domain.article.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class ArticleAlreadyUnfavoritedException extends BusinessException {

  public ArticleAlreadyUnfavoritedException() {
    super("article already unfavorited");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/exception/ArticleNotFoundException.java
package com.example.realworld.domain.article.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class ArticleNotFoundException extends BusinessException {

  public ArticleNotFoundException() {
    super("article not found");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/Article.java
package com.example.realworld.domain.article.model;

import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.domain.user.model.User;

import java.time.LocalDateTime;
import java.util.LinkedList;
import java.util.List;

public class Article {

  private String id;
  private String slug;
  private String title;
  private String description;
  private String body;
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
  private User author;
  private List<Tag> tags;
  private boolean isFavorited;
  private Long favoritesCount;

  public Article() {
    this.tags = new LinkedList<>();
  }

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public LocalDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public LocalDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(LocalDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public User getAuthor() {
    return author;
  }

  public void setAuthor(User author) {
    this.author = author;
  }

  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  public boolean isFavorited() {
    return isFavorited;
  }

  public void setFavorited(boolean favorited) {
    isFavorited = favorited;
  }

  public Long getFavoritesCount() {
    return favoritesCount;
  }

  public void setFavoritesCount(Long favoritesCount) {
    this.favoritesCount = favoritesCount;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/ArticleRepository.java
package com.example.realworld.domain.article.model;

import io.reactivex.Completable;
import io.reactivex.Single;

import java.util.List;
import java.util.Optional;

public interface ArticleRepository {
  Single<Long> countBySlug(String slug);

  Single<Long> countBySlug(String slug, String excludeArticleId);

  Single<Article> store(Article article);

  Single<List<Article>> findArticles(
      int offset, int limit, List<String> tags, List<String> authors, List<String> favorited);

  Single<Long> totalArticles(List<String> tags, List<String> authors, List<String> favorited);

  Single<Optional<Article>> findBySlug(String slug);

  Single<Article> update(Article article);

  Completable deleteByArticleIdAndAuthorId(String articleId, String authorId);

  Single<Optional<Article>> findBySlugAndAuthorId(String slug, String authorId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/Comment.java
package com.example.realworld.domain.article.model;

import com.example.realworld.domain.user.model.User;

import java.time.LocalDateTime;

public class Comment {

  private String id;
  private String body;
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
  private User author;
  private Article article;

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public LocalDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public LocalDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(LocalDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public User getAuthor() {
    return author;
  }

  public void setAuthor(User author) {
    this.author = author;
  }

  public Article getArticle() {
    return article;
  }

  public void setArticle(Article article) {
    this.article = article;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/CommentRepository.java
package com.example.realworld.domain.article.model;

import io.reactivex.Completable;
import io.reactivex.Single;

import java.util.List;

public interface CommentRepository {
  Single<Comment> store(Comment comment);

  Completable deleteByCommentIdAndAuthorId(String commentId, String authorId);

  Single<List<Comment>> findCommentsByArticleId(String articleId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/FavoritesRepository.java
package com.example.realworld.domain.article.model;

import io.reactivex.Completable;
import io.reactivex.Single;

public interface FavoritesRepository {
  Single<Long> countByArticleIdAndUserId(String articleId, String userId);

  Single<Long> countByArticleId(String articleId);

  Completable deleteByArticle(String articleId);

  Completable store(String articleId, String authorId);

  Completable deleteByArticleAndAuthor(String articleId, String authorId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/NewArticle.java
package com.example.realworld.domain.article.model;

import com.example.realworld.application.constants.ValidationMessages;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import java.util.List;

public class NewArticle {

  @NotBlank(message = ValidationMessages.TITLE_MUST_BE_NOT_BLANK)
  private String title;

  @NotBlank(message = ValidationMessages.DESCRIPTION_MUST_BE_NOT_BLANK)
  private String description;

  @NotBlank(message = ValidationMessages.BODY_MUST_BE_NOT_BLANK)
  private String body;

  @NotEmpty private List<String> tags;

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/SlugProvider.java
package com.example.realworld.domain.article.model;

public interface SlugProvider {
  String slugify(String text);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/model/UpdateArticle.java
package com.example.realworld.domain.article.model;

import com.example.realworld.infrastructure.web.validation.constraint.AtLeastOneFieldMustBeNotNull;

@AtLeastOneFieldMustBeNotNull
public class UpdateArticle {

  private String title;

  private String description;

  private String body;

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/article/service/ArticleService.java
package com.example.realworld.domain.article.service;

import com.example.realworld.application.data.ArticleData;
import com.example.realworld.application.data.ArticlesData;
import com.example.realworld.application.data.CommentData;
import com.example.realworld.domain.article.model.NewArticle;
import com.example.realworld.domain.article.model.UpdateArticle;
import io.reactivex.Completable;
import io.reactivex.Single;

import java.util.List;

public interface ArticleService {

  Single<ArticlesData> findRecentArticles(String currentUserId, int offset, int limit);

  Single<ArticleData> create(String currentUserId, NewArticle newArticle);

  Single<Long> totalUserArticlesFollowed(String currentUserId);

  Single<ArticlesData> findArticles(
      String currentUserId,
      int offset,
      int limit,
      List<String> tags,
      List<String> authors,
      List<String> favorited);

  Single<Long> totalArticles(List<String> tags, List<String> authors, List<String> favorited);

  Single<ArticleData> findBySlug(String slug, String currentUserId);

  Single<ArticleData> updateBySlug(String slug, String currentUserId, UpdateArticle updateArticle);

  Completable deleteArticleBySlugAndAuthorId(String slug, String currentUserId);

  Single<CommentData> createCommentBySlug(String slug, String currentUserId, String commentBody);

  Completable deleteCommentByIdAndAuthorId(String commentId, String currentUserId);

  Single<List<CommentData>> findCommentsBySlug(String slug, String currentUserId);

  Single<ArticleData> favoriteArticle(String slug, String currentUserId);

  Single<ArticleData> unfavoriteArticle(String slug, String currentUserId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/general/exception/BusinessException.java
package com.example.realworld.domain.general.exception;

import java.util.LinkedList;
import java.util.List;

public class BusinessException extends RuntimeException {

  private List<String> messages;

  public BusinessException() {
    this.messages = new LinkedList<>();
  }

  public BusinessException(String message) {
    this();
    this.messages.add(message);
  }

  public BusinessException(List<String> messages) {
    this.messages = messages;
  }

  public boolean haveMessages() {
    return this.messages != null && this.getMessages().size() > 0;
  }

  public List<String> getMessages() {
    return messages;
  }

  public void setMessages(List<String> messages) {
    this.messages = messages;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/profile/exception/SelfFollowException.java
package com.example.realworld.domain.profile.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class SelfFollowException extends BusinessException {

  public SelfFollowException() {
    super("self follow is not allowed");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/profile/model/UsersFollowedRepository.java
package com.example.realworld.domain.profile.model;

import com.example.realworld.domain.article.model.Article;
import io.reactivex.Completable;
import io.reactivex.Single;

import java.util.List;

public interface UsersFollowedRepository {
  Single<Long> countByCurrentUserIdAndFollowedUserId(String currentUserId, String userFollowedId);

  Completable follow(String currentUserId, String userFollowedId);

  Completable unfollow(String currentUserId, String userFollowedId);

  Single<List<Article>> findRecentArticles(String currentUserId, int offset, int limit);

  Single<Long> totalUserArticlesFollowed(String currentUserId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/profile/service/ProfileService.java
package com.example.realworld.domain.profile.service;

import com.example.realworld.application.data.ProfileData;
import io.reactivex.Single;

public interface ProfileService {

  Single<ProfileData> getProfile(String username, String loggedUserId);

  Single<ProfileData> follow(String username, String loggedUserId);

  Single<ProfileData> unfollow(String username, String loggedUserId);

  Single<ProfileData> getProfileById(String currentUserId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/exception/TagAlreadyExistsException.java
package com.example.realworld.domain.tag.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class TagAlreadyExistsException extends BusinessException {

  public TagAlreadyExistsException() {
    super("tag already exists");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/exception/TagNotFoundException.java
package com.example.realworld.domain.tag.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class TagNotFoundException extends BusinessException {

  public TagNotFoundException() {
    super("tag not found");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/model/ArticlesTagsRepository.java
package com.example.realworld.domain.tag.model;

import com.example.realworld.domain.article.model.Article;
import io.reactivex.Completable;
import io.reactivex.Single;

import java.util.List;

public interface ArticlesTagsRepository {
  Single<List<Tag>> findTagsByArticle(String articleId);

  Completable tagArticle(Tag tag, Article article);

  Completable deleteByArticle(String articleId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/model/Tag.java
package com.example.realworld.domain.tag.model;

public class Tag {
  private String id;
  private String name;

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/model/TagRepository.java
package com.example.realworld.domain.tag.model;

import io.reactivex.Single;

import java.util.List;
import java.util.Optional;

public interface TagRepository {
  Single<Tag> store(Tag tag);

  Single<Long> countByName(String name);

  Single<Optional<Tag>> findByName(String name);

  Single<List<Tag>> findAll();
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/tag/service/TagService.java
package com.example.realworld.domain.tag.service;

import com.example.realworld.domain.tag.model.Tag;
import io.reactivex.Single;

import java.util.List;
import java.util.Optional;

public interface TagService {

  Single<Tag> create(String tagName);

  Single<List<Tag>> findTagsByArticle(String articleId);

  Single<Optional<Tag>> findTagByName(String name);

  Single<List<Tag>> findAll();
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/EmailAlreadyExistsException.java
package com.example.realworld.domain.user.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class EmailAlreadyExistsException extends BusinessException {

  public EmailAlreadyExistsException() {
    super("email already exists");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/InvalidLoginException.java
package com.example.realworld.domain.user.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class InvalidLoginException extends BusinessException {}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/InvalidPasswordException.java
package com.example.realworld.domain.user.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class InvalidPasswordException extends BusinessException {}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/UserAlreadyFollowedException.java
package com.example.realworld.domain.user.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class UserAlreadyFollowedException extends BusinessException {
  public UserAlreadyFollowedException() {
    super("user already followed");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/UsernameAlreadyExistsException.java
package com.example.realworld.domain.user.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class UsernameAlreadyExistsException extends BusinessException {

  public UsernameAlreadyExistsException() {
    super("username already exists");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/exception/UserNotFoundException.java
package com.example.realworld.domain.user.exception;

import com.example.realworld.domain.general.exception.BusinessException;

public class UserNotFoundException extends BusinessException {}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/HashProvider.java
package com.example.realworld.domain.user.model;

public interface HashProvider {
  String hashPassword(String plainPassword);

  boolean isPasswordValid(String plainText, String hashed);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/Login.java
package com.example.realworld.domain.user.model;

import com.example.realworld.application.constants.ValidationMessages;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;

public class Login {

  @Email
  @NotBlank(message = ValidationMessages.EMAIL_MUST_BE_NOT_BLANK)
  private String email;

  @NotBlank(message = ValidationMessages.PASSWORD_MUST_BE_NOT_BLANK)
  private String password;

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/ModelValidator.java
package com.example.realworld.domain.user.model;

public interface ModelValidator {
  <T> void validate(T model);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/NewUser.java
package com.example.realworld.domain.user.model;

import com.example.realworld.application.constants.ValidationMessages;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;

public class NewUser {

  @NotBlank(message = ValidationMessages.USERNAME_MUST_BE_NOT_BLANK)
  private String username;

  @Email
  @NotBlank(message = ValidationMessages.EMAIL_MUST_BE_NOT_BLANK)
  private String email;

  @NotBlank(message = ValidationMessages.PASSWORD_MUST_BE_NOT_BLANK)
  private String password;

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/TokenProvider.java
package com.example.realworld.domain.user.model;

public interface TokenProvider {
  String generateToken(String id);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/UpdateUser.java
package com.example.realworld.domain.user.model;

import com.example.realworld.application.constants.ValidationMessages;
import com.example.realworld.infrastructure.web.validation.constraint.AtLeastOneFieldMustBeNotNull;

import javax.validation.constraints.Email;
import javax.validation.constraints.Pattern;

@AtLeastOneFieldMustBeNotNull
public class UpdateUser {

  @Pattern(regexp = "\\A(?!\\s*\\Z).+", message = ValidationMessages.USERNAME_MUST_BE_NOT_BLANK)
  private String username;

  private String bio;
  private String image;
  @Email private String email;

  public User toUser(String userId) {
    User user = new User();
    user.setId(userId);
    user.setUsername(this.username);
    user.setBio(this.bio);
    user.setImage(this.image);
    user.setEmail(this.email);
    return user;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/User.java
package com.example.realworld.domain.user.model;

public class User {

  private String id;
  private String username;
  private String bio;
  private String image;
  private String password;
  private String email;
  private String token;

  public User() {}

  public User(String id) {
    this.id = id;
  }

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/model/UserRepository.java
package com.example.realworld.domain.user.model;

import io.reactivex.Single;

import java.util.Optional;

public interface UserRepository {
  Single<User> store(User user);

  Single<Long> countByUsername(String username);

  Single<Long> countByUsername(String username, String exclusionId);

  Single<Long> countByEmail(String email);

  Single<Long> countByEmail(String email, String excludeUserId);

  Single<Optional<User>> findById(String id);

  Single<Optional<User>> findUserByEmail(String email);

  Single<User> update(User user);

  Single<Optional<User>> findUserByUsername(String username);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/domain/user/service/UserService.java
package com.example.realworld.domain.user.service;

import com.example.realworld.domain.user.model.Login;
import com.example.realworld.domain.user.model.NewUser;
import com.example.realworld.domain.user.model.UpdateUser;
import com.example.realworld.domain.user.model.User;
import io.reactivex.Completable;
import io.reactivex.Single;

public interface UserService {

  Single<User> create(NewUser newUser);

  Single<User> login(Login login);

  Single<User> findById(String userId);

  Single<User> update(UpdateUser updateUser, String excludeUserId);

  Single<User> findByUsername(String username);

  Single<Boolean> isFollowing(String currentUserId, String followedUserId);

  Completable follow(String currentUserId, String followedUserId);

  Completable unfollow(String currentUserId, String followedUserId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/configuration/RealworldApplicationConfiguration.java
package com.example.realworld.infrastructure.configuration;

import com.example.realworld.application.ArticleServiceImpl;
import com.example.realworld.application.ProfileServiceImpl;
import com.example.realworld.application.TagServiceImpl;
import com.example.realworld.application.UserServiceImpl;
import com.example.realworld.domain.article.model.ArticleRepository;
import com.example.realworld.domain.article.model.CommentRepository;
import com.example.realworld.domain.article.model.FavoritesRepository;
import com.example.realworld.domain.article.model.SlugProvider;
import com.example.realworld.domain.article.service.ArticleService;
import com.example.realworld.domain.profile.model.UsersFollowedRepository;
import com.example.realworld.domain.profile.service.ProfileService;
import com.example.realworld.domain.tag.model.ArticlesTagsRepository;
import com.example.realworld.domain.tag.model.TagRepository;
import com.example.realworld.domain.tag.service.TagService;
import com.example.realworld.domain.user.model.HashProvider;
import com.example.realworld.domain.user.model.ModelValidator;
import com.example.realworld.domain.user.model.TokenProvider;
import com.example.realworld.domain.user.model.UserRepository;
import com.example.realworld.domain.user.service.UserService;
import com.example.realworld.infrastructure.vertx.configuration.VertxConfiguration;
import com.example.realworld.infrastructure.vertx.proxy.ArticleOperations;
import com.example.realworld.infrastructure.vertx.proxy.ProfileOperations;
import com.example.realworld.infrastructure.vertx.proxy.TagsOperations;
import com.example.realworld.infrastructure.vertx.proxy.UserOperations;
import com.example.realworld.infrastructure.vertx.proxy.impl.ArticleOperationsImpl;
import com.example.realworld.infrastructure.vertx.proxy.impl.ProfileOperationsImpl;
import com.example.realworld.infrastructure.vertx.proxy.impl.TagsOperationsImpl;
import com.example.realworld.infrastructure.vertx.proxy.impl.UserOperationsImpl;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.github.slugify.Slugify;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.auth.PubSecKeyOptions;
import io.vertx.ext.auth.jwt.JWTAuthOptions;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.auth.jwt.JWTAuth;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.serviceproxy.ServiceBinder;
import io.vertx.serviceproxy.ServiceProxyBuilder;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RealworldApplicationConfiguration {

  @Bean
  public UserService userService(
      UserRepository userRepository,
      UsersFollowedRepository usersFollowedRepository,
      HashProvider cryptographyService,
      TokenProvider tokenProvider,
      ModelValidator modelValidator) {
    return new UserServiceImpl(
        userRepository,
        usersFollowedRepository,
        cryptographyService,
        tokenProvider,
        modelValidator);
  }

  @Bean
  public ProfileService profileService(UserService userService) {
    return new ProfileServiceImpl(userService);
  }

  @Bean
  public ArticleService articleService(
      ArticleRepository articleRepository,
      UsersFollowedRepository usersFollowedRepository,
      FavoritesRepository favoritesRepository,
      CommentRepository commentRepository,
      SlugProvider slugProvider,
      ModelValidator modelValidator,
      ProfileService profileService,
      TagService tagService,
      UserService userService) {
    return new ArticleServiceImpl(
        articleRepository,
        usersFollowedRepository,
        favoritesRepository,
        commentRepository,
        slugProvider,
        modelValidator,
        profileService,
        tagService,
        userService);
  }

  @Bean
  public TagService tagService(
      TagRepository tagRepository,
      ArticlesTagsRepository articlesTagsRepository,
      ModelValidator modelValidator) {
    return new TagServiceImpl(tagRepository, articlesTagsRepository, modelValidator);
  }

  @Bean
  public Vertx vertx() {
    return Vertx.vertx();
  }

  @Bean
  public JDBCClient jdbcClient(Vertx vertx, VertxConfiguration vertxConfiguration) {
    VertxConfiguration.Database database = vertxConfiguration.getDatabase();
    JsonObject dataBaseConfig = new JsonObject();
    dataBaseConfig.put("url", database.getUrl());
    dataBaseConfig.put("driver_class", database.getDriverClass());
    dataBaseConfig.put("max_pool_size", database.getMaxPoolSize());
    dataBaseConfig.put("user", database.getUser());
    dataBaseConfig.put("password", database.getPassword());
    return JDBCClient.createShared(vertx, dataBaseConfig);
  }

  @Bean
  public JWTAuth jwtAuth(Vertx vertx, VertxConfiguration vertxConfiguration) {
    VertxConfiguration.Jwt jwt = vertxConfiguration.getJwt();
    PubSecKeyOptions pubSecKeyOptions = new PubSecKeyOptions();
    pubSecKeyOptions.setAlgorithm(jwt.getAlgorithm());
    pubSecKeyOptions.setPublicKey(jwt.getSecret());
    pubSecKeyOptions.setSymmetric(true);
    JWTAuthOptions jwtAuthOptions = new JWTAuthOptions();
    jwtAuthOptions.addPubSecKey(pubSecKeyOptions);
    return JWTAuth.create(vertx, jwtAuthOptions);
  }

  @Bean("wrapUnwrapRootValueObjectMapper")
  public ObjectMapper wrapUnwrapRootValueObjectMapper() {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);
    objectMapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);
    objectMapper.registerModule(new JavaTimeModule());
    return objectMapper;
  }

  @Bean("defaultObjectMapper")
  public ObjectMapper defaultObjectMapper() {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.registerModule(new JavaTimeModule());
    return objectMapper;
  }

  @Bean
  public Slugify slugify() {
    return new Slugify();
  }

  @Bean
  public UserOperations userOperations(
      Vertx vertx,
      UserService userService,
      @Qualifier("defaultObjectMapper") ObjectMapper objectMapper) {
    return registerServiceAndCreateProxy(
        vertx,
        UserOperations.class,
        UserOperations.SERVICE_ADDRESS,
        new UserOperationsImpl(userService, objectMapper));
  }

  @Bean
  public ProfileOperations profileOperations(
      Vertx vertx,
      ProfileService profileService,
      @Qualifier("defaultObjectMapper") ObjectMapper objectMapper) {
    return registerServiceAndCreateProxy(
        vertx,
        ProfileOperations.class,
        ProfileOperations.SERVICE_ADDRESS,
        new ProfileOperationsImpl(profileService, objectMapper));
  }

  @Bean
  public ArticleOperations articleOperations(
      Vertx vertx,
      ArticleService articleService,
      @Qualifier("defaultObjectMapper") ObjectMapper objectMapper) {
    return registerServiceAndCreateProxy(
        vertx,
        ArticleOperations.class,
        ArticleOperations.SERVICE_ADDRESS,
        new ArticleOperationsImpl(articleService, objectMapper));
  }

  @Bean
  public TagsOperations tagsOperations(
      Vertx vertx,
      TagService tagService,
      @Qualifier("defaultObjectMapper") ObjectMapper objectMapper) {
    return registerServiceAndCreateProxy(
        vertx,
        TagsOperations.class,
        TagsOperations.SERVICE_ADDRESS,
        new TagsOperationsImpl(tagService, objectMapper));
  }

  private <T> T registerServiceAndCreateProxy(
      Vertx vertx, Class<T> clazz, String address, T instance) {
    registerProxy(vertx, clazz, address, instance);
    return createProxy(vertx, clazz, address);
  }

  private <T> void registerProxy(Vertx vertx, Class<T> clazz, String address, T instance) {
    new ServiceBinder(vertx.getDelegate()).setAddress(address).register(clazz, instance);
  }

  private <T> T createProxy(Vertx vertx, Class<T> clazz, String address) {
    return new ServiceProxyBuilder(vertx.getDelegate()).setAddress(address).build(clazz);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/ArticleRepositoryJDBC.java
package com.example.realworld.infrastructure.persistence;

import com.example.realworld.domain.article.model.Article;
import com.example.realworld.domain.article.model.ArticleRepository;
import com.example.realworld.domain.article.model.FavoritesRepository;
import com.example.realworld.domain.tag.model.ArticlesTagsRepository;
import com.example.realworld.infrastructure.persistence.statement.ArticleStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import io.reactivex.Completable;
import io.reactivex.Flowable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public class ArticleRepositoryJDBC extends JDBCRepository implements ArticleRepository {

  private JDBCClient jdbcClient;
  private ArticleStatements articleStatements;
  private ArticlesTagsRepository articlesTagsRepository;
  private FavoritesRepository favoritesRepository;

  public ArticleRepositoryJDBC(
      JDBCClient jdbcClient,
      ArticleStatements articleStatements,
      ArticlesTagsRepository articlesTagsRepository,
      FavoritesRepository favoritesRepository) {
    this.jdbcClient = jdbcClient;
    this.articleStatements = articleStatements;
    this.articlesTagsRepository = articlesTagsRepository;
    this.favoritesRepository = favoritesRepository;
  }

  @Override
  public Single<Long> countBySlug(String slug) {
    Statement<JsonArray> countBySlugStatement = articleStatements.countBy("slug", slug);
    return jdbcClient
        .rxQueryWithParams(countBySlugStatement.sql(), countBySlugStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Long> countBySlug(String slug, String excludeArticleId) {
    Statement<JsonArray> countBySlugStatement =
        articleStatements.countBy("slug", slug, excludeArticleId);
    return jdbcClient
        .rxQueryWithParams(countBySlugStatement.sql(), countBySlugStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Article> store(Article article) {
    article.setId(UUID.randomUUID().toString());
    Statement<JsonArray> storeArticleStatement = articleStatements.store(article);
    return jdbcClient
        .rxUpdateWithParams(storeArticleStatement.sql(), storeArticleStatement.params())
        .flatMapCompletable(
            updateResult ->
                Flowable.fromIterable(article.getTags())
                    .flatMapCompletable(tag -> articlesTagsRepository.tagArticle(tag, article)))
        .toSingleDefault(article);
  }

  @Override
  public Single<List<Article>> findArticles(
      int offset, int limit, List<String> tags, List<String> authors, List<String> favorited) {
    Statement<JsonArray> findArticlesStatement =
        articleStatements.findArticles(offset, limit, tags, authors, favorited);
    return jdbcClient
        .rxQueryWithParams(findArticlesStatement.sql(), findArticlesStatement.params())
        .map(ParserUtils::toArticleList);
  }

  @Override
  public Single<Long> totalArticles(
      List<String> tags, List<String> authors, List<String> favorited) {
    Statement<JsonArray> totalArticlesStatement =
        articleStatements.totalArticles(tags, authors, favorited);
    return jdbcClient
        .rxQueryWithParams(totalArticlesStatement.sql(), totalArticlesStatement.params())
        .map(resultSet -> resultSet.getRows().get(0).getLong("COUNT(DISTINCT ARTICLES.ID)"));
  }

  @Override
  public Single<Optional<Article>> findBySlug(String slug) {
    Statement<JsonArray> findBySlugStatement = articleStatements.findBySlug(slug);
    return jdbcClient
        .rxQueryWithParams(findBySlugStatement.sql(), findBySlugStatement.params())
        .map(ParserUtils::toArticleOptional);
  }

  @Override
  public Single<Article> update(Article article) {
    Statement<JsonArray> updateStatement = articleStatements.update(article);
    return jdbcClient
        .rxUpdateWithParams(updateStatement.sql(), updateStatement.params())
        .map(updateResult -> article);
  }

  @Override
  public Completable deleteByArticleIdAndAuthorId(String articleId, String authorId) {
    Statement<JsonArray> deleteByArticleIdAndAuthorId =
        articleStatements.deleteByArticleIdAndAuthorId(articleId, authorId);
    return articlesTagsRepository
        .deleteByArticle(articleId)
        .andThen(favoritesRepository.deleteByArticle(articleId))
        .andThen(
            jdbcClient
                .rxUpdateWithParams(
                    deleteByArticleIdAndAuthorId.sql(), deleteByArticleIdAndAuthorId.params())
                .flatMapCompletable(updateResult -> Completable.complete()));
  }

  @Override
  public Single<Optional<Article>> findBySlugAndAuthorId(String slug, String authorId) {
    Statement<JsonArray> findBySlugAndAuthorIdStatement =
        articleStatements.findBySlugAndAuthorId(slug, authorId);
    return jdbcClient
        .rxQueryWithParams(
            findBySlugAndAuthorIdStatement.sql(), findBySlugAndAuthorIdStatement.params())
        .map(ParserUtils::toArticleOptional);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/ArticlesTagsRepositoryJDBC.java
package com.example.realworld.infrastructure.persistence;

import com.example.realworld.domain.article.model.Article;
import com.example.realworld.domain.tag.model.ArticlesTagsRepository;
import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.infrastructure.persistence.statement.ArticlesTagsStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class ArticlesTagsRepositoryJDBC extends JDBCRepository implements ArticlesTagsRepository {

  private JDBCClient jdbcClient;
  private ArticlesTagsStatements articlesTagsStatements;

  public ArticlesTagsRepositoryJDBC(
      JDBCClient jdbcClient, ArticlesTagsStatements articlesTagsStatements) {
    this.jdbcClient = jdbcClient;
    this.articlesTagsStatements = articlesTagsStatements;
  }

  @Override
  public Single<List<Tag>> findTagsByArticle(String articleId) {
    Statement<JsonArray> findTagsByArticleStatement =
        articlesTagsStatements.findTagsByArticle(articleId);
    return jdbcClient
        .rxQueryWithParams(findTagsByArticleStatement.sql(), findTagsByArticleStatement.params())
        .map(ParserUtils::toTagList);
  }

  @Override
  public Completable tagArticle(Tag tag, Article article) {
    Statement<JsonArray> tagArticleStatement =
        articlesTagsStatements.store(tag.getId(), article.getId());
    return jdbcClient
        .rxUpdateWithParams(tagArticleStatement.sql(), tagArticleStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }

  @Override
  public Completable deleteByArticle(String articleId) {
    Statement<JsonArray> deleteByArticleStatement =
        articlesTagsStatements.deleteByArticle(articleId);
    return jdbcClient
        .rxUpdateWithParams(deleteByArticleStatement.sql(), deleteByArticleStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/CommentRepositoryJDBC.java
package com.example.realworld.infrastructure.persistence;

import com.example.realworld.domain.article.model.Comment;
import com.example.realworld.domain.article.model.CommentRepository;
import com.example.realworld.infrastructure.persistence.statement.CommentStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public class CommentRepositoryJDBC extends JDBCRepository implements CommentRepository {

  private JDBCClient jdbcClient;
  private CommentStatements commentStatements;

  public CommentRepositoryJDBC(JDBCClient jdbcClient, CommentStatements commentStatements) {
    this.jdbcClient = jdbcClient;
    this.commentStatements = commentStatements;
  }

  @Override
  public Single<Comment> store(Comment comment) {
    comment.setId(UUID.randomUUID().toString());
    Statement<JsonArray> storeCommentStatement = commentStatements.store(comment);
    return jdbcClient
        .rxUpdateWithParams(storeCommentStatement.sql(), storeCommentStatement.params())
        .map(updateResult -> comment);
  }

  @Override
  public Completable deleteByCommentIdAndAuthorId(String commentId, String authorId) {
    Statement<JsonArray> deleteByCommentIdAndAuthorIdStatement =
        commentStatements.deleteByCommentIdAndAuthorId(commentId, authorId);
    return jdbcClient
        .rxUpdateWithParams(
            deleteByCommentIdAndAuthorIdStatement.sql(),
            deleteByCommentIdAndAuthorIdStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }

  @Override
  public Single<List<Comment>> findCommentsByArticleId(String articleId) {
    Statement<JsonArray> findCommentsByArticleIdStatement =
        commentStatements.findCommentsByArticleId(articleId);
    return jdbcClient
        .rxQueryWithParams(
            findCommentsByArticleIdStatement.sql(), findCommentsByArticleIdStatement.params())
        .map(ParserUtils::toCommentList);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/FavoritesRepositoryJDBC.java
package com.example.realworld.infrastructure.persistence;

import com.example.realworld.domain.article.model.FavoritesRepository;
import com.example.realworld.infrastructure.persistence.statement.ArticlesUsersStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import org.springframework.stereotype.Repository;

@Repository
public class FavoritesRepositoryJDBC extends JDBCRepository implements FavoritesRepository {

  private JDBCClient jdbcClient;
  private ArticlesUsersStatements articlesUsersStatements;

  public FavoritesRepositoryJDBC(
      JDBCClient jdbcClient, ArticlesUsersStatements articlesUsersStatements) {
    this.jdbcClient = jdbcClient;
    this.articlesUsersStatements = articlesUsersStatements;
  }

  @Override
  public Single<Long> countByArticleIdAndUserId(String articleId, String userId) {
    Statement<JsonArray> countByArticleIdAndUserIdStatement =
        articlesUsersStatements.countByArticleIdAndUserId(articleId, userId);
    return jdbcClient
        .rxQueryWithParams(
            countByArticleIdAndUserIdStatement.sql(), countByArticleIdAndUserIdStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Long> countByArticleId(String articleId) {
    Statement<JsonArray> countByArticleId = articlesUsersStatements.countByArticleId(articleId);
    return jdbcClient
        .rxQueryWithParams(countByArticleId.sql(), countByArticleId.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Completable deleteByArticle(String articleId) {
    Statement<JsonArray> deleteByArticleStatement =
        articlesUsersStatements.deleteByArticle(articleId);
    return jdbcClient
        .rxUpdateWithParams(deleteByArticleStatement.sql(), deleteByArticleStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }

  @Override
  public Completable store(String articleId, String authorId) {
    Statement<JsonArray> storeFavoriteStatement =
        articlesUsersStatements.store(articleId, authorId);
    return jdbcClient
        .rxUpdateWithParams(storeFavoriteStatement.sql(), storeFavoriteStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }

  @Override
  public Completable deleteByArticleAndAuthor(String articleId, String authorId) {
    Statement<JsonArray> deleteByArticleAndAuthorStatement =
        articlesUsersStatements.deleteByArticleAndUser(articleId, authorId);
    return jdbcClient
        .rxUpdateWithParams(
            deleteByArticleAndAuthorStatement.sql(), deleteByArticleAndAuthorStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/JDBCRepository.java
package com.example.realworld.infrastructure.persistence;

import io.vertx.ext.sql.ResultSet;

public class JDBCRepository {

  Long getCountFromResultSet(ResultSet resultSet) {
    return resultSet.getRows().get(0).getLong("COUNT(*)");
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/TagRepositoryJDBC.java
package com.example.realworld.infrastructure.persistence;

import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.domain.tag.model.TagRepository;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.statement.TagStatements;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public class TagRepositoryJDBC extends JDBCRepository implements TagRepository {

  private JDBCClient jdbcClient;
  private TagStatements tagStatements;

  public TagRepositoryJDBC(JDBCClient jdbcClient, TagStatements tagStatements) {
    this.jdbcClient = jdbcClient;
    this.tagStatements = tagStatements;
  }

  @Override
  public Single<Tag> store(Tag tag) {
    tag.setId(UUID.randomUUID().toString());
    Statement<JsonArray> storeTagStatement = tagStatements.store(tag);
    return jdbcClient
        .rxUpdateWithParams(storeTagStatement.sql(), storeTagStatement.params())
        .map(updateResult -> tag);
  }

  @Override
  public Single<Long> countByName(String name) {
    Statement<JsonArray> countByNameStatement = tagStatements.countBy("name", name);
    return jdbcClient
        .rxQueryWithParams(countByNameStatement.sql(), countByNameStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Optional<Tag>> findByName(String name) {
    Statement<JsonArray> findTagByNameStatement = tagStatements.findTagByName(name);
    return jdbcClient
        .rxQueryWithParams(findTagByNameStatement.sql(), findTagByNameStatement.params())
        .map(ParserUtils::toTagOptional);
  }

  @Override
  public Single<List<Tag>> findAll() {
    String findAllStatement = tagStatements.findAll();
    return jdbcClient.rxQuery(findAllStatement).map(ParserUtils::toTagList);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/UserRepositoryJDBC.java
package com.example.realworld.infrastructure.persistence;

import com.example.realworld.domain.user.model.User;
import com.example.realworld.domain.user.model.UserRepository;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.statement.UserStatements;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public class UserRepositoryJDBC extends JDBCRepository implements UserRepository {

  private JDBCClient jdbcClient;
  private UserStatements userStatements;

  public UserRepositoryJDBC(JDBCClient jdbcClient, UserStatements userStatements) {
    this.jdbcClient = jdbcClient;
    this.userStatements = userStatements;
  }

  @Override
  public Single<User> store(User user) {
    Statement<JsonArray> createUserStatement = userStatements.create(user);
    return jdbcClient
        .rxUpdateWithParams(createUserStatement.sql(), createUserStatement.params())
        .map(updateResult -> user);
  }

  @Override
  public Single<Long> countByUsername(String username) {
    Statement<JsonArray> countByUsernameStatement = userStatements.countBy("username", username);
    return jdbcClient
        .rxQueryWithParams(countByUsernameStatement.sql(), countByUsernameStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Long> countByUsername(String username, String exclusionId) {
    Statement<JsonArray> countByUsernameStatement =
        userStatements.countBy("username", username, exclusionId);
    return jdbcClient
        .rxQueryWithParams(countByUsernameStatement.sql(), countByUsernameStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Long> countByEmail(String email) {
    Statement<JsonArray> countByEmailStatement = userStatements.countBy("email", email);
    return jdbcClient
        .rxQueryWithParams(countByEmailStatement.sql(), countByEmailStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Long> countByEmail(String email, String excludeUserId) {
    Statement<JsonArray> countByEmailStatement =
        userStatements.countBy("email", email, excludeUserId);
    return jdbcClient
        .rxQueryWithParams(countByEmailStatement.sql(), countByEmailStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Single<Optional<User>> findById(String id) {
    Statement<JsonArray> findByIdStatement = userStatements.findById(id);
    return jdbcClient
        .rxQueryWithParams(findByIdStatement.sql(), findByIdStatement.params())
        .map(ParserUtils::toUserOptional);
  }

  @Override
  public Single<Optional<User>> findUserByEmail(String email) {
    Statement<JsonArray> findByEmailStatement = userStatements.findByEmail(email);
    return jdbcClient
        .rxQueryWithParams(findByEmailStatement.sql(), findByEmailStatement.params())
        .map(ParserUtils::toUserOptional);
  }

  @Override
  public Single<User> update(User user) {
    Statement<JsonArray> updateUserStatement = userStatements.update(user);
    return jdbcClient
        .rxUpdateWithParams(updateUserStatement.sql(), updateUserStatement.params())
        .map(updateResult -> user);
  }

  @Override
  public Single<Optional<User>> findUserByUsername(String username) {
    Statement<JsonArray> findByUsernameStatement = userStatements.findByUsername(username);
    return jdbcClient
        .rxQueryWithParams(findByUsernameStatement.sql(), findByUsernameStatement.params())
        .map(ParserUtils::toUserOptional);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/UsersFollowedRepositoryJDBC.java
package com.example.realworld.infrastructure.persistence;

import com.example.realworld.domain.article.model.Article;
import com.example.realworld.domain.profile.model.UsersFollowedRepository;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.statement.UsersFollowedStatements;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class UsersFollowedRepositoryJDBC extends JDBCRepository implements UsersFollowedRepository {

  private JDBCClient jdbcClient;
  private UsersFollowedStatements usersFollowedStatements;

  public UsersFollowedRepositoryJDBC(
      JDBCClient jdbcClient, UsersFollowedStatements usersFollowedStatements) {
    this.jdbcClient = jdbcClient;
    this.usersFollowedStatements = usersFollowedStatements;
  }

  @Override
  public Single<Long> countByCurrentUserIdAndFollowedUserId(
      String currentUserId, String userFollowedId) {
    Statement<JsonArray> countByCurrentUserIdAndUserFollowedIdStatement =
        usersFollowedStatements.countByCurrentUserIdAndUserFollowedId(
            currentUserId, userFollowedId);
    return jdbcClient
        .rxQueryWithParams(
            countByCurrentUserIdAndUserFollowedIdStatement.sql(),
            countByCurrentUserIdAndUserFollowedIdStatement.params())
        .map(this::getCountFromResultSet);
  }

  @Override
  public Completable follow(String currentUserId, String userFollowedId) {
    Statement<JsonArray> followStatement =
        usersFollowedStatements.follow(currentUserId, userFollowedId);
    return jdbcClient
        .rxUpdateWithParams(followStatement.sql(), followStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }

  @Override
  public Completable unfollow(String currentUserId, String userFollowedId) {
    Statement<JsonArray> unfollowStatement =
        usersFollowedStatements.unfollow(currentUserId, userFollowedId);
    return jdbcClient
        .rxUpdateWithParams(unfollowStatement.sql(), unfollowStatement.params())
        .flatMapCompletable(updateResult -> Completable.complete());
  }

  @Override
  public Single<List<Article>> findRecentArticles(String currentUserId, int offset, int limit) {
    Statement<JsonArray> findRecentArticlesStatement =
        usersFollowedStatements.findRecentArticles(currentUserId, offset, limit);
    return jdbcClient
        .rxQueryWithParams(findRecentArticlesStatement.sql(), findRecentArticlesStatement.params())
        .map(ParserUtils::toArticleList);
  }

  @Override
  public Single<Long> totalUserArticlesFollowed(String currentUserId) {
    Statement<JsonArray> totalUserArticlesFollowedStatement =
        usersFollowedStatements.totalUserArticlesFollowed(currentUserId);
    return jdbcClient
        .rxQueryWithParams(
            totalUserArticlesFollowedStatement.sql(), totalUserArticlesFollowedStatement.params())
        .map(resultSet -> resultSet.getRows().get(0).getLong("COUNT(DISTINCT ARTICLES.ID)"));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/ArticlesTagsStatements.java
package com.example.realworld.infrastructure.persistence.statement;

import io.vertx.core.json.JsonArray;

public interface ArticlesTagsStatements {
  Statement<JsonArray> findTagsByArticle(String articleId);

  Statement<JsonArray> store(String tagId, String articleId);

  Statement<JsonArray> deleteByArticle(String articleId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/ArticleStatements.java
package com.example.realworld.infrastructure.persistence.statement;

import com.example.realworld.domain.article.model.Article;
import io.vertx.core.json.JsonArray;

import java.util.List;

public interface ArticleStatements {
  Statement<JsonArray> countBy(String field, String value);

  Statement<JsonArray> countBy(String field, String value, String excludeArticleId);

  Statement<JsonArray> store(Article article);

  Statement<JsonArray> findArticles(
      int offset, int limit, List<String> tags, List<String> authors, List<String> favorited);

  Statement<JsonArray> totalArticles(
      List<String> tags, List<String> authors, List<String> favorited);

  Statement<JsonArray> findBySlug(String slug);

  Statement<JsonArray> update(Article article);

  Statement<JsonArray> deleteByArticleIdAndAuthorId(String articleId, String authorId);

  Statement<JsonArray> findBySlugAndAuthorId(String slug, String authorId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/ArticlesUsersStatements.java
package com.example.realworld.infrastructure.persistence.statement;

import io.vertx.core.json.JsonArray;

public interface ArticlesUsersStatements {
  Statement<JsonArray> countByArticleIdAndUserId(String articleId, String userId);

  Statement<JsonArray> countByArticleId(String articleId);

  Statement<JsonArray> deleteByArticle(String articleId);

  Statement<JsonArray> store(String articleId, String userId);

  Statement<JsonArray> deleteByArticleAndUser(String articleId, String userId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/CommentStatements.java
package com.example.realworld.infrastructure.persistence.statement;

import com.example.realworld.domain.article.model.Comment;
import io.vertx.core.json.JsonArray;

public interface CommentStatements {
  Statement<JsonArray> store(Comment comment);

  Statement<JsonArray> deleteByCommentIdAndAuthorId(String commentId, String authorId);

  Statement<JsonArray> findCommentsByArticleId(String articleId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/Statement.java
package com.example.realworld.infrastructure.persistence.statement;

public interface Statement<T> {

  String sql();

  T params();
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/TagStatements.java
package com.example.realworld.infrastructure.persistence.statement;

import com.example.realworld.domain.tag.model.Tag;
import io.vertx.core.json.JsonArray;

public interface TagStatements {
  Statement<JsonArray> store(Tag tag);

  Statement<JsonArray> countBy(String field, String value);

  Statement<JsonArray> findTagByName(String name);

  String findAll();
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/UsersFollowedStatements.java
package com.example.realworld.infrastructure.persistence.statement;

import io.vertx.core.json.JsonArray;

public interface UsersFollowedStatements {

  Statement<JsonArray> countByCurrentUserIdAndUserFollowedId(
      String currentUserId, String userFollowedId);

  Statement<JsonArray> follow(String currentUserId, String userFollowedId);

  Statement<JsonArray> unfollow(String currentUserId, String userFollowedId);

  Statement<JsonArray> findRecentArticles(String currentUserId, int offset, int limit);

  Statement<JsonArray> totalUserArticlesFollowed(String currentUserId);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/UserStatements.java
package com.example.realworld.infrastructure.persistence.statement;

import com.example.realworld.domain.user.model.User;
import io.vertx.core.json.JsonArray;

public interface UserStatements {

  Statement<JsonArray> create(User user);

  Statement<JsonArray> update(User user);

  Statement<JsonArray> findById(String id);

  Statement<JsonArray> countBy(String field, String value);

  Statement<JsonArray> countBy(String field, String value, String exclusionId);

  Statement<JsonArray> findByEmail(String email);

  Statement<JsonArray> findByUsername(String username);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/AbstractStatements.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import io.vertx.core.json.JsonArray;

import java.util.List;

public class AbstractStatements {

  protected void addFieldIfPresent(
      List<String> fields, JsonArray params, String fieldValue, String fieldExpression) {
    if (isPresent(fieldValue)) {
      fields.add(fieldExpression);
      params.add(fieldValue);
    }
  }

  private boolean isPresent(String value) {
    return value != null && !value.isEmpty();
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/ArticlesTagsStatementsImpl.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.infrastructure.persistence.statement.ArticlesTagsStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import io.vertx.core.json.JsonArray;
import org.springframework.stereotype.Component;

@Component
public class ArticlesTagsStatementsImpl extends AbstractStatements
    implements ArticlesTagsStatements {
  @Override
  public Statement<JsonArray> findTagsByArticle(String articleId) {

    String sql =
        "SELECT tags.ID, tags.NAME FROM ARTICLES_TAGS articles_tags "
            + "INNER JOIN TAGS tags on articles_tags.TAG_ID = tags.ID "
            + "WHERE articles_tags.ARTICLE_ID = ?";

    JsonArray params = new JsonArray().add(articleId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> store(String tagId, String articleId) {

    String sql = "INSERT INTO ARTICLES_TAGS (TAG_ID, ARTICLE_ID) VALUES (?, ?)";

    JsonArray params = new JsonArray().add(tagId).add(articleId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> deleteByArticle(String articleId) {

    String sql = "DELETE FROM ARTICLES_TAGS WHERE ARTICLE_ID = ?";

    JsonArray params = new JsonArray().add(articleId);

    return new JsonArrayStatement(sql, params);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/ArticleStatementsImpl.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.domain.article.model.Article;
import com.example.realworld.infrastructure.persistence.statement.ArticleStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import com.example.realworld.infrastructure.utils.SimpleQueryBuilder;
import io.vertx.core.json.JsonArray;
import org.springframework.stereotype.Component;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class ArticleStatementsImpl extends AbstractStatements implements ArticleStatements {
  @Override
  public Statement<JsonArray> countBy(String field, String value) {
    String sql =
        String.format("SELECT COUNT(*) FROM ARTICLES WHERE UPPER(%s) = ?", field.toUpperCase());
    JsonArray params = new JsonArray().add(value.toUpperCase().trim());
    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> countBy(String field, String value, String excludeArticleId) {
    String sql =
        String.format(
            "SELECT COUNT(*) FROM ARTICLES WHERE UPPER(%s) = ? AND ID <> ?", field.toUpperCase());
    JsonArray params = new JsonArray().add(value.toUpperCase().trim()).add(excludeArticleId);
    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> store(Article article) {

    String sql =
        "INSERT INTO ARTICLES (ID, TITLE, DESCRIPTION, BODY, SLUG, AUTHOR_ID, CREATED_AT, UPDATED_AT) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

    JsonArray params =
        new JsonArray()
            .add(article.getId())
            .add(article.getTitle())
            .add(article.getDescription())
            .add(article.getBody())
            .add(article.getSlug())
            .add(article.getAuthor().getId())
            .add(ParserUtils.toTimestamp(article.getCreatedAt()))
            .add(ParserUtils.toTimestamp(article.getUpdatedAt()));

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findArticles(
      int offset, int limit, List<String> tags, List<String> authors, List<String> favorited) {

    String sql =
        "SELECT articles.ID, "
            + "articles.TITLE, "
            + "articles.DESCRIPTION, "
            + "articles.BODY, "
            + "articles.SLUG, "
            + "articles.CREATED_AT, "
            + "articles.UPDATED_AT, "
            + "users.ID AS AUTHOR_ID, "
            + "users.USERNAME AS AUTHOR_USERNAME "
            + "FROM ARTICLES articles "
            + "INNER JOIN USERS users ON articles.AUTHOR_ID = users.ID";

    JsonArray params = new JsonArray();

    SimpleQueryBuilder findArticlesQueryBuilder = new SimpleQueryBuilder();

    findArticlesQueryBuilder.addQueryStatement(sql);

    configQueryBuilderFindArticles(tags, authors, favorited, params, findArticlesQueryBuilder);

    findArticlesQueryBuilder.addAfterWhereStatement(
        "ORDER BY articles.CREATED_AT DESC, articles.UPDATED_AT DESC LIMIT ? OFFSET ?;");

    params.add(limit).add(offset);

    return new JsonArrayStatement(findArticlesQueryBuilder.toQueryString(), params);
  }

  private void configQueryBuilderFindArticles(
      List<String> tags,
      List<String> authors,
      List<String> favorited,
      JsonArray params,
      SimpleQueryBuilder findArticlesQueryBuilder) {

    if (!tags.isEmpty()) {
      String tagsQueryStatement =
          "INNER JOIN ARTICLES_TAGS articles_tags ON articles.ID = articles_tags.ARTICLE_ID "
              + "INNER JOIN TAGS tags ON articles_tags.TAG_ID = tags.ID";
      String tagsWhereStatement = String.format("UPPER(tags.NAME) IN (%s)", listParams(tags));
      findArticlesQueryBuilder.updateQueryStatementConditional(
          tagsQueryStatement, tagsWhereStatement);
      tags.forEach(tag -> params.add(tag.toUpperCase().trim()));
    }

    if (!favorited.isEmpty()) {
      String favoritedQueryStatement =
          "INNER JOIN ARTICLES_USERS articles_users ON articles.ID = articles_users.ARTICLE_ID "
              + "INNER JOIN USERS usersWhoFavorited ON articles_users.USER_ID = usersWhoFavorited.ID";
      String favoritedWhereStatement =
          String.format("UPPER(usersWhoFavorited.USERNAME) IN (%s)", listParams(favorited));
      findArticlesQueryBuilder.updateQueryStatementConditional(
          favoritedQueryStatement, favoritedWhereStatement);
      favorited.forEach(favorite -> params.add(favorite.toUpperCase().trim()));
    }

    if (!authors.isEmpty()) {
      String authorsWhereStatement =
          String.format("UPPER(users.USERNAME) IN (%s)", listParams(authors));
      findArticlesQueryBuilder.updateQueryStatementConditional(null, authorsWhereStatement);
      authors.forEach(author -> params.add(author.toUpperCase().trim()));
    }
  }

  @Override
  public Statement<JsonArray> totalArticles(
      List<String> tags, List<String> authors, List<String> favorited) {

    JsonArray params = new JsonArray();

    SimpleQueryBuilder totalArticlesQueryBuilder = new SimpleQueryBuilder();

    totalArticlesQueryBuilder.addQueryStatement(
        "SELECT COUNT(DISTINCT articles.ID) FROM ARTICLES articles "
            + "INNER JOIN USERS users ON articles.AUTHOR_ID = users.ID");

    configQueryBuilderFindArticles(tags, authors, favorited, params, totalArticlesQueryBuilder);

    return new JsonArrayStatement(totalArticlesQueryBuilder.toQueryString(), params);
  }

  @Override
  public Statement<JsonArray> findBySlug(String slug) {

    String sql = "SELECT * FROM ARTICLES WHERE UPPER(SLUG) = ?";

    JsonArray params = new JsonArray().add(slug.toUpperCase().trim());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> update(Article article) {

    List<String> fields = new LinkedList<>();
    JsonArray params = new JsonArray();

    addFieldIfPresent(fields, params, article.getTitle(), "TITLE = ?");
    addFieldIfPresent(fields, params, article.getDescription(), "DESCRIPTION = ?");
    addFieldIfPresent(fields, params, article.getBody(), "BODY = ?");
    addFieldIfPresent(fields, params, article.getSlug(), "SLUG = ?");

    params.add(article.getId());

    String sql = "UPDATE ARTICLES SET " + String.join(", ", fields) + "WHERE ID = ?";

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> deleteByArticleIdAndAuthorId(String articleId, String authorId) {
    String sql = "DELETE FROM ARTICLES WHERE ID = ? AND AUTHOR_ID = ?";
    JsonArray params = new JsonArray().add(articleId).add(authorId);
    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findBySlugAndAuthorId(String slug, String authorId) {
    String sql = "SELECT * FROM ARTICLES WHERE UPPER(SLUG) = ? AND AUTHOR_ID = ?";

    JsonArray params = new JsonArray().add(slug.toUpperCase().trim()).add(authorId);

    return new JsonArrayStatement(sql, params);
  }

  private String listParams(List<String> listParams) {
    return listParams.stream().map(param -> "?").collect(Collectors.joining(","));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/ArticlesUsersStatementsImpl.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.infrastructure.persistence.statement.ArticlesUsersStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import io.vertx.core.json.JsonArray;
import org.springframework.stereotype.Component;

@Component
public class ArticlesUsersStatementsImpl extends AbstractStatements
    implements ArticlesUsersStatements {
  @Override
  public Statement<JsonArray> countByArticleIdAndUserId(String articleId, String userId) {

    String sql = "SELECT COUNT(*) FROM ARTICLES_USERS WHERE ARTICLE_ID = ? AND USER_ID = ?";

    JsonArray params = new JsonArray().add(articleId).add(userId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> countByArticleId(String articleId) {

    String sql = "SELECT COUNT(*) FROM ARTICLES_USERS WHERE ARTICLE_ID = ?";

    JsonArray params = new JsonArray().add(articleId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> deleteByArticle(String articleId) {

    String sql = "DELETE FROM ARTICLES_USERS WHERE ARTICLE_ID = ?";

    JsonArray params = new JsonArray().add(articleId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> store(String articleId, String userId) {

    String sql = "INSERT INTO ARTICLES_USERS (ARTICLE_ID, USER_ID) VALUES (?, ?)";

    JsonArray params = new JsonArray().add(articleId).add(userId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> deleteByArticleAndUser(String articleId, String userId) {

    String sql = "DELETE FROM ARTICLES_USERS WHERE ARTICLE_ID = ? AND USER_ID = ?";

    JsonArray params = new JsonArray().add(articleId).add(userId);

    return new JsonArrayStatement(sql, params);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/CommentStatementsImpl.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.domain.article.model.Comment;
import com.example.realworld.infrastructure.persistence.statement.CommentStatements;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import io.vertx.core.json.JsonArray;
import org.springframework.stereotype.Component;

@Component
public class CommentStatementsImpl implements CommentStatements {

  @Override
  public Statement<JsonArray> store(Comment comment) {

    String sql =
        "INSERT INTO COMMENTS (ID, AUTHOR_ID, ARTICLE_ID, CREATED_AT, UPDATED_AT, BODY) VALUES (?, ?, ?, ?, ?, ?)";

    JsonArray params =
        new JsonArray()
            .add(comment.getId())
            .add(comment.getAuthor().getId())
            .add(comment.getArticle().getId())
            .add(ParserUtils.toTimestamp(comment.getCreatedAt()))
            .add(ParserUtils.toTimestamp(comment.getUpdatedAt()))
            .add(comment.getBody());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> deleteByCommentIdAndAuthorId(String commentId, String authorId) {

    String sql = "DELETE FROM COMMENTS WHERE ID = ? AND AUTHOR_ID = ?";

    JsonArray params = new JsonArray().add(commentId).add(authorId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findCommentsByArticleId(String articleId) {

    String sql =
        "SELECT comments.ID, "
            + "comments.BODY, "
            + "comments.ARTICLE_ID, "
            + "comments.AUTHOR_ID, "
            + "comments.CREATED_AT, "
            + "comments.UPDATED_AT, "
            + "users.ID AS AUTHOR_ID, "
            + "users.USERNAME AS AUTHOR_USERNAME "
            + " FROM COMMENTS comments INNER JOIN USERS users on comments.AUTHOR_ID = users.ID WHERE comments.ARTICLE_ID = ?";

    JsonArray params = new JsonArray().add(articleId);

    return new JsonArrayStatement(sql, params);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/JsonArrayStatement.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.infrastructure.persistence.statement.Statement;
import io.vertx.core.json.JsonArray;

public class JsonArrayStatement implements Statement<JsonArray> {

  private String sql;
  private JsonArray params;

  public JsonArrayStatement(String sql, JsonArray params) {
    this.sql = sql;
    this.params = params;
  }

  @Override
  public String sql() {
    return sql;
  }

  @Override
  public JsonArray params() {
    return params;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/TagStatementsImpl.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.statement.TagStatements;
import io.vertx.core.json.JsonArray;
import org.springframework.stereotype.Component;

@Component
public class TagStatementsImpl extends AbstractStatements implements TagStatements {
  @Override
  public Statement<JsonArray> store(Tag tag) {

    String sql = "INSERT INTO TAGS (ID, NAME) VALUES (?, ?)";

    JsonArray params = new JsonArray().add(tag.getId()).add(tag.getName());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> countBy(String field, String value) {
    String sql =
        String.format("SELECT COUNT(*) FROM TAGS WHERE UPPER(%s) = ?", field.toUpperCase());

    JsonArray params = new JsonArray().add(value.toUpperCase().trim());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findTagByName(String name) {

    String sql = "SELECT * FROM TAGS WHERE UPPER(NAME) = ?";

    JsonArray params = new JsonArray().add(name.toUpperCase().trim());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public String findAll() {
    return "SELECT * FROM TAGS";
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/UsersFollowedStatementsImpl.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.statement.UsersFollowedStatements;
import io.vertx.core.json.JsonArray;
import org.springframework.stereotype.Component;

@Component
public class UsersFollowedStatementsImpl extends AbstractStatements
    implements UsersFollowedStatements {

  @Override
  public Statement<JsonArray> countByCurrentUserIdAndUserFollowedId(
      String currentUserId, String userFollowedId) {

    String sql = "SELECT COUNT(*) FROM USERS_FOLLOWED WHERE USER_ID = ? AND FOLLOWED_ID = ?";

    JsonArray params = new JsonArray().add(currentUserId).add(userFollowedId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> follow(String currentUserId, String userFollowedId) {

    String sql = "INSERT INTO USERS_FOLLOWED (USER_ID, FOLLOWED_ID) VALUES (?, ?)";

    JsonArray params = new JsonArray().add(currentUserId).add(userFollowedId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> unfollow(String currentUserId, String userFollowedId) {

    String sql = "DELETE FROM USERS_FOLLOWED WHERE USER_ID = ? AND FOLLOWED_ID = ?";

    JsonArray params = new JsonArray().add(currentUserId).add(userFollowedId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findRecentArticles(String currentUserId, int offset, int limit) {

    String sql =
        "SELECT articles.ID, "
            + "articles.TITLE, "
            + "articles.DESCRIPTION, "
            + "articles.BODY, "
            + "articles.SLUG, "
            + "articles.CREATED_AT, "
            + "articles.UPDATED_AT, "
            + "users2.ID AS AUTHOR_ID, "
            + "users2.USERNAME AS AUTHOR_USERNAME "
            + "FROM USERS_FOLLOWED users_followed "
            + "INNER JOIN USERS users1 ON users_followed.USER_ID = users1.ID AND (users1.ID = ?) "
            + "INNER JOIN USERS users2 ON users_followed.FOLLOWED_ID = users2.ID "
            + "INNER JOIN ARTICLES articles ON users2.ID = articles.AUTHOR_ID ORDER BY articles.CREATED_AT DESC LIMIT ? OFFSET ?";

    JsonArray params = new JsonArray().add(currentUserId).add(limit).add(offset);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> totalUserArticlesFollowed(String currentUserId) {

    String sql =
        "SELECT COUNT(DISTINCT articles.ID) "
            + "FROM USERS_FOLLOWED users_followed "
            + "INNER JOIN USERS users1 ON users_followed.USER_ID = users1.ID AND (users1.ID = ?) "
            + "INNER JOIN USERS users2 ON users_followed.FOLLOWED_ID = users2.ID "
            + "INNER JOIN ARTICLES articles ON users2.ID = articles.AUTHOR_ID";

    JsonArray params = new JsonArray().add(currentUserId);

    return new JsonArrayStatement(sql, params);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/statement/impl/UserStatementsImpl.java
package com.example.realworld.infrastructure.persistence.statement.impl;

import com.example.realworld.domain.user.model.User;
import com.example.realworld.infrastructure.persistence.statement.Statement;
import com.example.realworld.infrastructure.persistence.statement.UserStatements;
import io.vertx.core.json.JsonArray;
import org.springframework.stereotype.Component;

import java.util.LinkedList;
import java.util.List;

@Component
public class UserStatementsImpl extends AbstractStatements implements UserStatements {

  @Override
  public Statement<JsonArray> create(User user) {

    String sql =
        "INSERT INTO USERS (ID, USERNAME, BIO, EMAIL, IMAGE, PASSWORD, TOKEN) VALUES (?, ?, ?, ?, ?, ?, ?)";

    JsonArray params =
        new JsonArray()
            .add(user.getId())
            .add(user.getUsername())
            .add(user.getBio())
            .add(user.getEmail())
            .add(user.getImage())
            .add(user.getPassword())
            .add(user.getToken());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> update(User user) {

    List<String> fields = new LinkedList<>();
    JsonArray params = new JsonArray();

    addFieldIfPresent(fields, params, user.getUsername(), "USERNAME = ?");

    addFieldIfPresent(fields, params, user.getBio(), "BIO = ?");

    addFieldIfPresent(fields, params, user.getEmail(), "EMAIL = ?");

    addFieldIfPresent(fields, params, user.getImage(), "IMAGE = ?");

    addFieldIfPresent(fields, params, user.getPassword(), "PASSWORD = ?");

    addFieldIfPresent(fields, params, user.getToken(), "TOKEN = ?");

    params.add(user.getId());

    String sql = "UPDATE USERS SET " + String.join(", ", fields) + " WHERE ID = ?";

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findById(String id) {

    String sql = "SELECT * FROM USERS WHERE ID = ?";

    JsonArray params = new JsonArray().add(id);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> countBy(String field, String value) {

    String sql =
        String.format("SELECT COUNT(*) FROM USERS WHERE UPPER(%s) = ?", field.toUpperCase());

    JsonArray params = new JsonArray().add(value.toUpperCase().trim());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> countBy(String field, String value, String exclusionId) {

    String sql =
        String.format(
            "SELECT COUNT(*) FROM USERS WHERE UPPER(%s) = ? AND ID <> ?", field.toUpperCase());

    JsonArray params = new JsonArray().add(value.toUpperCase().trim()).add(exclusionId);

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findByEmail(String email) {

    String sql = "SELECT * FROM USERS WHERE UPPER(EMAIL) = ?";

    JsonArray params = new JsonArray().add(email.toUpperCase().trim());

    return new JsonArrayStatement(sql, params);
  }

  @Override
  public Statement<JsonArray> findByUsername(String username) {

    String sql = "SELECT * FROM USERS WHERE UPPER(USERNAME) = ?";

    JsonArray params = new JsonArray().add(username.toUpperCase());

    return new JsonArrayStatement(sql, params);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/persistence/utils/ParserUtils.java
package com.example.realworld.infrastructure.persistence.utils;

import com.example.realworld.domain.article.model.Article;
import com.example.realworld.domain.article.model.Comment;
import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.domain.user.model.User;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.ResultSet;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public class ParserUtils {

  private static DateTimeFormatter dateTimeFormatter =
      DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");

  public static Optional<User> toUserOptional(ResultSet resultSet) {
    return parseResultSet(resultSet, ParserUtils::getUserOptionalFromResultSet, Optional::empty);
  }

  public static User toUser(ResultSet resultSet) {
    return parseResultSet(resultSet, ParserUtils::getUserFromResultSet, () -> null);
  }

  public static List<Article> toArticleList(ResultSet resultSet) {
    return parseResultSet(resultSet, ParserUtils::getArticlesFromResultSet, LinkedList::new);
  }

  public static List<Tag> toTagList(ResultSet resultSet) {
    return parseResultSet(resultSet, ParserUtils::getTagsFromResultSet, LinkedList::new);
  }

  public static Optional<Tag> toTagOptional(ResultSet resultSet) {
    return parseResultSet(resultSet, ParserUtils::getTagOptionalFromResultSet, Optional::empty);
  }

  private static Optional<Tag> getTagOptionalFromResultSet(ResultSet resultSet) {
    return Optional.of(getTagFromResultSet(resultSet));
  }

  private static List<Tag> getTagsFromResultSet(ResultSet resultSet) {
    List<JsonObject> rows = resultSet.getRows();
    return rows.stream().map(ParserUtils::getTagFromRow).collect(Collectors.toList());
  }

  public static Optional<Article> toArticleOptional(ResultSet resultSet) {
    return emptyIfNoResult(
        resultSet,
        Optional::empty,
        () -> Optional.of(ParserUtils.getArticleFromRow(resultSet.getRows().get(0))));
  }

  private static List<Article> getArticlesFromResultSet(ResultSet resultSet) {
    List<JsonObject> rows = resultSet.getRows();
    return rows.stream().map(ParserUtils::getArticleFromRow).collect(Collectors.toList());
  }

  public static List<Comment> toCommentList(ResultSet resultSet) {
    return parseResultSet(resultSet, ParserUtils::getCommentsFromResultSet, LinkedList::new);
  }

  private static List<Comment> getCommentsFromResultSet(ResultSet resultSet) {
    List<JsonObject> rows = resultSet.getRows();
    return rows.stream().map(ParserUtils::getCommentFromRow).collect(Collectors.toList());
  }

  private static Comment getCommentFromRow(JsonObject row) {
    Comment comment = new Comment();
    comment.setId(row.getString("ID"));
    comment.setBody(row.getString("BODY"));
    comment.setCreatedAt(fromTimestamp(row.getString("CREATED_AT")));
    comment.setUpdatedAt(fromTimestamp(row.getString("UPDATED_AT")));
    Article article = new Article();
    article.setId(row.getString("ARTICLE_ID"));
    comment.setArticle(article);
    User user = new User();
    user.setId(row.getString("AUTHOR_ID"));
    user.setUsername(row.getString("AUTHOR_USERNAME"));
    comment.setAuthor(user);
    return comment;
  }

  private static Article getArticleFromRow(JsonObject row) {
    Article article = new Article();
    article.setId(row.getString("ID"));
    article.setTitle(row.getString("TITLE"));
    article.setDescription(row.getString("DESCRIPTION"));
    article.setBody(row.getString("BODY"));
    article.setSlug(row.getString("SLUG"));
    article.setCreatedAt(fromTimestamp(row.getString("CREATED_AT")));
    article.setUpdatedAt(fromTimestamp(row.getString("UPDATED_AT")));
    User author = new User();
    author.setId(row.getString("AUTHOR_ID"));
    author.setUsername(row.getString("AUTHOR_USERNAME"));
    article.setAuthor(author);
    return article;
  }

  private static Optional<User> getUserOptionalFromResultSet(ResultSet resultSet) {
    return Optional.of(getUserFromResultSet(resultSet));
  }

  private static Tag getTagFromResultSet(ResultSet resultSet) {
    return emptyIfNoResult(resultSet, () -> null, () -> getTagFromRow(resultSet.getRows().get(0)));
  }

  private static Tag getTagFromRow(JsonObject row) {
    Tag tag = new Tag();
    tag.setId(row.getString("ID"));
    tag.setName(row.getString("NAME"));
    return tag;
  }

  private static User getUserFromResultSet(ResultSet resultSet) {
    JsonObject row = resultSet.getRows().get(0);
    User user = new User();
    user.setId(row.getString("ID"));
    user.setUsername(row.getString("USERNAME"));
    user.setBio(row.getString("BIO"));
    user.setImage(row.getString("IMAGE"));
    user.setPassword(row.getString("PASSWORD"));
    user.setEmail(row.getString("EMAIL"));
    user.setToken(row.getString("TOKEN"));
    return user;
  }

  private static <T> T emptyIfNoResult(
      ResultSet resultSet, Supplier<T> emptySupplier, Supplier<T> supplier) {
    if (resultSet.getRows().isEmpty()) {
      return emptySupplier.get();
    } else {
      return supplier.get();
    }
  }

  private static <T> T parseResultSet(
      ResultSet resultSet, Function<ResultSet, T> function, Supplier<T> supplier) {
    if (!resultSet.getRows().isEmpty()) {
      return function.apply(resultSet);
    }
    return supplier.get();
  }

  public static String toTimestamp(LocalDateTime localDateTime) {
    return localDateTime != null ? localDateTime.format(dateTimeFormatter) : null;
  }

  private static LocalDateTime fromTimestamp(String timestamp) {
    return timestamp != null ? LocalDateTime.parse(timestamp, dateTimeFormatter) : null;
  }

  public static String format(LocalDateTime localDateTime, String pattern) {
    return localDateTime != null
        ? localDateTime.format(DateTimeFormatter.ofPattern(pattern))
        : null;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/provider/BCryptProvider.java
package com.example.realworld.infrastructure.provider;

import com.example.realworld.domain.user.model.HashProvider;
import org.mindrot.jbcrypt.BCrypt;
import org.springframework.stereotype.Component;

@Component
public class BCryptProvider implements HashProvider {
  @Override
  public String hashPassword(String plainPassword) {
    return BCrypt.hashpw(plainPassword, BCrypt.gensalt());
  }

  @Override
  public boolean isPasswordValid(String plainText, String hashed) {
    return BCrypt.checkpw(plainText, hashed);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/provider/JWTAuthProvider.java
package com.example.realworld.infrastructure.provider;

import com.example.realworld.domain.user.model.TokenProvider;
import io.vertx.core.json.JsonObject;
import io.vertx.reactivex.ext.auth.jwt.JWTAuth;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
public class JWTAuthProvider implements TokenProvider {

  private JWTAuth jwtAuth;

  public JWTAuthProvider(JWTAuth jwtAuth) {
    this.jwtAuth = jwtAuth;
  }

  @Override
  public String generateToken(String id) {
    return jwtAuth.generateToken(
        new JsonObject()
            .put("sub", id)
            .put("complementary-subscription", UUID.randomUUID().toString()));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/provider/SlugifyProvider.java
package com.example.realworld.infrastructure.provider;

import com.example.realworld.domain.article.model.SlugProvider;
import com.github.slugify.Slugify;
import org.springframework.stereotype.Component;

@Component
public class SlugifyProvider implements SlugProvider {

  private Slugify slugify;

  private SlugifyProvider(Slugify slugify) {
    this.slugify = slugify;
  }

  @Override
  public String slugify(String text) {
    return slugify.slugify(text);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/utils/SimpleQueryBuilder.java
package com.example.realworld.infrastructure.utils;

import java.util.LinkedList;
import java.util.List;
import java.util.Objects;

public class SimpleQueryBuilder {

  private List<String> queryStatements;
  private List<String> whereStatements;
  private String afterWhereStatement;

  public SimpleQueryBuilder() {
    this.queryStatements = new LinkedList<>();
    this.whereStatements = new LinkedList<>();
  }

  public void addQueryStatement(String queryStatement) {
    this.queryStatements.add(queryStatement);
  }

  public void updateQueryStatementConditional(String queryStatement, String whereStatement) {
    if (Objects.nonNull(queryStatement)) {
      queryStatements.add(queryStatement);
    }
    if (Objects.nonNull(whereStatement)) {
      whereStatements.add(whereStatement);
    }
  }

  public void addAfterWhereStatement(String afterWhereStatement) {
    this.afterWhereStatement = afterWhereStatement;
  }

  public String toQueryString() {
    StringBuilder queryBuilder = new StringBuilder();
    queryBuilder.append(String.join(" ", queryStatements));
    if (!whereStatements.isEmpty()) {
      queryBuilder.append(" WHERE ");
      queryBuilder.append(String.join(" AND ", whereStatements));
    }
    if (afterWhereStatement != null && !afterWhereStatement.isEmpty()) {
      queryBuilder.append(" ").append(afterWhereStatement);
    }

    return queryBuilder.toString();
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/validator/ModelValidatorImpl.java
package com.example.realworld.infrastructure.validator;

import com.example.realworld.domain.general.exception.BusinessException;
import com.example.realworld.domain.user.model.ModelValidator;
import org.springframework.stereotype.Component;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Component
public class ModelValidatorImpl implements ModelValidator {

  private Validator validator;

  public ModelValidatorImpl(Validator validator) {
    this.validator = validator;
  }

  @Override
  public <T> void validate(T model) {
    Set<ConstraintViolation<T>> constraintViolationSet = validator.validate(model);

    List<String> errorMessages =
        constraintViolationSet.stream()
            .map(ConstraintViolation::getMessage)
            .collect(Collectors.toList());

    if (!errorMessages.isEmpty()) {
      throw new BusinessException(errorMessages);
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/configuration/VertxConfiguration.java
package com.example.realworld.infrastructure.vertx.configuration;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties("vertx")
public class VertxConfiguration {

  private Server server;
  private Jwt jwt;
  private Database database;

  public static class Server {
    private int port;
    private String contextPath;

    public int getPort() {
      return port;
    }

    public void setPort(int port) {
      this.port = port;
    }

    public String getContextPath() {
      return contextPath;
    }

    public void setContextPath(String contextPath) {
      this.contextPath = contextPath;
    }
  }

  public static class Jwt {
    private String algorithm;
    private String secret;

    public String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(String algorithm) {
      this.algorithm = algorithm;
    }

    public String getSecret() {
      return secret;
    }

    public void setSecret(String secret) {
      this.secret = secret;
    }
  }

  public static class Database {
    private String url;
    private String driverClass;
    private int maxPoolSize;
    private String user;
    private String password;

    public String getUrl() {
      return url;
    }

    public void setUrl(String url) {
      this.url = url;
    }

    public String getDriverClass() {
      return driverClass;
    }

    public void setDriverClass(String driverClass) {
      this.driverClass = driverClass;
    }

    public int getMaxPoolSize() {
      return maxPoolSize;
    }

    public void setMaxPoolSize(int maxPoolSize) {
      this.maxPoolSize = maxPoolSize;
    }

    public String getUser() {
      return user;
    }

    public void setUser(String user) {
      this.user = user;
    }

    public String getPassword() {
      return password;
    }

    public void setPassword(String password) {
      this.password = password;
    }
  }

  public Server getServer() {
    return server;
  }

  public void setServer(Server server) {
    this.server = server;
  }

  public Jwt getJwt() {
    return jwt;
  }

  public void setJwt(Jwt jwt) {
    this.jwt = jwt;
  }

  public Database getDatabase() {
    return database;
  }

  public void setDatabase(Database database) {
    this.database = database;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/exception/mapper/BusinessExceptionMapper.java
package com.example.realworld.infrastructure.vertx.exception.mapper;

import com.example.realworld.domain.article.exception.ArticleAlreadyFavoritedException;
import com.example.realworld.domain.article.exception.ArticleAlreadyUnfavoritedException;
import com.example.realworld.domain.article.exception.ArticleNotFoundException;
import com.example.realworld.domain.general.exception.BusinessException;
import com.example.realworld.domain.profile.exception.SelfFollowException;
import com.example.realworld.domain.user.exception.EmailAlreadyExistsException;
import com.example.realworld.domain.user.exception.InvalidLoginException;
import com.example.realworld.domain.user.exception.UserNotFoundException;
import com.example.realworld.domain.user.exception.UsernameAlreadyExistsException;
import com.example.realworld.infrastructure.vertx.proxy.error.Error;
import com.example.realworld.infrastructure.web.model.response.ErrorResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.reactivex.core.http.HttpServerResponse;
import io.vertx.serviceproxy.ServiceException;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Component
public class BusinessExceptionMapper {

  private Map<String, BusinessExceptionHandler> exceptionMapper;
  private ObjectMapper wrapUnwrapRootValueObjectMapper;
  private ObjectMapper defaultObjectMapper;

  public BusinessExceptionMapper(
      @Qualifier("wrapUnwrapRootValueObjectMapper") ObjectMapper wrapUnwrapRootValueObjectMapper,
      @Qualifier("defaultObjectMapper") ObjectMapper defaultObjectMapper) {
    this.wrapUnwrapRootValueObjectMapper = wrapUnwrapRootValueObjectMapper;
    this.exceptionMapper = configureExceptionMapper();
    this.defaultObjectMapper = defaultObjectMapper;
  }

  private Map<String, BusinessExceptionHandler> configureExceptionMapper() {

    Map<String, BusinessExceptionHandler> handlerMap = new HashMap<>();

    handlerMap.put(UsernameAlreadyExistsException.class.getName(), conflict());
    handlerMap.put(EmailAlreadyExistsException.class.getName(), conflict());
    handlerMap.put(InvalidLoginException.class.getName(), unauthorized());
    handlerMap.put(UserNotFoundException.class.getName(), notFound());
    handlerMap.put(SelfFollowException.class.getName(), conflict());
    handlerMap.put(ArticleAlreadyFavoritedException.class.getName(), conflict());
    handlerMap.put(ArticleAlreadyUnfavoritedException.class.getName(), conflict());
    handlerMap.put(ArticleNotFoundException.class.getName(), notFound());

    return handlerMap;
  }

  private BusinessExceptionHandler notFound() {
    return exceptionHandler(
        HttpResponseStatus.NOT_FOUND.reasonPhrase(), HttpResponseStatus.NOT_FOUND.code());
  }

  private BusinessExceptionHandler conflict() {
    return exceptionHandler(
        HttpResponseStatus.CONFLICT.reasonPhrase(), HttpResponseStatus.CONFLICT.code());
  }

  private BusinessExceptionHandler unauthorized() {
    return exceptionHandler(
        HttpResponseStatus.UNAUTHORIZED.reasonPhrase(), HttpResponseStatus.UNAUTHORIZED.code());
  }

  private BusinessExceptionHandler exceptionHandler(String message, int httpStatusCode) {
    return (httpServerResponse, businessException) -> {
      ErrorResponse errorResponse = new ErrorResponse(message);
      if (businessException.haveMessages()) {
        errorResponse = new ErrorResponse(businessException.getMessages());
      }
      errorResponse(httpServerResponse, errorResponse, httpStatusCode);
    };
  }

  private void errorResponse(
      HttpServerResponse httpServerResponse, ErrorResponse errorResponse, int httpStatusCode) {
    try {
      httpServerResponse
          .setStatusCode(httpStatusCode)
          .end(wrapUnwrapRootValueObjectMapper.writeValueAsString(errorResponse));
    } catch (JsonProcessingException e) {
      httpServerResponse.end(e.getMessage());
    }
  }

  public void handle(ServiceException serviceException, HttpServerResponse httpServerResponse) {
    try {
      Error error = defaultObjectMapper.readValue(serviceException.getMessage(), Error.class);
      this.exceptionMapper
          .get(error.getClassName())
          .handler(httpServerResponse, error.getException());
    } catch (Exception e) {
      httpServerResponse.setStatusCode(HttpResponseStatus.INTERNAL_SERVER_ERROR.code()).end();
    }
  }

  private interface BusinessExceptionHandler {
    void handler(HttpServerResponse httpServerResponse, BusinessException businessException);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/ArticleOperations.java
package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.web.model.request.NewArticleRequest;
import com.example.realworld.infrastructure.web.model.request.NewCommentRequest;
import com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest;
import com.example.realworld.infrastructure.web.model.response.ArticleResponse;
import com.example.realworld.infrastructure.web.model.response.ArticlesResponse;
import com.example.realworld.infrastructure.web.model.response.CommentResponse;
import com.example.realworld.infrastructure.web.model.response.CommentsResponse;
import io.vertx.codegen.annotations.ProxyGen;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;

import java.util.List;

@ProxyGen
@VertxGen
public interface ArticleOperations {

  String SERVICE_ADDRESS = "articles-service-event-bus";

  void findRecentArticles(
      String currentUserId, int offset, int limit, Handler<AsyncResult<ArticlesResponse>> handler);

  void findArticles(
      String currentUserId,
      int offset,
      int limit,
      List<String> tags,
      List<String> authors,
      List<String> favorited,
      Handler<AsyncResult<ArticlesResponse>> handler);

  void create(
      String currentUserId,
      NewArticleRequest newArticleRequest,
      Handler<AsyncResult<ArticleResponse>> handler);

  void findBySlug(String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler);

  void updateBySlug(
      String slug,
      String currentUserId,
      UpdateArticleRequest updateArticleRequest,
      Handler<AsyncResult<ArticleResponse>> handler);

  void deleteArticleBySlug(String slug, String currentUserId, Handler<AsyncResult<Void>> handler);

  void createCommentBySlug(
      String slug,
      String currentUserId,
      NewCommentRequest newCommentRequest,
      Handler<AsyncResult<CommentResponse>> handler);

  void deleteCommentByIdAndAuthorId(
      String commentId, String currentUserId, Handler<AsyncResult<Void>> handler);

  void findCommentsBySlug(
      String slug, String currentUserId, Handler<AsyncResult<CommentsResponse>> handler);

  void favoriteArticle(
      String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler);

  void unfavoriteArticle(
      String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/package-info.java
@ModuleGen(groupPackage = "com.example.realworld.infrastructure.vertx.proxy", name = "service")
package com.example.realworld.infrastructure.vertx.proxy;

import io.vertx.codegen.annotations.ModuleGen;

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/ProfileOperations.java
package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.web.model.response.ProfileResponse;
import io.vertx.codegen.annotations.ProxyGen;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;

@ProxyGen
@VertxGen
public interface ProfileOperations {

  String SERVICE_ADDRESS = "profiles-service-event-bus";

  void getProfile(
      String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler);

  void follow(String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler);

  void unfollow(
      String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/TagsOperations.java
package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.web.model.response.TagsResponse;
import io.vertx.codegen.annotations.ProxyGen;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;

@ProxyGen
@VertxGen
public interface TagsOperations {

  String SERVICE_ADDRESS = "tags-service-event-bus";

  void findTags(Handler<AsyncResult<TagsResponse>> handler);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/UserOperations.java
package com.example.realworld.infrastructure.vertx.proxy;

import com.example.realworld.infrastructure.web.model.request.LoginRequest;
import com.example.realworld.infrastructure.web.model.request.NewUserRequest;
import com.example.realworld.infrastructure.web.model.request.UpdateUserRequest;
import com.example.realworld.infrastructure.web.model.response.UserResponse;
import io.vertx.codegen.annotations.ProxyGen;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;

@ProxyGen
@VertxGen
public interface UserOperations {

  String SERVICE_ADDRESS = "user-service-event-bus";

  void create(NewUserRequest newUserRequest, Handler<AsyncResult<UserResponse>> handler);

  void login(LoginRequest loginRequest, Handler<AsyncResult<UserResponse>> handler);

  void findById(String userId, Handler<AsyncResult<UserResponse>> handler);

  void update(
      String currentUserId,
      UpdateUserRequest updateUserRequest,
      Handler<AsyncResult<UserResponse>> handler);
  //
  //  void findByUsername(String username, Handler<AsyncResult<UserResponse>> handler);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/error/Error.java
package com.example.realworld.infrastructure.vertx.proxy.error;

import com.example.realworld.domain.general.exception.BusinessException;

public class Error<E extends BusinessException> {

  private String className;
  private E exception;

  public Error() {}

  public Error(String className, E exception) {
    this.className = className;
    this.exception = exception;
  }

  public String getClassName() {
    return className;
  }

  public void setClassName(String className) {
    this.className = className;
  }

  public E getException() {
    return exception;
  }

  public void setException(E exception) {
    this.exception = exception;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/AbstractOperations.java
package com.example.realworld.infrastructure.vertx.proxy.impl;

import com.example.realworld.domain.general.exception.BusinessException;
import com.example.realworld.infrastructure.vertx.proxy.error.Error;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.AsyncResult;
import io.vertx.serviceproxy.ServiceException;

public class AbstractOperations {

  private ObjectMapper objectMapper;

  public AbstractOperations(ObjectMapper objectMapper) {
    this.objectMapper = objectMapper;
  }

  <T> AsyncResult<T> error(Throwable throwable) {
    String error;
    try {

      if (throwable instanceof BusinessException) {
        BusinessException businessException = (BusinessException) throwable;
        error =
            objectMapper.writeValueAsString(
                new Error<>(businessException.getClass().getName(), businessException));
      } else {
        error = objectMapper.writeValueAsString(throwable);
      }

    } catch (JsonProcessingException ex) {
      error = ex.getMessage();
    }
    return ServiceException.fail(1, error);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/ArticleOperationsImpl.java
package com.example.realworld.infrastructure.vertx.proxy.impl;

import com.example.realworld.domain.article.service.ArticleService;
import com.example.realworld.infrastructure.vertx.proxy.ArticleOperations;
import com.example.realworld.infrastructure.web.model.request.NewArticleRequest;
import com.example.realworld.infrastructure.web.model.request.NewCommentRequest;
import com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest;
import com.example.realworld.infrastructure.web.model.response.ArticleResponse;
import com.example.realworld.infrastructure.web.model.response.ArticlesResponse;
import com.example.realworld.infrastructure.web.model.response.CommentResponse;
import com.example.realworld.infrastructure.web.model.response.CommentsResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;

import java.util.List;

public class ArticleOperationsImpl extends AbstractOperations implements ArticleOperations {

  private ArticleService articleService;

  public ArticleOperationsImpl(ArticleService articleService, ObjectMapper objectMapper) {
    super(objectMapper);
    this.articleService = articleService;
  }

  @Override
  public void findRecentArticles(
      String currentUserId, int offset, int limit, Handler<AsyncResult<ArticlesResponse>> handler) {
    articleService
        .findRecentArticles(currentUserId, offset, limit)
        .subscribe(
            articlesData ->
                handler.handle(Future.succeededFuture(new ArticlesResponse(articlesData))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void findArticles(
      String currentUserId,
      int offset,
      int limit,
      List<String> tags,
      List<String> authors,
      List<String> favorited,
      Handler<AsyncResult<ArticlesResponse>> handler) {
    articleService
        .findArticles(currentUserId, offset, limit, tags, authors, favorited)
        .subscribe(
            articlesData ->
                handler.handle(Future.succeededFuture(new ArticlesResponse(articlesData))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void create(
      String currentUserId,
      NewArticleRequest newArticleRequest,
      Handler<AsyncResult<ArticleResponse>> handler) {
    articleService
        .create(currentUserId, newArticleRequest.toNewArticle())
        .subscribe(
            articleData -> handler.handle(Future.succeededFuture(new ArticleResponse(articleData))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void findBySlug(
      String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler) {
    articleService
        .findBySlug(slug, currentUserId)
        .subscribe(
            articleData -> handler.handle(Future.succeededFuture(new ArticleResponse(articleData))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void updateBySlug(
      String slug,
      String currentUserId,
      UpdateArticleRequest updateArticleRequest,
      Handler<AsyncResult<ArticleResponse>> handler) {
    articleService
        .updateBySlug(slug, currentUserId, updateArticleRequest.toUpdateArticle())
        .subscribe(
            articleData -> handler.handle(Future.succeededFuture(new ArticleResponse(articleData))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void deleteArticleBySlug(
      String slug, String currentUserId, Handler<AsyncResult<Void>> handler) {
    articleService
        .deleteArticleBySlugAndAuthorId(slug, currentUserId)
        .subscribe(
            () -> handler.handle(Future.succeededFuture()),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void createCommentBySlug(
      String slug,
      String currentUserId,
      NewCommentRequest newCommentRequest,
      Handler<AsyncResult<CommentResponse>> handler) {
    articleService
        .createCommentBySlug(slug, currentUserId, newCommentRequest.getBody())
        .subscribe(
            commentData -> handler.handle(Future.succeededFuture(new CommentResponse(commentData))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void deleteCommentByIdAndAuthorId(
      String commentId, String currentUserId, Handler<AsyncResult<Void>> handler) {
    articleService
        .deleteCommentByIdAndAuthorId(commentId, currentUserId)
        .subscribe(
            () -> handler.handle(Future.succeededFuture()),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void findCommentsBySlug(
      String slug, String currentUserId, Handler<AsyncResult<CommentsResponse>> handler) {
    articleService
        .findCommentsBySlug(slug, currentUserId)
        .subscribe(
            comments -> handler.handle(Future.succeededFuture(new CommentsResponse(comments))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void favoriteArticle(
      String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler) {
    articleService
        .favoriteArticle(slug, currentUserId)
        .subscribe(
            articleData -> handler.handle(Future.succeededFuture(new ArticleResponse(articleData))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void unfavoriteArticle(
      String slug, String currentUserId, Handler<AsyncResult<ArticleResponse>> handler) {
    articleService
        .unfavoriteArticle(slug, currentUserId)
        .subscribe(
            articleData -> handler.handle(Future.succeededFuture(new ArticleResponse(articleData))),
            throwable -> handler.handle(error(throwable)));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/ProfileOperationsImpl.java
package com.example.realworld.infrastructure.vertx.proxy.impl;

import com.example.realworld.domain.profile.service.ProfileService;
import com.example.realworld.infrastructure.vertx.proxy.ProfileOperations;
import com.example.realworld.infrastructure.web.model.response.ProfileResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;

public class ProfileOperationsImpl extends AbstractOperations implements ProfileOperations {

  private ProfileService profileService;

  public ProfileOperationsImpl(ProfileService profileService, ObjectMapper objectMapper) {
    super(objectMapper);
    this.profileService = profileService;
  }

  @Override
  public void getProfile(
      String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler) {
    profileService
        .getProfile(username, currentUserId)
        .subscribe(
            profile -> handler.handle(Future.succeededFuture(new ProfileResponse(profile))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void follow(
      String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler) {
    profileService
        .follow(username, currentUserId)
        .subscribe(
            profile -> handler.handle(Future.succeededFuture(new ProfileResponse(profile))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void unfollow(
      String username, String currentUserId, Handler<AsyncResult<ProfileResponse>> handler) {
    profileService
        .unfollow(username, currentUserId)
        .subscribe(
            profile -> handler.handle(Future.succeededFuture(new ProfileResponse(profile))),
            throwable -> handler.handle(error(throwable)));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/TagsOperationsImpl.java
package com.example.realworld.infrastructure.vertx.proxy.impl;

import com.example.realworld.domain.tag.service.TagService;
import com.example.realworld.infrastructure.vertx.proxy.TagsOperations;
import com.example.realworld.infrastructure.web.model.response.TagsResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;

public class TagsOperationsImpl extends AbstractOperations implements TagsOperations {

  private TagService tagService;

  public TagsOperationsImpl(TagService tagService, ObjectMapper objectMapper) {
    super(objectMapper);
    this.tagService = tagService;
  }

  @Override
  public void findTags(Handler<AsyncResult<TagsResponse>> handler) {
    tagService
        .findAll()
        .subscribe(
            tags -> handler.handle(Future.succeededFuture(new TagsResponse(tags))),
            throwable -> handler.handle(error(throwable)));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/proxy/impl/UserOperationsImpl.java
package com.example.realworld.infrastructure.vertx.proxy.impl;

import com.example.realworld.domain.user.service.UserService;
import com.example.realworld.infrastructure.vertx.proxy.UserOperations;
import com.example.realworld.infrastructure.web.model.request.LoginRequest;
import com.example.realworld.infrastructure.web.model.request.NewUserRequest;
import com.example.realworld.infrastructure.web.model.request.UpdateUserRequest;
import com.example.realworld.infrastructure.web.model.response.UserResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;

public class UserOperationsImpl extends AbstractOperations implements UserOperations {

  private UserService userService;

  public UserOperationsImpl(UserService userService, ObjectMapper objectMapper) {
    super(objectMapper);
    this.userService = userService;
  }

  @Override
  public void create(NewUserRequest newUserRequest, Handler<AsyncResult<UserResponse>> handler) {
    userService
        .create(newUserRequest.toNewUser())
        .subscribe(
            user -> handler.handle(Future.succeededFuture(new UserResponse(user))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void login(LoginRequest loginRequest, Handler<AsyncResult<UserResponse>> handler) {
    userService
        .login(loginRequest.toLogin())
        .subscribe(
            user -> handler.handle(Future.succeededFuture(new UserResponse(user))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void findById(String userId, Handler<AsyncResult<UserResponse>> handler) {
    userService
        .findById(userId)
        .subscribe(
            user -> handler.handle(Future.succeededFuture(new UserResponse(user))),
            throwable -> handler.handle(error(throwable)));
  }

  @Override
  public void update(
      String currentUserId,
      UpdateUserRequest updateUserRequest,
      Handler<AsyncResult<UserResponse>> handler) {
    userService
        .update(updateUserRequest.toUpdateUser(), currentUserId)
        .subscribe(
            user -> handler.handle(Future.succeededFuture((new UserResponse(user)))),
            throwable -> handler.handle(error(throwable)));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/verticle/AbstractHttpVerticle.java
package com.example.realworld.infrastructure.vertx.verticle;

import com.example.realworld.infrastructure.vertx.exception.mapper.BusinessExceptionMapper;
import com.example.realworld.infrastructure.web.exception.RequestValidationException;
import com.example.realworld.infrastructure.web.model.response.ErrorResponse;
import com.example.realworld.infrastructure.web.route.HttpRoute;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.core.Promise;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import io.vertx.reactivex.core.AbstractVerticle;
import io.vertx.reactivex.core.http.HttpServerResponse;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.serviceproxy.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;

import java.util.List;

public class AbstractHttpVerticle extends AbstractVerticle {

  final Logger logger = LoggerFactory.getLogger(getClass());

  @Autowired
  @Qualifier("wrapUnwrapRootValueObjectMapper")
  private ObjectMapper wrapUnwrapRootValueObjectMapper;

  @Autowired private BusinessExceptionMapper businessExceptionMapper;

  @Value("${vertx.server.context_path}")
  private String contextPath;

  @Value("${vertx.server.port}")
  private int serverPort;

  protected void createHttpServer(List<HttpRoute> httpRoutes, Promise<Void> startPromise) {
    vertx
        .createHttpServer()
        .requestHandler(subRouter(httpRoutes))
        .rxListen(serverPort)
        .subscribe(
            httpServer -> {
              logger.info("HttpVerticle started on port " + serverPort);
              startPromise.complete();
            },
            startPromise::fail);
  }

  private void handlerRequestValidation(
      HttpServerResponse httpServerResponse,
      RequestValidationException requestValidationException) {

    httpServerResponse
        .setStatusCode(HttpResponseStatus.UNPROCESSABLE_ENTITY.code())
        .end(writeValueAsString(requestValidationException.getErrorResponse()));
  }

  protected <T> void response(RoutingContext routingContext, int statusCode, T response) {
    try {
      routingContext
          .response()
          .setStatusCode(statusCode)
          .end(wrapUnwrapRootValueObjectMapper.writeValueAsString(response));
    } catch (JsonProcessingException e) {
      routingContext.fail(e);
    }
  }

  protected Router subRouter(List<HttpRoute> routers) {
    final Router baseRouter = Router.router(vertx);
    configApiErrorHandler(baseRouter);
    routers.forEach(router -> baseRouter.mountSubRouter(contextPath, router.configure(vertx)));
    return baseRouter;
  }

  private void configApiErrorHandler(Router baseRouter) {
    baseRouter
        .route()
        .failureHandler(
            failureRoutingContext -> {
              HttpServerResponse response = failureRoutingContext.response();

              if (failureRoutingContext.failure() instanceof RequestValidationException) {

                handlerRequestValidation(
                    response, (RequestValidationException) failureRoutingContext.failure());

              } else if (failureRoutingContext.failure() instanceof ServiceException) {

                ServiceException serviceException =
                    (ServiceException) failureRoutingContext.failure();

                this.businessExceptionMapper.handle(serviceException, response);

              } else {

                response.end(
                    writeValueAsString(
                        new ErrorResponse(failureRoutingContext.failure().toString())));
              }
            });
  }

  protected String writeValueAsString(Object value) {
    String result;
    try {
      result = wrapUnwrapRootValueObjectMapper.writeValueAsString(value);
    } catch (JsonProcessingException ex) {
      throw new RuntimeException(ex);
    }
    return result;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/vertx/verticle/HttpVerticle.java
package com.example.realworld.infrastructure.vertx.verticle;

import com.example.realworld.infrastructure.web.route.HttpRoute;
import io.vertx.core.Promise;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class HttpVerticle extends AbstractHttpVerticle {

  private List<HttpRoute> httpRoutes;

  public HttpVerticle(List<HttpRoute> httpRoutes) {
    this.httpRoutes = httpRoutes;
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    createHttpServer(this.httpRoutes, startPromise);
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/exception/RequestValidationException.java
package com.example.realworld.infrastructure.web.exception;

import com.example.realworld.infrastructure.web.model.response.ErrorResponse;

public class RequestValidationException extends RuntimeException {

  private ErrorResponse errorResponse;

  public RequestValidationException(ErrorResponse errorResponse) {
    this.errorResponse = errorResponse;
  }

  public ErrorResponse getErrorResponse() {
    return errorResponse;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/package-info.java
@ModuleGen(groupPackage = "com.example.realworld.infrastructure.web.model", name = "webmodel")
package com.example.realworld.infrastructure.web.model;

import io.vertx.codegen.annotations.ModuleGen;

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/LoginRequest.java
package com.example.realworld.infrastructure.web.model.request;

import com.example.realworld.domain.user.model.Login;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

@JsonRootName("user")
@DataObject(generateConverter = true)
public class LoginRequest {

  private String email;

  private String password;

  public LoginRequest() {}

  public LoginRequest(JsonObject jsonObject) {
    LoginRequestConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    LoginRequestConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public Login toLogin() {
    Login login = new Login();
    login.setEmail(this.email);
    login.setPassword(this.password);
    return login;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/NewArticleRequest.java
package com.example.realworld.infrastructure.web.model.request;

import com.example.realworld.domain.article.model.NewArticle;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

import java.util.List;

@JsonRootName("article")
@DataObject(generateConverter = true)
public class NewArticleRequest {

  private String title;

  private String description;

  private String body;

  private List<String> tagList;

  public NewArticleRequest() {}

  public NewArticleRequest(JsonObject jsonObject) {
    NewArticleRequestConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    NewArticleRequestConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public List<String> getTagList() {
    return tagList;
  }

  public void setTagList(List<String> tagList) {
    this.tagList = tagList;
  }

  public NewArticle toNewArticle() {
    NewArticle newArticle = new NewArticle();
    newArticle.setTitle(this.title);
    newArticle.setDescription(this.description);
    newArticle.setBody(this.body);
    newArticle.setTags(this.tagList);
    return newArticle;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/NewCommentRequest.java
package com.example.realworld.infrastructure.web.model.request;

import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

@JsonRootName("comment")
@DataObject(generateConverter = true)
public class NewCommentRequest {

  private String body;

  public NewCommentRequest() {}

  public NewCommentRequest(JsonObject jsonObject) {
    NewCommentRequestConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    NewCommentRequestConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/NewUserRequest.java
package com.example.realworld.infrastructure.web.model.request;

import com.example.realworld.domain.user.model.NewUser;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

@JsonRootName("user")
@DataObject(generateConverter = true)
public class NewUserRequest {

  private String username;

  private String email;

  private String password;

  public NewUserRequest() {}

  public NewUserRequest(JsonObject jsonObject) {
    NewUserRequestConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    NewUserRequestConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public NewUser toNewUser() {
    NewUser newUser = new NewUser();
    newUser.setUsername(this.username);
    newUser.setEmail(this.email);
    newUser.setPassword(this.password);
    return newUser;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/UpdateArticleRequest.java
package com.example.realworld.infrastructure.web.model.request;

import com.example.realworld.domain.article.model.UpdateArticle;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

@JsonRootName("article")
@DataObject(generateConverter = true)
public class UpdateArticleRequest {

  private String title;

  private String description;

  private String body;

  public UpdateArticleRequest() {}

  public UpdateArticleRequest(JsonObject jsonObject) {
    UpdateArticleRequestConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    UpdateArticleRequestConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public UpdateArticle toUpdateArticle() {
    UpdateArticle updateArticle = new UpdateArticle();
    updateArticle.setTitle(this.title);
    updateArticle.setDescription(this.description);
    updateArticle.setBody(this.body);
    return updateArticle;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/request/UpdateUserRequest.java
package com.example.realworld.infrastructure.web.model.request;

import com.example.realworld.application.constants.ValidationMessages;
import com.example.realworld.domain.user.model.UpdateUser;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

import javax.validation.constraints.Email;
import javax.validation.constraints.Pattern;

@JsonRootName("user")
@DataObject(generateConverter = true)
public class UpdateUserRequest {

  @Pattern(regexp = "\\A(?!\\s*\\Z).+", message = ValidationMessages.USERNAME_MUST_BE_NOT_BLANK)
  private String username;

  private String bio;
  private String image;
  @Email private String email;

  public UpdateUserRequest() {}

  public UpdateUserRequest(JsonObject jsonObject) {
    UpdateUserRequestConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    UpdateUserRequestConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public UpdateUser toUpdateUser() {
    UpdateUser updateUser = new UpdateUser();
    updateUser.setUsername(this.username);
    updateUser.setBio(this.bio);
    updateUser.setImage(this.image);
    updateUser.setEmail(this.email);
    return updateUser;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ArticleResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.example.realworld.application.data.ArticleData;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

import java.util.List;

@JsonRootName("article")
@DataObject(generateConverter = true)
public class ArticleResponse {

  private static final String datePattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";

  private String slug;
  private String title;
  private String description;
  private String body;
  private List<String> tagList;

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = datePattern)
  private String createdAt;

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = datePattern)
  private String updatedAt;

  private boolean favorited;
  private Long favoritesCount;
  private ProfileResponse author;

  public ArticleResponse() {}

  public ArticleResponse(JsonObject jsonObject) {
    ArticleResponseConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    ArticleResponseConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public ArticleResponse(ArticleData article) {
    this.slug = article.getSlug();
    this.title = article.getTitle();
    this.description = article.getDescription();
    this.body = article.getBody();
    this.createdAt = ParserUtils.format(article.getCreatedAt(), datePattern);
    this.updatedAt = ParserUtils.format(article.getUpdatedAt(), datePattern);
    this.tagList = article.getTagList();
    this.favorited = article.isFavorited();
    this.favoritesCount = article.getFavoritesCount();
    this.author = new ProfileResponse(article.getAuthor());
  }

  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public List<String> getTagList() {
    return tagList;
  }

  public void setTagList(List<String> tagList) {
    this.tagList = tagList;
  }

  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public boolean isFavorited() {
    return favorited;
  }

  public void setFavorited(boolean favorited) {
    this.favorited = favorited;
  }

  public Long getFavoritesCount() {
    return favoritesCount;
  }

  public void setFavoritesCount(Long favoritesCount) {
    this.favoritesCount = favoritesCount;
  }

  public ProfileResponse getAuthor() {
    return author;
  }

  public void setAuthor(ProfileResponse author) {
    this.author = author;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ArticlesResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.example.realworld.application.data.ArticlesData;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

import java.util.List;
import java.util.stream.Collectors;

@DataObject(generateConverter = true)
public class ArticlesResponse {

  private List<ArticleResponse> articles;
  private long articlesCount;

  public ArticlesResponse() {}

  public ArticlesResponse(JsonObject jsonObject) {
    ArticlesResponseConverter.fromJson(jsonObject, this);
  }

  public ArticlesResponse(ArticlesData articlesData) {
    this.articles =
        articlesData.getArticles().stream().map(ArticleResponse::new).collect(Collectors.toList());
    this.articlesCount = articlesData.getArticlesCount();
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    ArticlesResponseConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public ArticlesResponse(List<ArticleResponse> articles, Long articlesCount) {
    this.articles = articles;
    this.articlesCount = articlesCount;
  }

  public List<ArticleResponse> getArticles() {
    return articles;
  }

  public void setArticles(List<ArticleResponse> articles) {
    this.articles = articles;
  }

  public long getArticlesCount() {
    return articlesCount;
  }

  public void setArticlesCount(long articlesCount) {
    this.articlesCount = articlesCount;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/CommentResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.example.realworld.application.data.CommentData;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

@JsonRootName("comment")
@DataObject(generateConverter = true)
public class CommentResponse {

  private static final String datePattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";

  private String id;

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = datePattern)
  private String createdAt;

  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = datePattern)
  private String updatedAt;

  private String body;
  private ProfileResponse author;

  public CommentResponse() {}

  public CommentResponse(JsonObject jsonObject) {
    CommentResponseConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    CommentResponseConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public CommentResponse(CommentData commentData) {
    this.id = commentData.getId();
    this.createdAt = ParserUtils.format(commentData.getCreatedAt(), datePattern);
    this.updatedAt = ParserUtils.format(commentData.getUpdatedAt(), datePattern);
    this.body = commentData.getBody();
    this.author = new ProfileResponse(commentData.getAuthor());
  }

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public ProfileResponse getAuthor() {
    return author;
  }

  public void setAuthor(ProfileResponse author) {
    this.author = author;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/CommentsResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.example.realworld.application.data.CommentData;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;
import lombok.Getter;
import lombok.Setter;

import java.util.List;
import java.util.stream.Collectors;

@Getter
@Setter
@DataObject(generateConverter = true)
public class CommentsResponse {

  private List<CommentResponse> comments;

  public CommentsResponse() {}

  public CommentsResponse(JsonObject jsonObject) {
    CommentsResponseConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    CommentsResponseConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public CommentsResponse(List<CommentData> comments) {
    this.comments = comments.stream().map(CommentResponse::new).collect(Collectors.toList());
  }

  public List<CommentResponse> getComments() {
    return comments;
  }

  public void setComments(List<CommentResponse> comments) {
    this.comments = comments;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ErrorResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.fasterxml.jackson.annotation.JsonRootName;

import java.util.LinkedList;
import java.util.List;

@JsonRootName("errors")
public class ErrorResponse {

  private List<String> body;

  public ErrorResponse() {
    this.body = new LinkedList<>();
  }

  public ErrorResponse(String error) {
    this();
    this.body.add(error);
  }

  public ErrorResponse(List<String> body) {
    this.body = body;
  }

  public List<String> getBody() {
    return body;
  }

  public void setBody(List<String> body) {
    this.body = body;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/ProfileResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.example.realworld.application.data.ProfileData;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

@JsonRootName("profile")
@DataObject(generateConverter = true)
public class ProfileResponse {

  private String username;
  private String bio;
  private String image;
  private boolean following;

  public ProfileResponse() {}

  public ProfileResponse(JsonObject jsonObject) {
    ProfileResponseConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    ProfileResponseConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public ProfileResponse(ProfileData profile) {
    this.username = profile.getUsername();
    this.bio = profile.getBio();
    this.image = profile.getImage();
    this.following = profile.isFollowing();
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public boolean isFollowing() {
    return following;
  }

  public void setFollowing(boolean following) {
    this.following = following;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/TagsResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.example.realworld.domain.tag.model.Tag;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

import java.util.List;
import java.util.stream.Collectors;

@DataObject(generateConverter = true)
public class TagsResponse {

  private List<String> tags;

  public TagsResponse() {}

  public TagsResponse(JsonObject jsonObject) {
    TagsResponseConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    TagsResponseConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public TagsResponse(List<Tag> tags) {
    this.tags = tags.stream().map(Tag::getName).collect(Collectors.toList());
  }

  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/model/response/UserResponse.java
package com.example.realworld.infrastructure.web.model.response;

import com.example.realworld.domain.user.model.User;
import com.fasterxml.jackson.annotation.JsonRootName;
import io.vertx.codegen.annotations.DataObject;
import io.vertx.core.json.JsonObject;

@JsonRootName("user")
@DataObject(generateConverter = true)
public class UserResponse {

  private String username;
  private String bio;
  private String image;
  private String email;
  private String token;

  public UserResponse() {}

  public UserResponse(JsonObject jsonObject) {
    UserResponseConverter.fromJson(jsonObject, this);
  }

  public JsonObject toJson() {
    JsonObject jsonObject = new JsonObject();
    UserResponseConverter.toJson(this, jsonObject);
    return jsonObject;
  }

  public UserResponse(User user) {
    this.username = user.getUsername();
    this.bio = user.getBio();
    this.image = user.getImage();
    this.email = user.getEmail();
    this.token = user.getToken();
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/AbstractHttpRoute.java
package com.example.realworld.infrastructure.web.route;

import com.example.realworld.infrastructure.web.model.response.ErrorResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.reactivex.ext.auth.jwt.JWTAuth;
import io.vertx.reactivex.ext.web.RoutingContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import javax.validation.Validator;
import java.io.IOException;
import java.util.Optional;
import java.util.function.Consumer;

@Component
public abstract class AbstractHttpRoute implements HttpRoute {

  public static final String AUTHORIZATION_HEADER = "Authorization";
  public static final String AUTHORIZATION_HEADER_PREFIX = "Token ";
  public static final String USER_ID_CONTEXT_KEY = "userId";

  @Autowired
  @Qualifier("wrapUnwrapRootValueObjectMapper")
  private ObjectMapper wrapUnwrapRootValueObjectMapper;

  @Autowired
  @Qualifier("defaultObjectMapper")
  private ObjectMapper defaultObjectMapper;

  @Autowired private Validator validator;
  @Autowired protected JWTAuth jwtAuth;

  protected void jwtHandler(RoutingContext routingContext, boolean optional) {

    String authorization = routingContext.request().headers().get(AUTHORIZATION_HEADER);

    if (authorization != null && authorization.contains(AUTHORIZATION_HEADER_PREFIX)) {

      String token = authorization.replace(AUTHORIZATION_HEADER_PREFIX, "");

      jwtAuth
          .rxAuthenticate(new JsonObject().put("jwt", token))
          .subscribe(
              user -> {
                routingContext.put(USER_ID_CONTEXT_KEY, user.principal().getString("sub"));
                routingContext.next();
              },
              throwable -> optionalAuthorization(routingContext, optional));
    } else {
      optionalAuthorization(routingContext, optional);
    }
  }

  private void optionalAuthorization(RoutingContext routingContext, boolean optional) {
    if (optional) {
      routingContext.next();
    } else {
      unauthorizedResponse(routingContext);
    }
  }

  protected void unauthorizedResponse(RoutingContext routingContext) {
    response(
        routingContext,
        HttpResponseStatus.UNAUTHORIZED.code(),
        new ErrorResponse("Unauthorized"),
        true);
  }

  protected <T> void userId(RoutingContext routingContext, boolean optional, Consumer<T> consumer) {
    Optional<T> userIdOptional = userIdOptional(routingContext);

    if (userIdOptional.isPresent()) {
      consumer.accept(userIdOptional.get());
    } else {
      if (optional) {
        consumer.accept(null);
      } else {
        unauthorizedResponse(routingContext);
      }
    }
  }

  protected <T> T getBody(RoutingContext routingContext, Class<T> clazz) {
    T result;
    try {
      result = wrapUnwrapRootValueObjectMapper.readValue(routingContext.getBodyAsString(), clazz);
    } catch (IOException ex) {
      throw new RuntimeException(ex);
    }
    return result;
  }

  private <T> Optional<T> userIdOptional(RoutingContext routingContext) {
    return Optional.ofNullable(routingContext.get(USER_ID_CONTEXT_KEY));
  }

  protected <T> void response(
      RoutingContext routingContext,
      int statusCode,
      T response,
      boolean useWrapUnwrapRootValueObjectMapper) {
    try {
      routingContext
          .response()
          .setStatusCode(statusCode)
          .end(
              useWrapUnwrapRootValueObjectMapper
                  ? wrapUnwrapRootValueObjectMapper.writeValueAsString(response)
                  : defaultObjectMapper.writeValueAsString(response));
    } catch (JsonProcessingException e) {
      routingContext.fail(e);
    }
  }

  protected <T> Handler<AsyncResult<T>> responseOrFail(
      RoutingContext routingContext, int statusCode, boolean useWrapUnwrapRootValueObjectMapper) {
    return asyncResult -> {
      if (asyncResult.succeeded()) {
        T result = asyncResult.result();
        response(routingContext, statusCode, result, useWrapUnwrapRootValueObjectMapper);
      } else {
        routingContext.fail(asyncResult.cause());
      }
    };
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/ArticlesRoute.java
package com.example.realworld.infrastructure.web.route;

import com.example.realworld.infrastructure.vertx.proxy.ArticleOperations;
import com.example.realworld.infrastructure.web.model.request.NewArticleRequest;
import com.example.realworld.infrastructure.web.model.request.NewCommentRequest;
import com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.reactivex.core.MultiMap;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.reactivex.ext.web.handler.BodyHandler;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ArticlesRoute extends AbstractHttpRoute {

  private static final String ARTICLES_PATH = "/articles";
  private static final String FEED_PATH = ARTICLES_PATH + "/feed";
  private static final String SLUG_PARAM = "slug";
  private static final String SLUG_PATH = ARTICLES_PATH + "/:" + SLUG_PARAM;
  private static final String COMMENTS_PATH = SLUG_PATH + "/comments";
  private static final String COMMENT_ID_PARAM = "id";
  private static final String COMMENTS_DELETE_PATH = COMMENTS_PATH + "/:" + COMMENT_ID_PARAM;
  private static final String FAVORITE_PATH = SLUG_PATH + "/favorite";
  public static final String OFFSET = "offset";
  public static final String LIMIT = "limit";
  private ArticleOperations articleOperations;

  public ArticlesRoute(ArticleOperations articleOperations) {
    this.articleOperations = articleOperations;
  }

  @Override
  public Router configure(Vertx vertx) {

    String articlesPath = "/articles";

    final Router articlesRouter = Router.router(vertx);

    articlesRouter.route().handler(BodyHandler.create());

    articlesRouter
        .route(articlesPath + "/*")
        .handler(routingContext -> jwtHandler(routingContext, true));

    articlesRouter.get(FEED_PATH).handler(this::feed);
    articlesRouter.get(ARTICLES_PATH).handler(this::getArticles);
    articlesRouter.post(ARTICLES_PATH).handler(this::createArticle);
    articlesRouter.get(SLUG_PATH).handler(this::findArticleBySlug);
    articlesRouter.put(SLUG_PATH).handler(this::updateArticleBySlug);
    articlesRouter.delete(SLUG_PATH).handler(this::deleteArticleBySlug);
    articlesRouter.post(COMMENTS_PATH).handler(this::createComment);
    articlesRouter.delete(COMMENTS_DELETE_PATH).handler(this::deleteComment);
    articlesRouter.get(COMMENTS_PATH).handler(this::getComments);
    articlesRouter.post(FAVORITE_PATH).handler(this::favoriteArticle);
    articlesRouter.delete(FAVORITE_PATH).handler(this::unfavoriteArticle);

    return articlesRouter;
  }

  private void unfavoriteArticle(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String slug = routingContext.pathParam(SLUG_PARAM);
          articleOperations.unfavoriteArticle(
              slug, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }

  private void favoriteArticle(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String slug = routingContext.pathParam(SLUG_PARAM);
          articleOperations.favoriteArticle(
              slug, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }

  private void getComments(RoutingContext routingContext) {
    userId(
        routingContext,
        true,
        (String userId) -> {
          String slug = routingContext.pathParam(SLUG_PARAM);
          articleOperations.findCommentsBySlug(
              slug, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), false));
        });
  }

  private void deleteComment(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String commentId = routingContext.pathParam(COMMENT_ID_PARAM);
          articleOperations.deleteCommentByIdAndAuthorId(
              commentId,
              userId,
              responseOrFail(routingContext, HttpResponseStatus.OK.code(), false));
        });
  }

  private void createComment(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String slug = routingContext.pathParam(SLUG_PARAM);
          NewCommentRequest newCommentRequest = getBody(routingContext, NewCommentRequest.class);
          articleOperations.createCommentBySlug(
              slug,
              userId,
              newCommentRequest,
              responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }

  private void deleteArticleBySlug(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String slug = routingContext.pathParam(SLUG_PARAM);
          articleOperations.deleteArticleBySlug(
              slug, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), false));
        });
  }

  private void updateArticleBySlug(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String slug = routingContext.pathParam(SLUG_PARAM);
          UpdateArticleRequest updateArticleRequest =
              getBody(routingContext, UpdateArticleRequest.class);
          articleOperations.updateBySlug(
              slug,
              userId,
              updateArticleRequest,
              responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }

  private void findArticleBySlug(RoutingContext routingContext) {
    userId(
        routingContext,
        true,
        (String userId) -> {
          String slug = routingContext.pathParam(SLUG_PARAM);
          articleOperations.findBySlug(
              slug, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }

  private void createArticle(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          NewArticleRequest newArticleRequest = getBody(routingContext, NewArticleRequest.class);
          articleOperations.create(
              userId,
              newArticleRequest,
              responseOrFail(routingContext, HttpResponseStatus.CREATED.code(), true));
        });
  }

  private void getArticles(RoutingContext routingContext) {
    userId(
        routingContext,
        true,
        (String userId) -> {
          MultiMap queryParams = routingContext.queryParams();
          int offset = getQueryParam(queryParams, OFFSET, 0);
          int limit = getQueryParam(queryParams, LIMIT, 20);
          List<String> tags = queryParams.getAll("tag");
          List<String> authors = queryParams.getAll("author");
          List<String> favorited = queryParams.getAll("favorited");
          articleOperations.findArticles(
              userId,
              offset,
              limit,
              tags,
              authors,
              favorited,
              responseOrFail(routingContext, HttpResponseStatus.OK.code(), false));
        });
  }

  private void feed(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          MultiMap queryParams = routingContext.queryParams();
          int offset = getQueryParam(queryParams, OFFSET, 0);
          int limit = getQueryParam(queryParams, LIMIT, 20);
          articleOperations.findRecentArticles(
              userId,
              offset,
              limit,
              responseOrFail(routingContext, HttpResponseStatus.OK.code(), false));
        });
  }

  private int getQueryParam(MultiMap queryParams, String name, int defaultValue) {
    String queryParam = queryParams.get(name);
    return queryParam != null ? Integer.parseInt(queryParam) : defaultValue;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/HttpRoute.java
package com.example.realworld.infrastructure.web.route;

import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.web.Router;

public interface HttpRoute {

  Router configure(Vertx vertx);
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/ProfilesRoute.java
package com.example.realworld.infrastructure.web.route;

import com.example.realworld.infrastructure.vertx.proxy.ProfileOperations;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.reactivex.ext.web.handler.BodyHandler;
import org.springframework.stereotype.Component;

@Component
public class ProfilesRoute extends AbstractHttpRoute {

  private final String USERNAME = "username";
  private final String GET_PROFILE_PATH = "/:" + USERNAME;
  private final String FOLLOW = GET_PROFILE_PATH + "/follow";

  private ProfileOperations profileOperations;

  public ProfilesRoute(ProfileOperations profileOperations) {
    this.profileOperations = profileOperations;
  }

  @Override
  public Router configure(Vertx vertx) {

    String profilesPath = "/profiles";

    final Router profilesRouter = Router.router(vertx);

    profilesRouter.route().handler(BodyHandler.create());

    profilesRouter
        .route(profilesPath + "/*")
        .handler(routingContext -> jwtHandler(routingContext, true));

    profilesRouter.get(profilesPath + GET_PROFILE_PATH).handler(this::getProfile);

    profilesRouter.post(profilesPath + FOLLOW).handler(this::follow);

    profilesRouter.delete(profilesPath + FOLLOW).handler(this::unfollow);

    return profilesRouter;
  }

  private void getProfile(RoutingContext routingContext) {
    userId(
        routingContext,
        true,
        (String userId) -> {
          String username = routingContext.pathParam(USERNAME);
          profileOperations.getProfile(
              username, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }

  private void follow(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String username = routingContext.pathParam(USERNAME);
          profileOperations.follow(
              username, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }

  private void unfollow(RoutingContext routingContext) {
    userId(
        routingContext,
        false,
        (String userId) -> {
          String username = routingContext.pathParam(USERNAME);
          profileOperations.unfollow(
              username, userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
        });
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/TagsRoute.java
package com.example.realworld.infrastructure.web.route;

import com.example.realworld.infrastructure.vertx.proxy.TagsOperations;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.reactivex.ext.web.handler.BodyHandler;
import org.springframework.stereotype.Component;

@Component
public class TagsRoute extends AbstractHttpRoute {

  private TagsOperations tagsOperations;

  public TagsRoute(TagsOperations tagsOperations) {
    this.tagsOperations = tagsOperations;
  }

  @Override
  public Router configure(Vertx vertx) {

    String tagsPath = "/tags";

    Router tagsRouter = Router.router(vertx);
    tagsRouter.route().handler(BodyHandler.create());

    tagsRouter.get(tagsPath).handler(this::findTags);

    return tagsRouter;
  }

  private void findTags(RoutingContext routingContext) {
    tagsOperations.findTags(responseOrFail(routingContext, HttpResponseStatus.OK.code(), false));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/UserRoute.java
package com.example.realworld.infrastructure.web.route;

import com.example.realworld.infrastructure.vertx.proxy.UserOperations;
import com.example.realworld.infrastructure.web.model.request.UpdateUserRequest;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.reactivex.ext.web.handler.BodyHandler;
import org.springframework.stereotype.Component;

@Component
public class UserRoute extends AbstractHttpRoute {

  private UserOperations userOperations;

  public UserRoute(UserOperations userOperations) {
    this.userOperations = userOperations;
  }

  @Override
  public Router configure(Vertx vertx) {

    final String userApiPath = "/user";

    final Router userRouter = Router.router(vertx);

    userRouter.route().handler(BodyHandler.create());

    userRouter.route(userApiPath).handler(routingContext -> this.jwtHandler(routingContext, false));
    userRouter.get(userApiPath).handler(this::getUser);
    userRouter.put(userApiPath).handler(this::updateUser);

    return userRouter;
  }

  private void updateUser(RoutingContext routingContext) {
    String userId = routingContext.get(USER_ID_CONTEXT_KEY);
    UpdateUserRequest updateUserRequest = getBody(routingContext, UpdateUserRequest.class);
    userOperations.update(
        userId,
        updateUserRequest,
        responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
  }

  private void getUser(RoutingContext routingContext) {
    String userId = routingContext.get(USER_ID_CONTEXT_KEY);
    userOperations.findById(
        userId, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/route/UsersRoute.java
package com.example.realworld.infrastructure.web.route;

import com.example.realworld.infrastructure.vertx.proxy.UserOperations;
import com.example.realworld.infrastructure.web.model.request.LoginRequest;
import com.example.realworld.infrastructure.web.model.request.NewUserRequest;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.reactivex.ext.web.handler.BodyHandler;
import org.springframework.stereotype.Component;

@Component
public class UsersRoute extends AbstractHttpRoute {

  private UserOperations userOperations;

  public UsersRoute(UserOperations userOperations) {
    this.userOperations = userOperations;
  }

  @Override
  public Router configure(Vertx vertx) {
    final String usersApiPath = "/users";
    final Router usersRouter = Router.router(vertx);
    usersRouter.route().handler(BodyHandler.create());
    usersRouter.post(usersApiPath).handler(this::create);
    usersRouter.post(usersApiPath + "/login").handler(this::login);
    return usersRouter;
  }

  private void login(RoutingContext routingContext) {
    LoginRequest loginRequest = getBody(routingContext, LoginRequest.class);
    userOperations.login(
        loginRequest, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
  }

  private void create(RoutingContext routingContext) {
    NewUserRequest newUserRequest = getBody(routingContext, NewUserRequest.class);
    userOperations.create(
        newUserRequest, responseOrFail(routingContext, HttpResponseStatus.OK.code(), true));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/validation/constraint/AtLeastOneFieldMustBeNotNull.java
package com.example.realworld.infrastructure.web.validation.constraint;

import com.example.realworld.infrastructure.web.validation.validator.AtLeastOneFieldMustBeNotNullValidator;

import javax.validation.Constraint;
import javax.validation.Payload;
import java.lang.annotation.*;

@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = AtLeastOneFieldMustBeNotNullValidator.class)
@Documented
public @interface AtLeastOneFieldMustBeNotNull {

  String message() default "At least one field must be not null";

  Class<?>[] groups() default {};

  Class<? extends Payload>[] payload() default {};

  String[] fieldNames() default {};
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/java/com/example/realworld/infrastructure/web/validation/validator/AtLeastOneFieldMustBeNotNullValidator.java
package com.example.realworld.infrastructure.web.validation.validator;

import com.example.realworld.infrastructure.web.validation.constraint.AtLeastOneFieldMustBeNotNull;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import java.lang.reflect.Field;

public class AtLeastOneFieldMustBeNotNullValidator
    implements ConstraintValidator<AtLeastOneFieldMustBeNotNull, Object> {

  private String[] fieldNames;

  public void initialize(AtLeastOneFieldMustBeNotNull constraintAnnotation) {
    fieldNames = constraintAnnotation.fieldNames();
  }

  public boolean isValid(Object object, ConstraintValidatorContext constraintValidatorContext) {

    Class<?> clazz = object.getClass();

    configFieldNamesIfEmpty(clazz);

    for (String propertyName : fieldNames) {
      Field field = getDeclaredField(clazz, propertyName);
      if (getValue(field, object) != null) {
        return true;
      }
    }

    return false;
  }

  private void configFieldNamesIfEmpty(Class<?> clazz) {

    if (fieldNames.length == 0) {
      fieldNames = getInstanceDeclaredFieldNames(clazz);
    }
  }

  private String[] getInstanceDeclaredFieldNames(Class<?> clazz) {

    Field[] fields = clazz.getDeclaredFields();

    String[] resultNames = new String[fields.length];

    for (int fieldIndex = 0; fieldIndex < fields.length; fieldIndex++) {
      resultNames[fieldIndex] = fields[fieldIndex].getName();
    }

    return resultNames;
  }

  private Object getValue(Field field, Object instance) {
    Object value;
    try {
      value = field.get(instance);
    } catch (IllegalAccessException ex) {
      throw new RuntimeException(ex);
    }
    return value;
  }

  private Field getDeclaredField(Class<?> clazz, String name) {
    Field field;
    try {
      field = clazz.getDeclaredField(name);
      field.setAccessible(true);
    } catch (NoSuchFieldException ex) {
      throw new RuntimeException(ex);
    }
    return field;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/resources/application.yml
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1
    username: sa
    password:
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration
vertx:
  server:
    port: 8080
    context_path: "/api"
  jwt:
    algorithm: "HS256"
    secret: "secret"
  database:
    url: ${spring.datasource.url}
    driver_class: "org.h2.Driver"
    max_pool_size: 30
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/main/resources/db/migration/V1__schema.sql
CREATE TABLE USERS(
  ID VARCHAR(255) PRIMARY KEY,
  USERNAME VARCHAR(255),
  BIO VARCHAR(255),
  EMAIL VARCHAR(255),
  IMAGE VARCHAR(255),
  PASSWORD VARCHAR(255),
  TOKEN VARCHAR(500)
);

CREATE TABLE USERS_FOLLOWED(
  USER_ID VARCHAR(255) NOT NULL,
  FOLLOWED_ID VARCHAR(255) NOT NULL,
  PRIMARY KEY (USER_ID, FOLLOWED_ID),
  CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
  CONSTRAINT FK_FOLLOWED_ID FOREIGN KEY (FOLLOWED_ID) REFERENCES USERS(ID)
);

CREATE TABLE ARTICLES(
  ID VARCHAR(255) PRIMARY KEY,
  TITLE VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(255),
  BODY VARCHAR(255),
  SLUG VARCHAR(255) NOT NULL,
  AUTHOR_ID VARCHAR(255) NOT NULL,
  CREATED_AT TIMESTAMP,
  UPDATED_AT TIMESTAMP,
  CONSTRAINT FK_AUTHOR_ID FOREIGN KEY (AUTHOR_ID) REFERENCES USERS(ID)
);

CREATE TABLE TAGS(
  ID VARCHAR(255) PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL
);

CREATE TABLE COMMENTS(
    ID VARCHAR(255) PRIMARY KEY,
    BODY VARCHAR(255) NOT NULL,
    AUTHOR_ID VARCHAR(255) NOT NULL,
    ARTICLE_ID VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    CONSTRAINT FK_COMMENTS_AUTHOR_ID FOREIGN KEY (AUTHOR_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_COMMENTS_ARTICLE_ID FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES(ID)
);

CREATE TABLE ARTICLES_TAGS(
  ARTICLE_ID VARCHAR(255) NOT NULL,
  TAG_ID VARCHAR(255) NOT NULL,
  PRIMARY KEY (ARTICLE_ID, TAG_ID),
  CONSTRAINT FK_ARTICLES_TAGS_ARTICLE_ID FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES(ID),
  CONSTRAINT FK_ARTICLES_TAGS_TAGS_ID FOREIGN KEY (TAG_ID) REFERENCES TAGS(ID)
);

CREATE TABLE ARTICLES_USERS(
  ARTICLE_ID VARCHAR(255) NOT NULL,
  USER_ID VARCHAR(255) NOT NULL,
  PRIMARY KEY (ARTICLE_ID, USER_ID),
  CONSTRAINT FK_ARTICLES_USERS_ARTICLE_ID FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES(ID),
  CONSTRAINT FK_ARTICLES_USERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/RealworldApplicationDatabaseIntegrationTest.java
package com.example.realworld;

import org.h2.jdbcx.JdbcDataSource;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.cfg.Environment;
import org.hibernate.service.ServiceRegistry;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import java.sql.ResultSet;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.function.Supplier;

public class RealworldApplicationDatabaseIntegrationTest
    extends RealworldApplicationIntegrationTest {

  private static DataSource dataSource = getDatasource();
  public static EntityManagerFactory entityManagerFactory = getEntityManagerFactory();
  public static EntityManager entityManager = getEntityManager();
  private static Set<String> dbTables = getDBTables();

  private static DataSource getDatasource() {
    return getObject(dataSource, RealworldApplicationDatabaseIntegrationTest::dataSource);
  }

  private static EntityManagerFactory getEntityManagerFactory() {
    return getObject(
        entityManagerFactory, RealworldApplicationDatabaseIntegrationTest::sessionFactory);
  }

  private static EntityManager getEntityManager() {
    return getObject(entityManager, entityManagerFactory::createEntityManager);
  }

  private static Set<String> getDBTables() {
    return getObject(dbTables, RealworldApplicationDatabaseIntegrationTest::findDBTables);
  }

  private static Set<String> findDBTables() {
    Set<String> tables = new HashSet<>();
    transaction(
        () ->
            entityManager
                .unwrap(Session.class)
                .doWork(
                    connection -> {
                      ResultSet resultSet =
                          connection
                              .getMetaData()
                              .getTables(null, null, null, new String[] {"TABLE"});

                      while (resultSet.next()) {
                        String tableName = resultSet.getString("TABLE_NAME");
                        if (!tableName.contains("flyway")) {
                          tables.add(tableName);
                        }
                      }
                    }));
    return tables;
  }

  private static SessionFactory sessionFactory() {
    ServiceRegistry serviceRegistry = null;
    SessionFactory sessionFactory = null;
    try {
      Configuration configuration = configuration();
      StandardServiceRegistryBuilder standardServiceRegistryBuilder =
          new StandardServiceRegistryBuilder();
      standardServiceRegistryBuilder.applySettings(configuration.getProperties());
      serviceRegistry = standardServiceRegistryBuilder.build();
      sessionFactory = configuration.buildSessionFactory(serviceRegistry);
    } catch (Exception ex) {
      ex.printStackTrace();
      StandardServiceRegistryBuilder.destroy(serviceRegistry);
    }
    return sessionFactory;
  }

  private static Configuration configuration() {
    Configuration configuration = new Configuration();
    configuration.setProperties(properties());
    return configuration;
  }

  private static Properties properties() {
    Properties properties = new Properties();
    properties.put(Environment.DRIVER, vertxConfiguration.getDatabase().getDriverClass());
    properties.put(Environment.SHOW_SQL, false);
    properties.put(Environment.FORMAT_SQL, true);
    properties.put(Environment.DATASOURCE, dataSource);
    return properties;
  }

  private static DataSource dataSource() {
    JdbcDataSource jdbcDataSource = new JdbcDataSource();
    jdbcDataSource.setUrl(vertxConfiguration.getDatabase().getUrl());
    jdbcDataSource.setUser(vertxConfiguration.getDatabase().getUser());
    jdbcDataSource.setPassword(vertxConfiguration.getDatabase().getPassword());
    return jdbcDataSource;
  }

  public void clearDatabase() {
    StringBuilder builder = new StringBuilder();
    dbTables.forEach(
        dbTable ->
            builder
                .append("SET FOREIGN_KEY_CHECKS = 0; ")
                .append("DELETE FROM ")
                .append(dbTable)
                .append("; SET FOREIGN_KEY_CHECKS = 1; "));
    executeSql(builder.toString());
  }

  protected void executeSql(String sql) {
    transaction(() -> entityManager.createNativeQuery(sql).executeUpdate());
  }

  public static void transaction(Runnable command) {
    entityManager.getTransaction().begin();
    command.run();
    entityManager.flush();
    entityManager.getTransaction().commit();
  }

  public static <T> T transaction(Supplier<T> supplier) {
    entityManager.getTransaction().begin();
    T result = supplier.get();
    entityManager.flush();
    entityManager.getTransaction().commit();
    return result;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/RealworldApplicationIntegrationTest.java
package com.example.realworld;

import com.example.realworld.domain.article.model.SlugProvider;
import com.example.realworld.domain.user.model.HashProvider;
import com.example.realworld.domain.user.model.TokenProvider;
import com.example.realworld.infrastructure.persistence.statement.UserStatements;
import com.example.realworld.infrastructure.vertx.configuration.VertxConfiguration;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.vertx.reactivex.core.Vertx;
import io.vertx.reactivex.ext.web.client.WebClient;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;

import java.util.function.Supplier;

public class RealworldApplicationIntegrationTest {

  protected static ConfigurableApplicationContext configurableApplicationContext =
      getApplicationContext();
  protected static Vertx vertx = getVertx();
  protected static WebClient webClient = getWebClient(vertx);
  protected static ObjectMapper wrapUnwrapRootValueObjectMapper =
      getWrapUnwrapRootValueObjectMapper();
  protected static ObjectMapper defaultObjectMapper = getDefaultObjectMapper();
  protected static VertxConfiguration vertxConfiguration = getVertxConfiguration();
  protected static int port = vertxConfiguration.getServer().getPort();
  protected static TokenProvider tokenProvider = getTokenProvider();
  protected static HashProvider hashProvider = getHashProvider();
  protected static SlugProvider slugProvider = getSlugProvider();

  private static ConfigurableApplicationContext getApplicationContext() {
    return getObject(
        configurableApplicationContext, () -> SpringApplication.run(RealworldApplication.class));
  }

  private static WebClient getWebClient(Vertx vertx) {
    return getObject(webClient, () -> WebClient.create(vertx));
  }

  private static Vertx getVertx() {
    return getObject(vertx, () -> getBean(Vertx.class));
  }

  private static ObjectMapper getWrapUnwrapRootValueObjectMapper() {
    return getObject(
        wrapUnwrapRootValueObjectMapper,
        () -> getBean("wrapUnwrapRootValueObjectMapper", ObjectMapper.class));
  }

  private static ObjectMapper getDefaultObjectMapper() {
    return getObject(defaultObjectMapper, () -> getBean("defaultObjectMapper", ObjectMapper.class));
  }

  private static VertxConfiguration getVertxConfiguration() {
    return getObject(
        vertxConfiguration, () -> getBean("vertxConfiguration", VertxConfiguration.class));
  }

  private static UserStatements getUserStatements() {
    return configurableApplicationContext.getBean(UserStatements.class);
  }

  private static TokenProvider getTokenProvider() {
    return getObject(tokenProvider, () -> getBean(TokenProvider.class));
  }

  private static HashProvider getHashProvider() {
    return getObject(hashProvider, () -> getBean(HashProvider.class));
  }

  private static SlugProvider getSlugProvider() {
    return getObject(slugProvider, () -> getBean(SlugProvider.class));
  }

  private static <T> T getBean(Class<T> clazz) {
    return configurableApplicationContext.getBean(clazz);
  }

  private static <T> T getBean(String name, Class<T> clazz) {
    return configurableApplicationContext.getBean(name, clazz);
  }

  protected static <T> T getObject(T object, Supplier<T> supplier) {
    if (object != null) {
      return object;
    } else {
      return supplier.get();
    }
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/RealworldDataIntegrationTest.java
package com.example.realworld;

import com.example.realworld.domain.article.model.Article;
import com.example.realworld.domain.article.model.Comment;
import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.domain.user.model.User;
import com.example.realworld.infrastructure.persistence.utils.ParserUtils;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.vertx.junit5.VertxTestContext;
import io.vertx.reactivex.core.buffer.Buffer;
import org.junit.jupiter.api.AfterEach;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Stream;

public class RealworldDataIntegrationTest extends RealworldApplicationDatabaseIntegrationTest {

  @AfterEach
  public void afterEach(VertxTestContext vertxTestContext) {
    clearDatabase();
    vertxTestContext.completeNow();
  }

  protected void saveUsers(User... users) {
    for (User user : users) {
      saveUser(user);
    }
  }

  protected void saveUser(User user) {
    user.setId(UUID.randomUUID().toString());
    user.setPassword(hashProvider.hashPassword(user.getPassword()));
    user.setToken(tokenProvider.generateToken(user.getId()));
    String sql =
        String.format(
            "INSERT INTO USERS (ID, USERNAME, BIO, IMAGE, PASSWORD, EMAIL, TOKEN) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s')",
            user.getId(),
            user.getUsername(),
            user.getBio(),
            user.getImage(),
            user.getPassword(),
            user.getEmail(),
            user.getToken());
    executeSql(sql);
  }

  protected void follow(User currentUser, User followedUser) {
    String sql =
        String.format(
            "INSERT INTO USERS_FOLLOWED (USER_ID, FOLLOWED_ID) VALUES ('%s', '%s')",
            currentUser.getId(), followedUser.getId());
    executeSql(sql);
  }

  protected void saveTags(Tag... tags) {
    StringBuilder builder = new StringBuilder();

    for (Tag tag : tags) {
      tag.setId(UUID.randomUUID().toString());
      String sql =
          String.format(
              "INSERT INTO TAGS (ID, NAME) VALUES ('%s', '%s');", tag.getId(), tag.getName());
      builder.append(sql);
    }

    executeSql(builder.toString());
  }

  protected List<Article> createArticle(
      User author, String title, String description, String body, int quantity, List<Tag> tags) {
    List<Article> articles = new LinkedList<>();

    LocalDateTime now = LocalDateTime.now();

    for (int articleIndex = 0; articleIndex < quantity; articleIndex++) {
      String articleIndexIdentifier = "_" + articleIndex;
      Article article = new Article();

      article.setTitle(title + articleIndexIdentifier);
      article.setDescription(description + articleIndexIdentifier);
      article.setBody(body + articleIndexIdentifier);
      article.setAuthor(author);
      article.setTags(tags);
      LocalDateTime articleDate = now.plusDays(articleIndex);
      article.setCreatedAt(articleDate);
      article.setUpdatedAt(articleDate);
      articles.add(article);
      saveArticle(article);
    }

    return articles;
  }

  protected void saveArticles(Article... articles) {
    for (Article article : articles) {
      saveArticle(article);
    }
  }

  protected void saveArticle(Article article) {
    StringBuilder builder = new StringBuilder();

    article.setId(UUID.randomUUID().toString());
    article.setSlug(slugProvider.slugify(article.getTitle()));

    builder.append(
        String.format(
            "INSERT INTO ARTICLES (ID, TITLE, DESCRIPTION, BODY, SLUG, AUTHOR_ID, CREATED_AT, UPDATED_AT) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');",
            article.getId(),
            article.getTitle(),
            article.getDescription(),
            article.getBody(),
            article.getSlug(),
            article.getAuthor().getId(),
            ParserUtils.toTimestamp(article.getCreatedAt()),
            ParserUtils.toTimestamp(article.getUpdatedAt())));

    article
        .getTags()
        .forEach(
            tag ->
                builder.append(
                    String.format(
                        "INSERT INTO ARTICLES_TAGS (ARTICLE_ID, TAG_ID) VALUES ('%s', '%s');",
                        article.getId(), tag.getId())));

    executeSql(builder.toString());
  }

  protected void favorite(User user, Article article) {
    String sql =
        String.format(
            "INSERT INTO ARTICLES_USERS (ARTICLE_ID, USER_ID) VALUES ('%s','%s');",
            article.getId(), user.getId());
    executeSql(sql);
  }

  protected void saveComments(Comment... comments) {
    Stream.of(comments).forEach(this::saveComment);
  }

  protected void saveComment(Comment comment) {
    comment.setId(UUID.randomUUID().toString());
    LocalDateTime now = LocalDateTime.now();
    comment.setCreatedAt(now);
    comment.setUpdatedAt(now);

    String sql =
        String.format(
            "INSERT INTO COMMENTS (ID, AUTHOR_ID, ARTICLE_ID, CREATED_AT, UPDATED_AT, BODY) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')",
            comment.getId(),
            comment.getAuthor().getId(),
            comment.getArticle().getId(),
            ParserUtils.toTimestamp(comment.getCreatedAt()),
            ParserUtils.toTimestamp(comment.getUpdatedAt()),
            comment.getBody());

    executeSql(sql);
  }

  protected void favorite(User user, List<Article> articles) {
    articles.forEach(article -> favorite(user, article));
  }

  protected Buffer toBuffer(Object value) {
    return Buffer.buffer(writeValueAsString(value));
  }

  protected String writeValueAsString(Object value) {
    String result;
    try {
      result = wrapUnwrapRootValueObjectMapper.writeValueAsString(value);
    } catch (JsonProcessingException ex) {
      throw new RuntimeException(ex);
    }
    return result;
  }

  protected <T> T readValue(
      String value, Class<T> clazz, boolean userWrapUnwrapRootValueObjectMapper) {
    T result;
    try {
      result =
          userWrapUnwrapRootValueObjectMapper
              ? wrapUnwrapRootValueObjectMapper.readValue(value, clazz)
              : defaultObjectMapper.readValue(value, clazz);
    } catch (IOException ex) {
      throw new RuntimeException(ex);
    }
    return result;
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/ArticlesAPITest.java
package com.example.realworld.api;

import com.example.realworld.RealworldDataIntegrationTest;
import com.example.realworld.domain.article.model.Article;
import com.example.realworld.domain.article.model.Comment;
import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.domain.user.model.User;
import com.example.realworld.infrastructure.web.model.request.NewArticleRequest;
import com.example.realworld.infrastructure.web.model.request.NewCommentRequest;
import com.example.realworld.infrastructure.web.model.request.UpdateArticleRequest;
import com.example.realworld.infrastructure.web.model.response.*;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import io.vertx.reactivex.ext.web.codec.BodyCodec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static com.example.realworld.constants.TestsConstants.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

@ExtendWith(VertxExtension.class)
public class ArticlesAPITest extends RealworldDataIntegrationTest {

  private final String ARTICLES_PATH = API_PREFIX + "/articles";
  private final String FEED_PATH = ARTICLES_PATH + "/feed";

  @Test
  public void shouldReturn401WhenExecuteFeedOperationWithoutAuthorizationHeader(
      VertxTestContext vertxTestContext) {

    webClient
        .get(port, HOST, FEED_PATH)
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          assertThat(
                              response.statusCode(), is(HttpResponseStatus.UNAUTHORIZED.code()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      given10ArticlesForLoggedUser_whenExecuteFeedEndpointWithOffset0AndLimit5_shouldReturnListOf5Articles(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User userFollowed = new User();
    userFollowed.setUsername("userFollowed");
    userFollowed.setEmail("userFollowed@mail.com");
    userFollowed.setPassword("userFollowed_123");

    saveUsers(loggedUser, userFollowed);
    follow(loggedUser, userFollowed);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    createArticle(userFollowed, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    webClient
        .get(port, HOST, FEED_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .addQueryParam("offset", "0")
        .addQueryParam("limit", "5")
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticlesResponse articlesResponse =
                              readValue(response.body(), ArticlesResponse.class, false);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articlesResponse.getArticles().size(), is(5));
                          assertThat(articlesResponse.getArticlesCount(), is(10L));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      given50PersistedArticles_whenExecuteGetArticlesEndpointWithOffset0AndLimit10_shouldReturnListOf10Articles(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author1 = new User();
    author1.setUsername("author1");
    author1.setEmail("author1@mail.com");
    author1.setPassword("author1_123");

    User author2 = new User();
    author2.setUsername("author2");
    author2.setEmail("author2@mail.com");
    author2.setPassword("author2_123");

    User author3 = new User();
    author3.setUsername("author3");
    author3.setEmail("author3@mail.com");
    author3.setPassword("author3_123");

    User author4 = new User();
    author4.setUsername("author4");
    author4.setEmail("author4@mail.com");
    author4.setPassword("author4_123");

    User author5 = new User();
    author5.setUsername("author5");
    author5.setEmail("author5@mail.com");
    author5.setPassword("author5_123");

    saveUsers(loggedUser, author1, author2, author3, author4, author5);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    createArticle(author1, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    createArticle(author2, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    createArticle(author3, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    createArticle(author4, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    createArticle(author5, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    webClient
        .get(port, HOST, ARTICLES_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .addQueryParam("offset", "0")
        .addQueryParam("limit", "10")
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticlesResponse articlesResponse =
                              readValue(response.body(), ArticlesResponse.class, false);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articlesResponse.getArticles().size(), is(10));
                          assertThat(articlesResponse.getArticlesCount(), is(50L));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      given45PersistedArticles_whenExecuteGetArticlesEndpointWithOffset0AndLimit10AndTagQueryParam_shouldReturnListOf5Articles(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author1 = new User();
    author1.setUsername("author1");
    author1.setEmail("author1@mail.com");
    author1.setPassword("author1_123");

    User author2 = new User();
    author2.setUsername("author2");
    author2.setEmail("author2@mail.com");
    author2.setPassword("author2_123");

    User author3 = new User();
    author3.setUsername("author3");
    author3.setEmail("author3@mail.com");
    author3.setPassword("author3_123");

    User author4 = new User();
    author4.setUsername("author4");
    author4.setEmail("author4@mail.com");
    author4.setPassword("author4_123");

    User author5 = new User();
    author5.setUsername("author5");
    author5.setEmail("author5@mail.com");
    author5.setPassword("author5_123");

    saveUsers(loggedUser, author1, author2, author3, author4, author5);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    createArticle(author1, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author2, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author3, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author4, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author5, "title", "description", "body", 5, Arrays.asList(tag1, tag2));

    webClient
        .get(port, HOST, ARTICLES_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .addQueryParam("offset", "0")
        .addQueryParam("limit", "10")
        .addQueryParam("tag", tag2.getName())
        //        .addQueryParam("author", userFollowed.getUsername())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticlesResponse articlesResponse =
                              readValue(response.body(), ArticlesResponse.class, false);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articlesResponse.getArticles().size(), is(5));
                          assertThat(articlesResponse.getArticlesCount(), is(5L));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      given38PersistedArticles_whenExecuteGetArticlesEndpointWithOffset0AndLimit10AndAuthorQueryParam_shouldReturnListOf8Articles(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author1 = new User();
    author1.setUsername("author1");
    author1.setEmail("author1@mail.com");
    author1.setPassword("author1_123");

    User author2 = new User();
    author2.setUsername("author2");
    author2.setEmail("author2@mail.com");
    author2.setPassword("author2_123");

    User author3 = new User();
    author3.setUsername("author3");
    author3.setEmail("author3@mail.com");
    author3.setPassword("author3_123");

    User author4 = new User();
    author4.setUsername("author4");
    author4.setEmail("author4@mail.com");
    author4.setPassword("author4_123");

    User author5 = new User();
    author5.setUsername("author5");
    author5.setEmail("author5@mail.com");
    author5.setPassword("author5_123");

    saveUsers(loggedUser, author1, author2, author3, author4, author5);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    createArticle(author1, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author2, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author3, "title", "description", "body", 4, Collections.singletonList(tag1));

    createArticle(author4, "title", "description", "body", 4, Collections.singletonList(tag1));

    createArticle(author5, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    webClient
        .get(port, HOST, ARTICLES_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .addQueryParam("offset", "0")
        .addQueryParam("limit", "10")
        .addQueryParam("author", author3.getUsername())
        .addQueryParam("author", author4.getUsername())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticlesResponse articlesResponse =
                              readValue(response.body(), ArticlesResponse.class, false);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articlesResponse.getArticles().size(), is(8));
                          assertThat(articlesResponse.getArticlesCount(), is(8L));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      given50PersistedArticles_whenExecuteGetArticlesEndpointWithOffset0AndLimit20AndFavoritedQueryParam_shouldReturnListOf20Articles(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author1 = new User();
    author1.setUsername("author1");
    author1.setEmail("author1@mail.com");
    author1.setPassword("author1_123");

    User author2 = new User();
    author2.setUsername("author2");
    author2.setEmail("author2@mail.com");
    author2.setPassword("author2_123");

    User author3 = new User();
    author3.setUsername("author3");
    author3.setEmail("author3@mail.com");
    author3.setPassword("author3_123");

    User author4 = new User();
    author4.setUsername("author4");
    author4.setEmail("author4@mail.com");
    author4.setPassword("author4_123");

    User author5 = new User();
    author5.setUsername("author5");
    author5.setEmail("author5@mail.com");
    author5.setPassword("author5_123");

    saveUsers(loggedUser, author1, author2, author3, author4, author5);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    List<Article> author1Articles =
        createArticle(author1, "title", "description", "body", 10, Collections.singletonList(tag1));

    List<Article> author2Articles =
        createArticle(author2, "title", "description", "body", 10, Collections.singletonList(tag1));

    List<Article> author3Articles =
        createArticle(author3, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author4, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author5, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    favorite(author4, author1Articles);

    favorite(author1, author2Articles);

    favorite(author5, author3Articles);

    webClient
        .get(port, HOST, ARTICLES_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .addQueryParam("offset", "0")
        .addQueryParam("limit", "20")
        .addQueryParam("favorited", author1.getUsername())
        .addQueryParam("favorited", author4.getUsername())
        .addQueryParam("favorited", author5.getUsername())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticlesResponse articlesResponse =
                              readValue(response.body(), ArticlesResponse.class, false);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articlesResponse.getArticles().size(), is(20));
                          assertThat(articlesResponse.getArticlesCount(), is(30L));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      given70PersistedArticles_whenExecuteGetArticlesEndpointWithOffset0AndLimit10AndTagAndAuthorAndFavoritedQueryParams_shouldReturnListOf10Articles(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author1 = new User();
    author1.setUsername("author1");
    author1.setEmail("author1@mail.com");
    author1.setPassword("author1_123");

    User author2 = new User();
    author2.setUsername("author2");
    author2.setEmail("author2@mail.com");
    author2.setPassword("author2_123");

    User author3 = new User();
    author3.setUsername("author3");
    author3.setEmail("author3@mail.com");
    author3.setPassword("author3_123");

    User author4 = new User();
    author4.setUsername("author4");
    author4.setEmail("author4@mail.com");
    author4.setPassword("author4_123");

    User author5 = new User();
    author5.setUsername("author5");
    author5.setEmail("author5@mail.com");
    author5.setPassword("author5_123");

    saveUsers(loggedUser, author1, author2, author3, author4, author5);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    List<Article> author1Articles =
        createArticle(author1, "title", "description", "body", 10, Collections.singletonList(tag1));

    List<Article> author2Articles =
        createArticle(author2, "title", "description", "body", 10, Collections.singletonList(tag1));

    List<Article> author3Articles =
        createArticle(author3, "title", "description", "body", 30, Collections.singletonList(tag1));

    createArticle(author4, "title", "description", "body", 10, Collections.singletonList(tag1));

    createArticle(author5, "title", "description", "body", 10, Arrays.asList(tag1, tag2));

    favorite(author4, author1Articles);

    favorite(author1, author2Articles);

    favorite(author5, author3Articles);

    webClient
        .get(port, HOST, ARTICLES_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .addQueryParam("offset", "0")
        .addQueryParam("limit", "10")
        .addQueryParam("tag", tag1.getName())
        .addQueryParam("author", author3.getUsername())
        .addQueryParam("favorited", author5.getUsername())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticlesResponse articlesResponse =
                              readValue(response.body(), ArticlesResponse.class, false);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articlesResponse.getArticles().size(), is(10));
                          assertThat(articlesResponse.getArticlesCount(), is(30L));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAValidNewArticle_whenExecuteCreateArticleEndpoint_shouldReturnACreatedArticleWithStatusCode204(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    saveUser(loggedUser);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    NewArticleRequest newArticleRequest = new NewArticleRequest();
    newArticleRequest.setTitle("title");
    newArticleRequest.setDescription("description");
    newArticleRequest.setBody("body");
    newArticleRequest.setTagList(Arrays.asList(tag1.getName(), tag2.getName()));

    webClient
        .post(port, HOST, ARTICLES_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(newArticleRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticleResponse articleResponse =
                              readValue(response.body(), ArticleResponse.class, true);

                          assertThat(articleResponse.getSlug(), notNullValue());
                          assertThat(articleResponse.getTitle(), is(newArticleRequest.getTitle()));
                          assertThat(
                              articleResponse.getDescription(),
                              is(newArticleRequest.getDescription()));
                          assertThat(articleResponse.getBody(), is(newArticleRequest.getBody()));
                          assertThat(
                              articleResponse.getTagList(),
                              containsInAnyOrder(newArticleRequest.getTagList().toArray()));
                          assertThat(articleResponse.getCreatedAt(), notNullValue());
                          assertThat(articleResponse.getUpdatedAt(), notNullValue());
                          assertThat(articleResponse.isFavorited(), is(false));
                          assertThat(articleResponse.getFavoritesCount(), is(0L));
                          ProfileResponse author = articleResponse.getAuthor();
                          assertThat(author.getUsername(), is(loggedUser.getUsername()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticle_whenExecuteFindBySlugEndpoint_thenReturnAnArticleWithStatusCode200(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    follow(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    webClient
        .get(port, HOST, ARTICLES_PATH + "/" + article.getSlug())
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticleResponse articleResponse =
                              readValue(response.body(), ArticleResponse.class, true);

                          assertThat(articleResponse.getSlug(), notNullValue());
                          assertThat(articleResponse.getTitle(), is(article.getTitle()));
                          assertThat(
                              articleResponse.getDescription(), is(article.getDescription()));
                          assertThat(articleResponse.getBody(), is(article.getBody()));
                          assertThat(
                              articleResponse.getTagList(),
                              containsInAnyOrder(tag1.getName(), tag2.getName()));
                          assertThat(articleResponse.getCreatedAt(), notNullValue());
                          assertThat(articleResponse.getUpdatedAt(), notNullValue());
                          assertThat(articleResponse.isFavorited(), is(false));
                          assertThat(articleResponse.getFavoritesCount(), is(0L));
                          ProfileResponse authorResponse = articleResponse.getAuthor();
                          assertThat(authorResponse.getUsername(), is(author.getUsername()));
                          assertThat(authorResponse.isFollowing(), is(true));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticle_whenExecuteUpdateArticleBySlugEndpoint_thenReturnAnUpdatedArticleWithStatusCode200(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    saveUsers(loggedUser);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(loggedUser);

    saveArticle(article);

    UpdateArticleRequest updateArticleRequest = new UpdateArticleRequest();
    updateArticleRequest.setTitle("new title");
    updateArticleRequest.setDescription("new description");
    updateArticleRequest.setBody("new body");

    webClient
        .put(port, HOST, ARTICLES_PATH + "/" + article.getSlug())
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(updateArticleRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticleResponse articleResponse =
                              readValue(response.body(), ArticleResponse.class, true);

                          assertThat(articleResponse.getSlug(), is(article.getSlug()));
                          assertThat(
                              articleResponse.getTitle(), is(updateArticleRequest.getTitle()));
                          assertThat(
                              articleResponse.getDescription(),
                              is(updateArticleRequest.getDescription()));
                          assertThat(articleResponse.getBody(), is(updateArticleRequest.getBody()));
                          assertThat(
                              articleResponse.getTagList(),
                              containsInAnyOrder(tag1.getName(), tag2.getName()));
                          assertThat(articleResponse.getCreatedAt(), notNullValue());
                          assertThat(articleResponse.getUpdatedAt(), notNullValue());
                          assertThat(articleResponse.isFavorited(), is(false));
                          assertThat(articleResponse.getFavoritesCount(), is(0L));
                          ProfileResponse authorResponse = articleResponse.getAuthor();
                          assertThat(authorResponse.getUsername(), is(loggedUser.getUsername()));
                          assertThat(authorResponse.isFollowing(), is(false));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void givenAnExistentArticle_whenExecuteDeleteArticleBySlugEndpoint_thenReturnStatusCode200(
      VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User user = new User();
    user.setUsername("user");
    user.setEmail("user@mail.com");
    user.setPassword("user_123");

    saveUsers(loggedUser, user);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(loggedUser);

    saveArticle(article);

    favorite(user, article);

    webClient
        .delete(port, HOST, ARTICLES_PATH + "/" + article.getSlug())
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticle_whenExecuteCreateCommentEndpoint_shouldReturnACreatedCommentWithStatusCode200(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    NewCommentRequest newCommentRequest = new NewCommentRequest();
    newCommentRequest.setBody("body");

    webClient
        .post(port, HOST, ARTICLES_PATH + "/" + article.getSlug() + "/comments")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(newCommentRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          CommentResponse commentResponse =
                              readValue(response.body(), CommentResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(commentResponse.getId(), notNullValue());
                          assertThat(commentResponse.getCreatedAt(), notNullValue());
                          assertThat(commentResponse.getUpdatedAt(), notNullValue());
                          assertThat(commentResponse.getBody(), is(newCommentRequest.getBody()));
                          ProfileResponse commentResponseAuthor = commentResponse.getAuthor();
                          assertThat(
                              commentResponseAuthor.getUsername(), is(loggedUser.getUsername()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticleWithOneComment_whenExecuteDeleteCommentEndpoint_shouldReturnStatusCode200(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    Comment comment = new Comment();
    comment.setArticle(article);
    comment.setAuthor(loggedUser);
    comment.setBody("Body");

    saveComment(comment);

    webClient
        .delete(
            port, HOST, ARTICLES_PATH + "/" + article.getSlug() + "/comments/" + comment.getId())
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticleWithFiveComments_whenExecuteGetCommentsEndpoint_shouldReturnArticleCommentListWithStatusCode200(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    follow(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    Comment comment1 = new Comment();
    comment1.setArticle(article);
    comment1.setAuthor(loggedUser);
    comment1.setBody("Comment 1");

    Comment comment2 = new Comment();
    comment2.setArticle(article);
    comment2.setAuthor(loggedUser);
    comment2.setBody("Comment 2");

    Comment comment3 = new Comment();
    comment3.setArticle(article);
    comment3.setAuthor(author);
    comment3.setBody("Comment 3");

    Comment comment4 = new Comment();
    comment4.setArticle(article);
    comment4.setAuthor(author);
    comment4.setBody("Comment 4");

    Comment comment5 = new Comment();
    comment5.setArticle(article);
    comment5.setAuthor(loggedUser);
    comment5.setBody("Comment 5");

    saveComments(comment1, comment2, comment3, comment4, comment5);

    webClient
        .get(port, HOST, ARTICLES_PATH + "/" + article.getSlug() + "/comments")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          CommentsResponse commentsResponse =
                              readValue(response.body(), CommentsResponse.class, false);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(commentsResponse.getComments().size(), is(5));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticleWithAlreadyFavoriteForLoggedUser_whenExecuteFavoriteEndpoint_shouldReturnStatusCode409(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    favorite(loggedUser, article);

    webClient
        .post(port, HOST, ARTICLES_PATH + "/" + article.getSlug() + "/favorite")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse errorResponse =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.CONFLICT.code()));
                          assertThat(
                              errorResponse.getBody(),
                              containsInAnyOrder("article already favorited"));

                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticleWithoutFavorites_whenExecuteFavoriteEndpoint_shouldReturnArticleFavoritedWithStatusCode200(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    webClient
        .post(port, HOST, ARTICLES_PATH + "/" + article.getSlug() + "/favorite")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticleResponse articleResponse =
                              readValue(response.body(), ArticleResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articleResponse.getSlug(), notNullValue());
                          assertThat(articleResponse.getTitle(), notNullValue());
                          assertThat(articleResponse.getDescription(), notNullValue());
                          assertThat(articleResponse.getBody(), notNullValue());
                          assertThat(articleResponse.getTagList(), notNullValue());
                          assertThat(articleResponse.getCreatedAt(), notNullValue());
                          assertThat(articleResponse.getUpdatedAt(), notNullValue());
                          assertThat(articleResponse.isFavorited(), is(true));
                          assertThat(articleResponse.getFavoritesCount(), is(1L));
                          ProfileResponse articleResponseAuthor = articleResponse.getAuthor();
                          assertThat(articleResponseAuthor.getUsername(), is(author.getUsername()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticleWithoutFavoritesForLoggedUser_whenExecuteUnfavoriteEndpoint_shouldReturnStatusCode409(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    webClient
        .delete(port, HOST, ARTICLES_PATH + "/" + article.getSlug() + "/favorite")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse errorResponse =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.CONFLICT.code()));
                          assertThat(
                              errorResponse.getBody(),
                              containsInAnyOrder("article already unfavorited"));

                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnExistentArticleWithFavoriteForLoggedUser_whenExecuteUnfavoriteEndpoint_shouldReturnUnfavoritedArticleWithStatusCode200(
          VertxTestContext vertxTestContext) {

    User loggedUser = new User();
    loggedUser.setUsername("loggedUser");
    loggedUser.setEmail("loggedUser@mail.com");
    loggedUser.setPassword("loggedUser_123");

    User author = new User();
    author.setUsername("author");
    author.setEmail("author@mail.com");
    author.setPassword("author_123");

    saveUsers(loggedUser, author);

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    saveTags(tag1, tag2);

    Article article = new Article();
    article.setTitle("Title");
    article.setDescription("Description");
    article.setBody("Body");
    LocalDateTime now = LocalDateTime.now();
    article.setCreatedAt(now);
    article.setUpdatedAt(now);
    article.setTags(Arrays.asList(tag1, tag2));
    article.setAuthor(author);

    saveArticle(article);

    favorite(loggedUser, article);

    webClient
        .delete(port, HOST, ARTICLES_PATH + "/" + article.getSlug() + "/favorite")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + loggedUser.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ArticleResponse articleResponse =
                              readValue(response.body(), ArticleResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(articleResponse.getSlug(), notNullValue());
                          assertThat(articleResponse.getTitle(), notNullValue());
                          assertThat(articleResponse.getDescription(), notNullValue());
                          assertThat(articleResponse.getBody(), notNullValue());
                          assertThat(articleResponse.getTagList(), notNullValue());
                          assertThat(articleResponse.getCreatedAt(), notNullValue());
                          assertThat(articleResponse.getUpdatedAt(), notNullValue());
                          assertThat(articleResponse.isFavorited(), is(false));
                          assertThat(articleResponse.getFavoritesCount(), is(0L));
                          ProfileResponse articleResponseAuthor = articleResponse.getAuthor();
                          assertThat(articleResponseAuthor.getUsername(), is(author.getUsername()));
                          vertxTestContext.completeNow();
                        })));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/ProfilesAPITest.java
package com.example.realworld.api;

import com.example.realworld.RealworldDataIntegrationTest;
import com.example.realworld.constants.TestsConstants;
import com.example.realworld.domain.user.model.User;
import com.example.realworld.infrastructure.web.model.response.ProfileResponse;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import io.vertx.reactivex.ext.web.codec.BodyCodec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static com.example.realworld.constants.TestsConstants.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

@ExtendWith(VertxExtension.class)
public class ProfilesAPITest extends RealworldDataIntegrationTest {

  private final String PROFILES_RESOURCE_PATH = API_PREFIX + "/profiles";

  @Test
  public void givenAnPersistedUserShouldReturnProfileDataWithStatusCode200(
      VertxTestContext vertxTestContext) {

    User user = new User();
    user.setUsername("user1");
    user.setEmail("user1@mail.com");
    user.setImage("image");
    user.setBio("bio");
    user.setPassword("user1_123");

    saveUser(user);

    webClient
        .get(port, TestsConstants.HOST, PROFILES_RESOURCE_PATH + "/" + user.getUsername())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ProfileResponse profileResponse =
                              readValue(response.body(), ProfileResponse.class, true);
                          assertThat(profileResponse.getUsername(), is(user.getUsername()));
                          assertThat(profileResponse.getBio(), is(user.getBio()));
                          assertThat(profileResponse.getImage(), is(user.getImage()));
                          assertThat(profileResponse.isFollowing(), is(false));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnPersistedUserWithFollowedUserShouldReturnProfileDataWithFollowingPropertyValueSettingToTrueAndStatusCode200(
          VertxTestContext vertxTestContext) {

    User user1 = new User();
    user1.setUsername("user1");
    user1.setEmail("user1@mail.com");
    user1.setImage("image");
    user1.setBio("bio");
    user1.setPassword("user1_123");

    User user2 = new User();
    user2.setUsername("user2");
    user2.setEmail("user2@mail.com");
    user2.setImage("image");
    user2.setBio("bio");
    user2.setPassword("user2_123");

    saveUsers(user1, user2);
    follow(user1, user2);

    webClient
        .get(port, TestsConstants.HOST, PROFILES_RESOURCE_PATH + "/" + user2.getUsername())
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + user1.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ProfileResponse profileResponse =
                              readValue(response.body(), ProfileResponse.class, true);
                          assertThat(profileResponse.getUsername(), is(user2.getUsername()));
                          assertThat(profileResponse.getBio(), is(user2.getBio()));
                          assertThat(profileResponse.getImage(), is(user2.getImage()));
                          assertThat(profileResponse.isFollowing(), is(true));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenPersistedUserWhenExecuteFollowOperationShouldReturnProfileDataWithFollowingPropertyValueSettingToTrue(
          VertxTestContext vertxTestContext) {

    User user1 = new User();
    user1.setUsername("user1");
    user1.setEmail("user1@mail.com");
    user1.setImage("image");
    user1.setBio("bio");
    user1.setPassword("user1_123");

    User user2 = new User();
    user2.setUsername("user2");
    user2.setEmail("user2@mail.com");
    user2.setImage("image");
    user2.setBio("bio");
    user2.setPassword("user2_123");

    saveUsers(user1, user2);

    webClient
        .post(port, HOST, PROFILES_RESOURCE_PATH + "/" + user2.getUsername() + "/follow")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + user1.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ProfileResponse profileResponse =
                              readValue(response.body(), ProfileResponse.class, true);
                          assertThat(profileResponse.getUsername(), is(user2.getUsername()));
                          assertThat(profileResponse.getBio(), is(user2.getBio()));
                          assertThat(profileResponse.getImage(), is(user2.getImage()));
                          assertThat(profileResponse.isFollowing(), is(true));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void
      givenAnFollowedUserWhenExecuteUnfollowOperationShouldReturnProfileDataWithFollowingPropertyValueSettingToFalse(
          VertxTestContext vertxTestContext) {

    User user1 = new User();
    user1.setUsername("user1");
    user1.setEmail("user1@mail.com");
    user1.setImage("image");
    user1.setBio("bio");
    user1.setPassword("user1_123");

    User user2 = new User();
    user2.setUsername("user2");
    user2.setEmail("user2@mail.com");
    user2.setImage("image");
    user2.setBio("bio");
    user2.setPassword("user2_123");

    saveUsers(user1, user2);
    follow(user1, user2);

    webClient
        .delete(
            port,
            TestsConstants.HOST,
            PROFILES_RESOURCE_PATH + "/" + user2.getUsername() + "/follow")
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + user1.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ProfileResponse profileResponse =
                              readValue(response.body(), ProfileResponse.class, true);
                          assertThat(profileResponse.getUsername(), is(user2.getUsername()));
                          assertThat(profileResponse.getBio(), is(user2.getBio()));
                          assertThat(profileResponse.getImage(), is(user2.getImage()));
                          assertThat(profileResponse.isFollowing(), is(false));
                          vertxTestContext.completeNow();
                        })));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/TagsAPITest.java
package com.example.realworld.api;

import com.example.realworld.RealworldDataIntegrationTest;
import com.example.realworld.domain.tag.model.Tag;
import com.example.realworld.infrastructure.web.model.response.TagsResponse;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import io.vertx.reactivex.ext.web.codec.BodyCodec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static com.example.realworld.constants.TestsConstants.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.is;

@ExtendWith(VertxExtension.class)
public class TagsAPITest extends RealworldDataIntegrationTest {

  private final String TAGS_PATH = API_PREFIX + "/tags";

  @Test
  public void
      givenTenPersistedTags_whenExecuteGetTagsEndpoint_shouldReturnATagListWithStatusCode200(
          VertxTestContext vertxTestContext) {

    Tag tag1 = new Tag();
    tag1.setName("tag1");

    Tag tag2 = new Tag();
    tag2.setName("tag2");

    Tag tag3 = new Tag();
    tag3.setName("tag3");

    Tag tag4 = new Tag();
    tag4.setName("tag4");

    Tag tag5 = new Tag();
    tag5.setName("tag5");

    Tag tag6 = new Tag();
    tag6.setName("tag6");

    Tag tag7 = new Tag();
    tag7.setName("tag7");

    Tag tag8 = new Tag();
    tag8.setName("tag8");

    Tag tag9 = new Tag();
    tag9.setName("tag9");

    Tag tag10 = new Tag();
    tag10.setName("tag10");

    saveTags(tag1, tag2, tag3, tag4, tag5, tag6, tag7, tag8, tag9, tag10);

    webClient
        .get(port, HOST, TAGS_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX)
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          TagsResponse tagsResponse =
                              readValue(response.body(), TagsResponse.class, false);

                          assertThat(tagsResponse.getTags().size(), is(10));
                          assertThat(
                              tagsResponse.getTags(),
                              containsInAnyOrder(
                                  tag1.getName(),
                                  tag2.getName(),
                                  tag3.getName(),
                                  tag4.getName(),
                                  tag5.getName(),
                                  tag6.getName(),
                                  tag7.getName(),
                                  tag8.getName(),
                                  tag9.getName(),
                                  tag10.getName()));

                          vertxTestContext.completeNow();
                        })));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/api/UsersAPITest.java
package com.example.realworld.api;

import com.example.realworld.RealworldDataIntegrationTest;
import com.example.realworld.constants.TestsConstants;
import com.example.realworld.domain.user.model.User;
import com.example.realworld.infrastructure.web.model.request.LoginRequest;
import com.example.realworld.infrastructure.web.model.request.NewUserRequest;
import com.example.realworld.infrastructure.web.model.request.UpdateUserRequest;
import com.example.realworld.infrastructure.web.model.response.ErrorResponse;
import com.example.realworld.infrastructure.web.model.response.UserResponse;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import io.vertx.reactivex.ext.web.codec.BodyCodec;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static com.example.realworld.constants.TestsConstants.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

@ExtendWith(VertxExtension.class)
public class UsersAPITest extends RealworldDataIntegrationTest {

  private final String USERS_RESOURCE_PATH = API_PREFIX + "/users";
  private final String USER_RESOURCE_PATH = API_PREFIX + "/user";
  private final String LOGIN_PATH = USERS_RESOURCE_PATH + "/login";

  @Test
  void shouldCreateAUser(VertxTestContext vertxTestContext) {

    NewUserRequest newUser = new NewUserRequest();
    newUser.setUsername("user");
    newUser.setEmail("user@mail.com");
    newUser.setPassword("user123");

    webClient
        .post(port, TestsConstants.HOST, USERS_RESOURCE_PATH)
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(newUser),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          UserResponse result =
                              readValue(response.body(), UserResponse.class, true);
                          assertThat(result.getUsername(), notNullValue());
                          assertThat(result.getEmail(), notNullValue());
                          assertThat(result.getToken(), notNullValue());
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  void shouldReturnConflictCodeWhenUsernameAlreadyExists(VertxTestContext vertxTestContext) {

    User user = new User();
    user.setUsername("user1");
    user.setEmail("user1@mail.com");
    user.setPassword("user1_123");

    saveUser(user);

    NewUserRequest newUser = new NewUserRequest();
    newUser.setUsername(user.getUsername());
    newUser.setEmail("user2@mail.com");
    newUser.setPassword("user2_123");

    webClient
        .post(port, TestsConstants.HOST, USERS_RESOURCE_PATH)
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(newUser),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse result =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.CONFLICT.code()));
                          assertThat(result.getBody(), contains("username already exists"));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  void shouldReturnConflictCodeWhenEmailAlreadyExists(VertxTestContext vertxTestContext) {

    User user = new User();
    user.setUsername("user1");
    user.setEmail("user1@mail.com");
    user.setPassword("user1_123");

    saveUser(user);

    NewUserRequest newUser = new NewUserRequest();
    newUser.setUsername("user2");
    newUser.setEmail(user.getEmail());
    newUser.setPassword("user2_123");

    webClient
        .post(port, TestsConstants.HOST, USERS_RESOURCE_PATH)
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(newUser),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse result =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.CONFLICT.code()));
                          assertThat(result.getBody(), contains("email already exists"));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  void shouldReturnUserOnValidLoginRequest(VertxTestContext vertxTestContext) {

    User user = new User();
    user.setUsername("user1");
    user.setEmail("user1@mail.com");
    user.setImage("image");
    user.setBio("bio");
    String userPassword = "user1_123";
    user.setPassword(userPassword);

    saveUser(user);

    LoginRequest loginRequest = new LoginRequest();
    loginRequest.setEmail(user.getEmail());
    loginRequest.setPassword(userPassword);

    webClient
        .post(port, TestsConstants.HOST, LOGIN_PATH)
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(loginRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          UserResponse userResponse =
                              readValue(response.body(), UserResponse.class, true);
                          assertThat(userResponse.getUsername(), is(user.getUsername()));
                          assertThat(userResponse.getEmail(), is(user.getEmail()));
                          assertThat(userResponse.getBio(), is(user.getBio()));
                          assertThat(userResponse.getImage(), is(user.getImage()));
                          assertThat(userResponse.getToken(), is(not(user.getToken())));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  void shouldReturnUnauthorizedCodeWhenUserNotFound(VertxTestContext vertxTestContext) {

    LoginRequest loginRequest = new LoginRequest();
    loginRequest.setEmail("user@email.com");
    loginRequest.setPassword("user123");

    webClient
        .post(port, TestsConstants.HOST, LOGIN_PATH)
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(loginRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse result =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(
                              response.statusCode(), is(HttpResponseStatus.UNAUTHORIZED.code()));
                          assertThat(result.getBody(), contains("Unauthorized"));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  void shouldReturnUnauthorizedCodeWhenPasswordDoesNotMatch(VertxTestContext vertxTestContext) {

    User user = new User();
    user.setUsername("user1");
    user.setEmail("user1@mail.com");
    user.setPassword("user1_123");

    saveUser(user);

    LoginRequest loginRequest = new LoginRequest();
    loginRequest.setEmail(user.getEmail());
    loginRequest.setPassword("user123");

    webClient
        .post(port, TestsConstants.HOST, LOGIN_PATH)
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(loginRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse result =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(
                              response.statusCode(), is(HttpResponseStatus.UNAUTHORIZED.code()));
                          assertThat(result.getBody(), contains("Unauthorized"));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void shouldReturnUnauthorizedOnTryAccessUserGetResourceWithoutAnToken(
      VertxTestContext vertxTestContext) {

    webClient
        .get(port, TestsConstants.HOST, USER_RESOURCE_PATH)
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse errorResponse =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(
                              response.statusCode(), is(HttpResponseStatus.UNAUTHORIZED.code()));
                          assertThat(errorResponse.getBody(), contains("Unauthorized"));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void shouldReturnUserWithStatusCode200(VertxTestContext vertxTestContext) {

    User user = new User();
    user.setUsername("user1");
    user.setEmail("user1@mail.com");
    user.setImage("image");
    user.setBio("bio");
    String userPassword = "user1_123";
    user.setPassword(userPassword);

    saveUser(user);

    webClient
        .get(port, TestsConstants.HOST, USER_RESOURCE_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + user.getToken())
        .as(BodyCodec.string())
        .send(
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          UserResponse userResponse =
                              readValue(response.body(), UserResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.OK.code()));
                          assertThat(userResponse.getUsername(), is(user.getUsername()));
                          assertThat(userResponse.getEmail(), is(user.getEmail()));
                          assertThat(userResponse.getBio(), is(user.getBio()));
                          assertThat(userResponse.getImage(), is(user.getImage()));
                          assertThat(userResponse.getToken(), is(user.getToken()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void shouldUpdateUser(VertxTestContext vertxTestContext) {

    User user = new User();
    user.setUsername("user1");
    user.setEmail("user1@mail.com");
    user.setImage("image");
    user.setPassword("user1_123");

    saveUser(user);

    UpdateUserRequest updateUserRequest = new UpdateUserRequest();
    updateUserRequest.setBio("bio");
    updateUserRequest.setImage("image2");

    webClient
        .put(port, TestsConstants.HOST, USER_RESOURCE_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + user.getToken())
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(updateUserRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          UserResponse userResponse =
                              readValue(response.body(), UserResponse.class, true);
                          assertThat(userResponse.getBio(), is(updateUserRequest.getBio()));
                          assertThat(userResponse.getImage(), is(updateUserRequest.getImage()));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void shouldReturnConflictCodeWhenTryingUpdateUserWithExistentUsername(
      VertxTestContext vertxTestContext) {

    User user1 = new User();
    user1.setUsername("user1");
    user1.setEmail("user1@mail.com");
    user1.setImage("image");
    user1.setPassword("user1_123");

    User user2 = new User();
    user2.setUsername("user2");
    user2.setEmail("user2@mail.com");
    user2.setImage("image");
    user2.setPassword("user1_123");

    saveUsers(user1, user2);

    UpdateUserRequest updateUserRequest = new UpdateUserRequest();
    updateUserRequest.setUsername(user2.getUsername());

    webClient
        .put(port, TestsConstants.HOST, USER_RESOURCE_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + user1.getToken())
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(updateUserRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse errorResponse =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.CONFLICT.code()));
                          assertThat(errorResponse.getBody(), contains("username already exists"));
                          vertxTestContext.completeNow();
                        })));
  }

  @Test
  public void shouldReturnConflictCodeWhenTryingUpdateUserWithExistentEmail(
      VertxTestContext vertxTestContext) {

    User user1 = new User();
    user1.setUsername("user1");
    user1.setEmail("user1@mail.com");
    user1.setImage("image");
    user1.setPassword("user1_123");

    User user2 = new User();
    user2.setUsername("user2");
    user2.setEmail("user2@mail.com");
    user2.setImage("image");
    user2.setPassword("user1_123");

    saveUsers(user1, user2);

    UpdateUserRequest updateUserRequest = new UpdateUserRequest();
    updateUserRequest.setEmail(user2.getEmail());

    webClient
        .put(port, TestsConstants.HOST, USER_RESOURCE_PATH)
        .putHeader(AUTHORIZATION_HEADER, AUTHORIZATION_HEADER_VALUE_PREFIX + user1.getToken())
        .as(BodyCodec.string())
        .sendBuffer(
            toBuffer(updateUserRequest),
            vertxTestContext.succeeding(
                response ->
                    vertxTestContext.verify(
                        () -> {
                          ErrorResponse errorResponse =
                              readValue(response.body(), ErrorResponse.class, true);
                          assertThat(response.statusCode(), is(HttpResponseStatus.CONFLICT.code()));
                          assertThat(errorResponse.getBody(), contains("email already exists"));
                          vertxTestContext.completeNow();
                        })));
  }
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/java/com/example/realworld/constants/TestsConstants.java
package com.example.realworld.constants;

public class TestsConstants {

  public static final String AUTHORIZATION_HEADER_VALUE_PREFIX = "Token ";
  public static final String AUTHORIZATION_HEADER = "Authorization";
  public static final String HOST = "localhost";
  public static final String API_PREFIX = "/api";
}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/resources/application.yml
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1
    username: sa
    password:
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration
vertx:
  server:
    port: 8081
    context_path: "/api"
  jwt:
    algorithm: "HS256"
    secret: "secret"
  database:
    url: ${spring.datasource.url}
    driver_class: "org.h2.Driver"
    max_pool_size: 30
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}

--#

--% E:/desktop-laptop/_rwe/vertx-springboot-realworld-example-app/src/test/resources/db/migration/V1__schema.sql
CREATE TABLE USERS(
  ID VARCHAR(255) PRIMARY KEY,
  USERNAME VARCHAR(255),
  BIO VARCHAR(255),
  EMAIL VARCHAR(255),
  IMAGE VARCHAR(255),
  PASSWORD VARCHAR(255),
  TOKEN VARCHAR(500)
);

CREATE TABLE USERS_FOLLOWED(
  USER_ID VARCHAR(255) NOT NULL,
  FOLLOWED_ID VARCHAR(255) NOT NULL,
  PRIMARY KEY (USER_ID, FOLLOWED_ID),
  CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
  CONSTRAINT FK_FOLLOWED_ID FOREIGN KEY (FOLLOWED_ID) REFERENCES USERS(ID)
);

CREATE TABLE ARTICLES(
  ID VARCHAR(255) PRIMARY KEY,
  TITLE VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(255),
  BODY VARCHAR(255),
  SLUG VARCHAR(255) NOT NULL,
  AUTHOR_ID VARCHAR(255) NOT NULL,
  CREATED_AT TIMESTAMP,
  UPDATED_AT TIMESTAMP,
  CONSTRAINT FK_AUTHOR_ID FOREIGN KEY (AUTHOR_ID) REFERENCES USERS(ID)
);

CREATE TABLE TAGS(
  ID VARCHAR(255) PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL
);

CREATE TABLE COMMENTS(
    ID VARCHAR(255) PRIMARY KEY,
    BODY VARCHAR(255) NOT NULL,
    AUTHOR_ID VARCHAR(255) NOT NULL,
    ARTICLE_ID VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    CONSTRAINT FK_COMMENTS_AUTHOR_ID FOREIGN KEY (AUTHOR_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_COMMENTS_ARTICLE_ID FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES(ID)
);

CREATE TABLE ARTICLES_TAGS(
  ARTICLE_ID VARCHAR(255) NOT NULL,
  TAG_ID VARCHAR(255) NOT NULL,
  PRIMARY KEY (ARTICLE_ID, TAG_ID),
  CONSTRAINT FK_ARTICLES_TAGS_ARTICLE_ID FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES(ID),
  CONSTRAINT FK_ARTICLES_TAGS_TAGS_ID FOREIGN KEY (TAG_ID) REFERENCES TAGS(ID)
);

CREATE TABLE ARTICLES_USERS(
  ARTICLE_ID VARCHAR(255) NOT NULL,
  USER_ID VARCHAR(255) NOT NULL,
  PRIMARY KEY (ARTICLE_ID, USER_ID),
  CONSTRAINT FK_ARTICLES_USERS_ARTICLE_ID FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLES(ID),
  CONSTRAINT FK_ARTICLES_USERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

--#

