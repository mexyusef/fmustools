--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#

--% index/fmus/under_pwd
__REPLACE_WITH_PROJECT_DIR_OR_INPUT__,d(/mk)
	%utama=__FILE__
	.editorconfig,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/.editorconfig)
	.gitignore,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/.gitignore)
	build.gradle,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/build.gradle)
	gradlew.bat,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/gradlew.bat)
	LICENSE,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/LICENSE)
	lombok.config,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/lombok.config)
	README.md,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/README.md)
	realworld.drawio,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/realworld.drawio)
	settings.gradle,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/settings.gradle)
	test.gradle,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/test.gradle)
	.github,d(/mk)
		ISSUE_TEMPLATE,d(/mk)
			feature.md,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/.github/ISSUE_TEMPLATE/feature.md)
		workflows,d(/mk)
			build.yml,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/.github/workflows/build.yml)
	doc,d(/mk)
		Conduit.postman_collection.json,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/Conduit.postman_collection.json)
		README.md,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/README.md)
		run-api-tests.sh,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/run-api-tests.sh)
		swagger.json,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/swagger.json)
		image,d(/mk)
			performance.png,f(b64=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/performance.png)
			realworld-Article.png,f(b64=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-Article.png)
			realworld-cover.png,f(b64=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-cover.png)
			realworld-Jwt.png,f(b64=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-Jwt.png)
			realworld-User.png,f(b64=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-User.png)
	src,d(/mk)
		main,d(/mk)
			java,d(/mk)
				io,d(/mk)
					github,d(/mk)
						raeperd,d(/mk)
							realworld,d(/mk)
								RealWorldApplication.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/RealWorldApplication.java)
								application,d(/mk)
									WebMvcConfiguration.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/WebMvcConfiguration.java)
									article,d(/mk)
										ArticleModel.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticleModel.java)
										ArticlePostRequestDTO.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticlePostRequestDTO.java)
										ArticlePutRequestDTO.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticlePutRequestDTO.java)
										ArticleRestController.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticleRestController.java)
										MultipleArticleModel.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/MultipleArticleModel.java)
										comment,d(/mk)
											CommentModel.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/CommentModel.java)
											CommentPostRequestDTO.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/CommentPostRequestDTO.java)
											CommentRestController.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/CommentRestController.java)
											MultipleCommentModel.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/MultipleCommentModel.java)
									security,d(/mk)
										JWTAuthenticationFilter.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/security/JWTAuthenticationFilter.java)
										JWTAuthenticationProvider.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/security/JWTAuthenticationProvider.java)
										SecurityConfiguration.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/security/SecurityConfiguration.java)
									tag,d(/mk)
										TagRestController.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/tag/TagRestController.java)
										TagsModel.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/tag/TagsModel.java)
									user,d(/mk)
										ProfileModel.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/ProfileModel.java)
										ProfileRestController.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/ProfileRestController.java)
										UserLoginRequestDTO.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserLoginRequestDTO.java)
										UserModel.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserModel.java)
										UserPostRequestDTO.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserPostRequestDTO.java)
										UserPutRequestDTO.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserPutRequestDTO.java)
										UserRestController.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserRestController.java)
								domain,d(/mk)
									article,d(/mk)
										Article.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/Article.java)
										ArticleContents.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleContents.java)
										ArticleFindService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleFindService.java)
										ArticleRepository.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleRepository.java)
										ArticleService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleService.java)
										ArticleTitle.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleTitle.java)
										ArticleUpdateRequest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleUpdateRequest.java)
										comment,d(/mk)
											Comment.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/comment/Comment.java)
											CommentService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/comment/CommentService.java)
										tag,d(/mk)
											Tag.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/tag/Tag.java)
											TagRepository.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/tag/TagRepository.java)
											TagService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/tag/TagService.java)
									jwt,d(/mk)
										JWTDeserializer.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/jwt/JWTDeserializer.java)
										JWTPayload.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/jwt/JWTPayload.java)
										JWTSerializer.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/jwt/JWTSerializer.java)
									user,d(/mk)
										Email.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Email.java)
										Image.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Image.java)
										Password.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Password.java)
										Profile.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Profile.java)
										ProfileService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/ProfileService.java)
										User.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/User.java)
										UserFindService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserFindService.java)
										UserName.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserName.java)
										UserRepository.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserRepository.java)
										UserService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserService.java)
										UserSignUpRequest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserSignUpRequest.java)
										UserUpdateRequest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserUpdateRequest.java)
								infrastructure,d(/mk)
									jwt,d(/mk)
										Base64URL.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/Base64URL.java)
										HmacSHA256.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256.java)
										HmacSHA256JWTService.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256JWTService.java)
										JWTConfiguration.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/JWTConfiguration.java)
										UserJWTPayload.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/UserJWTPayload.java)
									repository,d(/mk)
										SpringDataJPAConfiguration.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/repository/SpringDataJPAConfiguration.java)
			resources,d(/mk)
				application.properties,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/resources/application.properties)
				schema.sql,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/resources/schema.sql)
				META-INF,d(/mk)
					additional-spring-configuration-metadata.json,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/resources/META-INF/additional-spring-configuration-metadata.json)
		test,d(/mk)
			java,d(/mk)
				io,d(/mk)
					github,d(/mk)
						raeperd,d(/mk)
							realworld,d(/mk)
								IntegrationTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/IntegrationTest.java)
								IntegrationTestUtils.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/IntegrationTestUtils.java)
								application,d(/mk)
									article,d(/mk)
										ArticleRestControllerTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/article/ArticleRestControllerTest.java)
										comment,d(/mk)
											CommentRestControllerTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/article/comment/CommentRestControllerTest.java)
									security,d(/mk)
										WithMockJWTUser.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/security/WithMockJWTUser.java)
										WithMockJWTUserContextFactory.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/security/WithMockJWTUserContextFactory.java)
									tag,d(/mk)
										TagRestControllerTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/tag/TagRestControllerTest.java)
									user,d(/mk)
										ProfileRestControllerTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/user/ProfileRestControllerTest.java)
										UserRestControllerTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/user/UserRestControllerTest.java)
								domain,d(/mk)
									article,d(/mk)
										ArticleContentsTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleContentsTest.java)
										ArticleRepositoryTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleRepositoryTest.java)
										ArticleServiceTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleServiceTest.java)
										ArticleTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleTest.java)
										ArticleTitleTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleTitleTest.java)
										ArticleUpdateRequestTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleUpdateRequestTest.java)
										comment,d(/mk)
											CommentServiceTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/comment/CommentServiceTest.java)
											CommentTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/comment/CommentTest.java)
										tag,d(/mk)
											TagServiceTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/tag/TagServiceTest.java)
											TagTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/tag/TagTest.java)
									user,d(/mk)
										EmailTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/EmailTest.java)
										ImageTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/ImageTest.java)
										PasswordTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/PasswordTest.java)
										ProfileServiceTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/ProfileServiceTest.java)
										ProfileTestUtils.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/ProfileTestUtils.java)
										UserNameTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserNameTest.java)
										UserRepositoryTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserRepositoryTest.java)
										UserServiceTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserServiceTest.java)
										UserTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserTest.java)
										UserTestUtils.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserTestUtils.java)
										UserUpdateRequestTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserUpdateRequestTest.java)
								infrastructure,d(/mk)
									jwt,d(/mk)
										Base64URLTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/Base64URLTest.java)
										HmacSHA256JWTServiceTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256JWTServiceTest.java)
										HmacSHA256Test.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256Test.java)
										UserJWTPayloadTest.java,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/UserJWTPayloadTest.java)
			resources,d(/mk)
				data.sql,f(e=utama=E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/resources/data.sql)
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/.editorconfig
root = true

[*.java]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = false
max_line_length = 120
tab_width = 4
ij_continuation_indent_size = 8
ij_formatter_off_tag = @formatter:off
ij_formatter_on_tag = @formatter:on
ij_formatter_tags_enabled = false
ij_smart_tabs = false
ij_visual_guides = none
ij_wrap_on_typing = false


[*.sql]
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
indent_style = space
indent_size = 2
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/.gitignore
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/build.gradle
plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id "io.freefair.lombok" version "5.3.3.3"
    id "org.ec4j.editorconfig" version "0.0.3"
    id "org.sonarqube" version "3.1.1"
    id 'com.google.cloud.tools.jib' version '3.1.4'
}

group = 'io.github.raeperd'
version = '2.1.1'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-inline:3.12.1'
}

apply from: 'test.gradle'

test {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "raeperd_realworld-springboot-java"
        property "sonar.organization", "raeperd"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jib {
    from {
        image = "openjdk:11.0.10-jre-buster"
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
    to {
        image = "ghcr.io/raeperd/${rootProject.name}"
    }
    container {
        ports = ["8080"]
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/gradlew.bat
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/LICENSE
MIT License

Copyright (c) 2021 raeperd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/lombok.config
# This file is generated by the 'io.freefair.lombok' Gradle plugin
config.stopBubbling = true
lombok.addLombokGeneratedAnnotation = true
lombok.extern.findbugs.addSuppressFBWarnings = true

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/README.md

![RealWorld example apps cover](./doc/image/realworld-cover.png)
[![Build](https://github.com/raeperd/realworld-springboot-java/actions/workflows/build.yml/badge.svg)](https://github.com/raeperd/realworld-springboot-java/actions/workflows/build.yml)
[![Lines of Code](https://sonarcloud.io/api/project_badges/measure?project=raeperd_realworld-springboot-java&metric=ncloc)](https://sonarcloud.io/dashboard?id=raeperd_realworld-springboot-java)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=raeperd_realworld-springboot-java&metric=coverage)](https://sonarcloud.io/dashboard?id=raeperd_realworld-springboot-java)
[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=raeperd_realworld-springboot-java&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=raeperd_realworld-springboot-java)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

[ReadWorld.io](https://github.com/gothinkster/realworld) backend project using spring boot java using `spring-security`, `spring-data-jpa`

# Insprired by

- [우아한형제들 기술 불로그 | Todo list 만들기는 이제 그만](https://woowabros.github.io/experience/2020/04/14/stop-making-todo-list.html)
- [우아한형제들 기술 블로그 | Gradle 프로젝트에 JaCoCo 설정하기](https://woowabros.github.io/experience/2020/02/02/jacoco-config-on-gradle-project.html)
- [우아한형제들 기술 블로그 | 우린 Git-flow를 사용하고 있어요](https://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html)
- [Github | Realworld.io](https://github.com/gothinkster/realworld)


 # Getting started

 ## Build from scratch
 ``` shell
 $ ./gradlew build bootRun
 ```

 ## Using docker
 ``` shell
 $ docker run --rm -p 8080:8080 ghcr.io/raeperd/realworld-spring-boot-java:master
 ```

- Dockerhub registry is [here](https://hub.docker.com/repository/docker/raeperd/realworld-spring-boot-java)  
- Container tags are simply branch name of this repository following git-flow strategy



## How to test 

After run application, you can try one of followings

### using shell script

``` shell
$ ./doc/run-api-tests.sh
```

### using postman 

Import [`./doc/Conduit.postman_collection.json`](./doc/Conduit.postman_collection.json) in your postman application 



And also, pure `gradle test` covers almost every line of code.

More details can be found in [`./doc/README.md`](./doc/README.md) and  [original source](https://github.com/gothinkster/realworld/tree/master/spec)

# Overview

## Design Principal

- Always `final` whenever possible
- Always package private class whenever possible
- **Always test every package, class, method, instruction in codes**
  - Except for some boilerplate `equals` and `hashcode` method
  - This is validated by [jacoco-gradle-plugin](https://docs.gradle.org/current/userguide/jacoco_plugin.html).
  - Coverage verification in [`./test.gradle`](./test.gradle)
- Try to avoid including additional dependencies as much as possible
  - Implements JWT generation / validation logic without 3rd party library [#3](https://github.com/raeperd/realworld-springboot-java/issues/3)
- Try to maintain codes in domain package remain POJO
  - Except for special spring annotations like `@Service`, `@Repository`, `@Transactional`
  - Prohibit use of lombok in domain package
- Try to follow all modern best practices for spring-boot project
  
## Diagrams 

- You can open full diagram file in [`realworld.drawio`](./realworld.drawio) using [draw.io](https://app.diagrams.net/)

### User

![realworld-User](./doc/image/realworld-User.png)

- Separate password encoding logic out of User.
- User must be created with password encoder.

### Article

![realworld-Article](./doc/image/realworld-Article.png)

- Article contains other elements with `@Embedded` classes
- Try to reduce number of repositories.
- Prefer `@JoinTable` to `@JoinColumn`

### JWT 

![realworld-Jwt](./doc/image/realworld-Jwt.png)

- Try not to use 3rd party library
- Serialization and Deserialization are seperated with interfaces
- Domain package contains interface, infrastructure code provide implementation  
- Application package do stuff with spring-security logic

## Performance

![performance](./doc/image/performance.png)

- Result of [`./doc/run-api-tests.sh`](./doc/run-api-tests.sh)

# What can be done more

- User class doing so many things now. It can be improved someway.
- Service classes can be divided into smaller services
- Test cases order can be improved

# Contact

You can contact me with [email](raeperd117@gmail.com) or issue in this project

# License
[MIT License](./LICENSE)

# Referenced

- [JSON Web Token Introduction - jwt.io](https://jwt.io/introduction)  
- [Symmetric vs Asymmetric JWTs. What is JWT? | by Swayam Raina | Noteworthy - The Journal Blog](https://blog.usejournal.com/symmetric-vs-asymmetric-jwts-bd5d1a9567f6)
- [presentations/auth.md at master · alex996/presentations · GitHub](https://github.com/alex996/presentations/blob/master/auth.md)


--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/realworld.drawio
<mxfile host="Electron" modified="2021-06-09T23:16:25.768Z" agent="5.0 (Macintosh; Intel Mac OS X 11_4_0) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/14.6.13 Chrome/89.0.4389.128 Electron/12.0.7 Safari/537.36" etag="wqkP5qjfbcsuRL0WKWe5" version="14.6.13" type="device" pages="3"><diagram id="SA8dh1TOzllxCqaTYeV_" name="User">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</diagram><diagram id="meMFipMXfzQobobiQDEw" name="Article">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</diagram><diagram id="-MJsVbSKPCdRUZuyjXYy" name="Jwt">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</diagram></mxfile>
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/settings.gradle
rootProject.name = 'realworld-spring-boot-java'

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/test.gradle
test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'

            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                maximum = 1.00
            }

            excludes = [
                    'io.github.raeperd.realworld',
            ]
        }
        rule {
            element = "CLASS"

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            excludes = [
                    'io.github.raeperd.realworld.RealWorldApplication',
                    'io.github.raeperd.realworld.application.security.JWTAuthenticationFilter.JWT'
            ]
        }
        rule {
            element = "METHOD"

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            excludes = [
                    'io.github.raeperd.realworld.**main**',
                    'io.github.raeperd.realworld.**equals(java.lang.Object)',
                    'io.github.raeperd.realworld.application.security.JWTAuthenticationFilter.JWT.getCredentials()'
            ]
        }
        rule {
            element = "CLASS"

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 100
            }
        }
        rule {
            element = "METHOD"

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 15
            }
        }
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/.github/ISSUE_TEMPLATE/feature.md
---
name: Feature request
about: Suggest an idea for this project
title: '[FEATURE]'
labels: 'feature'
assignees: 'raeperd117@gmail.com'

---

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/.github/workflows/build.yml
name: Build
on: [push, pull_request]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info
      - uses: actions/upload-artifact@v2
        with:
          path: build/libs/*.jar

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io/raeperd
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get branch name
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr /# -)" >> $GITHUB_ENV
      - name: Build container image
        run: ./gradlew jib -Djib.to.tags=${{ env.BRANCH_NAME }}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/Conduit.postman_collection.json

{
  "info": {
    "_postman_id": "0574ad8a-a525-43ae-8e1e-5fd9756037f4",
    "name": "Conduit",
    "description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users",
                "login"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Login and Remember Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7674032-bf09-4ae7-8224-4afa2fb1a9f9",
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "",
                  "if(tests['User has \"token\" property']){",
                  "    pm.globals.set('token', user.token);",
                  "}",
                  "",
                  "tests['Global variable \"token\" has been set'] = pm.globals.get('token') === user.token;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users/login",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users",
                "login"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/user",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/user",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": [

          ]
        }
      ]
    },
    {
      "name": "Articles",
      "item": [
        {
          "name": "All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?author=johnjacob",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "author",
                  "value": "johnjacob"
                }
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?favorited=jane",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?tag=dragons",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ]
            }
          },
          "response": [

          ]
        }
      ]
    },
    {
      "name": "Articles, Favorite, Comments",
      "item": [
        {
          "name": "Create Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e711dbf8-8065-4ba8-8b74-f1639a7d8208",
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "pm.globals.set('slug', article.slug);",
                  "",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"dragons\",\"training\"]}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/feed",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "feed"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "All Articles with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?author={{USERNAME}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "author",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles by Author with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?author={{USERNAME}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "author",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles Favorited by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?favorited=jane",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles Favorited by Username with auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?favorited=jane",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "favorited",
                  "value": "jane"
                }
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Single Article by slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Articles by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                  "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                  "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                  "",
                  "    if(responseJSON.articles.length){",
                  "        var article = responseJSON.articles[0];",
                  "",
                  "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "    } else {",
                  "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles?tag=dragons",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles"
              ],
              "query": [
                {
                  "key": "tag",
                  "value": "dragons"
                }
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Update Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"body\":\"With two hands\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Favorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests[\"Article's 'favorited' property is true\"] = article.favorited === true;",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "tests[\"Article's 'favoritesCount' property is greater than 0\"] = article.favoritesCount > 0;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/favorite",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "favorite"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Unfavorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "tests[\"Article's \\\"favorited\\\" property is false\"] = article.favorited === false;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/favorite",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "favorite"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Create Comment for Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f90c364-cc68-4728-961a-85eb00197d7b",
                "type": "text/javascript",
                "exec": [
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"comment\" property'] = responseJSON.hasOwnProperty('comment');",
                  "",
                  "var comment = responseJSON.comment || {};",
                  "",
                  "tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                  "pm.globals.set('commentId', comment.id);",
                  "",
                  "tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                  "tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                  "tests['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
                  "tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
                  "tests['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
                  "tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"comment\":{\"body\":\"Thank you so much!\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "comments"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "All Comments for Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"comments\" property'] = responseJSON.hasOwnProperty('comments');",
                  "",
                  "    if(responseJSON.comments.length){",
                  "        var comment = responseJSON.comments[0];",
                  "",
                  "        tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                  "        tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                  "        tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                  "        tests['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
                  "        tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
                  "        tests['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
                  "        tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "comments"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Delete Comment for Article",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}/comments/{{commentId}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}",
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Delete Article",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{slug}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response": [

          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "67853a4a-e972-4573-a295-dad12a46a9d7",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "3057f989-15e4-484e-b8fa-a041043d0ac0",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Profiles",
      "item": [
        {
          "name": "Register Celeb",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
                  "tests['User has \"image\" property'] = user.hasOwnProperty('image');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"celeb_{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"celeb_{{USERNAME}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/users",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "profiles",
                "celeb_{{USERNAME}}"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Follow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "    tests['Profile\\'s \"following\" property is true'] = profile.following === true;",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "profiles",
                "celeb_{{USERNAME}}",
                "follow"
              ]
            }
          },
          "response": [

          ]
        },
        {
          "name": "Unfollow Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (!(environment.isIntegrationTest)) {",
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "",
                  "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                  "    ",
                  "    var profile = responseJSON.profile || {};",
                  "    ",
                  "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                  "    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
                  "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                  "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                  "    tests['Profile\\'s \"following\" property is false'] = profile.following === false;",
                  "}",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "profiles",
                "celeb_{{USERNAME}}",
                "follow"
              ]
            }
          },
          "response": [

          ]
        }
      ]
    },
    {
      "name": "Tags",
      "item": [
        {
          "name": "All Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
                  "    tests['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{APIURL}}/tags",
              "host": [
                "{{APIURL}}"
              ],
              "path": [
                "tags"
              ]
            }
          },
          "response": [

          ]
        }
      ]
    }
  ]
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/README.md
# RealWorld API Spec

## Running API tests locally

To locally run the provided Postman collection against your backend, execute:

```
APIURL=http://localhost:3000/api ./run-api-tests.sh
```

For more details, see [`run-api-tests.sh`](run-api-tests.sh).

## Considerations for your backend with [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)

If the backend is about to run on a different host/port than the frontend, make sure to handle `OPTIONS` too and return correct `Access-Control-Allow-Origin` and `Access-Control-Allow-Headers` (e.g. `Content-Type`).

### Authentication Header:

`Authorization: Token jwt.token.here`

## JSON Objects returned by API:

Make sure the right content type like `Content-Type: application/json; charset=utf-8` is correctly returned.

### Users (for authentication)

```JSON
{
  "user": {
    "email": "jake@jake.jake",
    "token": "jwt.token.here",
    "username": "jake",
    "bio": "I work at statefarm",
    "image": null
  }
}
```

### Profile

```JSON
{
  "profile": {
    "username": "jake",
    "bio": "I work at statefarm",
    "image": "https://static.productionready.io/images/smiley-cyrus.jpg",
    "following": false
  }
}
```

### Single Article

```JSON
{
  "article": {
    "slug": "how-to-train-your-dragon",
    "title": "How to train your dragon",
    "description": "Ever wonder how?",
    "body": "It takes a Jacobian",
    "tagList": ["dragons", "training"],
    "createdAt": "2016-02-18T03:22:56.637Z",
    "updatedAt": "2016-02-18T03:48:35.824Z",
    "favorited": false,
    "favoritesCount": 0,
    "author": {
      "username": "jake",
      "bio": "I work at statefarm",
      "image": "https://i.stack.imgur.com/xHWG8.jpg",
      "following": false
    }
  }
}
```

### Multiple Articles

```JSON
{
  "articles":[{
    "slug": "how-to-train-your-dragon",
    "title": "How to train your dragon",
    "description": "Ever wonder how?",
    "body": "It takes a Jacobian",
    "tagList": ["dragons", "training"],
    "createdAt": "2016-02-18T03:22:56.637Z",
    "updatedAt": "2016-02-18T03:48:35.824Z",
    "favorited": false,
    "favoritesCount": 0,
    "author": {
      "username": "jake",
      "bio": "I work at statefarm",
      "image": "https://i.stack.imgur.com/xHWG8.jpg",
      "following": false
    }
  }, {
    "slug": "how-to-train-your-dragon-2",
    "title": "How to train your dragon 2",
    "description": "So toothless",
    "body": "It a dragon",
    "tagList": ["dragons", "training"],
    "createdAt": "2016-02-18T03:22:56.637Z",
    "updatedAt": "2016-02-18T03:48:35.824Z",
    "favorited": false,
    "favoritesCount": 0,
    "author": {
      "username": "jake",
      "bio": "I work at statefarm",
      "image": "https://i.stack.imgur.com/xHWG8.jpg",
      "following": false
    }
  }],
  "articlesCount": 2
}
```

### Single Comment

```JSON
{
  "comment": {
    "id": 1,
    "createdAt": "2016-02-18T03:22:56.637Z",
    "updatedAt": "2016-02-18T03:22:56.637Z",
    "body": "It takes a Jacobian",
    "author": {
      "username": "jake",
      "bio": "I work at statefarm",
      "image": "https://i.stack.imgur.com/xHWG8.jpg",
      "following": false
    }
  }
}
```

### Multiple Comments

```JSON
{
  "comments": [{
    "id": 1,
    "createdAt": "2016-02-18T03:22:56.637Z",
    "updatedAt": "2016-02-18T03:22:56.637Z",
    "body": "It takes a Jacobian",
    "author": {
      "username": "jake",
      "bio": "I work at statefarm",
      "image": "https://i.stack.imgur.com/xHWG8.jpg",
      "following": false
    }
  }]
}
```

### List of Tags

```JSON
{
  "tags": [
    "reactjs",
    "angularjs"
  ]
}
```

### Errors and Status Codes

If a request fails any validations, expect a 422 and errors in the following format:

```JSON
{
  "errors":{
    "body": [
      "can't be empty"
    ]
  }
}
```

#### Other status codes:

401 for Unauthorized requests, when a request requires authentication but it isn't provided

403 for Forbidden requests, when a request may be valid but the user doesn't have permissions to perform the action

404 for Not found requests, when a resource can't be found to fulfill the request


## Endpoints:

### Authentication:

`POST /api/users/login`

Example request body:
```JSON
{
  "user":{
    "email": "jake@jake.jake",
    "password": "jakejake"
  }
}
```

No authentication required, returns a [User](#users-for-authentication)

Required fields: `email`, `password`


### Registration:

`POST /api/users`

Example request body:
```JSON
{
  "user":{
    "username": "Jacob",
    "email": "jake@jake.jake",
    "password": "jakejake"
  }
}
```

No authentication required, returns a [User](#users-for-authentication)

Required fields: `email`, `username`, `password`



### Get Current User

`GET /api/user`

Authentication required, returns a [User](#users-for-authentication) that's the current user



### Update User

`PUT /api/user`

Example request body:
```JSON
{
  "user":{
    "email": "jake@jake.jake",
    "bio": "I like to skateboard",
    "image": "https://i.stack.imgur.com/xHWG8.jpg"
  }
}
```

Authentication required, returns the [User](#users-for-authentication)


Accepted fields: `email`, `username`, `password`, `image`, `bio`



### Get Profile

`GET /api/profiles/:username`

Authentication optional, returns a [Profile](#profile)



### Follow user

`POST /api/profiles/:username/follow`

Authentication required, returns a [Profile](#profile)

No additional parameters required



### Unfollow user

`DELETE /api/profiles/:username/follow`

Authentication required, returns a [Profile](#profile)

No additional parameters required



### List Articles

`GET /api/articles`

Returns most recent articles globally by default, provide `tag`, `author` or `favorited` query parameter to filter results

Query Parameters:

Filter by tag:

`?tag=AngularJS`

Filter by author:

`?author=jake`

Favorited by user:

`?favorited=jake`

Limit number of articles (default is 20):

`?limit=20`

Offset/skip number of articles (default is 0):

`?offset=0`

Authentication optional, will return [multiple articles](#multiple-articles), ordered by most recent first



### Feed Articles

`GET /api/articles/feed`

Can also take `limit` and `offset` query parameters like [List Articles](#list-articles)

Authentication required, will return [multiple articles](#multiple-articles) created by followed users, ordered by most recent first.


### Get Article

`GET /api/articles/:slug`

No authentication required, will return [single article](#single-article)

### Create Article

`POST /api/articles`

Example request body:

```JSON
{
  "article": {
    "title": "How to train your dragon",
    "description": "Ever wonder how?",
    "body": "You have to believe",
    "tagList": ["reactjs", "angularjs", "dragons"]
  }
}
```

Authentication required, will return an [Article](#single-article)

Required fields: `title`, `description`, `body`

Optional fields: `tagList` as an array of Strings



### Update Article

`PUT /api/articles/:slug`

Example request body:

```JSON
{
  "article": {
    "title": "Did you train your dragon?"
  }
}
```

Authentication required, returns the updated [Article](#single-article)

Optional fields: `title`, `description`, `body`

The `slug` also gets updated when the `title` is changed


### Delete Article

`DELETE /api/articles/:slug`

Authentication required



### Add Comments to an Article

`POST /api/articles/:slug/comments`

Example request body:

```JSON
{
  "comment": {
    "body": "His name was my name too."
  }
}
```

Authentication required, returns the created [Comment](#single-comment)

Required field: `body`



### Get Comments from an Article

`GET /api/articles/:slug/comments`

Authentication optional, returns [multiple comments](#multiple-comments)



### Delete Comment

`DELETE /api/articles/:slug/comments/:id`

Authentication required



### Favorite Article

`POST /api/articles/:slug/favorite`

Authentication required, returns the [Article](#single-article)

No additional parameters required



### Unfavorite Article

`DELETE /api/articles/:slug/favorite`

Authentication required, returns the [Article](#single-article)

No additional parameters required



### Get Tags

`GET /api/tags`

No authentication required, returns a [List of Tags](#list-of-tags)
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/run-api-tests.sh
#!/usr/bin/env bash
set -x

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

APIURL=${APIURL:-http://localhost:8080}
USERNAME=${USERNAME:-u`date +%s`}
EMAIL=${EMAIL:-$USERNAME@mail.com}
PASSWORD=${PASSWORD:-password}

npx newman run $SCRIPTDIR/Conduit.postman_collection.json \
  --delay-request 500 \
  --global-var "APIURL=$APIURL" \
  --global-var "USERNAME=$USERNAME" \
  --global-var "EMAIL=$EMAIL" \
  --global-var "PASSWORD=$PASSWORD" \
  "$@"
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/swagger.json
// 20210424222319
// https://raw.githubusercontent.com/gothinkster/realworld/master/api/swagger.json

{
  "swagger": "2.0",
  "info": {
    "description": "Conduit API",
    "version": "1.0.0",
    "title": "Conduit API",
    "contact": {
      "name": "RealWorld",
      "url": "https://realworld.io"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "basePath": "/api",
  "schemes": [
    "https",
    "http"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "Token": {
      "description": "For accessing the protected API resources, you must have received a a valid JWT token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by either registering via /users or logging in via /users/login.\n\nThe following format must be in the 'Authorization' header :\n\n    Token: xxxxxx.yyyyyyy.zzzzzz\n    \n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/users/login": {
      "post": {
        "summary": "Existing user login",
        "description": "Login for existing user",
        "tags": [
          "User and Authentication"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Credentials to use",
            "schema": {
              "$ref": "#/definitions/LoginUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "summary": "Register a new user",
        "description": "Register a new user",
        "tags": [
          "User and Authentication"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Details of the new user to register",
            "schema": {
              "$ref": "#/definitions/NewUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "get": {
        "summary": "Get current user",
        "description": "Gets the currently logged-in user",
        "tags": [
          "User and Authentication"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "put": {
        "summary": "Update current user",
        "description": "Updated user information for current user",
        "tags": [
          "User and Authentication"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "UpdateCurrentUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User details to update. At least **one** field is required.",
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/profiles/{username}": {
      "get": {
        "summary": "Get a profile",
        "description": "Get a profile of a user of the system. Auth is optional",
        "tags": [
          "Profile"
        ],
        "operationId": "GetProfileByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username of the profile to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/profiles/{username}/follow": {
      "post": {
        "summary": "Follow a user",
        "description": "Follow a user by username",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "FollowUserByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username of the profile you want to follow",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Unfollow a user",
        "description": "Unfollow a user by username",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "UnfollowUserByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username of the profile you want to unfollow",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/articles/feed": {
      "get": {
        "summary": "Get recent articles from users you follow",
        "description": "Get most recent articles from users you follow. Use query parameters to limit. Auth is required",
        "tags": [
          "Articles"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "GetArticlesFeed",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of articles returned (default is 20)",
            "required": false,
            "default": 20,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset/skip number of articles (default is 0)",
            "required": false,
            "default": 0,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleArticlesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/articles": {
      "get": {
        "summary": "Get recent articles globally",
        "description": "Get most recent articles globally. Use query parameters to filter results. Auth is optional",
        "tags": [
          "Articles"
        ],
        "operationId": "GetArticles",
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by tag",
            "required": false,
            "type": "string"
          },
          {
            "name": "author",
            "in": "query",
            "description": "Filter by author (username)",
            "required": false,
            "type": "string"
          },
          {
            "name": "favorited",
            "in": "query",
            "description": "Filter by favorites of a user (username)",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of articles returned (default is 20)",
            "required": false,
            "default": 20,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset/skip number of articles (default is 0)",
            "required": false,
            "default": 0,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleArticlesResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create an article",
        "description": "Create an article. Auth is required",
        "tags": [
          "Articles"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "CreateArticle",
        "parameters": [
          {
            "name": "article",
            "in": "body",
            "required": true,
            "description": "Article to create",
            "schema": {
              "$ref": "#/definitions/NewArticleRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleArticleResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/articles/{slug}": {
      "get": {
        "summary": "Get an article",
        "description": "Get an article. Auth not required",
        "tags": [
          "Articles"
        ],
        "operationId": "GetArticle",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article to get",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleArticleResponse"
            }
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "put": {
        "summary": "Update an article",
        "description": "Update an article. Auth is required",
        "tags": [
          "Articles"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "UpdateArticle",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article to update",
            "type": "string"
          },
          {
            "name": "article",
            "in": "body",
            "required": true,
            "description": "Article to update",
            "schema": {
              "$ref": "#/definitions/UpdateArticleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleArticleResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an article",
        "description": "Delete an article. Auth is required",
        "tags": [
          "Articles"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "DeleteArticle",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article to delete",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/articles/{slug}/comments": {
      "get": {
        "summary": "Get comments for an article",
        "description": "Get the comments for an article. Auth is optional",
        "tags": [
          "Comments"
        ],
        "operationId": "GetArticleComments",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article that you want to get comments for",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipleCommentsResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "post": {
        "summary": "Create a comment for an article",
        "description": "Create a comment for an article. Auth is required",
        "tags": [
          "Comments"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "CreateArticleComment",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article that you want to create a comment for",
            "type": "string"
          },
          {
            "name": "comment",
            "in": "body",
            "required": true,
            "description": "Comment you want to create",
            "schema": {
              "$ref": "#/definitions/NewCommentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleCommentResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/articles/{slug}/comments/{id}": {
      "delete": {
        "summary": "Delete a comment for an article",
        "description": "Delete a comment for an article. Auth is required",
        "tags": [
          "Comments"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "DeleteArticleComment",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article that you want to delete a comment for",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the comment you want to delete",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/articles/{slug}/favorite": {
      "post": {
        "summary": "Favorite an article",
        "description": "Favorite an article. Auth is required",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "CreateArticleFavorite",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article that you want to favorite",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleArticleResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      },
      "delete": {
        "summary": "Unfavorite an article",
        "description": "Unfavorite an article. Auth is required",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "Token": [

            ]
          }
        ],
        "operationId": "DeleteArticleFavorite",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "Slug of the article that you want to unfavorite",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleArticleResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "summary": "Get tags",
        "description": "Get tags. Auth not required",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagsResponse"
            }
          },
          "422": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/GenericErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "LoginUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "LoginUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/LoginUser"
        }
      },
      "required": [
        "user"
      ]
    },
    "NewUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      },
      "required": [
        "username",
        "email",
        "password"
      ]
    },
    "NewUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/NewUser"
        }
      },
      "required": [
        "user"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "token",
        "username",
        "bio",
        "image"
      ]
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "required": [
        "user"
      ]
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "UpdateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UpdateUser"
        }
      },
      "required": [
        "user"
      ]
    },
    "ProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/Profile"
        }
      },
      "required": [
        "profile"
      ]
    },
    "Profile": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "following": {
          "type": "boolean"
        }
      },
      "required": [
        "username",
        "bio",
        "image",
        "following"
      ]
    },
    "Article": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "tagList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "favorited": {
          "type": "boolean"
        },
        "favoritesCount": {
          "type": "integer"
        },
        "author": {
          "$ref": "#/definitions/Profile"
        }
      },
      "required": [
        "slug",
        "title",
        "description",
        "body",
        "tagList",
        "createdAt",
        "updatedAt",
        "favorited",
        "favoritesCount",
        "author"
      ]
    },
    "SingleArticleResponse": {
      "type": "object",
      "properties": {
        "article": {
          "$ref": "#/definitions/Article"
        }
      },
      "required": [
        "article"
      ]
    },
    "MultipleArticlesResponse": {
      "type": "object",
      "properties": {
        "articles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Article"
          }
        },
        "articlesCount": {
          "type": "integer"
        }
      },
      "required": [
        "articles",
        "articlesCount"
      ]
    },
    "NewArticle": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "tagList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "title",
        "description",
        "body"
      ]
    },
    "NewArticleRequest": {
      "type": "object",
      "properties": {
        "article": {
          "$ref": "#/definitions/NewArticle"
        }
      },
      "required": [
        "article"
      ]
    },
    "UpdateArticle": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "UpdateArticleRequest": {
      "type": "object",
      "properties": {
        "article": {
          "$ref": "#/definitions/UpdateArticle"
        }
      },
      "required": [
        "article"
      ]
    },
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "body": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/Profile"
        }
      },
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "body",
        "author"
      ]
    },
    "SingleCommentResponse": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        }
      },
      "required": [
        "comment"
      ]
    },
    "MultipleCommentsResponse": {
      "type": "object",
      "properties": {
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      },
      "required": [
        "comments"
      ]
    },
    "NewComment": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        }
      },
      "required": [
        "body"
      ]
    },
    "NewCommentRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/NewComment"
        }
      },
      "required": [
        "comment"
      ]
    },
    "TagsResponse": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "tags"
      ]
    },
    "GenericErrorModel": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "properties": {
            "body": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "body"
          ]
        }
      },
      "required": [
        "errors"
      ]
    }
  }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/performance.png
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ZP/+/fL000/rmw9s/epXv5IPP/xQXn31VW36uuuuk6KiIvnrX/+qf995552yY8cOveKovLxctm3bputXW1ur493+oF1XXHGFfmKHnZaWlqgsbuW71d+Jnxf+N954Y0Rk1tXVyT333BNVP6fji4Re+ID7j370IwGz3//+91H23X6gTvfff79g1nY8IQKhumbNGlm1apU2dcoppwiOtdeAfn3o0CH57LPP4mYZPHiwXHTRRTJ8+HDtkcGLfdB/9u3bFzc9d5IACZBArhMIdI7Irl275OOPP5YtW7ZortjG54svvohwPvPMM7UI+fTTT+Wbb74RiAYMBSB4yY8nWNxg3n//fW0bN5wZM2ZE7Ke6gafkiRMnSnV1tSxbtkx7WFBnEyA64AkwAem7d+9ufmpRcsIJJ2hR9Mknn8iIESPk5JNPjsS7bWDIo2fPnvLOO+/IgQMHtOCy53Er363+Tvy88IfYwzHdvXu3ZmOvG7adji/iUX83PuAJwQAhh/b4CQ899JAWgonyQITgeECAXHjhhZqvvX8mymf2wyOCev30pz+Vu+66S77zne9EHf9zzjlHixAcv7fffluGDBki5513nsnObxIgARIggRgCgXpE4N3AB14RiIXnnnsupjiRCRMm6CfSJ598Usf9/Oc/l8mTJ8t7772n87rlRzxuhF9++aXOj3edIP/y5cuPKyvZHXjihZcFAU/LU6dO1dte/2zcuFGeeeYZnXzYsGH66RyixkuAR+Srr76KzDlAfr/Bqf5O/BDnxh83WARMVIX3IzY4HV+T1o0P4v/yl79IfX299nSZfEF8P/7443L77bfL1Vdfrc2hL73xxhueTcMjgmPy+eef677x7W9/W3tITP/DvBl4P1588cWIfYgXBhIgARIggfgEAhUi8YuI3ounfTx5m4An64EDB5qfrt/r1q3THhBMhsUFHisfMOkwyGB3oxsXPCZBHj161FMxaJMJ8Kzg6d5rKCkpkaqqqkjyvXv36smqkR0eNpzqn25+Xo6vFz6Yh5GOgGE99DcIQ9QVIhPDeytXrvRUHLxcGC4zwvKXv/ylFppGiKxdu1YPzfz617+WyspKLZg/+OADT7aZiARIgARykUDGhUgsZL8i4qabbtJDIxjWwQ0B80zSGVAOPh01xNY/0/z8Ht90csaQDwQsJjW/9tpruih4ODAc5lWImHymnhCNmBxtwuuvv67ntkyfPl17TuCt69OnT8RDYtLxmwRIgARIIEwg0DkiXqDC3Y4xdhPgysY+LwFzNzAcsGTJEsGSy3//+9/6oh+b19z8cJMJOqCuqLMJeKr2Wn+Tx+kbKzrs9mPfdZFK+V75OdXPLQ71S/b42m3DAxV0wJAKJjjDS2UClh7379/f/Ix8Yxl4PE/dGWecIaNHj46kgwcr9vhjMjMmL//2t7/V86XAnYEESIAESCA+gbR4RPCUCBFw/vnn60mNhw8fjqxowRyESZMmyaxZs/QkP6yeeemll6Jqlyg/XN0YHsG7IOBOhx3MqcDKBHvAZFmkw8RJM5cE+zD5M9WA+p944ol6eAjzR3Czsi/lTNX+5s2bdbvQPggS2Me2CamU75VfIv6oA4YyMCSGunXp0kVPNsZ+vK8FQ0Jeji/SOwWsmsEyXKyA+d3vfueU9Lg4eCAgYvr27avjzAoqDEmBI1ZnYUIp2gAPCeLtQ0XIBMGCd9JAYPzmN7+JGpKDqIAHZenSpXplE/ovPCwmYP4JuCAeogd9JIh+Z+zzmwRIgAQ6G4G0CJHVq1fr5ZG44ONiDBFgltauWLFCX5wx2RFiAUIBT5D2kCg/Lui46WPFA1bKYGktRIjxgBgbWC6MFQtIAxc5wqOPPhrIDQEufLja8VIs1B/LQDHh0SnE1s8pLdqH5Z/XXnutri9u8Pb8yZRvyvPKLxF/2EG9cKM14frrr9ebZomql+Nr8ppve/uwD0ICK5Mw9IZVM1ia7TVcddVVemWOSW/qh+XjO3fulKeeekrzveaaazRXiBDU3R5aW1v1kB+Ob2yA6Pjud78rN6hl3vBeYU7IRx99FEmGia8XX3yxYAgM7YL4e+uttyLx3CABEiABEogmYCmvQtyZnlgWiydCvMsiHQETOHGhxxOq34AbIV66ZZ+U6ddGqukxJIMbkZ+bpJ8yIXac2pdK+Zngl8rxBSe0D32joaHBDzbPafE+FcwvSvRWWLfy0f9Qt0THH/YhaOgN8XxImJAESKCTEPCrH9pNiHQS3mwGCZAACZAACZCAjYBfIRL8bE5bZbhJAiRAAiRAAiRAAk4EKESc6DCOBEiABEiABEggrQQoRNKKl8ZJgARIgARIgAScCCRcNYPVKJhsx0ACJEACJEACJEACXgn41Q8JhQhWhDCQAAmQAAmQAAmQgB8CfvUDh2b80GVaEiABEiABEiCBQAkkFCJYfoP/bMtAAiRAAiRAAiRAAl4J+NUPCYWI1wKZjgRIgARIgARIgASSJUAhkiw55iMBEiABEiABEkiZAIVIyghpgARIgARIgARIIFkCFCLJkmM+EiABEiABEiCBlAlQiKSMkAZIgARIgARIgASSJUAhkiw55iMBEiABEiABEkiZQMIXmsGyZVn6k3IpNEACJEACJEACJEACcQg4CpGysjLBh4EESIAESIAESIAEvBKor6/3mlQchUhjY6PU1tZGjOXl5Tn+/xnGk4/T/ydi/2D/YP9I/P+7eH7w/Ogs50d5eXlEN3jZcBQiUDRVVVVe7DANCZAACZAACZAACUhpaakvCpys6gsXE5MACZAACZAACQRJgEIkSJq0RQIkQAIkQAIk4IsAhYgvXExMAiRAAiRAAiQQJAEKkSBp0hYJkAAJkAAJkIAvAhQivnAxMQmQAAmQAAmQQJAEKESCpElbJEACJEACJEACvghQiPjCxcQkQAIkQAIkQAJBEqAQCZImbZEACZAACZAACfgikPCFZlu3bnV8i6qvUpiYBEiABEiABEggJwj41Q8JhUhTU1NOAGMjSYAESIAESIAEgiPgVz9waCY49rREAiRAAiRAAiTgk0BCITJ27FipqKjwaY7JSYAESIAESIAEcpmAX/2QUIjkMkS2nQRIgARIgARIIDMEKEQyw5mlkEC7EOjdu3en8myOGTNGCgsL24UlCyUBEkgPgYSTVdNTHK12FgJnn3229OzZU55//vnO0qRO1Y5u3brJggUL5IQTTpDXXntNduzY0Snad9pppwnEyHvvvScvvvhip2gTG0ECuU4gLULkpJNOkpkzZ8oDDzyQFN9k8996660yatSoSJl//OMfZfv27ZHfyWzcfPPNkp+fL/fdd5/n7MnW33MBWZBw9uzZ0qtXL3nzzTelpqYmbTVKhr+Xylx66aUya9YsfVz99JFf/OIXMnDgwKgiXn/9dVm6dKneh74yb948wQ3Tsiy54447otL+9re/lU8//TQi4L73ve/pc+VPf/qTVFZWyn/9139prshUXV0tGzZskCVLlkhdXV2UHbcfV1xxhYwfP14WL14s77zzjlvyDhP/5JNPyrnnnqs/jY2N8sYbb3SYurOiJEAC8QmkRYiUlZVFCYL4RSfem2z+V155RYqLi2XAgAEyd+7c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
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-Article.png

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-cover.png

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-Jwt.png

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/doc/image/realworld-User.png
iVBORw0KGgoAAAANSUhEUgAABBsAAALOCAYAAADoYRtiAAA2OnRFWHRteGZpbGUAJTNDbXhmaWxlJTIwaG9zdCUzRCUyMkVsZWN0cm9uJTIyJTIwbW9kaWZpZWQlM0QlMjIyMDIxLTA2LTA5VDIzJTNBMjAlM0ExMC4xOTFaJTIyJTIwYWdlbnQlM0QlMjI1LjAlMjAoTWFjaW50b3NoJTNCJTIwSW50ZWwlMjBNYWMlMjBPUyUyMFglMjAxMV80XzApJTIwQXBwbGVXZWJLaXQlMkY1MzcuMzYlMjAoS0hUTUwlMkMlMjBsaWtlJTIwR2Vja28pJTIwZHJhdy5pbyUyRjE0LjYuMTMlMjBDaHJvbWUlMkY4OS4wLjQzODkuMTI4JTIwRWxlY3Ryb24lMkYxMi4wLjclMjBTYWZhcmklMkY1MzcuMzYlMjIlMjBldGFnJTNEJTIydS1MdHYwYTdkMlFKN1dRQnNDcmclMjIlMjB2ZXJzaW9uJTNEJTIyMTQuNi4xMyUyMiUyMHR5cGUlM0QlMjJkZXZpY2UlMjIlMjBwYWdlcyUzRCUyMjMlMjIlM0UlM0NkaWFncmFtJTIwaWQlM0QlMjJTQThkaDFUT3psbHhDcWFUWWVWXyUyMiUyMG5hbWUlM0QlMjJVc2VyJTIyJTNFN1oxcmM1czRGOGMlMkZUV2F5TDlhRHhQMWxuQ1p0ZHRwdU5tbG5uJTJCZlZqbUlVbXlsR1hreHUlMkZmUXJRTUlHQ1lwakxyWlJ0JTJCc2FHV09RZmh6OXo5R1JPTk12bDY4Zkk3UmFmQ0VlRHM2ZzVyMmU2UiUyRk9JSFFOaTc0bUJXOVpnV1hEckdBZSUyQlY1V0JEWUY5JTJGNVB6QW8xVnZya2UzaGQyREVtSklqOVZiRndSc0lReiUyQkpDR1lvaThsTGM3WkVFeFY5ZG9Ua1dDdTVuS0JCTCUyRiUyRmE5ZU1GS2dlVnVQdmlFJTJGZm1DJTJGYlFEN2V5REplSTdzeXRaTDVCSFhyYUs5S3N6JTJGVElpSk03ZUxWOHZjWkRVSGElMkJYN0h2WEZaJTJGbUp4YmhNRzd5aGYlMkZmJTJGMkg5NzIlMkY4OVBQZlA3M1B4UHk0dkhHV3Y3T2pQS1BnaVYzdzl6V08yQW5IYjd3VzFpJTJGJTJCTWtBaDNabyUyQmtqQyUyQlo1OEF1bzBDZng3Uzl6TjZHdlNiJTJCdlFaUjdGUEslMkZDQ2ZSQ1RGUzJkTGZ6QSUyQjR6ZXlGTnlzdXNZelg3d3JlbUNSUDVQZWxnVXNHUFNqNk9Zc1FDdHdoNzN5VGRwc1VaTEk3eW0lMkI5enlHZ0Nsb2klMkZvdGJEalo3U09XY0dNQkFGYXJmMkglMkZES1dLSnI3NFpURU1WbnliNUduME1NZTIxciUyRndQRnN3VGZpaVB6QWx5UWdVVnBCdXFaWmx1a2sxZU1Id1ZZNUJKZmFoY21xYmF2Y3ZFeiUyQm8lMkJWaUslMkZJbW9kV0lYN2VLV0t0JTJCeEdTSjQlMkJpTjdzSSUyQjFSMHolMkJ3cTd4WUNsWjlzdkcyQ2h4U2hjYkxGcW1Ld1FzWnRrbmg5N3d4Rjl3MUNTWSUyRlhCdnI1NlcwN1JkVUR1bnFOWnFOJTJGOGRTZkJpdTVlaGlwQUQ5UldGSWtTS3pja0dYWmI5Y3FLT0hrQmZvd3J1U08wJTJCREZJNzd1RjczazRUSDVnaFdaJTJCT1AlMkJjZnU4RGREWkZkNnh5akxUNVl4U2poJTJGeTBWc1FQNDdTaXpDbjlTNnZ1VXB1WVp5YTlsRXU2RFRiYjlHJTJCeWUwUWJQS1FYZyUyRnkwYVRIRjd3VW5DRTc5NVpZNUFSWXZ5ZTNJcG9odSUyQk1zNWJZTlo0Rk5JWXZydUkwYlJQd0E2ciUyRlQlMkZ5U3FjMTVQYW5MdGElMkIlMkZCckdOODRhTTNZNCUyRnZ0ZzU3MGpFMEJQYnhFZnFEb0d3TjlKdXlQUHFuaGd3SjlxNGhRZXZEWkpUeTcwQlNGWTZEUWRnYW1VQmNwUk92MUM0bFVKendLQUlGbURFeWcyQXRUejRzU1FKczNjVERXaXNOUmNLaHJBM05vQ0J5aUJJd0FYNk5uNmxQR1dGbkVjWkJvRHUyWGlIMnlTSjZmQXBTQmxyZkR1eWhiVXFnQ3ZDSG9XMExkaDklMkJCZ0prdVVxWkxLRXR2aWx1eTltT2ZKTWVQc24xTDlQMEtzSnF3U2Q4OE9BMDlCYWNqdzJSSmNKZ201NU1ZcFl2TVJwMnpmMmwxeHZUNjE3JTJCZDZSZDBGMVlxNEVNdlhhemtQZTFVRVJaRGJwSmt4cXhETTlVN0slMkI3UXZaaGRBY3ZUeWtNQ0xVbUY1cEI4VCUyRmU0dyUyRjglMkIwYnI3VFNIVEV6SVFETjNkaU1JblElMkJhUjZaNFNOTXkwU0lQJTJGQ3BLT0lER0dqbGJ4UVRhUmt0UlpTMmc0VDE0VUhVTUUwb2VPSWpsVnZVNm84QmdlRDNmb0VBOFFCJTJGa3lQandjNEx5RHVTVExKYjMwb2ppWlpZVTNubElrZmZHaXc2RkZyRnVCeTdPUFg0cXdyRXVxNUI3SFo5QUtrbXBqZTlETmVaelhsc0tuZTN5TUhnV3QzTnlJQVpTRUhHNWYyTCUyQk1tQndUaFVjJTJGZVBDc3JqN3dlQW4lMkJ3Tjlldno2SGdlR1p0M09kZlBxSUpSa25DUjIzMmVEcnRrcGhSUXFOdnRCd2g5YXhRQnlVWDZKNHRzRHJXellxZW40ZlI3UlZNbkhDQzYlMkZDR2ZFNE5ncVdYbUF4WUklMkJxVm43S29pRzVrdVlQcVpUSTRWTWlFMDhpUFd2czFkTEZ2dU5vakNTZUxlU0ltbmhYMk5pUDNlRlpqTUo1MHElMkZ3WDNOaDhkZGtDaHhJaHh4S1A0Y0NTbEdJWWp4TmFuOHRJSjVmNkI3VWl5WVNlUjVsUkEzVUglMkJYd2FCdHBtJTJGMmFYVFU4MnVYd2FCdUpsQjJOanNwUHVHcjRJaWFaVkR1UDMxWThQSkM4VlFxdEx6S3MlMkZmdk0lMkZkQVFVOHR1VXB1ckJOclJDelNnV1VYTlpFRFJEdG10S1RTZ2FXNVJFQjZ5UkJNelJyaEV5NEtreklWVmN1MzQ1SnBaY2Z2c0l0ZDJ2UzMyTThLeWpCUWwxOXFTYXp2eklKRnJNaDQ2azJ0VlE4VzVYRXVsbW53S2pGSnFIVUVoVVdyOUdnbHh4TyUyQjJhaHFLRW12RGk3WHF1RmxKbFFGYkpBdWFEV1JTTTFsbTI3JTJGJTJCT2JjQnlEMklNcTRYdDJlYnBzTUdYaVhwU3BBZGdTQnpHOThpTmRPZVpYZEVaOFlXaXVNV1NwRzFwOGgyQmtJMkUxbHFJcnZpb1lWQlQlMkIyQmtBQ2pVRW0ydnFpUlNMYWV6WWdZaDA5eUo3NmlwUXF3SGFKbTJ6SEE1dXBGYVdVYTc1TldEVWRBbmVLdjZSSWhkeWpoTlNpT09JUXk2SlY4TzN6NWxodXhmZVRicnJmQmZtWlhITlJRNnEwMTliWTdEeEwxSnVPaE0lMkZGV05UdDBLNTZtTkZsUExFZzBXYiUyQjJRWXkxViUyQld3S2tVMnZDS3IxRjYyVVZKRFFNeDFsS29oWU5UWW1XcjE1WmklMkZWbDlONHNGOWlDOXglMkZPQ3B5dXRRQXV3SUJKamQlMkJPYW9GbURTZTRIcm90Ym5ENGhHOXNFbkNyNVJ3R2VJTXhUNmhVOGNLUE9sS1UwS3YxUEVyMmxVcERQOHhONDNYNnl0UGc2c2VEeEZIbDNSJTJCZTJNUiUyRmtweTZZS3EyaElXOUdRbllFQVRUMlZydUloUEdxOUJjU0xIeSUyQnV1WlU2eiUyQjJWbXVUWlNwQmtkMFJnVTZQUjJZSkg0b0JubW5BMjlaT0F4eU9hcFVzd1Q2ZDhKWUdIYUxPSUFDdmhCY21JMXgxZUpYY3dTYzRzJTJCNWllMVVQbHVnT0xlTW1qSXNjU2o0Q2wlMkJXbVdaQ3dJQUVrVHR2SFVBSGtUaW1Nd1NWUGM0JTJCalpuNmxvMTFGRnUwcERmMUF5MVJJYU12c0F1aklRbG1nZyUyQktyWVYyblNnNUszUnlodmM1dXhWNnFXbE1UT1FCUnpMSjVLUFk0Q2NRUWd5bExFZWdYUmtBMHpLaiUyQnJKVDlyZHlCa3o0MlFBZEdWbTJWVXJUTzdwZzM0ZlpXdW9uT2Z2czBYbEZVTCUyRiUyRlZPaVRONCUyRjFXRlNVQ29XajFueTZVa1dhVlpzZ0tqNU05VmNwOVNPWjM3VTJvTnQzN0pBV0RvSHNlcVNteDU5RU52JTJCbmJqblFkRUFYTTR3T2dOZTZUdWdLbGFOVElESnVsNWtqVE5jNTZrck5BNUZIUXN5VXBlJTJGYUpUdVg1eHVpWiUyQnZucHhhWWw4cFdqNlowWDJnSVYlMkJQU0hSekFoaVYlMkJCQnhSJTJCSGp6JTJGdU9QJTJGQk1vcVB5clVsNncyQ1hTZmMxS1RnbFZMJTJCVENBSnNVdFQlMkZyaFM2ekVKejFSUFRqMmhhRlFiTTFoM3ZoUDJXOEZYbk1HcWtrQkhoYUFrSU5vemdtS2VRWVJlMUZUJTJCVVZFb2ljSjJScUc4STFaVCUyQmJzTXklMkI4TWhPeHB1bElpdW9yTG14SlA5cDJwTGFWNSUyRnFlYTIyS0RvdkNXWkIlMkZrejZiZGJrR3V4VnR2UWx2c1dZVFlnM0l3ajklMkZCTEMlMkY2YmN1U3U5dHpNSVg1JTJGSkpJaXR6QmRFdWt0JTJCdGd5dFVWbER1WTMwaDJHeWg5ZFlUNktqZHNSJTJCUm9pbW1HUEJGTW9UZ3FGSWQzT09XcFlFbk1RNkU0S2hRSDl6cHQwZXRNcTFKeE9Db09HenU3M2RsRWNSeml3U2NLdzNGaHFMZmdOJTJCMW5EMFZ2UldSUFJlSDZJOEpzNkRkMEZZV3paWThvU3ZKSkhwNzh3TU9SV3VOOENDb2thVWFkMlltN0d4ak5WJTJGYlZGJTJGanAlMkJ1dnk2JTJGV3IlMkZlRk84dUJSb2ZWeDZGMUVVZG9JWkpVMkFTMjU5Z01lZUtOYkxPd0c2S1ZPdCUyQkt0VmZXNWV5Uk1iQUYyNG12eUZNMXdUYU93JTJGV0lVelhGZDQlMkZIeFclMkJ6TmNXM1R5V0pURVE1UTdEJTJGandxblZ4TUp1RTJZM2NUQ3pOTjBzbjh2SUQ1RmRKZnZXcHNXRkE1VVhhUklPbEZXRGNLQjN4TWlrTkRYb2RNWkJFNSUyQkNQQVJObG1sT3RLMCUyRnNJQ0U0Y0NKcGVuQU5ySlhQbXRpVjlRY3FFMDBhT2d1ZnluOGlsa08wSFlNWG9Qbjc0MERQTDVvOHlEZ1diWGd1UzJCcDllQloybjlnaWQ3MHQ4b3dlT2p2SWRuOFhSVG13QUlYSk8lMkZ2Sk03NEV5Z1lXcTZEZ0R0c2ZrcUwzeFlvR2VEMTJERjNTUG56ajBHOEdvdG5tNjFBeDZzQTAlMkZ2MmVBMW1IUjczT0R4Q1FBSERSN3Q1MnJBQTBieTZRWTh6WGtmZVFiVUMlMkJUeHVaczg2TzlPSEtjUmZCUUg5TGExRyUyRlBacXklMkJ2OUtoenZwRExodVhzaUsyU0xadHdNMDZ5JTJCV0pFUTVBTlNrMXZnWGY2d3RENnhZRTZOcFNTaFBCVDR3azI1R25BMElwZVdrYmFLdXUwcGpnQkNDZWFZUnUyVFYwWFI3TjU4M0piMkRkZEolMkIlMkZ4TnJkV0E3cTh0SCUyQmR1SzVwNkJxMGJNM2lqWkNuejRFSkh3JTJGY3VlJTJCMTNBbFhHRHlvWWxtMFc5ZHBoWnZwaTltSXVIMzdYbHUzdSUyQjk3SlVsTlk4V1pqeUlNZzNNcElWTXJqVHMwcGJmZUk3ZkxzWiUyRlcwTldMdiUyQlAwSUJzbFR6WSUyRk5YU2J1dUpEanFHTU1lcmQ1RG5tSTBHUFB4am44S0pBcHhuM2xqNHolMkZhVFE0JTJGM3dZVnM5dXc0OVUyc0p2Zkt3Y3QlMkJ3TlZoUmZTU3dEV25uWEZlZlVEJTJGWGhKWU9UTnR4UzlGQTU1MmV0VnQ2WUxwWlhxRzU2NlFGY1hMYldPbml6dXBBZ1Q5OTRsaXVhWmtRMkxvTHpKYndjcXdKMERWRE4yeUhXcTdpNklsSjdhZTc5YWRaT0xzMThrNCUyQlJNanpZQTZjUEZCTDNudERocTViUjU0ektIbFFrWGNBUFNyUVlCMTVUbGxuTlE1VzA0cXRRYzhkRkwzVGo1YzBEZlVkYkxoRUx6UFJPQUcxJTJGTlRPMXVDaW14RWg4ZmJ1RVZvdHZoQXZtVDl6OVI4JTNEJTNDJTJGZGlhZ3JhbSUzRSUzQ2RpYWdyYW0lMjBpZCUzRCUyMm1lTUZpcE1YZnpRb2JvYmlRREV3JTIyJTIwbmFtZSUzRCUyMkFydGljbGUlMjIlM0U3WjFiZDV1NkVvQiUyRlRkYnFmb2dYa3JnJTJCeG02VDNkWDJORHVYczNmUFN4YzJpczB1Tmk2UTY2OCUyRndnZ2IwTmpHRjRSankyM1RJR09CcFklMkZSekdnME9pTzk4Y3RWNUU1SDMwS1BCbWRZODE3T3lNY3pqQkZHaFAyWGxyek9TM0JXTW94OGo1Y3RDbTc5TjhvTE5WNzY2SHMwTHAyWWhHR1ElMkJOTnk0U0NjVE9nZ0taVzVVUlElMkJsMDk3Q0lQeVZhZnVrQW9GdHdNM0VFdiUyRjlyMWt4RXVSNlN6ZSUyQkpQNnd4RyUyRnRJMnQ3STJ4bTUlMkZNdjBrOGNyM3d1VkJFUHAyUlhoU0dTZmJiJTJCS1ZIZzdUMThuWjVmZXRPN2N1MzclMkZHVVB2N3ZVdjlsNDVGem5sVjJ1Y2xINWw4aG9wTms2NnIlMkYlMkZOTCUyRjl0VzJIZU42Y0hQNWslMkZ6bjZzdkwxWG5lUEU5dThNZ2I3Q0pLJTJGRUZBYjJuMDVBOG8lMkYlMkJySmE5NmU4Yk0lMkZEdHdKTyUyQm8lMkJoSlBrbHIlMkJEMkxFYiUyQk1NSiUyQjMzQWJwTkdyT0NKcG5XNXdRViUyRkl3bW5ySFF3OGdQdnElMkZzYVBxWmZKazdjd2ElMkY4cURzS0klMkYlMkJOVmVzR3ZFNzJkcFJ3cXJCWk91TTIlMkZTUXIxbGhwUkdOMnpuWGVRcWhTOU0xOUtaMzQxWTBUWGpBSWc4Q2R4bjUlMkYlMkZqWEdialQwSjkwd1NjSnglMkZxbndjZUpSanglMkZGdjJneUdPVUhTUlQlMkJvcjB3Q0tOWkF4Rk5NMDNEVHB2SEQ0SkNPVVk5N2NMZ3pWWW9OM3JwSDFaZXM1ZnpIbU50UzE4S2pQTmV2NkxobUNiUkt6dUZ2MnR4ZnZrVFRHeCUyQiUyRkZ4NEhFeGVOaW84Q1NoJTJGMGwzJTJCQ0E3blZTOHdZNzl3MGphZ3pyWUY2aDVqR2wzNkUyOFpkb0hiWjVLcHpKelklMkZKTXdBN1BROHJ3b1p6T2dEOGxTTWtOVyUyRkJETW52R1I3M2wwa2w1ZzZnNzh5ZkRyN0hNZnNiMG91dUZOcGM4QVNkekU3Yzl2YXhyNmsyVFdiRWFYJTJGV1d0MjlNNnhwbkJ2a3FQSGFQRk1mdWJuaDR4SkNic3k3aiUyQnJQTXBBJTJGU1pwcEIyJTJGWEZCZENFekw1bkxyRVVSTyUyRkRIUTlZamc4Qm5HQ1hzdHl2cVJqOFJ0bCUyRll2ODUwTWx6TmNuMHlWd3VUOVdoeUZ0a1RYUXZGJTJGTHhkU0p5TUx6OSUyRiUyQmZ2bXZ2ZHg5TU9aRHBQdTdZJTJGJTJCdVdFSkpDYnVVRUY0c0JBS2JOWG1jaW1FQnBZSElYeCUyRldJRFF6UWJoR3pvTll6OEolMkJVVVVpd2ZGWWdNQzBiTGJacEVJTElybyUyQlRPQ010TG1IYkVWWm1OR1ZVQVhDTjJsMkgwOFJ3Sm5STVNNQUpqTm5vcnI5Sm54dzdUJTJCS0R1M2d0ODZ3bGJvZExLQlFKcGVqd2k3SVNDSXVjeENVS2JCdXpjTmRMTnNHMkNUQ0xSaEE2Q042RTBKSU4wUkI4UEhaSlEyeVFVcnZtZDJnaG9MMyUyQkZZT0pjanV4Z0hJSXVOallXNkpxQTRZSTFBMDg1VENKNENnb0JwSUJsQjBUNGRSTlJOcUhlUktBWlBna0hBSkpETUlPQ3RtM3FLd1JOaUVMSkNHb01RZE5UaEpTNWo5NGtwJTJGUXhGQmVMaGdiaU5yeTVqY3ptSVJKeThrQXlpYUo4TXd2RllLWVdudzZEUnRtRkNSR0Vvc3FlY2RQS0dSN3VtbmJBSEp4MG9sSWhvcVo3aDdsa1BuMTFvN2tOQ28lMkZ2Q1dCbHolMkY5Mkh0UENQeksyeXpLWEhHa0JzNngwRlZwa1pIWlpOa0ZSclVGN0pGeUtPeElFTXZrRnhJQk9adVo4b2FyYWxwZ21YR0pJNDlNQ1NSZ3dZV2xEamViMU1GZnFRdVduWkpiVGJKR0tkeElIaGJ5dGdaSWtackV2MFlNSEFpSlBiYzJBaU9tWWR3S0hvdnFiUUZNZ0p3cFFiaFlvc1ZFeUpqaVlZRldqdW1hT1NlWnp5TVlqJTJGZno4cnZLRyUyRkgxbWJLVlRrb2VLMDdRNGklMkJqcFVjcjJGNnl1S0RVbHNFTnkyWW1zRGltMEtSdGRQWXc4ZTNBRk5EN3VzQ2N3Z2JhSSUyQkcyJTJGTVlUSnJGRjZTRjF5SVlWalpHZXpHJTJCb3RQVmRnYUplTThSdUZkUndkZ3ZSd2RZQmlPMExVSTZ0cThiSmV1ZmZwcjlQTTVtdmJmeklmdlAlMkY3OSUyRmVXZlNmRDNPYVI4VmhxZlRyeUxkTmtBT3dxbnM2ZUxsVno2UWQ0ajdJakhqQ0QyMWJ1RnZtcXJRJTJCTHdNUnJRR2tBbmJqU2tkUXdLNnBYV1JJZ2REQVVUUlRSd0UlMkYlMkJwJTJCRUc0QjNsMTE2bVFLc0JpVkdEQlpzY211bTFpWWh1a1dsJTJGMm5Ya1ZDeWlFV2sxVXJsVTM5QTZ5ZElLUWcwMVRNJTJGTDUwYnplckltRWVtZXd6YiUyRiUyRjl2elZDSTQ3UXY3bTYzYlc4WmVEMmdwJTJGbFdVT2hyNFglMkZraUZQMHNXZjU5NzN1VlZkUFg3OHVFdkM0OWVYcE52JTJGM3c2RjkxOGZJVHFMWXRMVVRGNXpZNjZhelNvNWMlMkZkOHVVNmRoazVvaU54MUxXQVVYZnVVdHhsMkFXeEUwMzR4RThBdjUlMkJhN3pyMCUyQmE3bFVtV2pOVG9RZnZ2UTU4SGJFd2RkajhhRHlKJTJGT3BvOFVneWZBSUxSRVJ5cURvcnVoSDNwcVVjNUp3QWV0eVpFS255RU92JTJCNHd6bVpVdnZxcyUyQmJsVDRzNGRMdlZKS0RLUGtFeHdjWkJVTkZVZ3l2YUJLQTN3QUVUSGdUenNJUTRGdkQwNHBBQ1haMjl5VyUyRlh6d3pVejc5TFo0bFNjS1JlOVBFcmFIdEN3Nk1mSU9JbHB3Z2F4V0FFaEZ3aXo3V0VFaVVBc0N4VlJEcTMzNXRCeWNObWhaUUxHSEpoJTJGSnNkeSUyRjdpSjgwaDhqYWxTbTQ5Q2JVYWJ1N1NheXJJQTM1JTJGb1VYV1h4RklxQW8lMkJSUUprNVolMkJEN0U3MnFhbUhwYVRFb005Y01mSCUyQmlWMVV0TEQwdEJtdW50MmtPUWpHJTJGalhMdG53NSUyRmtNZE1MbiUyRktoU3JYaGJxT0NHQjFaMU1KdDJEbm1HaWN6aVoybEIlMkZrbmZ0QjdFcUVtcW5WSkMwdld4RU1kME1IaVRzWnB2YmolMkZIS1ZPS0o1S0dYeGNsb05VZWNHaktJSlU4dTZhZXZIQXVCN2lHdkQ0aUNjJTJGYXBHNGFNWWhROG9EVEI4ZjJLYUpUVUlOemtJN3lrbGIyTmpjQTJsN0hBQ3ZTdmgxdHRGZnElMkJLTnk0R2ZtJTJGVW5RM0VlZHZZNlRpT1JReE54N09mNVVIT05EdTRFcE5kTjlZYmFhYlYwU3h0JTJGc0tscWcya2RWZ1pjWFJpbXNpeGNQa3FEVWQlMkJBMmxuanAzSWxVdGMxaUs1Uk10dmdFaFNJWkpVa05TM1I5SklpVFNkeGF0VXMlMkI2MFNTU1ljMFFSdWJuaDJRQ1NKakpLcEdBelJkUkJUSHd5QVljc2Mwc2VyY3B5TEVKUWh4Q3NHeWJTTllhJTJCc3ljQzB6VzczJTJGdiUyRnB2c0JZWTNyJTJGR21GaSUyQnklMkZUQnY3bFpWNVRCVTZJeGV6ZllEd0pVTVc5MjR2YkclMkJFN3I2JTJGQmNGTDc3ZDc5NFAlMkI5MmYyc1pXTGlvdjl3NThBWlhDM2FYRHpXNlRWSFo5Mk1zT055ck1CWmVKQiUyQm9iV3gzSXpuTmlWeTBFcHRpSGRWcSUyQnVvdDNKRG1lSGhZY0tGdlBnUXlGNm85SkhUSm5sNzh3c1h5dnc2bG5sbXo0WHU2VmFGTkNqWTljUEZIMm5RQiUyRmtBcEJLbnhnZ01ZMUNSZyUyRk5zb3dvQ2slMkJCUWloR1FpcUZZb2pFMUkzajV6QlNnJTJGQkpBQWdHU0VnbFVGeDk5c0RVOHZDWmRXJTJCcVVhcXN4NmZCSVJRb0laVkRjWXFRaDh5cUhQQ25SU0lVb0NHVlJEVloyTmhrNFRZOEFNbTNRUjZhU3I0TnpSV21pOW1lVTZGVXlWaVpyMzFVQ1pSM1glMkJtMkRTdjc4UFh0QkV1dEZiSWY1bHowRnBDb1pLZXRJQU9sM0phTERMQTRNbVBtZ1NzJTJCRldyJTJCV0xGVG9xS2tJVXFBUE51U0tZRVRzek5LWnRiYVBMZTJvcU1OVDNyYmJpUmd3U0VmZHlhS2olMkZiNUFQSnBTJTJCWURUcjJPTlk4R3RKQzVJOXZkb2FTZThOMnZQbnRLSjVIRkM1UmpXekl2Y1A1MVZ1RFQ1ekl0Y1VVdnVhWHpoRlh6SEE5TGtsWXBmaHJpUjI5ZHB4Vzl5aWs1dVlEaCUyRjZ0ZFk5ckJJNDhrYkE4UFlEMEl3JTJCTTZtNEF0NmltOFNMRWhpdzJuZFZWV2RMJTJCTzNXUXdvdkUxbnhuOWtPMDVsYWtuZWVHbnlTRDBjbXdVTEZKZzBYSGJlaTJZYWF6UyUyQjRVZzVYNFFwcEdWV2ZCbHRiQWN1anc3cFhCY2lGMWUxc3liUjB4bTl5bzNkbm1UZm00aW1yNnk2Y2g4NG5IajJIbHRUVVg3aTQlMkJIMGR0c3M1SWpSbTlseXJkRFFxJTJCeWhjbGNWRzJNSGxwVFVkUG9pZDRlYm9QZGdYbjdWV2o3ZTF0TGpyU0tkQ00yNEJJZ3dGQ0xjbGZnJTJGc2RhMFlla3RvazRPNTZ3akV5cWJCUXVEZ0hZbks0bkdvMXg4Q2htemxENEhTTiUyQlVMeTRYUHdnbDJnVlBSVVdKQTBJS0hRYkFxS3BzQ0FncDhSNVNnTVRTWmRST0o1cFloOW1BNlNhT0pFR2hkMzZJQ1U2dmxkWmhjZXdhcnB1Wm9tTiUyQnJNQjg4JTJCcDdqWHBHTnVaZjQ2enBxS0d6VDhDTUxiYkJyaVhQa09PUms4JTJCJTJCJTJCamg3b0RiUU1xdWNrZGlhT2NFeUolMkI1ancxdzRhNnRFWHNNT0pVOE54N04lMkJnQ1ZoSW0yVXBnY3BDJTJCcDlnYWxLNTRNS2RJRVZmeVlBaE4xcFFuUjFsVFV0RFFCNHB1M2xDWjM3dkJkYktYZHdLYWVsZHglMkZGclNjeHBZcVNjUklaTlk5Y3lHdlBJVHZuYmhLOWtjVEFHN1RaSk83cldRVnAlMkJLU3NqeFFmcHBqOE5Oa2dtVWpOMkZUdVI1aERzWEpFUkU5NWFlUkJvVEVYSTh3RDFEbzYzRmI1Q3NWZ3ZWS3RDMU5pVGExTk1PZGJodUklMkZ5dVBhZHVxMUZaMVI2cDhTeXBKS3JWJTJCZWs2Z2xhYkZJZVVYclhxQkdCdHBra1hOdEIzVE1GQTF5V0w5NUtLa1VxJTJGbGRDd25yVkJIeEhLSVhBREZxYkxUQkJDUWVXMERhRlNpVUV5RGRHeHpad0ROcWtGZ29VNVdYeHY4aVc0c0h1U3RETkFqTlVDaCUyQkJSUXpXc3NqNDFvZno3R05DcTV0cFVGZWd3V2FDWmREdGdDRlQycUxqRFBvbUE4QVJobGJnUUozMSUyQk54UExLSFNJUGlMcTdNamJsRGpFMkMxcyUyRld0TWdWMUVQS2EyN2clMkJ5TzR4allKTWl3YkNjZlIlMkZJUVlJUTZlbVhMN05ybUtUS2REckdYN1RUZ3BPbmpqZmxMbDJzdDVETHloSkRjY1pwN2ljZTFpV251aWl1TlZQWDMyZ1JXS3ByNzZHUkJCcmlCdDV6bXZxJTJCYUZTYzAwVTJxUzElMkJzbWhGM2pVMTBHelhpY285TWVxd0UlMkZJQVdYR0ZoclIlMkZwc09aYnZMWVRKWGJGMVlwMHJlT1F4YXN5UmpZdFdKU3pmNmxDdFFKVUtRQldWJTJGeGhLMVYwYk1OQ09rNSUyRkdsdEdnT3JWbUMxYjYyQ3k0TnFTaktCeTkyJTJCR29NUTRRVUVHR2xiSDBYVExSUHduMlE1QjdPQ081ZWlJRGNDNnBSbDIyVlpBbHR5UVpPUDBObFNzcmNLdldKa3ZoMERONnVpRUdZREVzUjNOMHZKa1pIbjBPdGx5R01ZTzZkallRT25tZEZqRHFHeFNHc1NXU3FBcFRqbEJpVlVGS3RYRTAzRnMlMkI0VXJRejJCSW5BMzlienlxd0hiZmdrTHRJM2NEbGwzUFZSOU1QYTclMkZ6YjhjSWppZWJZeTdTN01IZzdocVZDVEVlOXlNc0k4OEpteFBMaWh3S0ZINDBIa1QxUDN2cUx4cEdoc2ZXck1GS2ZHJTJCcUgzcWpBOEtRenJUc2cxSnhScjVEQlRNN1R5Z0FDMzVKSTVSV3N0UyUyRlhlZjJTV0JvMCUyQnFJUUM4bUJBYlk5UzF1bk5iJTJCdzJPN3FzUnlVNDkzUjlTMSUyQkticTJwcUdIdmlYVjZreGk3SmN4c0V6Sk42JTJCRGlhenZrQ0xJNjJFYUdRWWhqYTRaTnlvdHZpTEV2QXRsaEZJWko4ZlRJblk2JTJCaFY2cVRYJTJGNlB3JTNEJTNEJTNDJTJGZGlhZ3JhbSUzRSUzQ2RpYWdyYW0lMjBpZCUzRCUyMi1NSnNWYlNLUENkUlVadXlqWFl5JTIyJTIwbmFtZSUzRCUyMkp3dCUyMiUzRTdWMXRkNXU0RXY0MVBpZjdJVDZJZDMlMkJNbmFicE5yMDNXN2UzdTUlMkYyeUNEYlNqSHlGVGhPJTJCdXRYQXNrMlNMR3hDMzdaMHFTSkdVREFQSTltUmpNUzZWaUQyY3Q3Q3VmVFR5UkVVY2Mwd3BlT2Rkc3hUV0FDaSUyRjNpa3RlVnhNd2xFNHBESVZzTGh2Z0hFa0pEU0JjNFJFbmh3SlNRS01Yem9qQWdjWXlDdENDRGxKSmw4YkF4aVlwWG5jTUpVZ1REQUVhcTlCc08wNm1RQXJlMzNuR1A4R1FxTHUyYlhyNWpCdVhCNGttU0tRekpja05rdmV0WUEwcEltbiUyQmF2UXhReExVbjliSU01dmNmdiUyRjAlMkJzdnJUWVRqOGMwTCUyQiUyQnp5OXpodTcyJTJCZVUxU05RRktjSE40MndkZnVmOUklMkY0NFklMkY3TCUyQjclMkZ2cjVPSnFQcmExYzgyek9NRmtKaE9CNVRtS1IwRWFRTGlzU2pwNjlTbjB3TGMlMkY1eE1ZdnVLSnl4aiUyRjNsRktkb09JY0JseThaajVoc21zNGl0Z1hZUjBvV2NZajRYUmhzSyUyRm1PMG1BcU4xSklVOEVaMDgwRWxIeEhBeElSbWwzT0d2bU83ZkJEeHppS051UmpQMEJCd0M4dVFQWDVRVk1KcE1XM0txcE5xUGNaMFJTOWJKQkdxUEU5SWpPVTBsZDJpT2dEanVUMnNrQW9QeGRPTjhoa0FVRW1LRmc4V1RXMlJvcDlFR0R0QVp6VFU0QUx5UXppdUZuQXhpUk9OMUJ3QnZ5ckVwQ0c0YnFPcndKcGdvRng0NXdHU0xOWEZjaVZFYWdmU0Y4QkVzN25FUTVnaWtuRGFPNUd6UTE4TkJxcnFJVVElMkJlTmpkNyUyRmRLUFZxUU1uN21NUmYlMkYzN3FQVDdQaHlsaEpqTDQ5T0ZhTlpQM014Z003MjlNeCUyRjM5MjVjaG9zODQwQmpMSlo1Rk1FYWk1d3pGSGc0TGpQQWtacDhEcGgzRXROcm5DbUNvUnpkaVIwbzRrTUVVUiUyQkVEZkNVTCUyRm93TXNPQzczT3BQQ2NVJTJGV0xOUVFxM2d1VDVpeU04VXNGT1VzR01lSlRDZ0pQb0VYd29IUGpCdklBUUJpU0k0VCUyRkJvOVJnelNDYzQ3cE0wSlRONTFqYkM3V3ZlYXllUjJPdktEaTF0dXFPYWdsV24zJTJCUVlrUEZQN1J3RENzY1NGRkNVS3F5SzRJaEZhVVZLcWRxTlNjNjdEY1VLa2FSZWhNYnBtOFFqVER5T3NuaG5pc01ReGZ3Q3pNamdlUEtRblhkciUyQm12Ulo2RWdPOE0lMkZoU2tjclc1clRuQ2Nac3B5JTJCdXliNlhSZ2RKMk93eDVsd0xiQmVwdDk4OE1wY3pFeGV4am16WGliaVBGdmlUZ0glMkIzaTJFY1lCVjBwVzhkdGF4RGJ3Yk1Kd0NDTE0yTU9VZVBjZVFmbzNNUDBYOXI4N2p5ZUhlVHFWa0ZzTlJuVmY1RmJqbnp5dWR2cXBmaWhjME13SkRSRUx6c09rNWVHdndFUEhQREVQVFlXSFpQVEVSb2FmV0ZqRUhHVkx3bCUyQkFoSjUlMkZZaEphQ2dsVjR1R01Qem5QVmpBY1JMSVo0MVNFMWdUNndrbDNldzBVbGxrcXlTd055YkklMkI4VWdTbkEwaHJGdWFIMXNpM3k1JTJCTlFVdU1PeHE2UG9OZ2V0cXdIV2pURUVGaU4zJTJGTDNodVI4UzRIZXVHN1RYbUwlMkJ4bnBoMGpsMTluSm9MdnN6ZjJNVjJrMXdKMnZrJTJCRSUyQmFzMjJhZUolMkJKMWRHVzhJNEl6Ym5FamQlMkJzRGJHUE9CbmhRWFR5bTB5RlNEeTFjWlVVVWlCZmtvQnJOYiUyRnBIZHAyeGpWRDZEeWVabDJaUnl4Y25jbjN4RzhQYmpIcVRvdlBlc05QMVcyNnlEeEd0WiUyRjJtWjNsRXklMkI1b2dlc1YlMkYlMkZKWTNNVXdwNjBVYkQxVThUZmVzSlFPZ2R4V2xycjdoT2JoZGtJNHFWeFViU3VUYmQzQ0dJOTQ5N2xIMGpIaXJuZXBqJTJCSDBUTFUwTnFYekw3WnBPWVZSbCUyQlVCTnNQUTBYZDFyYXVEdXRYMWQyOWR2VWZMdjYlMkIyc3F6JTJGQzE0akFrUGQ0OXBSWGVTOFhYWjRKeE82MjI5Zlg3VzNQNm5xbGJ1JTJGMVZBOXZtMTNuaUIxZnpZOHJTS0k0dk9FVkpyWTFpZ2hQaiUyRlZEbUV3emhYUDFzJTJGMTNHWGlaeHRuV0puNGJNTzJuMllRc2FJQjJCMVFwNndab1clMkJBbFRCc0tDd1d3N1dsVFdlJTJCaEtHSkQlMkIlMkJkaWpVeUhnV2p1a1VlT0c1aGJwZXhaS1E3UG4xR2N0Rm1US3JYajlMYTNrJTJCdEFhU2NqeE9vSmZ5TGpwcVoxJTJGMjBrY1U5SEVxZm5kRzNYTWgzZjg1MmVMY2RxY2hSd0tHZHN2OWMxako3ajI2NXJPNWJyRmR1OXRvMm1PSFQ5Uk82SGYlMkYwWmYlMkZ6clhkOU54ekNCazNlYXlrQWJZUFMxbnZaeVlndkdGejVTJTJCQkJlaWNnaEl0bFFJVmRNUEVybU81NmlpWnZDeWJ1WE9hWm9kVk1qUWlLVUJTOXQwTEp2MEFLY291T3hQRFh0Q1R4ZFRxS0dwSVRXanFqVm4yMnVpTXl6SE9UYSUyQllCak9oOVBkVDdiYk9OSklwUlNmYzgyZXdlR0tQNk9odXJ6TDlyNUFkc3F6d3BEMm5yenVkYWI3WkxCOFV4TmlodG9ESTVid3dCSlN5eTF6cUxRNlJkTWNXJTJGdGd6OVZ6TldCVzRNejBkNndybnpSendLclNYd2xaeFVNZU9pQkVtYXBrWXdvWGxNazlGYW1BZzlCbFE3MWsxVzFJdkMyQ3J6ZDBaZmVHaXlxTmNVSVMxUHowREdpam9xVzlvNXRoUko5bUNEWCUyRnZyNW9YVWpGJTJCTkclMkZKSWJjVFV6R0UzSDAyWGFhcG00cEolMkZDMkhxU3FuYkRyZ3o0RmslMkJpeDdjcFg2S3JvSEJmTXBMbWclMkJmYTh6ejdGWVhMUXNaZEZ0bGFaMUlyS1hUT1JFJTJCS3h0eUpyb2F1c0tMUDRvbmtpa2NWU1V1SUpnbmhWdllDalJGQ25UNG9RczRNOFl3TmtocFhyWTFvbmhKJTJCWmNmUkdDWDJLOEdkTnFXbHFhZHNDJTJGeFBrZEp5alZJbXlyWWxuSHNudGNET3BocE9hJTJCMVplcnNNY3Rpbkk0ZFhyc2lXQyUyQnVWcWVHV1JoaSUyQmNWeGlxSWx3WG92WnJDaTFvOVVMR2EwQ1E1a1I1dXd4WUxXYUd0SUFOVmhKRmlPRldPM1U4ck9hV3I3ZFhEUXdvbTRzTUFMcTZDbm1hemxiQXY0S0JOU3RzRGsyQWRXa0RvYnRRc05mZzMlMkI2eFRYSDVwJTJCNU8lMkZwdlU4YUhBcXhkWUhQY3BERjRxd0pKeHRraWpMejZpT1lrbU9hclMwVXlhRWVvM3lhRmZwWWE0QXljejBWTXpkNnE4SE9lJTJCZVE1ZHRkeGdXMVlqdUY3Y2w2YnJCejBEcHdHNWZxOXJtdjNBRE1aaG1lQTBxUmJDNVNhYlRoSllLcEpBbVkxYmhicGxPRXNYcDNDJTJCSkZxMWd1MzJZSWQyWUtkcjN6WnIwJTJGdGtTMG9wYkJjZGFDbVhUc0c3S1lzbGRsV3RpdjdJck9PZ2JnVzM2WmlGUE90R21aSWN0dVJ6WkNQWVhUMVd4dUkxQTIlMkJwb1N0QmIlMkI1JTJCVkJhRjlLNmk5cmRoZFRnbmRvdEpoU0dtTjN2TGFZb0VFWXFabXljTnNrOFRhMWNiM1lhWTU3cVZWS21VJTJGVmRiMjM2NWZ6VEwzWmpicTg1eTljbVh4cUVWNVBkUFdwVVklMkJzekx3T3pjMlB3SVJuRmNjQjZTcHl0SW12bjNqUkRncW8lMkJwckUlMkJicW9KZm1XQSUyRkVqSk13N2JJZklGRFpHZDhoU2dpandEdmNaV21xaWw5S2RsV255N1NCdldYRnhZczdJZmx4UFdtTG9acUcxWVV4TzhwdzVyVEYzUlFJUTFjTzNXVUp1cnFSJTJGN2swY3pNakdzQXo5WnpMbFNraGI0JTJCb0hYekNFJTJGTXZBVjZqeGZ0TG1UTm9ZOTg3emQzbVRV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
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/RealWorldApplication.java
package io.github.raeperd.realworld;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RealWorldApplication {

	public static void main(String[] args) {
		SpringApplication.run(RealWorldApplication.class, args);
	}

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/WebMvcConfiguration.java
package io.github.raeperd.realworld.application;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer;

@Configuration
class WebMvcConfiguration {

    @Bean
    PageableHandlerMethodArgumentResolverCustomizer pageableHandlerMethodArgumentResolverCustomizer() {
        return pageableResolver -> {
            pageableResolver.setSizeParameterName("limit");
            pageableResolver.setPageParameterName("offset");
        };
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticleModel.java
package io.github.raeperd.realworld.application.article;

import io.github.raeperd.realworld.application.user.ProfileModel.ProfileModelNested;
import io.github.raeperd.realworld.domain.article.Article;
import io.github.raeperd.realworld.domain.article.tag.Tag;
import lombok.Value;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Set;

import static java.util.stream.Collectors.toSet;

@Value
class ArticleModel {

    ArticleModelNested article;

    static ArticleModel fromArticle(Article article) {
        return new ArticleModel(ArticleModelNested.fromArticle(article));
    }

    @Value
    static class ArticleModelNested {
        String slug;
        String title;
        String description;
        String body;
        Set<String> tagList;
        ZonedDateTime createdAt;
        ZonedDateTime updatedAt;
        boolean favorited;
        int favoritesCount;
        ProfileModelNested author;

        static ArticleModelNested fromArticle(Article article) {
            final var contents = article.getContents();
            final var titleFromArticle = contents.getTitle();
            return new ArticleModelNested(
                    titleFromArticle.getSlug(), titleFromArticle.getTitle(),
                    contents.getDescription(), contents.getBody(),
                    contents.getTags().stream().map(Tag::toString).collect(toSet()),
                    article.getCreatedAt().atZone(ZoneId.of("Asia/Seoul")),
                    article.getUpdatedAt().atZone(ZoneId.of("Asia/Seoul")),
                    article.isFavorited(), article.getFavoritedCount(),
                    ProfileModelNested.fromProfile(article.getAuthor().getProfile())
            );
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticlePostRequestDTO.java
package io.github.raeperd.realworld.application.article;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.github.raeperd.realworld.domain.article.ArticleContents;
import io.github.raeperd.realworld.domain.article.ArticleTitle;
import io.github.raeperd.realworld.domain.article.tag.Tag;
import lombok.Value;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.util.Set;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT;
import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;

@JsonTypeName("article")
@JsonTypeInfo(include = WRAPPER_OBJECT, use = NAME)
@Value
class ArticlePostRequestDTO {

    @NotBlank
    String title;
    @NotBlank
    String description;
    @NotBlank
    String body;
    @NotNull
    Set<Tag> tagList;

    ArticleContents toArticleContents() {
        return new ArticleContents(description, ArticleTitle.of(title), body, tagList);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticlePutRequestDTO.java
package io.github.raeperd.realworld.application.article;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.github.raeperd.realworld.domain.article.ArticleTitle;
import io.github.raeperd.realworld.domain.article.ArticleUpdateRequest;
import lombok.Value;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT;
import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;
import static io.github.raeperd.realworld.domain.article.ArticleUpdateRequest.builder;
import static java.util.Optional.ofNullable;

@JsonTypeName("article")
@JsonTypeInfo(include = WRAPPER_OBJECT, use = NAME)
@Value
class ArticlePutRequestDTO {

    String title;
    String description;
    String body;

    ArticleUpdateRequest toUpdateRequest() {
        return builder().titleToUpdate(ofNullable(title).map(ArticleTitle::of).orElse(null))
                .descriptionToUpdate(description)
                .bodyToUpdate(body)
                .build();
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/ArticleRestController.java
package io.github.raeperd.realworld.application.article;

import io.github.raeperd.realworld.domain.article.ArticleService;
import io.github.raeperd.realworld.domain.user.UserName;
import io.github.raeperd.realworld.infrastructure.jwt.UserJWTPayload;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import static org.springframework.http.HttpStatus.NO_CONTENT;
import static org.springframework.http.ResponseEntity.of;

@RestController
class ArticleRestController {

    private final ArticleService articleService;

    ArticleRestController(ArticleService articleService) {
        this.articleService = articleService;
    }

    @PostMapping("/articles")
    public ArticleModel postArticle(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                    @Valid @RequestBody ArticlePostRequestDTO dto) {
        var articleCreated = articleService.createNewArticle(jwtPayload.getUserId(), dto.toArticleContents());
        return ArticleModel.fromArticle(articleCreated);
    }

    @GetMapping("/articles")
    public MultipleArticleModel getArticles(Pageable pageable) {
        final var articles = articleService.getArticles(pageable);
        return MultipleArticleModel.fromArticles(articles);
    }

    @GetMapping(value = "/articles", params = {"author"})
    public MultipleArticleModel getArticlesByAuthor(@RequestParam String author, Pageable pageable) {
        final var articles = articleService.getArticlesByAuthorName(author, pageable);
        return MultipleArticleModel.fromArticles(articles);
    }

    @GetMapping(value = "/articles", params = {"tag"})
    public MultipleArticleModel getArticlesByTag(@RequestParam String tag, Pageable pageable) {
        final var articles = articleService.getArticlesByTag(tag, pageable);
        return MultipleArticleModel.fromArticles(articles);
    }

    @GetMapping(value = "/articles", params = {"favorited"})
    public MultipleArticleModel getArticleByFavoritedUsername(@RequestParam UserName favorited, Pageable pageable) {
        final var articles = articleService.getArticleFavoritedByUsername(favorited, pageable);
        return MultipleArticleModel.fromArticles(articles);
    }

    @GetMapping("/articles/feed")
    public MultipleArticleModel getFeed(@AuthenticationPrincipal UserJWTPayload jwtPayload, Pageable pageable) {
        final var articles = articleService.getFeedByUserId(jwtPayload.getUserId(), pageable);
        return MultipleArticleModel.fromArticles(articles);
    }

    @GetMapping("/articles/{slug}")
    public ResponseEntity<ArticleModel> getArticleBySlug(@PathVariable String slug) {
        return of(articleService.getArticleBySlug(slug)
                .map(ArticleModel::fromArticle));
    }

    @PutMapping("/articles/{slug}")
    public ArticleModel putArticleBySlug(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                         @PathVariable String slug,
                                         @RequestBody ArticlePutRequestDTO dto) {
        final var articleUpdated = articleService.updateArticle(jwtPayload.getUserId(), slug, dto.toUpdateRequest());
        return ArticleModel.fromArticle(articleUpdated);
    }

    @PostMapping("/articles/{slug}/favorite")
    public ArticleModel favoriteArticleBySlug(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                              @PathVariable String slug) {
        var articleFavorited = articleService.favoriteArticle(jwtPayload.getUserId(), slug);
        return ArticleModel.fromArticle(articleFavorited);
    }

    @DeleteMapping("/articles/{slug}/favorite")
    public ArticleModel unfavoriteArticleBySlug(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                                @PathVariable String slug) {
        var articleUnfavored = articleService.unfavoriteArticle(jwtPayload.getUserId(), slug);
        return ArticleModel.fromArticle(articleUnfavored);
    }

    @ResponseStatus(NO_CONTENT)
    @DeleteMapping("/articles/{slug}")
    public void deleteArticleBySlug(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                    @PathVariable String slug) {
        articleService.deleteArticleBySlug(jwtPayload.getUserId(), slug);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/MultipleArticleModel.java
package io.github.raeperd.realworld.application.article;

import io.github.raeperd.realworld.application.article.ArticleModel.ArticleModelNested;
import io.github.raeperd.realworld.domain.article.Article;
import lombok.Value;
import org.springframework.data.domain.Page;

import java.util.List;

import static java.util.stream.Collectors.toList;

@Value
class MultipleArticleModel {

    List<ArticleModelNested> articles;
    int articlesCount;

    static MultipleArticleModel fromArticles(Page<Article> articles) {
        final var articlesCollected = articles.map(ArticleModelNested::fromArticle)
                .stream().collect(toList());
        return new MultipleArticleModel(articlesCollected, articlesCollected.size());
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/CommentModel.java
package io.github.raeperd.realworld.application.article.comment;

import io.github.raeperd.realworld.application.user.ProfileModel.ProfileModelNested;
import io.github.raeperd.realworld.domain.article.comment.Comment;
import lombok.Value;

import java.time.ZoneId;
import java.time.ZonedDateTime;

@Value
class CommentModel {

    CommentModelNested comment;

    static CommentModel fromComment(Comment comment) {
        return new CommentModel(CommentModelNested.fromComment(comment));
    }

    @Value
    static class CommentModelNested {
        long id;
        String body;
        ZonedDateTime createdAt;
        ZonedDateTime updatedAt;
        ProfileModelNested author;

        static CommentModelNested fromComment(Comment comment) {
            return new CommentModelNested(comment.getId(),
                    comment.getBody(),
                    comment.getCreatedAt().atZone(ZoneId.of("Asia/Seoul")),
                    comment.getUpdatedAt().atZone(ZoneId.of("Asia/Seoul")),
                    ProfileModelNested.fromProfile(comment.getAuthor().getProfile()));
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/CommentPostRequestDTO.java
package io.github.raeperd.realworld.application.article.comment;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.Getter;

import javax.validation.constraints.NotBlank;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT;
import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;

@JsonTypeName("comment")
@JsonTypeInfo(include = WRAPPER_OBJECT, use = NAME)
@Getter
class CommentPostRequestDTO {

    @NotBlank
    private final String body;

    @JsonCreator
    CommentPostRequestDTO(String body) {
        this.body = body;
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/CommentRestController.java
package io.github.raeperd.realworld.application.article.comment;

import io.github.raeperd.realworld.domain.article.comment.CommentService;
import io.github.raeperd.realworld.domain.jwt.JWTPayload;
import io.github.raeperd.realworld.infrastructure.jwt.UserJWTPayload;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import static java.util.Optional.ofNullable;

@RestController
class CommentRestController {

    private final CommentService commentService;

    CommentRestController(CommentService commentService) {
        this.commentService = commentService;
    }

    @PostMapping("/articles/{slug}/comments")
    public CommentModel postComments(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                     @PathVariable String slug, @Valid @RequestBody CommentPostRequestDTO dto) {
        final var commentAdded = commentService.createComment(jwtPayload.getUserId(), slug, dto.getBody());
        return CommentModel.fromComment(commentAdded);
    }

    @GetMapping("/articles/{slug}/comments")
    public MultipleCommentModel getComments(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                            @PathVariable String slug) {
        final var comments = ofNullable(jwtPayload)
                .map(JWTPayload::getUserId)
                .map(userId -> commentService.getComments(userId, slug))
                .orElseGet(() -> commentService.getComments(slug));
        return MultipleCommentModel.fromComments(comments);
    }

    @DeleteMapping("/articles/{slug}/comments/{id}")
    public void deleteComment(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                              @PathVariable String slug, @PathVariable long id) {
        commentService.deleteCommentById(jwtPayload.getUserId(), slug, id);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/article/comment/MultipleCommentModel.java
package io.github.raeperd.realworld.application.article.comment;

import io.github.raeperd.realworld.application.article.comment.CommentModel.CommentModelNested;
import io.github.raeperd.realworld.domain.article.comment.Comment;
import lombok.Value;

import java.util.List;
import java.util.Set;

import static java.util.stream.Collectors.toList;

@Value
class MultipleCommentModel {

    List<CommentModelNested> comments;

    static MultipleCommentModel fromComments(Set<Comment> comments) {
        final var commentsCollected = comments.stream().map(CommentModelNested::fromComment)
                .collect(toList());
        return new MultipleCommentModel(commentsCollected);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/security/JWTAuthenticationFilter.java
package io.github.raeperd.realworld.application.security;

import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import static java.util.Optional.ofNullable;
import static org.springframework.http.HttpHeaders.AUTHORIZATION;
import static org.springframework.security.core.context.SecurityContextHolder.getContext;

class JWTAuthenticationFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        ofNullable(request.getHeader(AUTHORIZATION))
                .map(authHeader -> authHeader.substring("Token ".length()))
                .map(JWT::new)
                .ifPresent(getContext()::setAuthentication);
        filterChain.doFilter(request, response);
    }

    @SuppressWarnings("java:S2160")
    static class JWT extends AbstractAuthenticationToken {

        private final String token;

        private JWT(String token) {
            super(null);
            this.token = token;
        }

        @Override
        public Object getPrincipal() {
            return token;
        }

        @Override
        public Object getCredentials() {
            return null;
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/security/JWTAuthenticationProvider.java
package io.github.raeperd.realworld.application.security;

import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import io.github.raeperd.realworld.domain.jwt.JWTPayload;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import static java.util.Collections.singleton;
import static java.util.Optional.of;

class JWTAuthenticationProvider implements AuthenticationProvider {

    private final JWTDeserializer jwtDeserializer;

    JWTAuthenticationProvider(JWTDeserializer jwtDeserializer) {
        this.jwtDeserializer = jwtDeserializer;
    }

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        return of(authentication).map(JWTAuthenticationFilter.JWT.class::cast)
                .map(JWTAuthenticationFilter.JWT::getPrincipal)
                .map(Object::toString)
                .map(token -> new JWTAuthentication(token, jwtDeserializer.jwtPayloadFromJWT(token)))
                .orElseThrow(IllegalStateException::new);
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return JWTAuthenticationFilter.JWT.class.isAssignableFrom(authentication);
    }

    @SuppressWarnings("java:S2160")
    private static class JWTAuthentication extends AbstractAuthenticationToken {

        private final JWTPayload jwtPayload;
        private final String token;

        private JWTAuthentication(String token, JWTPayload jwtPayload) {
            super(singleton(new SimpleGrantedAuthority("USER")));
            super.setAuthenticated(true);
            this.jwtPayload = jwtPayload;
            this.token = token;
        }

        @Override
        public Object getPrincipal() {
            return jwtPayload;
        }

        @Override
        public Object getCredentials() {
            return token;
        }
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/security/SecurityConfiguration.java
package io.github.raeperd.realworld.application.security;

import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.ConstructorBinding;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.List;

import static org.springframework.http.HttpMethod.GET;
import static org.springframework.http.HttpMethod.POST;

@EnableConfigurationProperties(SecurityConfigurationProperties.class)
@Configuration
public class SecurityConfiguration extends WebSecurityConfigurerAdapter implements WebMvcConfigurer {

    private final SecurityConfigurationProperties properties;

    SecurityConfiguration(SecurityConfigurationProperties properties) {
        this.properties = properties;
    }

    @Override
    public void configure(WebSecurity web) {
        web.ignoring().antMatchers(POST, "/users", "/users/login");
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
        http.cors();
        http.formLogin().disable();
        http.logout().disable();
        http.addFilterBefore(new JWTAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);
        http.authorizeRequests()
                .antMatchers(GET, "/profiles/*").permitAll()
                .antMatchers(GET, "/articles/**").permitAll()
                .antMatchers(GET, "/tags/**").permitAll()
                .anyRequest().authenticated();
    }

    @Bean
    JWTAuthenticationProvider jwtAuthenticationProvider(JWTDeserializer jwtDeserializer) {
        return new JWTAuthenticationProvider(jwtDeserializer);
    }

    @Bean
    PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedMethods("GET", "HEAD", "POST", "DELETE", "PUT")
                .allowedOrigins(properties.getAllowedOrigins().toArray(new String[0]))
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}

@ConstructorBinding
@ConfigurationProperties("security")
class SecurityConfigurationProperties {
    private final List<String> allowedOrigins;

    SecurityConfigurationProperties(List<String> allowedOrigins) {
        this.allowedOrigins = allowedOrigins;
    }

    public List<String> getAllowedOrigins() {
        return allowedOrigins;
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/tag/TagRestController.java
package io.github.raeperd.realworld.application.tag;

import io.github.raeperd.realworld.domain.article.tag.TagService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Objects;

import static java.util.stream.Collectors.toSet;

@RequestMapping("/tags")
@RestController
class TagRestController {

    private final TagService tagService;

    TagRestController(TagService tagService) {
        this.tagService = tagService;
    }

    @GetMapping
    public TagsModel getTags() {
        return new TagsModel(tagService.findAll().stream()
                .map(Objects::toString)
                .collect(toSet()));
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/tag/TagsModel.java
package io.github.raeperd.realworld.application.tag;

import lombok.Getter;

import java.util.Set;

@Getter
class TagsModel {

    private final Set<String> tags;

    TagsModel(Set<String> tags) {
        this.tags = tags;
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/ProfileModel.java
package io.github.raeperd.realworld.application.user;

import io.github.raeperd.realworld.domain.user.Profile;
import lombok.Value;

import static java.lang.String.valueOf;

@Value
public class ProfileModel {

    ProfileModelNested profile;

    public static ProfileModel fromProfile(Profile profile) {
        return new ProfileModel(ProfileModelNested.fromProfile(profile));
    }

    @Value
    public static class ProfileModelNested {
        String username;
        String bio;
        String image;
        boolean following;

        public static ProfileModelNested fromProfile(Profile profile) {
            return new ProfileModelNested(valueOf(profile.getUserName()),
                    profile.getBio(),
                    valueOf(profile.getImage()),
                    profile.isFollowing());
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/ProfileRestController.java
package io.github.raeperd.realworld.application.user;

import io.github.raeperd.realworld.domain.jwt.JWTPayload;
import io.github.raeperd.realworld.domain.user.ProfileService;
import io.github.raeperd.realworld.domain.user.UserName;
import io.github.raeperd.realworld.infrastructure.jwt.UserJWTPayload;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.NoSuchElementException;

import static io.github.raeperd.realworld.application.user.ProfileModel.fromProfile;
import static java.util.Optional.ofNullable;
import static org.springframework.http.HttpStatus.NOT_FOUND;

@RequestMapping("/profiles")
@RestController
class ProfileRestController {

    private final ProfileService profileService;

    ProfileRestController(ProfileService profileService) {
        this.profileService = profileService;
    }

    @GetMapping("/{username}")
    public ProfileModel getProfileByUsername(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                                             @PathVariable UserName username) {
        return ofNullable(jwtPayload)
                .map(JWTPayload::getUserId)
                .map(viewerId -> profileService.viewProfile(viewerId, username))
                .map(ProfileModel::fromProfile)
                .orElseGet(() -> fromProfile(profileService.viewProfile(username)));
    }

    @PostMapping("/{username}/follow")
    public ProfileModel followUser(@AuthenticationPrincipal UserJWTPayload followerPayload,
                                   @PathVariable UserName username) {
        return fromProfile(
                profileService.followAndViewProfile(followerPayload.getUserId(), username));
    }

    @DeleteMapping("/{username}/follow")
    public ProfileModel unfollowUser(@AuthenticationPrincipal UserJWTPayload followerPayload,
                                     @PathVariable UserName username) {
        return fromProfile(
                profileService.unfollowAndViewProfile(followerPayload.getUserId(), username)
        );
    }

    @ResponseStatus(NOT_FOUND)
    @ExceptionHandler(NoSuchElementException.class)
    void handleNoSuchElementException(NoSuchElementException exception) {
        // return NOT FOUND status
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserLoginRequestDTO.java
package io.github.raeperd.realworld.application.user;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.Value;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT;
import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;

@JsonTypeName("user")
@JsonTypeInfo(include = WRAPPER_OBJECT, use = NAME)
@Value
class UserLoginRequestDTO {

    @Email
    String email;
    @NotBlank
    String password;

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserModel.java
package io.github.raeperd.realworld.application.user;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.github.raeperd.realworld.domain.user.User;
import lombok.Value;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT;
import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;
import static java.lang.String.valueOf;

@JsonTypeName("user")
@JsonTypeInfo(include = WRAPPER_OBJECT, use = NAME)
@Value
class UserModel {

    String email;
    String username;
    String token;
    String bio;
    String image;

    static UserModel fromUserAndToken(User user, String token) {
        return new UserModel(
                valueOf(user.getEmail()),
                valueOf(user.getName()),
                token,
                "",
                "");
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserPostRequestDTO.java
package io.github.raeperd.realworld.application.user;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.github.raeperd.realworld.domain.user.Email;
import io.github.raeperd.realworld.domain.user.UserName;
import io.github.raeperd.realworld.domain.user.UserSignUpRequest;
import lombok.Value;

import javax.validation.constraints.NotBlank;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT;
import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;

@JsonTypeName("user")
@JsonTypeInfo(include = WRAPPER_OBJECT, use = NAME)
@Value
class UserPostRequestDTO {

    @javax.validation.constraints.Email
    String email;
    @NotBlank
    String username;
    @NotBlank
    String password;

    UserSignUpRequest toSignUpRequest() {
        return new UserSignUpRequest(
                new Email(email),
                new UserName(username),
                password);
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserPutRequestDTO.java
package io.github.raeperd.realworld.application.user;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.github.raeperd.realworld.domain.user.Email;
import io.github.raeperd.realworld.domain.user.Image;
import io.github.raeperd.realworld.domain.user.UserName;
import io.github.raeperd.realworld.domain.user.UserUpdateRequest;
import lombok.Value;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT;
import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;
import static java.util.Optional.ofNullable;

@JsonTypeName("user")
@JsonTypeInfo(include = WRAPPER_OBJECT, use = NAME)
@Value
class UserPutRequestDTO {

    String email;
    String username;
    String password;
    String bio;
    String image;

    UserUpdateRequest toUpdateRequest() {
        return UserUpdateRequest.builder()
                .emailToUpdate(ofNullable(email).map(Email::new).orElse(null))
                .userNameToUpdate(ofNullable(username).map(UserName::new).orElse(null))
                .imageToUpdate(ofNullable(image).map(Image::new).orElse(null))
                .passwordToUpdate(password)
                .bioToUpdate(bio)
                .build();
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/application/user/UserRestController.java
package io.github.raeperd.realworld.application.user;

import io.github.raeperd.realworld.domain.jwt.JWTSerializer;
import io.github.raeperd.realworld.domain.user.Email;
import io.github.raeperd.realworld.domain.user.UserService;
import io.github.raeperd.realworld.infrastructure.jwt.UserJWTPayload;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import static io.github.raeperd.realworld.application.user.UserModel.fromUserAndToken;
import static org.springframework.http.ResponseEntity.of;

@RestController
class UserRestController {

    private final UserService userService;
    private final JWTSerializer jwtSerializer;

    UserRestController(UserService userService, JWTSerializer jwtSerializer) {
        this.userService = userService;
        this.jwtSerializer = jwtSerializer;
    }

    @PostMapping("/users")
    public UserModel postUser(@Valid @RequestBody UserPostRequestDTO dto) {
        final var userSaved = userService.signUp(dto.toSignUpRequest());
        return fromUserAndToken(userSaved, jwtSerializer.jwtFromUser(userSaved));
    }

    @PostMapping("/users/login")
    public ResponseEntity<UserModel> loginUser(@Valid @RequestBody UserLoginRequestDTO dto) {
        return of(userService.login(new Email(dto.getEmail()), dto.getPassword())
                .map(user -> fromUserAndToken(user, jwtSerializer.jwtFromUser(user))));
    }

    @GetMapping("/user")
    public ResponseEntity<UserModel> getUser(@AuthenticationPrincipal UserJWTPayload jwtPayload) {
        return of(userService.findById(jwtPayload.getUserId())
                .map(user -> UserModel.fromUserAndToken(user, getCurrentCredential())));
    }

    @PutMapping("/user")
    public UserModel putUser(@AuthenticationPrincipal UserJWTPayload jwtPayload,
                             @Valid @RequestBody UserPutRequestDTO dto) {
        final var userUpdated = userService.updateUser(jwtPayload.getUserId(), dto.toUpdateRequest());
        return fromUserAndToken(userUpdated, getCurrentCredential());
    }

    private static String getCurrentCredential() {
        return SecurityContextHolder.getContext()
                .getAuthentication()
                .getCredentials()
                .toString();
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/Article.java
package io.github.raeperd.realworld.domain.article;

import io.github.raeperd.realworld.domain.article.comment.Comment;
import io.github.raeperd.realworld.domain.user.User;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;
import java.time.Instant;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.CascadeType.REMOVE;
import static javax.persistence.FetchType.EAGER;
import static javax.persistence.GenerationType.IDENTITY;

@Table(name = "articles")
@EntityListeners(AuditingEntityListener.class)
@Entity
public class Article {

    @GeneratedValue(strategy = IDENTITY)
    @Id
    private Long id;

    @JoinColumn(name = "author_id", referencedColumnName = "id", nullable = false)
    @ManyToOne(fetch = EAGER)
    private User author;

    @Embedded
    private ArticleContents contents;

    @Column(name = "created_at")
    @CreatedDate
    private Instant createdAt;

    @Column(name = "updated_at")
    @LastModifiedDate
    private Instant updatedAt;

    @JoinTable(name = "article_favorites",
            joinColumns = @JoinColumn(name = "article_id", referencedColumnName = "id", nullable = false),
            inverseJoinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false))
    @ManyToMany(fetch = EAGER, cascade = PERSIST)
    private Set<User> userFavorited = new HashSet<>();

    @OneToMany(mappedBy = "article", cascade = {PERSIST, REMOVE})
    private Set<Comment> comments = new HashSet<>();

    @Transient
    private boolean favorited = false;

    public Article(User author, ArticleContents contents) {
        this.author = author;
        this.contents = contents;
    }

    protected Article() {
    }

    public Article afterUserFavoritesArticle(User user) {
        userFavorited.add(user);
        return updateFavoriteByUser(user);
    }

    public Article afterUserUnFavoritesArticle(User user) {
        userFavorited.remove(user);
        return updateFavoriteByUser(user);
    }

    public Comment addComment(User author, String body) {
        final var commentToAdd = new Comment(this, author, body);
        comments.add(commentToAdd);
        return commentToAdd;
    }

    public void removeCommentByUser(User user, long commentId) {
        final var commentsToDelete = comments.stream()
                .filter(comment -> comment.getId().equals(commentId))
                .findFirst()
                .orElseThrow(NoSuchElementException::new);
        if (!user.equals(author) || !user.equals(commentsToDelete.getAuthor())) {
            throw new IllegalAccessError("Not authorized to delete comment");
        }
        comments.remove(commentsToDelete);
    }

    public void updateArticle(ArticleUpdateRequest updateRequest) {
        contents.updateArticleContentsIfPresent(updateRequest);
    }

    public Article updateFavoriteByUser(User user) {
        favorited = userFavorited.contains(user);
        return this;
    }

    public User getAuthor() {
        return author;
    }

    public ArticleContents getContents() {
        return contents;
    }

    public Instant getCreatedAt() {
        return createdAt;
    }

    public Instant getUpdatedAt() {
        return updatedAt;
    }

    public int getFavoritedCount() {
        return userFavorited.size();
    }

    public boolean isFavorited() {
        return favorited;
    }

    public Set<Comment> getComments() {
        return comments;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        var article = (Article) o;
        return author.equals(article.author) && contents.getTitle().equals(article.contents.getTitle());
    }

    @Override
    public int hashCode() {
        return Objects.hash(author, contents.getTitle());
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleContents.java
package io.github.raeperd.realworld.domain.article;

import io.github.raeperd.realworld.domain.article.tag.Tag;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.EAGER;

@Embeddable
public class ArticleContents {

    @Embedded
    private ArticleTitle title;

    @Column(nullable = false)
    private String description;

    @Column(nullable = false)
    private String body;

    @JoinTable(name = "articles_tags",
            joinColumns = @JoinColumn(name = "article_id", referencedColumnName = "id", nullable = false),
            inverseJoinColumns = @JoinColumn(name = "tag_id", referencedColumnName = "id", nullable = false))
    @ManyToMany(fetch = EAGER, cascade = PERSIST)
    private Set<Tag> tags = new HashSet<>();

    public ArticleContents(String description, ArticleTitle title, String body, Set<Tag> tags) {
        this.description = description;
        this.title = title;
        this.body = body;
        this.tags = tags;
    }

    protected ArticleContents() {
    }

    public ArticleTitle getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public String getBody() {
        return body;
    }

    public Set<Tag> getTags() {
        return tags;
    }

    void updateArticleContentsIfPresent(ArticleUpdateRequest updateRequest) {
        updateRequest.getTitleToUpdate().ifPresent(titleToUpdate -> title = titleToUpdate);
        updateRequest.getDescriptionToUpdate().ifPresent(descriptionToUpdate -> description = descriptionToUpdate);
        updateRequest.getBodyToUpdate().ifPresent(bodyToUpdate -> body = bodyToUpdate);
    }

    public void setTags(Set<Tag> tags) {
        this.tags = tags;
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleFindService.java
package io.github.raeperd.realworld.domain.article;

import java.util.Optional;

public interface ArticleFindService {

    Optional<Article> getArticleBySlug(String slug);
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleRepository.java
package io.github.raeperd.realworld.domain.article;

import io.github.raeperd.realworld.domain.article.tag.Tag;
import io.github.raeperd.realworld.domain.user.User;
import io.github.raeperd.realworld.domain.user.UserName;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.Repository;

import java.util.Optional;

interface ArticleRepository extends Repository<Article, Long> {

    Article save(Article article);

    Page<Article> findAll(Pageable pageable);
    Page<Article> findAllByUserFavoritedContains(User user, Pageable pageable);
    Page<Article> findAllByAuthorProfileUserName(UserName authorName, Pageable pageable);
    Page<Article> findAllByContentsTagsContains(Tag tag, Pageable pageable);
    Optional<Article> findFirstByContentsTitleSlug(String slug);

    void deleteArticleByAuthorAndContentsTitleSlug(User author, String slug);

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleService.java
package io.github.raeperd.realworld.domain.article;

import io.github.raeperd.realworld.domain.article.tag.TagService;
import io.github.raeperd.realworld.domain.user.User;
import io.github.raeperd.realworld.domain.user.UserFindService;
import io.github.raeperd.realworld.domain.user.UserName;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.NoSuchElementException;
import java.util.Optional;

import static org.springframework.data.util.Optionals.mapIfAllPresent;

@Service
public class ArticleService implements ArticleFindService {

    private final UserFindService userFindService;
    private final TagService tagService;
    private final ArticleRepository articleRepository;

    ArticleService(UserFindService userFindService, TagService tagService, ArticleRepository articleRepository) {
        this.userFindService = userFindService;
        this.tagService = tagService;
        this.articleRepository = articleRepository;
    }

    @Transactional
    public Article createNewArticle(long authorId, ArticleContents contents) {
        final var tagsReloaded = tagService.reloadAllTagsIfAlreadyPresent(contents.getTags());
        contents.setTags(tagsReloaded);
        return userFindService.findById(authorId)
                .map(author -> author.writeArticle(contents))
                .map(articleRepository::save)
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional(readOnly = true)
    public Page<Article> getArticles(Pageable pageable) {
        return articleRepository.findAll(pageable);
    }

    @Transactional(readOnly = true)
    public Page<Article> getFeedByUserId(long userId, Pageable pageable) {
        return userFindService.findById(userId)
                .map(user -> articleRepository.findAllByUserFavoritedContains(user, pageable)
                        .map(article -> article.updateFavoriteByUser(user)))
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional(readOnly = true)
    public Page<Article> getArticleFavoritedByUsername(UserName username, Pageable pageable) {
        return userFindService.findByUsername(username)
                .map(user -> articleRepository.findAllByUserFavoritedContains(user, pageable)
                        .map(article -> article.updateFavoriteByUser(user)))
                .orElse(Page.empty());
    }

    @Transactional(readOnly = true)
    public Page<Article> getArticlesByAuthorName(String authorName, Pageable pageable) {
        return articleRepository.findAllByAuthorProfileUserName(new UserName(authorName), pageable);
    }

    @Transactional(readOnly = true)
    public Page<Article> getArticlesByTag(String tagValue, Pageable pageable) {
        return tagService.findByValue(tagValue)
                .map(tag -> articleRepository.findAllByContentsTagsContains(tag, pageable))
                .orElse(Page.empty());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Article> getArticleBySlug(String slug) {
        return articleRepository.findFirstByContentsTitleSlug(slug);
    }

    @Transactional
    public Article updateArticle(long userId, String slug, ArticleUpdateRequest request) {
        return mapIfAllPresent(userFindService.findById(userId), getArticleBySlug(slug),
                (user, article) -> user.updateArticle(article, request))
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional
    public Article favoriteArticle(long userId, String articleSlugToFavorite) {
        return mapIfAllPresent(
                userFindService.findById(userId), getArticleBySlug(articleSlugToFavorite),
                User::favoriteArticle)
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional
    public Article unfavoriteArticle(long userId, String articleSlugToUnFavorite) {
        return mapIfAllPresent(
                userFindService.findById(userId), getArticleBySlug(articleSlugToUnFavorite),
                User::unfavoriteArticle)
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional
    public void deleteArticleBySlug(long userId, String slug) {
        userFindService.findById(userId)
                .ifPresentOrElse(user -> articleRepository.deleteArticleByAuthorAndContentsTitleSlug(user, slug),
                        () -> {throw new NoSuchElementException();});
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleTitle.java
package io.github.raeperd.realworld.domain.article;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.util.Objects;

@Embeddable
public class ArticleTitle {

    @Column(nullable = false)
    private String title;

    @Column(nullable = false)
    private String slug;

    public static ArticleTitle of(String title) {
        return new ArticleTitle(title, slugFromTitle(title));
    }

    private ArticleTitle(String title, String slug) {
        this.title = title;
        this.slug = slug;
    }

    protected ArticleTitle() {
    }

    private static String slugFromTitle(String title) {
        return title.toLowerCase()
                .replaceAll("\\$,'\"|\\s|\\.|\\?", "-")
                .replaceAll("-{2,}", "-")
                .replaceAll("(^-)|(-$)", "");
    }

    public String getSlug() {
        return slug;
    }

    public String getTitle() {
        return title;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ArticleTitle that = (ArticleTitle) o;
        return slug.equals(that.slug);
    }

    @Override
    public int hashCode() {
        return Objects.hash(slug);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/ArticleUpdateRequest.java
package io.github.raeperd.realworld.domain.article;

import java.util.Optional;

import static java.util.Optional.ofNullable;

public class ArticleUpdateRequest {

    private final ArticleTitle titleToUpdate;
    private final String descriptionToUpdate;
    private final String bodyToUpdate;

    public static ArticleUpdateRequestBuilder builder() {
        return new ArticleUpdateRequestBuilder();
    }

    Optional<ArticleTitle> getTitleToUpdate() {
        return ofNullable(titleToUpdate);
    }

    Optional<String> getDescriptionToUpdate() {
        return ofNullable(descriptionToUpdate);
    }

    Optional<String> getBodyToUpdate() {
        return ofNullable(bodyToUpdate);
    }

    private ArticleUpdateRequest(ArticleUpdateRequestBuilder builder) {
        this(builder.titleToUpdate, builder.descriptionToUpdate, builder.bodyToUpdate);
    }

    private ArticleUpdateRequest(ArticleTitle titleToUpdate, String descriptionToUpdate, String bodyToUpdate) {
        this.titleToUpdate = titleToUpdate;
        this.descriptionToUpdate = descriptionToUpdate;
        this.bodyToUpdate = bodyToUpdate;
    }

    public static class ArticleUpdateRequestBuilder {
        private ArticleTitle titleToUpdate;
        private String descriptionToUpdate;
        private String bodyToUpdate;

        public ArticleUpdateRequestBuilder titleToUpdate(ArticleTitle titleToUpdate) {
            this.titleToUpdate = titleToUpdate;
            return this;
        }
        public ArticleUpdateRequestBuilder descriptionToUpdate(String descriptionToUpdate) {
            this.descriptionToUpdate = descriptionToUpdate;
            return this;
        }
        public ArticleUpdateRequestBuilder bodyToUpdate(String bodyToUpdate) {
            this.bodyToUpdate = bodyToUpdate;
            return this;
        }

        public ArticleUpdateRequest build() {
            return new ArticleUpdateRequest(this);
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/comment/Comment.java
package io.github.raeperd.realworld.domain.article.comment;

import io.github.raeperd.realworld.domain.article.Article;
import io.github.raeperd.realworld.domain.user.User;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;
import java.time.Instant;
import java.util.Objects;

import static javax.persistence.FetchType.EAGER;
import static javax.persistence.GenerationType.IDENTITY;

@Table(name = "comments")
@EntityListeners(AuditingEntityListener.class)
@Entity
public class Comment {

    @GeneratedValue(strategy = IDENTITY)
    @Id
    private Long id;

    @JoinColumn(name = "article_id", referencedColumnName = "id", nullable = false)
    @ManyToOne(fetch = EAGER)
    private Article article;

    @JoinColumn(name = "author_id", referencedColumnName = "id", nullable = false)
    @ManyToOne(fetch = EAGER)
    private User author;

    @Column(name = "created_at")
    @CreatedDate
    private Instant createdAt;

    @Column(name = "updated_at")
    @LastModifiedDate
    private Instant updatedAt;

    @Column(name = "body", nullable = false)
    private String body;

    public Comment(Article article, User author, String body) {
        this.article = article;
        this.author = author;
        this.body = body;
    }

    protected Comment() {
    }

    public Long getId() {
        return id;
    }

    public User getAuthor() {
        return author;
    }

    public Instant getCreatedAt() {
        return createdAt;
    }

    public Instant getUpdatedAt() {
        return updatedAt;
    }

    public String getBody() {
        return body;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        var comment = (Comment) o;
        return article.equals(comment.article) && author.equals(comment.author) && Objects.equals(createdAt, comment.createdAt) && body.equals(comment.body);
    }

    @Override
    public int hashCode() {
        return Objects.hash(article, author, createdAt, body);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/comment/CommentService.java
package io.github.raeperd.realworld.domain.article.comment;

import io.github.raeperd.realworld.domain.article.Article;
import io.github.raeperd.realworld.domain.article.ArticleFindService;
import io.github.raeperd.realworld.domain.user.User;
import io.github.raeperd.realworld.domain.user.UserFindService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.NoSuchElementException;
import java.util.Set;

import static org.springframework.data.util.Optionals.mapIfAllPresent;

@Service
public class CommentService {

    private final UserFindService userFindService;
    private final ArticleFindService articleFindService;

    CommentService(UserFindService userFindService, ArticleFindService articleFindService) {
        this.userFindService = userFindService;
        this.articleFindService = articleFindService;
    }

    @Transactional
    public Comment createComment(long userId, String slug, String body) {
        return mapIfAllPresent(userFindService.findById(userId), articleFindService.getArticleBySlug(slug),
                (user, article) -> user.writeCommentToArticle(article, body))
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional(readOnly = true)
    public Set<Comment> getComments(long userId, String slug) {
        return mapIfAllPresent(userFindService.findById(userId), articleFindService.getArticleBySlug(slug),
                User::viewArticleComments)
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional(readOnly = true)
    public Set<Comment> getComments(String slug) {
        return articleFindService.getArticleBySlug(slug)
                .map(Article::getComments)
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional
    public void deleteCommentById(long userId, String slug, long commentId) {
        final var articleContainsComments = articleFindService.getArticleBySlug(slug)
                .orElseThrow(NoSuchElementException::new);
        userFindService.findById(userId)
                .ifPresentOrElse(user -> user.deleteArticleComment(articleContainsComments, commentId),
                        () -> {throw new NoSuchElementException();});
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/tag/Tag.java
package io.github.raeperd.realworld.domain.article.tag;

import javax.persistence.*;
import java.util.Objects;

import static javax.persistence.GenerationType.IDENTITY;

@Table(name = "tags")
@Entity
public class Tag {

    @GeneratedValue(strategy = IDENTITY)
    @Id
    private Long id;

    @Column(name = "value", unique = true, nullable = false)
    private String value;

    public Tag(String value) {
        this.value = value;
    }

    protected Tag() {
    }

    @Override
    public String toString() {
        return value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        var tag = (Tag) o;
        return value.equals(tag.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/tag/TagRepository.java
package io.github.raeperd.realworld.domain.article.tag;

import org.springframework.data.repository.Repository;

import java.util.List;
import java.util.Optional;

interface TagRepository extends Repository<Tag, Long> {

    List<Tag> findAll();

    Optional<Tag> findFirstByValue(String value);
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/article/tag/TagService.java
package io.github.raeperd.realworld.domain.article.tag;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static java.lang.String.valueOf;
import static java.util.stream.Collectors.toSet;

@Service
public class TagService {

    private final TagRepository tagRepository;

    TagService(TagRepository tagRepository) {
        this.tagRepository = tagRepository;
    }

    @Transactional(readOnly = true)
    public Set<Tag> findAll() {
        return new HashSet<>(tagRepository.findAll());
    }

    @Transactional(readOnly = true)
    public Set<Tag> reloadAllTagsIfAlreadyPresent(Set<Tag> tags) {
        return tags.stream()
                .map(tag -> findByValue(valueOf(tag)).orElse(tag))
                .collect(toSet());
    }

    @Transactional(readOnly = true)
    public Optional<Tag> findByValue(String value) {
        return tagRepository.findFirstByValue(value);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/jwt/JWTDeserializer.java
package io.github.raeperd.realworld.domain.jwt;

public interface JWTDeserializer {

    JWTPayload jwtPayloadFromJWT(String jwtToken);

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/jwt/JWTPayload.java
package io.github.raeperd.realworld.domain.jwt;

import java.io.Serializable;

public interface JWTPayload extends Serializable {

    long getUserId();
    boolean isExpired();

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/jwt/JWTSerializer.java
package io.github.raeperd.realworld.domain.jwt;

import io.github.raeperd.realworld.domain.user.User;

public interface JWTSerializer {

    String jwtFromUser(User user);

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Email.java
package io.github.raeperd.realworld.domain.user;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.util.Objects;

@Embeddable
public class Email {

    @Column(name = "email", nullable = false)
    private String address;

    public Email(String address) {
        this.address = address;
    }

    protected Email() {
    }

    @Override
    public String toString() {
        return address;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Email email = (Email) o;
        return address.equals(email.address);
    }

    @Override
    public int hashCode() {
        return Objects.hash(address);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Image.java
package io.github.raeperd.realworld.domain.user;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.util.Objects;

@Embeddable
public class Image {

    @Column(name = "image")
    private String address;

    public Image(String address) {
        this.address = address;
    }

    protected Image() {
    }

    @Override
    public String toString() {
        return address;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final var image = (Image) o;
        return address.equals(image.address);
    }

    @Override
    public int hashCode() {
        return Objects.hash(address);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Password.java
package io.github.raeperd.realworld.domain.user;

import org.springframework.security.crypto.password.PasswordEncoder;

import javax.persistence.Column;
import javax.persistence.Embeddable;

@Embeddable
class Password {

    @Column(name = "password", nullable = false)
    private String encodedPassword;

    static Password of(String rawPassword, PasswordEncoder passwordEncoder) {
        return new Password(passwordEncoder.encode(rawPassword));
    }

    private Password(String encodedPassword) {
        this.encodedPassword = encodedPassword;
    }

    protected Password() {
    }

    boolean matchesPassword(String rawPassword, PasswordEncoder passwordEncoder) {
        return passwordEncoder.matches(rawPassword, encodedPassword);
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/Profile.java
package io.github.raeperd.realworld.domain.user;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;
import javax.persistence.Transient;

@Embeddable
public class Profile {

    @Embedded
    private UserName userName;

    @Column(name = "bio")
    private String bio;

    @Embedded
    private Image image;

    @Transient
    private boolean following;

    public Profile(UserName userName) {
        this(userName, null, null, false);
    }

    private Profile(UserName userName, String bio, Image image, boolean following) {
        this.userName = userName;
        this.bio = bio;
        this.image = image;
        this.following = following;
    }

    protected Profile() {
    }

    public UserName getUserName() {
        return userName;
    }
    public String getBio() {
        return bio;
    }
    public Image getImage() {
        return image;
    }
    public boolean isFollowing() {
        return following;
    }

    Profile withFollowing(boolean following) {
        this.following = following;
        return this;
    }

    void changeUserName(UserName userName) {
        this.userName = userName;
    }
    void changeBio(String bio) {
        this.bio = bio;
    }
    void changeImage(Image image) {
        this.image = image;
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/ProfileService.java
package io.github.raeperd.realworld.domain.user;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.NoSuchElementException;

@Service
public class ProfileService {

    private final UserFindService userFindService;

    ProfileService(UserFindService userFindService) {
        this.userFindService = userFindService;
    }

    @Transactional(readOnly = true)
    public Profile viewProfile(long viewerId, UserName usernameToView) {
        final var viewer = userFindService.findById(viewerId).orElseThrow(NoSuchElementException::new);
        return userFindService.findByUsername(usernameToView)
                .map(viewer::viewProfile)
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional(readOnly = true)
    public Profile viewProfile(UserName userName) {
        return userFindService.findByUsername(userName)
                .map(User::getProfile)
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional
    public Profile followAndViewProfile(long followerId, UserName followeeUserName) {
        final var followee = userFindService.findByUsername(followeeUserName).orElseThrow(NoSuchElementException::new);
        return userFindService.findById(followerId)
                .map(follower -> follower.followUser(followee))
                .map(follower -> follower.viewProfile(followee))
                .orElseThrow(NoSuchElementException::new);
    }

    @Transactional
    public Profile unfollowAndViewProfile(long followerId, UserName followeeUserName) {
        final var followee = userFindService.findByUsername(followeeUserName).orElseThrow(NoSuchElementException::new);
        return userFindService.findById(followerId)
                .map(follower -> follower.unfollowUser(followee))
                .map(follower -> follower.viewProfile(followee))
                .orElseThrow(NoSuchElementException::new);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/User.java
package io.github.raeperd.realworld.domain.user;

import io.github.raeperd.realworld.domain.article.Article;
import io.github.raeperd.realworld.domain.article.ArticleContents;
import io.github.raeperd.realworld.domain.article.ArticleUpdateRequest;
import io.github.raeperd.realworld.domain.article.comment.Comment;
import org.springframework.security.crypto.password.PasswordEncoder;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import static java.util.stream.Collectors.toSet;
import static javax.persistence.CascadeType.REMOVE;
import static javax.persistence.GenerationType.IDENTITY;

@Table(name = "users")
@Entity
public class User {

    @GeneratedValue(strategy = IDENTITY)
    @Id
    private Long id;

    @Embedded
    private Email email;

    @Embedded
    private Profile profile;

    @Embedded
    private Password password;

    @JoinTable(name = "user_followings",
            joinColumns = @JoinColumn(name = "follower_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(name = "followee_id", referencedColumnName = "id"))
    @OneToMany(cascade = REMOVE)
    private Set<User> followingUsers = new HashSet<>();

    @ManyToMany(mappedBy = "userFavorited")
    private Set<Article> articleFavorited = new HashSet<>();

    static User of(Email email, UserName name, Password password) {
        return new User(email, new Profile(name), password);
    }

    private User(Email email, Profile profile, Password password) {
        this.email = email;
        this.profile = profile;
        this.password = password;
    }

    protected User() {
    }

    public Article writeArticle(ArticleContents contents) {
        return new Article(this, contents);
    }

    public Article updateArticle(Article article, ArticleUpdateRequest request) {
        if (article.getAuthor() != this) {
            throw new IllegalAccessError("Not authorized to update this article");
        }
        article.updateArticle(request);
        return article;
    }

    public Comment writeCommentToArticle(Article article, String body) {
        return article.addComment(this, body);
    }

    public Article favoriteArticle(Article articleToFavorite) {
        articleFavorited.add(articleToFavorite);
        return articleToFavorite.afterUserFavoritesArticle(this);
    }

    public Article unfavoriteArticle(Article articleToUnfavorite) {
        articleFavorited.remove(articleToUnfavorite);
        return articleToUnfavorite.afterUserUnFavoritesArticle(this);
    }

    User followUser(User followee) {
        followingUsers.add(followee);
        return this;
    }

    User unfollowUser(User followee) {
        followingUsers.remove(followee);
        return this;
    }

    public void deleteArticleComment(Article article, long commentId) {
        article.removeCommentByUser(this, commentId);
    }

    public Set<Comment> viewArticleComments(Article article) {
        return article.getComments().stream()
                .map(this::viewComment)
                .collect(toSet());
    }

    Comment viewComment(Comment comment) {
        viewProfile(comment.getAuthor());
        return comment;
    }

    Profile viewProfile(User user) {
        return user.profile.withFollowing(followingUsers.contains(user));
    }

    public Profile getProfile() {
        return profile;
    }

    boolean matchesPassword(String rawPassword, PasswordEncoder passwordEncoder) {
        return password.matchesPassword(rawPassword, passwordEncoder);
    }

    void changeEmail(Email email) {
        this.email = email;
    }

    void changePassword(Password password) {
        this.password = password;
    }

    void changeName(UserName userName) {
        profile.changeUserName(userName);
    }

    void changeBio(String bio) {
        profile.changeBio(bio);
    }

    void changeImage(Image image) {
        profile.changeImage(image);
    }

    public Long getId() {
        return id;
    }

    public Email getEmail() {
        return email;
    }

    public UserName getName() {
        return profile.getUserName();
    }

    String getBio() {
        return profile.getBio();
    }

    Image getImage() {
        return profile.getImage();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final var user = (User) o;
        return email.equals(user.email);
    }

    @Override
    public int hashCode() {
        return Objects.hash(email);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserFindService.java
package io.github.raeperd.realworld.domain.user;

import java.util.Optional;

public interface UserFindService {

    Optional<User> findById(long id);
    Optional<User> findByUsername(UserName userName);

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserName.java
package io.github.raeperd.realworld.domain.user;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.util.Objects;

@Embeddable
public class UserName {

    @Column(name = "name", nullable = false)
    private String name;

    public UserName(String name) {
        this.name = name;
    }

    protected UserName() {
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final var userName = (UserName) o;
        return name.equals(userName.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserRepository.java
package io.github.raeperd.realworld.domain.user;

import org.springframework.data.repository.Repository;

import java.util.Optional;

interface UserRepository extends Repository<User, Long> {

    User save(User user);

    Optional<User> findById(long id);
    Optional<User> findFirstByEmail(Email email);
    Optional<User> findFirstByProfileUserName(UserName userName);

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserService.java
package io.github.raeperd.realworld.domain.user;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.NoSuchElementException;
import java.util.Optional;

@Service
public class UserService implements UserFindService {

    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;

    public UserService(PasswordEncoder passwordEncoder, UserRepository userRepository) {
        this.passwordEncoder = passwordEncoder;
        this.userRepository = userRepository;
    }

    @Transactional
    public User signUp(UserSignUpRequest request) {
        final var encodedPassword = Password.of(request.getRawPassword(), passwordEncoder);
        return userRepository.save(User.of(request.getEmail(),
                request.getUserName(),
                encodedPassword));
    }

    @Transactional(readOnly = true)
    public Optional<User> login(Email email, String rawPassword) {
        return userRepository.findFirstByEmail(email)
                .filter(user -> user.matchesPassword(rawPassword, passwordEncoder));
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<User> findById(long id) {
        return userRepository.findById(id);
    }

    @Override
    public Optional<User> findByUsername(UserName userName) {
        return userRepository.findFirstByProfileUserName(userName);
    }

    @Transactional
    public User updateUser(long id, UserUpdateRequest request) {
        final var user = userRepository.findById(id).orElseThrow(NoSuchElementException::new);
        request.getEmailToUpdate()
                .ifPresent(user::changeEmail);
        request.getUserNameToUpdate()
                .ifPresent(user::changeName);
        request.getPasswordToUpdate()
                .map(rawPassword -> Password.of(rawPassword, passwordEncoder))
                .ifPresent(user::changePassword);
        request.getImageToUpdate()
                .ifPresent(user::changeImage);
        request.getBioToUpdate()
                .ifPresent(user::changeBio);
        return userRepository.save(user);
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserSignUpRequest.java
package io.github.raeperd.realworld.domain.user;

public class UserSignUpRequest {

    private final Email email;
    private final UserName userName;
    private final String rawPassword;

    public UserSignUpRequest(Email email, UserName userName, String rawPassword) {
        this.email = email;
        this.userName = userName;
        this.rawPassword = rawPassword;
    }

    public Email getEmail() {
        return email;
    }

    public UserName getUserName() {
        return userName;
    }

    public String getRawPassword() {
        return rawPassword;
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/domain/user/UserUpdateRequest.java
package io.github.raeperd.realworld.domain.user;

import java.util.Optional;

import static java.util.Optional.ofNullable;

public class UserUpdateRequest {

    private final Email emailToUpdate;
    private final UserName userNameToUpdate;
    private final String passwordToUpdate;
    private final Image imageToUpdate;
    private final String bioToUpdate;

    public static UserUpdateRequestBuilder builder() {
        return new UserUpdateRequestBuilder();
    }

    Optional<Email> getEmailToUpdate() {
        return ofNullable(emailToUpdate);
    }

    Optional<UserName> getUserNameToUpdate() {
        return ofNullable(userNameToUpdate);
    }

    Optional<String> getPasswordToUpdate() {
        return ofNullable(passwordToUpdate);
    }

    Optional<Image> getImageToUpdate() {
        return ofNullable(imageToUpdate);
    }

    Optional<String> getBioToUpdate() {
        return ofNullable(bioToUpdate);
    }

    private UserUpdateRequest(UserUpdateRequestBuilder builder) {
        this.emailToUpdate = builder.emailToUpdate;
        this.userNameToUpdate = builder.userNameToUpdate;
        this.passwordToUpdate = builder.passwordToUpdate;
        this.imageToUpdate = builder.imageToUpdate;
        this.bioToUpdate = builder.bioToUpdate;
    }

    public static class UserUpdateRequestBuilder {
        private Email emailToUpdate;
        private UserName userNameToUpdate;
        private String passwordToUpdate;
        private Image imageToUpdate;
        private String bioToUpdate;

        public UserUpdateRequestBuilder emailToUpdate(Email emailToUpdate) {
            this.emailToUpdate = emailToUpdate;
            return this;
        }

        public UserUpdateRequestBuilder userNameToUpdate(UserName userNameToUpdate) {
            this.userNameToUpdate = userNameToUpdate;
            return this;
        }

        public UserUpdateRequestBuilder passwordToUpdate(String passwordToUpdate) {
            this.passwordToUpdate = passwordToUpdate;
            return this;
        }

        public UserUpdateRequestBuilder imageToUpdate(Image imageToUpdate) {
            this.imageToUpdate = imageToUpdate;
            return this;
        }

        public UserUpdateRequestBuilder bioToUpdate(String bioToUpdate) {
            this.bioToUpdate = bioToUpdate;
            return this;
        }

        public UserUpdateRequest build() {
            return new UserUpdateRequest(this);
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/Base64URL.java
package io.github.raeperd.realworld.infrastructure.jwt;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

class Base64URL {

    private Base64URL() {
    }

    static String base64URLFromString(String rawString) {
        return base64URLFromBytes(rawString.getBytes(StandardCharsets.UTF_8));
    }

    static String base64URLFromBytes(byte[] bytes) {
        return Base64.getUrlEncoder().withoutPadding()
                .encodeToString(bytes);
    }

    static String stringFromBase64URL(String base64URL) {
        return new String(Base64.getUrlDecoder().decode(base64URL));
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256.java
package io.github.raeperd.realworld.infrastructure.jwt;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;

class HmacSHA256 {

    private static final String HMAC_SHA256_ALGORITHM = "HmacSHA256";

    private HmacSHA256() {
    }

    public static byte[] sign(byte[] secret, String message) {
        try {
            final var hmacSHA256 = Mac.getInstance(HMAC_SHA256_ALGORITHM);
            hmacSHA256.init(new SecretKeySpec(secret, HMAC_SHA256_ALGORITHM));
            return hmacSHA256.doFinal(message.getBytes(StandardCharsets.UTF_8));
        } catch (Exception exception) {
            throw new HmacSHA256SignFailedException(exception);
        }
    }

    private static class HmacSHA256SignFailedException extends RuntimeException {
        public HmacSHA256SignFailedException(Throwable cause) {
            super(cause);
        }
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256JWTService.java
package io.github.raeperd.realworld.infrastructure.jwt;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import io.github.raeperd.realworld.domain.jwt.JWTPayload;
import io.github.raeperd.realworld.domain.jwt.JWTSerializer;
import io.github.raeperd.realworld.domain.user.User;

import java.util.regex.Pattern;

import static io.github.raeperd.realworld.infrastructure.jwt.Base64URL.*;
import static java.lang.String.format;
import static java.time.Instant.now;
import static java.util.regex.Pattern.compile;

class HmacSHA256JWTService implements JWTSerializer, JWTDeserializer {

    private static final String JWT_HEADER = base64URLFromString("{\"alg\":\"HS256\",\"type\":\"JWT\"}");
    private static final String BASE64URL_PATTERN = "[\\w_\\-]+";
    private static final Pattern JWT_PATTERN = compile(format("^(%s\\.)(%s\\.)(%s)$",
            BASE64URL_PATTERN, BASE64URL_PATTERN, BASE64URL_PATTERN));

    private final byte[] secret;
    private final long durationSeconds;
    private final ObjectMapper objectMapper;

    HmacSHA256JWTService(byte[] secret, long durationSeconds, ObjectMapper objectMapper) {
        this.secret = secret;
        this.durationSeconds = durationSeconds;
        this.objectMapper = objectMapper;
    }

    @Override
    public String jwtFromUser(User user) {
        final var messageToSign = JWT_HEADER.concat(".").concat(jwtPayloadFromUser(user));
        final var signature = HmacSHA256.sign(secret, messageToSign);
        return messageToSign.concat(".").concat(base64URLFromBytes(signature));
    }

    private String jwtPayloadFromUser(User user) {
        var jwtPayload = UserJWTPayload.of(user, now().getEpochSecond() + durationSeconds);
        return base64URLFromString(jwtPayload.toString());
    }

    @Override
    public JWTPayload jwtPayloadFromJWT(String jwtToken) {
        if (!JWT_PATTERN.matcher(jwtToken).matches()) {
            throw new IllegalArgumentException("Malformed JWT: " + jwtToken);
        }

        final var splintedTokens = jwtToken.split("\\.");
        if (!splintedTokens[0].equals(JWT_HEADER)) {
            throw new IllegalArgumentException("Malformed JWT! Token must starts with header: " + JWT_HEADER);
        }

        final var signatureBytes = HmacSHA256.sign(secret, splintedTokens[0].concat(".").concat(splintedTokens[1]));
        if (!base64URLFromBytes(signatureBytes).equals(splintedTokens[2])) {
            throw new IllegalArgumentException("Token has invalid signature: " + jwtToken);
        }

        try {
            final var decodedPayload = stringFromBase64URL(splintedTokens[1]);
            final var jwtPayload = objectMapper.readValue(decodedPayload, UserJWTPayload.class);
            if (jwtPayload.isExpired()) {
                throw new IllegalArgumentException("Token expired");
            }
            return jwtPayload;
        } catch (Exception exception) {
            throw new IllegalArgumentException(exception);
        }
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/JWTConfiguration.java
package io.github.raeperd.realworld.infrastructure.jwt;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.nio.charset.StandardCharsets;

@Configuration
class JWTConfiguration {

    private static final byte[] SECRET = "SOME_SIGNATURE_SECRET".getBytes(StandardCharsets.UTF_8);
    private static final int JWT_DURATION_SECONDS = 2 * 60 * 60;

    @Bean
    HmacSHA256JWTService hmacSHA256JWTService(ObjectMapper objectMapper) {
        return new HmacSHA256JWTService(SECRET, JWT_DURATION_SECONDS, objectMapper);
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/jwt/UserJWTPayload.java
package io.github.raeperd.realworld.infrastructure.jwt;

import io.github.raeperd.realworld.domain.jwt.JWTPayload;
import io.github.raeperd.realworld.domain.user.User;

import static java.lang.String.format;
import static java.lang.String.valueOf;
import static java.time.Instant.now;

public class UserJWTPayload implements JWTPayload {

    private final long sub;
    private final String name;
    private final long iat;

    static UserJWTPayload of(User user, long epochSecondExpired) {
        return new UserJWTPayload(user.getId(), valueOf(user.getEmail()), epochSecondExpired);
    }

    UserJWTPayload(long sub, String name, long iat) {
        this.sub = sub;
        this.name = name;
        this.iat = iat;
    }

    @Override
    public long getUserId() {
        return sub;
    }

    @Override
    public boolean isExpired() {
        return iat < now().getEpochSecond();
    }

    @Override
    public String toString() {
        return format("{\"sub\":%d,\"name\":\"%s\",\"iat\":%d}", sub, name, iat);
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/java/io/github/raeperd/realworld/infrastructure/repository/SpringDataJPAConfiguration.java
package io.github.raeperd.realworld.infrastructure.repository;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@EnableJpaAuditing
@Configuration
class SpringDataJPAConfiguration {
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/resources/application.properties
spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE

logging.level.sql=DEBUG

security.allowedOrigins=http://localhost:3000,http://localhost:3001
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/resources/schema.sql
CREATE TABLE IF NOT EXISTS users
(
    id       BIGSERIAL PRIMARY KEY,
    name     VARCHAR(100) NOT NULL,
    bio      VARCHAR(1024),
    image    VARCHAR(1024),
    email    VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS user_followings
(
    follower_id BIGINT NOT NULL,
    followee_id BIGINT NOT NULL,
    PRIMARY KEY (follower_id, followee_id),
    CONSTRAINT fk_follower FOREIGN KEY (follower_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_followee FOREIGN KEY (followee_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS articles
(
    id          BIGSERIAL PRIMARY KEY,
    author_id   BIGINT       NOT NULL,
    title       VARCHAR(255) NOT NULL,
    slug        VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    body        VARCHAR      NOT NULL,
    created_at  TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_author FOREIGN KEY (author_id) REFERENCES users (id),
    CONSTRAINT unique_author_slug UNIQUE (author_id, slug)
);

CREATE TABLE IF NOT EXISTS tags
(
    id    BIGSERIAL PRIMARY KEY,
    value VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS articles_tags
(
    article_id BIGINT NOT NULL,
    tag_id BIGINT     NOT NULL,
    PRIMARY KEY (article_id, tag_id),
    CONSTRAINT fk_article FOREIGN KEY (article_id) REFERENCES articles (id) ON DELETE CASCADE,
    CONSTRAINT fk_tag FOREIGN KEY (tag_id) REFERENCES tags (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS article_favorites
(
    article_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    PRIMARY KEY (article_id, user_id),
    CONSTRAINT fk_article_favorited FOREIGN KEY (article_id) REFERENCES articles (id) ON DELETE CASCADE,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS comments
(
    id          BIGSERIAL PRIMARY KEY,
    author_id   BIGINT       NOT NULL,
    article_id  BIGINT       NOT NULL,
    body        VARCHAR      NOT NULL,
    created_at  TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_comment_author FOREIGN KEY (author_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_comment_article FOREIGN KEY (article_id) REFERENCES articles (id) ON DELETE CASCADE
);

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/main/resources/META-INF/additional-spring-configuration-metadata.json
{
  "properties": [
    {
      "name": "security.allowedOrigins",
      "type": "java.util.List<java.lang.String>",
      "description": "Allowed Origins for CORS configuration."
  }
] }
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/IntegrationTest.java
package io.github.raeperd.realworld;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import static io.github.raeperd.realworld.IntegrationTestUtils.*;
import static java.lang.String.format;
import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;
import static org.springframework.http.HttpHeaders.AUTHORIZATION;
import static org.springframework.http.MediaType.APPLICATION_JSON;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/*

 Method name in this class follows /doc/Conduit.postman_collection.json

 */

@TestInstance(PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@AutoConfigureMockMvc
@SpringBootTest
class IntegrationTest {

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;

    private String token;
    private int commentId;

    @Order(1)
    @Test
    void auth_register() throws Exception {
        mockMvc.perform(post("/users")
                .contentType(APPLICATION_JSON)
                .content(format("{\"user\":{\"email\":\"%s\", \"password\":\"%s\", \"username\":\"%s\"}}", EMAIL, PASSWORD, USERNAME)))
                .andExpect(status().isOk())
                .andExpect(validUserModel());
    }

    @Order(2)
    @Test
    void auth_login() throws Exception {
        mockMvc.perform(post("/users/login")
                .contentType(APPLICATION_JSON)
                .content(format("{\"user\":{\"email\":\"%s\", \"password\":\"%s\"}}", EMAIL, PASSWORD)))
                .andExpect(status().isOk())
                .andExpect(validUserModel());
    }

    @Order(3)
    @Test
    void auth_login_and_remember_token() throws Exception{
        final var contentAsString = mockMvc.perform(post("/users/login")
                .contentType(APPLICATION_JSON)
                .content(format("{\"user\":{\"email\":\"%s\", \"password\":\"%s\"}}", EMAIL, PASSWORD)))
                .andExpect(status().isOk())
                .andExpect(validUserModel())
                .andReturn().getResponse().getContentAsString();

        token = objectMapper.readTree(contentAsString).get("user").get("token").textValue();
    }

    @Order(4)
    @Test
    void auth_current_user() throws Exception {
        mockMvc.perform(get("/user")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validUserModel());
    }

    @Order(5)
    @Test
    void auth_update_user() throws Exception {
        mockMvc.perform(put("/user")
                .header(AUTHORIZATION, "Token " + token)
                .contentType(APPLICATION_JSON)
                .content(format("{\"user\":{\"email\":\"%s\"}}", EMAIL)))
                .andExpect(status().isOk())
                .andExpect(validUserModel());
    }

    @Order(6)
    @Test
    void profiles_register_celeb() throws Exception {
        mockMvc.perform(post("/users")
                .contentType(APPLICATION_JSON)
                .content(format("{\"user\":{\"email\":\"%s\", \"password\":\"%s\", \"username\":\"%s\"}}", CELEB_EMAIL, PASSWORD, CELEB_USERNAME)))
                .andExpect(status().isOk())
                .andExpect(validUserModel());
    }

    @Order(7)
    @Test
    void profiles_profile() throws Exception {
        mockMvc.perform(get("/profiles/{celeb_username}", CELEB_USERNAME)
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validProfileModel());

        mockMvc.perform(get("/profiles/{celeb_username}", CELEB_USERNAME))
                .andExpect(status().isOk())
                .andExpect(validProfileModel());
    }

    @Order(8)
    @Test
    void follow_profile() throws Exception {
        mockMvc.perform(post("/profiles/{celeb_username}/follow", CELEB_USERNAME)
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validProfileModel())
                .andExpect(jsonPath("profile.following", is(true)));
    }

    @Order(9)
    @Test
    void unfollow_profile() throws Exception {
        mockMvc.perform(delete("/profiles/{celeb_username}/follow", CELEB_USERNAME)
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validProfileModel())
                .andExpect(jsonPath("profile.following", is(false)));
    }

    @Order(10)
    @Test
    void create_article() throws Exception {
        mockMvc.perform(post("/articles")
                .header(AUTHORIZATION, "Token " + token)
                .contentType(APPLICATION_JSON)
                .content("{\n" +
                        "    \"article\": {\n" +
                        "        \"title\": \"How to train your dragon\",\n" +
                        "        \"description\": \"Ever wonder how?\",\n" +
                        "        \"body\": \"Very carefully.\",\n" +
                        "        \"tagList\": [\n" +
                        "            \"dragons\",\n" +
                        "            \"training\"\n" +
                        "        ]\n" +
                        "    }\n" +
                        "}"))
                .andExpect(status().isOk())
                .andExpect(validSingleArticleModel());
    }

    @Order(11)
    @Test
    void get_all_articles() throws Exception {
        mockMvc.perform(get("/articles?limit=20&offset=0")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validMultipleArticleModel());
    }

    @Order(11)
    @Test
    void get_all_articles_without_auth() throws Exception {
        mockMvc.perform(get("/articles?limit=20&offset=0"))
                .andExpect(status().isOk())
                .andExpect(validMultipleArticleModel());
    }

    @Order(11)
    @Test
    void get_all_articles_with_author() throws Exception {
        mockMvc.perform(get("/articles")
                .queryParam("author", USERNAME)
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validMultipleArticleModel());
    }

    @Order(11)
    @Test
    void get_all_articles_with_tag() throws Exception {
        mockMvc.perform(get("/articles")
                .queryParam("tag", "dragons")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validMultipleArticleModel());
    }

    @Order(11)
    @Test
    void get_single_article_by_slug() throws Exception {
        mockMvc.perform(get("/articles/{slug}", "how-to-train-your-dragon"))
                .andExpect(status().isOk())
                .andExpect(validSingleArticleModel());
    }

    @Order(11)
    @Test
    void put_article() throws Exception {
        mockMvc.perform(put("/articles/{slug}", "how-to-train-your-dragon")
                .header(AUTHORIZATION, "Token " + token)
                .contentType(APPLICATION_JSON)
                .content("{\"article\":{\"body\":\"With two hands\"}}"))
                .andExpect(status().isOk())
                .andExpect(validSingleArticleModel())
                .andExpect(jsonPath("article.body", is("With two hands")));
    }

    @Order(11)
    @Test
    void create_comments_for_article() throws Exception {
        final var contentAsString = mockMvc.perform(post("/articles/{slug}/comments", "how-to-train-your-dragon")
                .header(AUTHORIZATION, "Token " + token)
                .contentType(APPLICATION_JSON)
                .content("{\"comment\":{\"body\":\"Thank you so much!\"}}"))
                .andExpect(status().isOk())
                .andExpect(validSingleCommentModel())
                .andExpect(jsonPath("comment.body", is("Thank you so much!")))
                .andReturn().getResponse().getContentAsString();

        commentId = objectMapper.readTree(contentAsString).get("comment").get("id").intValue();
    }

    @Order(12)
    @Test
    void all_comments_for_article() throws Exception {
        mockMvc.perform(get("/articles/{slug}/comments", "how-to-train-your-dragon")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validMultipleCommentModel());
    }

    @Order(13)
    @Test
    void delete_comment_for_article() throws Exception {
        mockMvc.perform(delete("/articles/{slug}/comments/{id}", "how-to-train-your-dragon", commentId)
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk());
    }

    @Order(12)
    @Test
    void post_favorite_article() throws Exception {
        mockMvc.perform(post("/articles/{slug}/favorite", "how-to-train-your-dragon")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validSingleArticleModel());
    }

    @Order(13)
    @Test
    void get_articles_favorited_by_username() throws Exception {
        mockMvc.perform(get("/articles?favorited={username}", USERNAME)
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validMultipleArticleModel())
                .andExpect(jsonPath("articles[0].favorited", is(true)));
    }

    @Order(13)
    @Test
    void get_articles_favorited_by_username_not_exists() throws Exception {
        mockMvc.perform(get("/articles?favorited={username}", "jane")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(jsonPath("articles").isEmpty())
                .andExpect(jsonPath("articlesCount", is(0)));
    }

    @Order(13)
    @Test
    void get_feed() throws Exception {
        mockMvc.perform(get("/articles/feed")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validMultipleArticleModel())
                .andExpect(jsonPath("articles[0].favorited", is(true)));
    }

    @Order(14)
    @Test
    void unfavorite_article() throws Exception {
        mockMvc.perform(delete("/articles/{slug}/favorite", "how-to-train-your-dragon")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isOk())
                .andExpect(validSingleArticleModel())
                .andExpect(jsonPath("article.favorited", is(false)));
    }

    @Order(15)
    @Test
    void delete_article() throws Exception {
        mockMvc.perform(delete("/articles/{slug}", "how-to-train-your-dragon")
                .header(AUTHORIZATION, "Token " + token))
                .andExpect(status().isNoContent());
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/IntegrationTestUtils.java
package io.github.raeperd.realworld;

import org.springframework.test.web.servlet.ResultMatcher;

import java.util.regex.Pattern;

import static java.util.regex.Pattern.compile;
import static org.hamcrest.Matchers.matchesPattern;
import static org.springframework.test.web.servlet.ResultMatcher.matchAll;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

public class IntegrationTestUtils {

    private static final Pattern ISO_8601_PATTERN = compile("^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$");

    static final String EMAIL = "user@email.com";
    static final String PASSWORD = "password";
    static final String USERNAME = "username";

    static final String CELEB_EMAIL = "celeb_" + EMAIL;
    static final String CELEB_USERNAME = "celeb_" + USERNAME;

    private IntegrationTestUtils() {
    }

    public static ResultMatcher validUserModel() {
        return matchAll(
                jsonPath("user").isMap(),
                jsonPath("user.email").isString(),
                jsonPath("user.token").isString(),
                jsonPath("user.username").isString(),
                jsonPath("user.bio").isString(),
                jsonPath("user.image").isString());
    }

    public static ResultMatcher validProfileModel() {
        return validProfileModelInPath("profile");
    }

    private static ResultMatcher validProfileModelInPath(String path) {
        return matchAll(
                jsonPath(path).isMap(),
                jsonPath(path + ".username").isString(),
                jsonPath(path + ".bio").hasJsonPath(),
                jsonPath(path + ".image").hasJsonPath(),
                jsonPath(path + ".following").isBoolean());
    }

    static ResultMatcher validSingleArticleModel() {
        return matchAll(
                jsonPath("article").isMap(),
                validArticleModelInPath("article"));
    }

    static ResultMatcher validMultipleArticleModel() {
        return matchAll(
                jsonPath("articles").isArray(),
                jsonPath("articlesCount").isNumber(),
                validArticleModelInPath("articles[0]")
        );
    }

    private static ResultMatcher validArticleModelInPath(String path) {
        return matchAll(
                jsonPath(path + ".slug").isString(),
                jsonPath(path + ".title").isString(),
                jsonPath(path + ".description").isString(),
                jsonPath(path + ".body").isString(),
                jsonPath(path + ".tagList").isNotEmpty(),
                jsonPath(path + ".createdAt", matchesPattern(ISO_8601_PATTERN)),
                jsonPath(path + ".updatedAt", matchesPattern(ISO_8601_PATTERN)),
                jsonPath(path + ".favorited").isBoolean(),
                jsonPath(path + ".favoritesCount").isNumber(),
                validProfileModelInPath(path + ".author"));
    }

    static ResultMatcher validSingleCommentModel() {
        return matchAll(
                jsonPath("comment").isMap(),
                validCommentModelInPath("comment"));
    }

    static ResultMatcher validMultipleCommentModel() {
        return matchAll(
                jsonPath("comments").isArray(),
                validCommentModelInPath("comments[0]"));
    }

    private static ResultMatcher validCommentModelInPath(String path) {
        return matchAll(
                jsonPath(path + ".id").isNumber(),
                jsonPath(path + ".body").isString(),
                jsonPath(path + ".createdAt", matchesPattern(ISO_8601_PATTERN)),
                jsonPath(path + ".updatedAt", matchesPattern(ISO_8601_PATTERN)),
                validProfileModelInPath(path + ".author"));
    }
}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/article/ArticleRestControllerTest.java
package io.github.raeperd.realworld.application.article;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.raeperd.realworld.application.security.WithMockJWTUser;
import io.github.raeperd.realworld.domain.article.ArticleService;
import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import java.util.stream.Stream;

import static java.util.Collections.emptySet;
import static org.springframework.http.MediaType.APPLICATION_JSON;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WithMockJWTUser
@WebMvcTest(ArticleRestController.class)
class ArticleRestControllerTest {

    @MockBean
    private ArticleService articleService;
    @MockBean
    private JWTDeserializer jwtDeserializer;

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;


    @MethodSource("provideInvalidPostDTO")
    @ParameterizedTest
    void when_post_article_with_invalid_body_expect_status_badRequest(ArticlePostRequestDTO invalidDTO) throws Exception {
        mockMvc.perform(post("/articles")
                .contentType(APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidDTO)))
                .andExpect(status().isBadRequest());
    }

    private static Stream<Arguments> provideInvalidPostDTO() {
        return Stream.of(
                Arguments.of(new ArticlePostRequestDTO(null, "description", "body", emptySet())),
                Arguments.of(new ArticlePostRequestDTO("title", null, "body", emptySet())),
                Arguments.of(new ArticlePostRequestDTO("title", "description", null, emptySet())),
                Arguments.of(new ArticlePostRequestDTO("title", "description", "body", null)),
                Arguments.of(new ArticlePostRequestDTO(" ", "description", "body", emptySet())),
                Arguments.of(new ArticlePostRequestDTO("title", " ", "body", emptySet())),
                Arguments.of(new ArticlePostRequestDTO("title", "description", " ", emptySet())));
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/article/comment/CommentRestControllerTest.java
package io.github.raeperd.realworld.application.article.comment;

import io.github.raeperd.realworld.application.security.WithMockJWTUser;
import io.github.raeperd.realworld.domain.article.comment.CommentService;
import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static java.util.Collections.emptySet;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.then;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(CommentRestController.class)
class CommentRestControllerTest {

    @MockBean
    private CommentService commentService;
    @MockBean
    private JWTDeserializer jwtDeserializer;

    @Autowired
    private MockMvc mockMvc;

    @Test
    void when_get_comments_without_auth_expect_called_commentService() throws Exception {
        final var ARTICLE_SLUG = "article-slug";
        when(commentService.getComments(ARTICLE_SLUG)).thenReturn(emptySet());

        mockMvc.perform(get("/articles/" + ARTICLE_SLUG + "/comments"))
                .andExpect(status().isOk());

        then(commentService).should(times(1)).getComments(ARTICLE_SLUG);
    }

    @WithMockJWTUser
    @Test
    void when_get_comments_with_auth_expect_called_commentService() throws Exception {
        final var ARTICLE_SLUG = "article-slug";
        when(commentService.getComments(anyLong(), eq(ARTICLE_SLUG))).thenReturn(emptySet());

        mockMvc.perform(get("/articles/" + ARTICLE_SLUG + "/comments"))
                .andExpect(status().isOk());

        then(commentService).should(times(1)).getComments(anyLong(), eq(ARTICLE_SLUG));
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/security/WithMockJWTUser.java
package io.github.raeperd.realworld.application.security;

import org.springframework.security.test.context.support.WithSecurityContext;

import java.lang.annotation.Retention;

import static java.lang.annotation.RetentionPolicy.RUNTIME;

@Retention(RUNTIME)
@WithSecurityContext(factory = WithMockJWTUserContextFactory.class)
public @interface WithMockJWTUser {

    long userId() default 0L;

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/security/WithMockJWTUserContextFactory.java
package io.github.raeperd.realworld.application.security;

import io.github.raeperd.realworld.infrastructure.jwt.UserJWTPayload;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.test.context.support.WithSecurityContextFactory;

import static java.util.Collections.singleton;
import static org.mockito.Mockito.mock;

class WithMockJWTUserContextFactory implements WithSecurityContextFactory<WithMockJWTUser> {

    @Override
    public SecurityContext createSecurityContext(WithMockJWTUser annotation) {
        final var context = SecurityContextHolder.createEmptyContext();
        context.setAuthentication(new MockJWTAuthentication(mock(UserJWTPayload.class)));
        return context;
    }

    private static class MockJWTAuthentication extends AbstractAuthenticationToken {

        private final UserJWTPayload jwtPayload;

        private MockJWTAuthentication(UserJWTPayload jwtPayload) {
            super(singleton(new SimpleGrantedAuthority("USER")));
            super.setAuthenticated(true);
            this.jwtPayload = jwtPayload;
        }

        @Override
        public Object getPrincipal() {
            return jwtPayload;
        }

        @Override
        public Object getCredentials() {
            return "MOCKED CREDENTIAL";
        }
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/tag/TagRestControllerTest.java
package io.github.raeperd.realworld.application.tag;

import io.github.raeperd.realworld.application.security.WithMockJWTUser;
import io.github.raeperd.realworld.domain.article.tag.Tag;
import io.github.raeperd.realworld.domain.article.tag.TagService;
import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import io.github.raeperd.realworld.domain.jwt.JWTSerializer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Set;

import static org.hamcrest.Matchers.contains;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

@ExtendWith(MockitoExtension.class)
@WebMvcTest(TagRestController.class)
class TagRestControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private TagService tagService;
    @MockBean
    private JWTSerializer jwtSerializer;
    @MockBean
    private JWTDeserializer jwtDeserializer;

    @WithMockJWTUser
    @Test
    void when_get_tags_expect_valid_tagsModel(@Mock Tag tag) throws Exception {
        when(tag.toString()).thenReturn("some-tag");
        when(tagService.findAll()).thenReturn(Set.of(tag));

        mockMvc.perform(get("/tags"))
                .andExpect(jsonPath("tags").isArray())
                .andExpect(jsonPath("tags", contains("some-tag")));
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/user/ProfileRestControllerTest.java
package io.github.raeperd.realworld.application.user;

import io.github.raeperd.realworld.IntegrationTestUtils;
import io.github.raeperd.realworld.application.security.WithMockJWTUser;
import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import io.github.raeperd.realworld.domain.user.*;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import java.util.NoSuchElementException;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(ProfileRestController.class)
class ProfileRestControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private ProfileService profileService;
    @MockBean
    private JWTDeserializer jwtDeserializer;

    @Test
    void when_get_profile_with_not_exists_username_expect_notFound_status() throws Exception {
        when(profileService.viewProfile(any(UserName.class))).thenThrow(NoSuchElementException.class);

        mockMvc.perform(get("/profiles/{username}", "user-name-not-exists"))
                .andExpect(status().isNotFound());
    }

    @Test
    void when_get_profile_with_username_expect_valid_ProfileModel() throws Exception {
        when(profileService.viewProfile(new UserName("sample-user-name"))).thenReturn(sampleProfile());

        mockMvc.perform(get("/profiles/{username}", "sample-user-name"))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validProfileModel());
    }

    @WithMockJWTUser
    @Test
    void when_get_profile_with_auth_and_not_exists_username_expect_notFound_status() throws Exception {
        when(profileService.viewProfile(anyLong(), any(UserName.class))).thenThrow(NoSuchElementException.class);

        mockMvc.perform(get("/profiles/{username}", "user-name-not-exists"))
                .andExpect(status().isNotFound());
    }

    @WithMockJWTUser
    @Test
    void when_get_profile_with_username_and_auth_expect_valid_ProfileModel() throws Exception {
        when(profileService.viewProfile(anyLong(), eq(new UserName("sample-username")))).thenReturn(sampleProfile());

        mockMvc.perform(get("/profiles/{username}", "sample-username"))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validProfileModel());
    }

    @Test
    void when_follow_user_without_authentication_expect_status_forbidden() throws Exception {
        mockMvc.perform(post("/profiles/{username}/follow", "sample-username"))
                .andExpect(status().isForbidden());
    }

    @WithMockJWTUser
    @Test
    void when_follow_user_expect_profileService_followAndViewProfile_called() throws Exception {
        when(profileService.followAndViewProfile(anyLong(), eq(new UserName("sample-username")))).thenReturn(sampleProfile());

        mockMvc.perform(post("/profiles/{username}/follow", "sample-username"))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validProfileModel());
    }

    private Profile sampleProfile() {
        return ProfileTestUtils.profileOf(new UserName("sample-user-name"),
                "sample-bio",
                new Image("sample-image"),
                false);
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/application/user/UserRestControllerTest.java
package io.github.raeperd.realworld.application.user;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.raeperd.realworld.IntegrationTestUtils;
import io.github.raeperd.realworld.application.security.WithMockJWTUser;
import io.github.raeperd.realworld.domain.jwt.JWTDeserializer;
import io.github.raeperd.realworld.domain.jwt.JWTSerializer;
import io.github.raeperd.realworld.domain.user.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import java.util.stream.Stream;

import static io.github.raeperd.realworld.domain.user.UserTestUtils.userWithEmailAndName;
import static java.util.Optional.of;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;
import static org.springframework.http.HttpHeaders.AUTHORIZATION;
import static org.springframework.http.MediaType.APPLICATION_JSON;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(UserRestController.class)
class UserRestControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private UserService userService;
    @MockBean
    private JWTSerializer jwtSerializer;
    @MockBean
    private JWTDeserializer jwtDeserializer;

    @BeforeEach
    void mockJwtSerializer() {
        when(jwtSerializer.jwtFromUser(any())).thenReturn("MOCKED_TOKEN");
    }

    @MethodSource("provideInvalidPostDTO")
    @ParameterizedTest
    void when_post_user_with_invalid_body_expect_status_badRequest(UserPostRequestDTO dto) throws Exception {
        mockMvc.perform(post("/users")
                .contentType(APPLICATION_JSON)
                .content(objectMapper.writeValueAsBytes(dto)))
                .andExpect(status().isBadRequest());
    }

    @Test
    void when_post_user_expect_valid_userModel() throws Exception {
        when(userService.signUp(any(UserSignUpRequest.class))).thenReturn(sampleUser());

        mockMvc.perform(post("/users")
                .contentType(APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(samplePostDTO())))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validUserModel());
    }

    @Test
    void when_login_user_expect_valid_userModel() throws Exception {
        when(userService.login(new Email("user@email.com"), "password")).thenReturn(of(sampleUser()));

        mockMvc.perform(post("/users/login")
                .contentType(APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(sampleLoginDTO())))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validUserModel());
    }

    @Test
    void when_login_with_invalid_authorization_header_expect_ignore_token() throws Exception {
        when(userService.login(new Email("user@email.com"), "password")).thenReturn(of(sampleUser()));

        mockMvc.perform(post("/users/login")
                        .header(AUTHORIZATION, "Token token-invalid")
                        .contentType(APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(sampleLoginDTO())))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validUserModel());
    }

    @WithMockJWTUser
    @Test
    void when_get_user_expect_valid_userModel() throws Exception {
        when(userService.findById(anyLong())).thenReturn(of(sampleUser()));

        mockMvc.perform(get("/user")
                .accept(APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validUserModel());
    }

    @WithMockJWTUser
    @Test
    void when_put_user_expect_status_ok() throws Exception {
        when(userService.updateUser(anyLong(), any(UserUpdateRequest.class))).thenReturn(sampleUser());

        mockMvc.perform(put("/user")
                .contentType(APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(samplePutDTO())))
                .andExpect(status().isOk())
                .andExpect(IntegrationTestUtils.validUserModel());
    }

    private static Stream<Arguments> provideInvalidPostDTO() {
        return Stream.of(
                Arguments.of(new UserPostRequestDTO("not-email", "username", "password")),
                Arguments.of(new UserPostRequestDTO("user@email.com", "", "password")),
                Arguments.of(new UserPostRequestDTO("user@email.com", "username", ""))
        );
    }

    private User sampleUser() {
        return userWithEmailAndName("user@email.com", "username");
    }

    private UserLoginRequestDTO sampleLoginDTO() {
        return new UserLoginRequestDTO("user@email.com", "password");
    }

    private UserPostRequestDTO samplePostDTO() {
        return new UserPostRequestDTO("user@email.com", "username", "password");
    }

    private UserPutRequestDTO samplePutDTO() {
        return new UserPutRequestDTO("new-user@email.com", null, null, null, null);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleContentsTest.java
package io.github.raeperd.realworld.domain.article;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static io.github.raeperd.realworld.domain.article.ArticleUpdateRequest.builder;
import static java.util.Collections.emptySet;
import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
class ArticleContentsTest {


    @Test
    void when_updateArticle_with_no_update_field_request_expect_not_changed() {
        final var articleContents = sampleArticleContents();
        final var emptyUpdateRequest = builder().build();

        articleContents.updateArticleContentsIfPresent(emptyUpdateRequest);

        assertThatEqualArticleContents(articleContents, sampleArticleContents());
    }

    @Test
    void when_updateArticle_with_all_field_expect_changed(@Mock ArticleTitle titleToUpdate) {
        final var articleContents = sampleArticleContents();
        final var fullUpdateRequest = builder().titleToUpdate(titleToUpdate)
                .descriptionToUpdate("descriptionToUpdate")
                .bodyToUpdate("bodyToUpdate")
                .build();

        articleContents.updateArticleContentsIfPresent(fullUpdateRequest);

        assertThat(articleContents.getTitle()).isEqualTo(titleToUpdate);
        assertThat(articleContents.getDescription()).isEqualTo("descriptionToUpdate");
        assertThat(articleContents.getBody()).isEqualTo("bodyToUpdate");
    }

    private ArticleContents sampleArticleContents() {
        return new ArticleContents("description", ArticleTitle.of("title"), "body", emptySet());
    }

    private void assertThatEqualArticleContents(ArticleContents left, ArticleContents right) {
        assertThat(equalsArticleContents(left, right)).isTrue();
    }

    private boolean equalsArticleContents(ArticleContents left, ArticleContents right) {
        if (!left.getTitle().equals(right.getTitle())) {
            return false;
        }
        if (!left.getDescription().equals(right.getDescription())) {
            return false;
        }
        if (!left.getBody().equals(right.getBody())) {
            return false;
        }
        return left.getTags().equals(right.getTags());
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleRepositoryTest.java
package io.github.raeperd.realworld.domain.article;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

import java.util.Collections;
import java.util.stream.Stream;

import static io.github.raeperd.realworld.domain.user.UserTestUtils.databaseUser;
import static java.util.Collections.emptySet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

@EnableJpaAuditing
@DataJpaTest
class ArticleRepositoryTest {

    @Autowired
    private ArticleRepository repository;

    @MethodSource("provideInvalidArticle")
    @ParameterizedTest
    void when_save_invalid_article_expect_DataIntegrityViolationException(Article invalidArticle) {
        assertThatThrownBy(() ->
                repository.save(invalidArticle)
        ).isInstanceOf(DataIntegrityViolationException.class);
    }

    @Test
    void when_save_article_expect_auditing_works() {
        var contentsToSave = new ArticleContents("description", ArticleTitle.of("some title"), "body", emptySet());
        var articleToSave = databaseUser().writeArticle(contentsToSave);

        var articleSaved = repository.save(articleToSave);

        assertThat(articleSaved).hasNoNullFieldsOrProperties();
    }

    private static Stream<Arguments> provideInvalidArticle() {
        return provideInvalidArticleContents()
                .map(invalidArticleContents -> new Article(databaseUser(), invalidArticleContents))
                .map(Arguments::of);
    }

    private static Stream<ArticleContents> provideInvalidArticleContents() {
        return Stream.of(
                new ArticleContents(null, null, null, emptySet()),
                new ArticleContents("description", null,  null, emptySet()),
                new ArticleContents(null, ArticleTitle.of("title"),  null, emptySet()),
                new ArticleContents(null, null,  "body", emptySet())
        );
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleServiceTest.java
package io.github.raeperd.realworld.domain.article;

import io.github.raeperd.realworld.domain.article.tag.Tag;
import io.github.raeperd.realworld.domain.article.tag.TagService;
import io.github.raeperd.realworld.domain.user.User;
import io.github.raeperd.realworld.domain.user.UserFindService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.NoSuchElementException;
import java.util.Set;

import static java.util.Optional.empty;
import static java.util.Optional.of;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.then;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ArticleServiceTest {

    private ArticleService articleService;

    @Mock
    private UserFindService userFindService;
    @Mock
    private TagService tagService;
    @Mock
    private ArticleRepository repository;

    @Spy
    private User author;

    @BeforeEach
    private void initializeService() {
        articleService = new ArticleService(userFindService, tagService, repository);
    }

    @Test
    void when_author_not_found_expect_NoSuchElementException(@Mock ArticleContents contents) {
        when(userFindService.findById(anyLong())).thenReturn(empty());

        assertThatThrownBy(() ->
                articleService.createNewArticle(1L, contents)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void given_author_createNewArticle_then_tagService_reloadTags(@Mock ArticleContents contents, @Mock Set<Tag> tags) {
        given(contents.getTags()).willReturn(tags);
        given(userFindService.findById(1L)).willReturn(of(author));
        given(repository.save(any())).willReturn(mock(Article.class));

        articleService.createNewArticle(1L, contents);

        then(tagService).should(times(1)).reloadAllTagsIfAlreadyPresent(tags);
    }

    @Test
    void given_author_createNewArticle_then_author_writeArticle_contents(@Mock ArticleContents contents) {
        given(userFindService.findById(1L)).willReturn(of(author));
        given(repository.save(any())).willReturn(mock(Article.class));

        articleService.createNewArticle(1L, contents);

        then(author).should(times(1)).writeArticle(contents);
    }

    @Test
    void given_author_writeArticle_then_userRepository_save(@Mock ArticleContents contents, @Mock Article article) {
        given(userFindService.findById(1L)).willReturn(of(author));
        given(author.writeArticle(contents)).willReturn(article);
        given(repository.save(article)).willReturn(article);

        articleService.createNewArticle(1L, contents);

        then(repository).should(times(1)).save(article);
    }

    @Test
    void when_delete_article_notExists_expect_NoSuchElementException() {
        when(userFindService.findById(1L)).thenReturn(empty());

        assertThatThrownBy(() ->
                articleService.deleteArticleBySlug(1L, "not-exists")
        ).isInstanceOf(NoSuchElementException.class);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleTest.java
package io.github.raeperd.realworld.domain.article;

import io.github.raeperd.realworld.domain.user.User;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class ArticleTest {

    @Mock
    private ArticleContents contents;
    @Mock
    private ArticleTitle title;
    @Mock
    private User author;

    @Test
    void when_article_has_different_author_expect_not_equal_and_hashCode(@Mock User otherUser) {
        when(contents.getTitle()).thenReturn(title);

        var article = new Article(author, contents);
        var articleFromOtherUser = new Article(otherUser, contents);

        assertThat(articleFromOtherUser)
                .isNotEqualTo(article)
                .extracting(Article::hashCode)
                .isNotEqualTo(article.hashCode());
    }

    @Test
    void when_article_has_different_contents_expect_not_equal_and_hashCode(@Mock ArticleContents otherContents, @Mock ArticleTitle otherTitle) {
        when(contents.getTitle()).thenReturn(title);
        when(otherContents.getTitle()).thenReturn(otherTitle);

        var article = new Article(author, contents);
        var articleWithOtherContents = new Article(author, otherContents);

        assertThat(articleWithOtherContents)
                .isNotEqualTo(article)
                .extracting(Article::hashCode)
                .isNotEqualTo(article.hashCode());
    }

    @Test
    void when_article_has_same_author_and_title_expect_equal_and_hashCode() {
        when(contents.getTitle()).thenReturn(title);

        var article = new Article(author, contents);
        var articleWithSameAuthorSlug = new Article(author, contents);

        assertThat(articleWithSameAuthorSlug)
                .isEqualTo(article)
                .hasSameHashCodeAs(article);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleTitleTest.java
package io.github.raeperd.realworld.domain.article;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class ArticleTitleTest {

    @Test
    void when_create_with_title_expect_valid_slug() {
        var title = "\n\n Some?\t\n Title  .";
        var slugExpected = "some-title";

        var articleTitle = ArticleTitle.of(title);

        assertThat(articleTitle.getSlug()).isEqualTo(slugExpected);
    }

    @Test
    void when_articleTitle_has_different_slug_expect_not_equal_and_hashCode() {
        var articleTitle = ArticleTitle.of("some title");
        var articleTitleWithDifferentSlug = ArticleTitle.of("other Title");

        assertThat(articleTitleWithDifferentSlug)
                .isNotEqualTo(articleTitle)
                .extracting(ArticleTitle::hashCode)
                .isNotEqualTo(articleTitle.hashCode());
    }

    @Test
    void when_articleTitle_has_same_slug_expect_equal_and_hashCode() {
        var articleTitle = ArticleTitle.of("some title");
        var articleTitleWithSameSlug = ArticleTitle.of("Some Title");

        assertThat(articleTitleWithSameSlug)
                .isEqualTo(articleTitle)
                .hasSameHashCodeAs(articleTitle);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/ArticleUpdateRequestTest.java
package io.github.raeperd.realworld.domain.article;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static io.github.raeperd.realworld.domain.article.ArticleUpdateRequest.builder;
import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
class ArticleUpdateRequestTest {

    @Test
    void when_articleUpdateRequest_created_without_field_expect_get_return_empty() {
        final var requestWithoutFields = builder().build();

        assertThat(requestWithoutFields.getTitleToUpdate()).isEmpty();
        assertThat(requestWithoutFields.getDescriptionToUpdate()).isEmpty();
        assertThat(requestWithoutFields.getBodyToUpdate()).isEmpty();
    }

    @Test
    void when_articleUpdateRequest_created_with_all_fields_expect_all_fields(@Mock ArticleTitle title) {
        final var requestWithAllFields = builder()
                .titleToUpdate(title)
                .descriptionToUpdate("descriptionToUpdate")
                .bodyToUpdate("bodyToUpdate")
                .build();

        assertThat(requestWithAllFields).hasNoNullFieldsOrProperties();
        assertThat(requestWithAllFields.getTitleToUpdate()).contains(title);
        assertThat(requestWithAllFields.getDescriptionToUpdate()).contains("descriptionToUpdate");
        assertThat(requestWithAllFields.getBodyToUpdate()).contains("bodyToUpdate");
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/comment/CommentServiceTest.java
package io.github.raeperd.realworld.domain.article.comment;

import io.github.raeperd.realworld.domain.article.Article;
import io.github.raeperd.realworld.domain.article.ArticleFindService;
import io.github.raeperd.realworld.domain.user.User;
import io.github.raeperd.realworld.domain.user.UserFindService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.NoSuchElementException;
import java.util.Set;

import static java.util.Optional.empty;
import static java.util.Optional.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.then;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class CommentServiceTest {

    private CommentService commentService;

    @Mock
    private UserFindService userFindService;
    @Mock
    private ArticleFindService articleFindService;

    @BeforeEach
    private void initializeService() {
        commentService = new CommentService(userFindService, articleFindService);
    }

    @Test
    void when_articleFindService_return_empty_expect_NoSuchElementException() {
        when(articleFindService.getArticleBySlug("slug")).thenReturn(empty());

        assertThatThrownBy(() ->
                commentService.deleteCommentById(1L, "slug", 2L)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_articleFindService_return_empty_expect_NoSuchElementException_without_userId() {
        when(articleFindService.getArticleBySlug("slug")).thenReturn(empty());

        assertThatThrownBy(() -> commentService.getComments("slug")).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void given_articleFindService_return_article_then_return_comments_of_article(@Mock Article article, @Mock Comment comment) {
        given(articleFindService.getArticleBySlug("slug")).willReturn(of(article));
        given(article.getComments()).willReturn(Set.of(comment));

        assertThat(commentService.getComments("slug")).contains(comment);

        then(article).should(times(1)).getComments();
    }

    @Test
    void when_userFindService_return_empty_expect_NoSuchElementException(@Mock Article article) {
        when(articleFindService.getArticleBySlug("slug")).thenReturn(of(article));
        when(userFindService.findById(1L)).thenReturn(empty());

        assertThatThrownBy(() ->
                commentService.deleteCommentById(1L, "slug", 2L)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void given_user_and_article_deleteCommentById_then_user_deleteArticleComment(@Mock User user, @Mock Article article) {
        given(userFindService.findById(1L)).willReturn(of(user));
        given(articleFindService.getArticleBySlug("slug")).willReturn(of(article));

        commentService.deleteCommentById(1L, "slug", 2L);

        then(user).should(times(1)).deleteArticleComment(article, 2L);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/comment/CommentTest.java
package io.github.raeperd.realworld.domain.article.comment;

import io.github.raeperd.realworld.domain.article.Article;
import io.github.raeperd.realworld.domain.user.User;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.util.Pair;
import org.springframework.test.util.ReflectionTestUtils;

import java.time.Instant;
import java.util.stream.Stream;

import static java.time.Instant.now;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
class CommentTest {

    @MethodSource("provideDifferentComments")
    @ParameterizedTest
    void when_compare_different_comment_expect_not_equal(Comment commentLeft, Comment commentRight) {
        assertThat(commentLeft).isNotEqualTo(commentRight)
                .extracting(Comment::hashCode)
                .isNotEqualTo(commentRight.hashCode());
    }

    @Test
    void when_compare_same_comment_expect_equal_and_hashCode(@Mock Article article, @Mock User author) {
        var now = Instant.now();
        var commentLeft = commentWithCreatedAt(article, author, "body", now);
        var commentRight = commentWithCreatedAt(article, author, "body", now);

        assertThat(commentLeft)
                .isEqualTo(commentRight)
                .hasSameHashCodeAs(commentRight);
    }

    private static Stream<Arguments> provideDifferentComments() {
        var articleSample = mock(Article.class);
        var authorSample = mock(User.class);
        var bodySample = "bodySample";
        var createAtSample = now();
        var commentSample = commentWithCreatedAt(articleSample, authorSample, bodySample, createAtSample);
        return Stream.of(
                Pair.of(commentSample, commentWithCreatedAt(mock(Article.class), authorSample, bodySample, createAtSample)),
                Pair.of(commentSample, commentWithCreatedAt(articleSample, mock(User.class), bodySample, createAtSample)),
                Pair.of(commentSample, commentWithCreatedAt(articleSample, authorSample, "different body", createAtSample)),
                Pair.of(commentSample, commentWithCreatedAt(articleSample, authorSample, bodySample, now().plusSeconds(10))))
                .map(pair -> Arguments.of(pair.getFirst(), pair.getSecond()));
    }

    private static Comment commentWithCreatedAt(Article article, User author, String body, Instant createdAt) {
        var comment = new Comment(article, author, body);
        ReflectionTestUtils.setField(comment, "createdAt", createdAt);
        return comment;
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/tag/TagServiceTest.java
package io.github.raeperd.realworld.domain.article.tag;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static java.lang.String.valueOf;
import static java.util.Collections.singleton;
import static java.util.Optional.empty;
import static java.util.Optional.of;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.BDDMockito.then;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class TagServiceTest {

    private TagService tagService;
    @Mock
    private TagRepository tagRepository;

    @BeforeEach
    void initializeService() {
        this.tagService = new TagService(tagRepository);
    }

    @Test
    void when_findAll_expect_repository_findAll_called() {
        tagService.findAll();

        then(tagRepository).should(times(1)).findAll();
    }

    @Test
    void given_tags_reloadAllTagsIfAlreadyPresent_then_findFirstByValue() {
        tagService.reloadAllTagsIfAlreadyPresent(singleton(new Tag("tag-to-search")));

        then(tagRepository).should(times(1)).findFirstByValue("tag-to-search");
    }

    @Test
    void when_repository_return_empty_expect_return_same_tags_expect_reloadAllTagsIfAlreadyPresent_return_same() {
        final var tagNotExists = new Tag("tag-not-exits");
        when(tagRepository.findFirstByValue(valueOf(tagNotExists))).thenReturn(empty());

        final var tagsReloaded = tagService.reloadAllTagsIfAlreadyPresent(singleton(tagNotExists));

        assertThat(tagsReloaded).contains(tagNotExists);
    }

    @Test
    void when_repository_find_already_exists_tags_expect_reloadAllTagsIfAlreadyPresent_return_from_repository(@Mock Tag tagAlreadyExists) {
        when(tagRepository.findFirstByValue("tag-already-exists")).thenReturn(of(tagAlreadyExists));

        final var tagsReloaded = tagService.reloadAllTagsIfAlreadyPresent(singleton(new Tag("tag-already-exists")));

        assertThat(tagsReloaded).contains(tagAlreadyExists);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/article/tag/TagTest.java
package io.github.raeperd.realworld.domain.article.tag;

import org.junit.jupiter.api.Test;
import org.springframework.test.util.ReflectionTestUtils;

import static org.assertj.core.api.Assertions.assertThat;

class TagTest {

    @Test
    void tag_has_no_args_protected_constructor() {
        class ChildTag extends Tag {
            ChildTag() {
                super();
            }
        }
        assertThat(new ChildTag()).isInstanceOf(Tag.class);
    }

    @Test
    void when_tag_toString_expect_return_value() {
        final var tag = new Tag();
        ReflectionTestUtils.setField(tag, "value", "some-tag");

        assertThat(tag).hasToString("some-tag");
    }

    @Test
    void when_tag_has_different_value_expect_not_equal_and_hashCode() {
        final var tag = new Tag("some-vale");
        final var tagWithDifferentValue = new Tag("some-different-value");

        assertThat(tag)
                .isNotEqualTo(tagWithDifferentValue)
                .extracting(Tag::hashCode).isNotEqualTo(tagWithDifferentValue.hashCode());
    }

    @Test
    void when_tag_has_same_value_expect_equal() {
        final var tag = new Tag("some-value");
        final var tagWithSameValue = new Tag("some-value");

        assertThat(tag)
                .isEqualTo(tagWithSameValue)
                .hasSameHashCodeAs(tagWithSameValue);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/EmailTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class EmailTest {

    @Test
    void when_same_address_expect_equal_and_hashCode() {
        final var email = new Email("user@email.com");
        final var sameEmail = new Email("user@email.com");

        assertThat(email)
                .isEqualTo(sameEmail)
                .hasSameHashCodeAs(sameEmail);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/ImageTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class ImageTest {

    @Test
    void when_image_created_expect_toString_with_address() {
        final var image = new Image("some-image-address");

        assertThat(image).hasToString("some-image-address");
    }

    @Test
    void when_image_has_same_address_expect_equal_and_hashcode() {
        final var image = new Image("address");
        final var imageWithSameAddress = new Image("address");

        assertThat(imageWithSameAddress)
                .isEqualTo(image)
                .hasSameHashCodeAs(image);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/PasswordTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;

import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.then;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
class PasswordTest {

    @Mock
    private PasswordEncoder passwordEncoder;

    @Test
    void when_create_password_expect_passwordEncoder_encode() {
        Password.of("raw-password", passwordEncoder);

        verify(passwordEncoder, times(1)).encode("raw-password");
    }

    @Test
    void when_matches_password_expect_passwordEncoder_matches() {
        given(passwordEncoder.encode("raw-password")).willReturn("encoded-password");

        final var password = Password.of("raw-password", passwordEncoder);
        password.matchesPassword("raw-password", passwordEncoder);

        then(passwordEncoder).should(times(1)).matches("raw-password", "encoded-password");
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/ProfileServiceTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.NoSuchElementException;

import static java.util.Optional.empty;
import static java.util.Optional.of;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.then;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class ProfileServiceTest {

    private ProfileService profileService;

    @Mock
    private UserFindService userFindService;

    @BeforeEach
    private void initializeService() {
        this.profileService = new ProfileService(userFindService);
    }

    @Test
    void when_viewProfile_with_viewer_not_exists_expect_NoSuchElementException(@Mock UserName userName) {
        when(userFindService.findById(1L)).thenReturn(empty());

        assertThatThrownBy(() ->
                profileService.viewProfile(1L, userName)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_viewProfile_with_not_exists_username_expect_NoSuchElementException(@Mock User user, @Mock UserName userName) {
        when(userFindService.findById(1L)).thenReturn(of(user));
        when(userFindService.findByUsername(userName)).thenReturn(empty());

        assertThatThrownBy(() ->
                profileService.viewProfile(1L, userName)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_viewProfile_expect_viewer_view_found_user(@Mock UserName userName,
                                                                @Mock User viewer, @Mock User userToView,
                                                                @Mock Profile profile) {
        given(userFindService.findById(1L)).willReturn(of(viewer));
        given(userFindService.findByUsername(userName)).willReturn(of(userToView));
        given(viewer.viewProfile(userToView)).willReturn(profile);

        profileService.viewProfile(1L, userName);

        then(viewer).should(times(1)).viewProfile(userToView);
    }

    @Test
    void when_viewProfile_with_not_exists_username_expect_NoSuchElementException(@Mock UserName userName) {
        when(userFindService.findByUsername(userName)).thenReturn(empty());

        assertThatThrownBy(() ->
                profileService.viewProfile(userName)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_viewProfile_expect_user_getProfile(@Mock UserName userName, @Mock User user, @Mock Profile profile) {
        given(userFindService.findByUsername(userName)).willReturn(of(user));
        given(user.getProfile()).willReturn(profile);

        profileService.viewProfile(userName);

        then(user).should(times(1)).getProfile();
    }

    @Test
    void when_followAndViewProfile_with_not_exists_followeeName_expect_NoSuchElementException(@Mock UserName followeeName) {
        when(userFindService.findByUsername(followeeName)).thenReturn(empty());

        assertThatThrownBy(() ->
                profileService.followAndViewProfile(1L, followeeName)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_followAndViewProfile_with_not_exists_followerId_expect_NoSuchElementException(@Mock User followee, @Mock UserName followeeName) {
        when(userFindService.findByUsername(followeeName)).thenReturn(of(followee));
        when(userFindService.findById(anyLong())).thenReturn(empty());

        assertThatThrownBy(() ->
                profileService.followAndViewProfile(1L, followeeName)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_followAndViewProfile_expect_follower_follows_followee(
            @Mock User follower, @Mock UserName followeeName, @Mock User followee, @Mock Profile followeeProfile) {
        given(userFindService.findByUsername(followeeName)).willReturn(of(followee));
        given(userFindService.findById(anyLong())).willReturn(of(follower));
        given(follower.followUser(followee)).willReturn(follower);
        given(follower.viewProfile(followee)).willReturn(followeeProfile);

        profileService.followAndViewProfile(1L, followeeName);

        then(follower).should(times(1)).followUser(followee);
    }

    @Test
    void when_unfollowAndViewProfile_with_not_exists_followeeName_expect_NoSuchElementException(@Mock UserName followeeName) {
        when(userFindService.findByUsername(followeeName)).thenReturn(empty());

        assertThatThrownBy(() ->
                profileService.unfollowAndViewProfile(1L, followeeName)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_unfollowAndViewProfile_with_not_exists_followerId_expect_NoSuchElementException(@Mock User followee, @Mock UserName followeeName) {
        when(userFindService.findByUsername(followeeName)).thenReturn(of(followee));
        when(userFindService.findById(anyLong())).thenReturn(empty());

        assertThatThrownBy(() ->
                profileService.unfollowAndViewProfile(1L, followeeName)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_unfollowAndViewProfile_expect_follower_unfollows_followee(
            @Mock User follower, @Mock UserName followeeName, @Mock User followee, @Mock Profile followeeProfile) {
        given(userFindService.findByUsername(followeeName)).willReturn(of(followee));
        given(userFindService.findById(anyLong())).willReturn(of(follower));
        given(follower.unfollowUser(followee)).willReturn(follower);
        given(follower.viewProfile(followee)).willReturn(followeeProfile);

        profileService.unfollowAndViewProfile(1L, followeeName);

        then(follower).should(times(1)).unfollowUser(followee);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/ProfileTestUtils.java
package io.github.raeperd.realworld.domain.user;

public class ProfileTestUtils {

    private ProfileTestUtils() {
    }

    public static Profile profileOf(UserName userName, String bio, Image image, boolean following) {
        final var profile = new Profile(userName);
        profile.changeBio(bio);
        profile.changeImage(image);
        return profile.withFollowing(following);
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserNameTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class UserNameTest {

    @Test
    void when_userName_created_expect_toString_with_name() {
        final var userName = new UserName("name");

        assertThat(userName).hasToString("name");
    }

    @Test
    void when_userName_has_same_name_expect_equal_and_hashcode() {
        final var userName = new UserName("name");
        final var userNameWithSameName = new UserName("name");

        assertThat(userNameWithSameName)
                .isEqualTo(userName)
                .hasSameHashCodeAs(userName);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserRepositoryTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
class UserRepositoryTest {

    private static final PasswordEncoder PASSWORD_ENCODER = new BCryptPasswordEncoder();

    @Autowired
    private UserRepository userRepository;

    @Test
    void when_save_user_expect_saved() {
        var userToSave = User.of(new Email("user@email.com"),
                new UserName("name"),
                Password.of("rawPassword", PASSWORD_ENCODER));

        assertThat(userRepository.save(userToSave)).hasNoNullFieldsOrProperties();
    }

    @Test
    void when_save_user_with_image_expect_saved() {
        var userToSave = User.of(new Email("user@email.com"),
                new UserName("name"),
                Password.of("rawPassword", PASSWORD_ENCODER));
        var imageToSave = new Image("some-image");

        userToSave.changeImage(imageToSave);

        assertThat(userRepository.save(userToSave))
                .extracting(User::getImage)
                .isEqualTo(imageToSave);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserServiceTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.NoSuchElementException;

import static java.util.Optional.empty;
import static java.util.Optional.of;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.then;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UserServiceTest {

    private UserService userService;

    @Mock
    private PasswordEncoder passwordEncoder;

    @Mock
    private UserRepository userRepository;

    @BeforeEach
    void initializeUserService() {
        this.userService = new UserService(passwordEncoder, userRepository);
    }

    @Test
    void when_signUp_expect_password_encoded(@Mock UserSignUpRequest request) {
        given(request.getRawPassword()).willReturn("raw-password");

        userService.signUp(request);

        then(passwordEncoder).should(times(1)).encode("raw-password");
    }

    @Test
    void when_login_expect_user_matches_password(@Mock Email email, @Mock User user) {
        given(userRepository.findFirstByEmail(email)).willReturn(of(user));

        userService.login(email, "raw-password");

        then(user).should(times(1)).matchesPassword("raw-password", passwordEncoder);
    }

    @Test
    void when_findById_expect_repository_findById() {
        userService.findById(1L);

        verify(userRepository, times(1)).findById(1L);
    }

    @Test
    void when_findByUsername_expect_repository_findFirstByProfileUserName(@Mock UserName userName) {
        userService.findByUsername(userName);

        verify(userRepository, times(1)).findFirstByProfileUserName(userName);
    }

    @Test
    void when_updateUser_with_invalid_id_expect_NoSuchElementException(@Mock UserUpdateRequest request) {
        when(userRepository.findById(1L)).thenReturn(empty());

        assertThatThrownBy(
                () -> userService.updateUser(1L, request)
        ).isInstanceOf(NoSuchElementException.class);
    }

    @Test
    void when_updateUser_expect_userRepository_save(@Mock User user, @Mock UserUpdateRequest request) {
        given(userRepository.findById(1L)).willReturn(of(user));

        userService.updateUser(1L, request);

        then(userRepository).should(times(1)).save(user);
    }

    @Test
    void when_updateUser_email_expect_user_changEmail(@Mock User user, @Mock UserUpdateRequest request, @Mock Email email) {
        given(userRepository.findById(1L)).willReturn(of(user));
        given(request.getEmailToUpdate()).willReturn(of(email));

        userService.updateUser(1L, request);

        then(user).should(times(1)).changeEmail(email);
        verifyNoMoreInteractions(user);
    }

    @Test
    void when_updateUser_name_expect_user_changeName(@Mock User user, @Mock UserUpdateRequest request, @Mock UserName userName) {
        given(userRepository.findById(1L)).willReturn(of(user));
        given(request.getUserNameToUpdate()).willReturn(of(userName));

        userService.updateUser(1L, request);

        then(user).should(times(1)).changeName(userName);
        verifyNoMoreInteractions(user);
    }

    @Test
    void when_updateUser_password_expect_passwordEncoder_encode_password(@Mock User user, @Mock UserUpdateRequest request) {
        given(userRepository.findById(1L)).willReturn(of(user));
        given(request.getPasswordToUpdate()).willReturn(of("new-password"));

        userService.updateUser(1L, request);

        then(passwordEncoder).should(times(1)).encode("new-password");
    }

    @Test
    void when_updateUser_password_expect_user_changesPassword_encoded_password(@Mock User user,
                                                                               @Mock UserUpdateRequest request,
                                                                               @Mock Password password) {
        given(userRepository.findById(1L)).willReturn(of(user));
        given(request.getPasswordToUpdate()).willReturn(of("new-password"));


        try (var mockStatic = mockStatic(Password.class)) {
            mockStatic.when(() -> Password.of("new-password", passwordEncoder)).thenReturn(password);
            userService.updateUser(1L, request);
        }

        then(user).should(times(1)).changePassword(password);
        verifyNoMoreInteractions(user);
    }

    @Test
    void when_update_image_expect_user_changeImage(@Mock User user, @Mock UserUpdateRequest request, @Mock Image image) {
        given(userRepository.findById(1L)).willReturn(of(user));
        given(request.getImageToUpdate()).willReturn(of(image));

        userService.updateUser(1L, request);

        then(user).should(times(1)).changeImage(image);
        verifyNoMoreInteractions(user);
    }

    @Test
    void when_update_bio_expect_user_changes_bio(@Mock User user, @Mock UserUpdateRequest request) {
        given(userRepository.findById(1L)).willReturn(of(user));
        given(request.getBioToUpdate()).willReturn(of("new-bio"));

        userService.updateUser(1L, request);

        then(user).should(times(1)).changeBio("new-bio");
        verifyNoMoreInteractions(user);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
class UserTest {

    @Mock
    private PasswordEncoder passwordEncoder;

    @Mock
    private Email emailMock;
    @Mock
    private UserName userNameMock;
    @Mock
    private Password passwordMock;

    @Test
    void when_create_user_getImage_return_null() {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        assertThat(user.getImage()).isNull();
    }

    @Test
    void when_create_user_getBio_return_null() {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        assertThat(user.getBio()).isNull();
    }

    @Test
    void when_user_have_different_email_expect_not_equal_and_hashCode(
            @Mock Email otherEmail, @Mock UserName otherName, @Mock Password otherPassword) {
        final var user = User.of(emailMock, userNameMock, passwordMock);
        final var userWithSameEmail = User.of(otherEmail, otherName, otherPassword);

        assertThat(userWithSameEmail)
                .isNotEqualTo(user)
                .extracting(User::hashCode)
                .isNotEqualTo(user.hashCode());
    }

    @Test
    void when_user_have_same_email_expect_equal_and_hashCode(@Mock UserName otherName, @Mock Password otherPassword) {
        final var user = User.of(emailMock, userNameMock, passwordMock);
        final var userWithSameEmail = User.of(emailMock, otherName, otherPassword);

        assertThat(userWithSameEmail)
                .isEqualTo(user)
                .hasSameHashCodeAs(user);
    }

    @Test
    void when_view_profile_not_following_user_expect_following_false(@Mock Email otherEmail) {
        final var user = User.of(emailMock, userNameMock, passwordMock);
        final var otherUser = User.of(otherEmail, userNameMock, passwordMock);

        assertThat(user.viewProfile(otherUser))
                .hasFieldOrPropertyWithValue("following", false);
    }

    @Test
    void when_matches_password_expect_password_matches_password() {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        user.matchesPassword("some-password", passwordEncoder);

        verify(passwordMock, times(1)).matchesPassword("some-password", passwordEncoder);
    }

    @Test
    void when_changeEmail_expect_getEmail_return_new_email(@Mock Email emailToChange) {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        user.changeEmail(emailToChange);

        assertThat(user.getEmail()).isEqualTo(emailToChange);
    }

    @Test
    void when_changePassword_expect_matchesPassword_matches_new_password(@Mock Password passwordToChange) {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        user.changePassword(passwordToChange);

        user.matchesPassword("some-password", passwordEncoder);
        verify(passwordToChange, times(1)).matchesPassword("some-password", passwordEncoder);
    }

    @Test
    void when_changeName_expect_getName_return_new_name(@Mock UserName userNameToChange) {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        user.changeName(userNameToChange);

        assertThat(user.getName()).isEqualTo(userNameToChange);
    }

    @Test
    void when_changeBio_expect_getBio_return_new_bio() {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        user.changeBio("new bio");

        assertThat(user.getBio()).isEqualTo("new bio");
    }

    @Test
    void when_changeImage_expect_getImage_return_new_image(@Mock Image imageToChange) {
        final var user = User.of(emailMock, userNameMock, passwordMock);

        user.changeImage(imageToChange);

        assertThat(user.getImage()).isEqualTo(imageToChange);
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserTestUtils.java
package io.github.raeperd.realworld.domain.user;

import org.springframework.test.util.ReflectionTestUtils;

public class UserTestUtils {

    public static User userWithEmailAndName(String email, String name) {
        return User.of(
                new Email(email),
                new UserName(name),
                null
        );
    }

    public static User userWithIdAndEmail(long id, String email) {
        final var sampleUser = UserTestUtils.userWithEmailAndName(email, "name");
        ReflectionTestUtils.setField(sampleUser, "id", id);
        return sampleUser;
    }

    public static User databaseUser() {
        final var password = new Password();
        ReflectionTestUtils.setField(password, "encodedPassword", "$2y$10$Uw0vceuCbx3bVOsXZuP");
        final var databaseUser = User.of(
                new Email("databaseUser@email.com"),
                new UserName("databaseUser"),
                password);
        ReflectionTestUtils.setField(databaseUser, "id", 1L);
        return databaseUser;
    }

}

--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/domain/user/UserUpdateRequestTest.java
package io.github.raeperd.realworld.domain.user;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static io.github.raeperd.realworld.domain.user.UserUpdateRequest.builder;
import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
class UserUpdateRequestTest {

    @Test
    void when_userUpdateRequest_created_without_field_expect_all_null() {
        final var requestWithoutFields = builder().build();

        assertThat(requestWithoutFields).hasAllNullFieldsOrProperties();
    }

    @Test
    void when_userUpdateRequest_created_without_field_expect_get_return_empty() {
        final var requestWithoutFields = builder().build();

        assertThat(requestWithoutFields.getEmailToUpdate()).isEmpty();
        assertThat(requestWithoutFields.getUserNameToUpdate()).isEmpty();
        assertThat(requestWithoutFields.getPasswordToUpdate()).isEmpty();
        assertThat(requestWithoutFields.getImageToUpdate()).isEmpty();
        assertThat(requestWithoutFields.getBioToUpdate()).isEmpty();
    }

    @Test
    void when_userUpdateRequest_created_with_all_field_expect_all_fields(@Mock Email emailToUpdate, @Mock UserName userNameToUpdate, @Mock Image imageToUpdate) {
        final var requestWithAllField = builder().emailToUpdate(emailToUpdate)
                .userNameToUpdate(userNameToUpdate)
                .passwordToUpdate("passwordToUpdate")
                .imageToUpdate(imageToUpdate)
                .bioToUpdate("bioToUpdate")
                .build();

        assertThat(requestWithAllField)
                .hasFieldOrPropertyWithValue("emailToUpdate", emailToUpdate)
                .hasFieldOrPropertyWithValue("userNameToUpdate", userNameToUpdate)
                .hasFieldOrPropertyWithValue("passwordToUpdate", "passwordToUpdate")
                .hasFieldOrPropertyWithValue("imageToUpdate", imageToUpdate)
                .hasFieldOrPropertyWithValue("bioToUpdate", "bioToUpdate");
    }

    @Test
    void when_userUpdateRequest_created_with_all_field_expect_get_return_field(@Mock Email emailToUpdate, @Mock UserName userNameToUpdate, @Mock Image imageToUpdate) {
        final var requestWithAllField = builder().emailToUpdate(emailToUpdate)
                .userNameToUpdate(userNameToUpdate)
                .passwordToUpdate("passwordToUpdate")
                .imageToUpdate(imageToUpdate)
                .bioToUpdate("bioToUpdate")
                .build();

        assertThat(requestWithAllField.getEmailToUpdate()).contains(emailToUpdate);
        assertThat(requestWithAllField.getUserNameToUpdate()).contains(userNameToUpdate);
        assertThat(requestWithAllField.getPasswordToUpdate()).contains("passwordToUpdate");
        assertThat(requestWithAllField.getImageToUpdate()).contains(imageToUpdate);
        assertThat(requestWithAllField.getBioToUpdate()).contains("bioToUpdate");
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/Base64URLTest.java
package io.github.raeperd.realworld.infrastructure.jwt;

import org.junit.jupiter.api.Test;

import java.util.Random;

import static io.github.raeperd.realworld.infrastructure.jwt.Base64URL.base64URLFromString;
import static io.github.raeperd.realworld.infrastructure.jwt.Base64URL.stringFromBase64URL;
import static org.assertj.core.api.Assertions.assertThat;

class Base64URLTest {

    private final static String RAW_STRING = "something";
    private final static String ENCODED_STRING = "c29tZXRoaW5n";

    @Test
    void when_encode_return_expected_string() {
        assertThat(base64URLFromString(RAW_STRING)).isEqualTo(ENCODED_STRING);
    }

    @Test
    void when_decode_return_expected_string() {
        assertThat(stringFromBase64URL(ENCODED_STRING)).isEqualTo(RAW_STRING);
    }

    @Test
    void when_encode_and_then_decode_expect_same() {
        final var rawString = generateRandomString();

        final var encodedString = base64URLFromString(rawString);
        assertThat(stringFromBase64URL(encodedString)).isEqualTo(rawString);
    }

    private String generateRandomString() {
        final var bytes = new byte[7];
        new Random().nextBytes(bytes);
        return new String(bytes);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256JWTServiceTest.java
package io.github.raeperd.realworld.infrastructure.jwt;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.json.JsonTest;

import java.nio.charset.StandardCharsets;

import static com.fasterxml.jackson.annotation.JsonCreator.Mode.PROPERTIES;
import static io.github.raeperd.realworld.domain.user.UserTestUtils.userWithIdAndEmail;
import static io.github.raeperd.realworld.infrastructure.jwt.Base64URL.base64URLFromBytes;
import static io.github.raeperd.realworld.infrastructure.jwt.Base64URL.base64URLFromString;
import static java.lang.String.format;
import static java.lang.String.valueOf;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

@ExtendWith(MockitoExtension.class)
@JsonTest
class HmacSHA256JWTServiceTest {

    private static final String JWT_HEADER_EXPECTED = base64URLFromString("{\"alg\":\"HS256\",\"type\":\"JWT\"}");
    private static final byte[] SECRET = "SOME_SECRET".getBytes(StandardCharsets.UTF_8);

    private HmacSHA256JWTService jwtService;

    @Autowired
    private ObjectMapper objectMapper;

    @BeforeEach
    void initializeService() {
        objectMapper.registerModule(new ParameterNamesModule(PROPERTIES));
        this.jwtService = new HmacSHA256JWTService(SECRET, 3, objectMapper);
    }

    @Test
    void when_generateToken_expect_result_startsWith_encodedHeader() {
        final var user = userWithIdAndEmail(1L, "user@email.com");

        final var token = jwtService.jwtFromUser(user);

        assertThat(token).startsWith(base64URLFromString("{\"alg\":\"HS256\",\"type\":\"JWT\"}"));
    }

    @Test
    void when_JWTPayloadFromString_with_malformed_token_expect_IllegalArgumentException() {
        assertThatThrownBy(() ->
                jwtService.jwtPayloadFromJWT("MALFORMED_TOKEN-2-_without_dot")
        ).isInstanceOf(IllegalArgumentException.class).hasMessageStartingWith("Malformed JWT:");
    }

    @Test
    void when_JWTPayloadFromString_with_not_starts_with_header_expect_IllegalArgumentException() {
        assertThatThrownBy(() ->
                jwtService.jwtPayloadFromJWT("HEADER_bas64-._base64-payload.SIGN")
        ).isInstanceOf(IllegalArgumentException.class).hasMessageStartingWith("Malformed JWT! Token must starts with header");
    }

    @Test
    void when_JWTPayloadFromString_with_invalid_sign_expect_IllegalArgumentException() {
        assertThatThrownBy(() ->
                jwtService.jwtPayloadFromJWT(JWT_HEADER_EXPECTED + "._base64-payload.INVALID_1_SIGN")
        ).isInstanceOf(IllegalArgumentException.class).hasMessageStartingWith("Token has invalid signature");
    }

    @Test
    void when_JWTPayloadFromString_with_invalid_payload_expect_IllegalArgumentException() {
        final var invalidPayloadToken = invalidPayloadToken();

        assertThatThrownBy(() ->
                jwtService.jwtPayloadFromJWT(invalidPayloadToken)
        ).isInstanceOf(IllegalArgumentException.class).hasMessageStartingWith("Malformed JWT");
    }

    @Test
    void when_JWTPayloadFromString_token_has_expired_expect_InvalidJWTException() {
        final var expiredToken = expiredToken();

        assertThatThrownBy(() ->
                jwtService.jwtPayloadFromJWT(expiredToken)
        ).isInstanceOf(IllegalArgumentException.class).hasMessageContaining("Token expired");
    }

    @Test
    void when_JWTPayloadFromString_with_valid_token_expect_return_valid() {
        final var user = userWithIdAndEmail(1L, "user@email.com");

        final var token = jwtService.jwtFromUser(user);
        final var payloadFromToken = jwtService.jwtPayloadFromJWT(token);

        assertThat(payloadFromToken)
                .matches(payload -> !payload.isExpired())
                .matches(payload -> payload.getUserId() == 1L)
                .matches(payload -> valueOf(payload).startsWith(format("{\"sub\":%d,\"name\":\"%s\",", 1L, user.getEmail())));
    }

    private String invalidPayloadToken() {
        final var message = format("%s.%s", JWT_HEADER_EXPECTED, "INVALID_PAYLOAD");
        return base64URLFromBytes(HmacSHA256.sign(SECRET, message));
    }

    private String expiredToken() {
        final var user = userWithIdAndEmail(1L, "user@email.com");
        return new HmacSHA256JWTService(SECRET, -1, new ObjectMapper())
                .jwtFromUser(user);
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/HmacSHA256Test.java
package io.github.raeperd.realworld.infrastructure.jwt;

import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

class HmacSHA256Test {

    @Test
    void when_invalid_secret_expect_throw_exception() {
        assertThatThrownBy(
                () -> HmacSHA256.sign(null, "test")
        ).isInstanceOf(RuntimeException.class);
    }

    @Test
    void when_sign_expect_matched_return() {
        assertThat(HmacSHA256.sign("secret".getBytes(StandardCharsets.UTF_8), "plain"))
                .asHexString()
                .isEqualTo("A237566E044B73E6A1E54BD59974547487FA5F8143025CE0D04D82E7EE4C5E34");
    }
}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/java/io/github/raeperd/realworld/infrastructure/jwt/UserJWTPayloadTest.java
package io.github.raeperd.realworld.infrastructure.jwt;

import io.github.raeperd.realworld.domain.user.User;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static io.github.raeperd.realworld.domain.user.UserTestUtils.userWithIdAndEmail;
import static java.lang.String.format;
import static java.time.Instant.*;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class UserJWTPayloadTest {

    @Test
    void when_getUserId_expect_return_user_id(@Mock User user) {
        when(user.getId()).thenReturn(1L);
        final var jwtPayload = UserJWTPayload.of(user, now().getEpochSecond());

        assertThat(jwtPayload.getUserId()).isOne();
    }

    @Test
    void when_expired_expect_isExpired_return_true(@Mock User user) {
        final var jwtPayload = UserJWTPayload.of(user, MIN.getEpochSecond());

        assertThat(jwtPayload.isExpired()).isTrue();
    }

    @Test
    void when_not_expired_expect_isExpired_return_false(@Mock User user) {
        final var jwtPayload = UserJWTPayload.of(user, MAX.getEpochSecond());

        assertThat(jwtPayload.isExpired()).isFalse();
    }

    @Test
    void when_to_string_expect_return_shortest_json_string() {
        final var sampleUser = userWithIdAndEmail(2L, "user@email.com");
        final var jwtPayload = UserJWTPayload.of(sampleUser, MAX.getEpochSecond());

        assertThat(jwtPayload)
                .hasToString(format("{\"sub\":%d,\"name\":\"%s\",\"iat\":%d}",
                        2L, "user@email.com", MAX.getEpochSecond()));
    }

}
--#

--% E:/desktop-laptop/_rwe/realworld-springboot-java/src/test/resources/data.sql
INSERT INTO users(id, name, email, password) VALUES (1, 'databaseUser', 'databaseUser@email.com', '$2y$10$Uw0vceuCbx3bVOsXZuP.5eh4cAGjIYdzBtYgAo3E1AE6B3.pG11uO ');
--#

