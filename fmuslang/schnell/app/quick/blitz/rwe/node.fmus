--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#

--% index/fmus/under_pwd
__REPLACE_WITH_PROJECT_DIR_OR_INPUT__,d(/mk)
	%utama=__FILE__
	.gitignore,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/.gitignore)
	.travis.yml,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/.travis.yml)
	app.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/app.js)
	package.json,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/package.json)
	project-logo.png,f(b64=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/project-logo.png)
	README.md,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/README.md)
	.circleci,d(/mk)
		config.yml,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/.circleci/config.yml)
	config,d(/mk)
		index.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/config/index.js)
		passport.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/config/passport.js)
	models,d(/mk)
		Article.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/models/Article.js)
		Comment.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/models/Comment.js)
		User.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/models/User.js)
	public,d(/mk)
		.keep,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/public/.keep)
	routes,d(/mk)
		auth.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/auth.js)
		index.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/index.js)
		api,d(/mk)
			articles.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/articles.js)
			index.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/index.js)
			profiles.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/profiles.js)
			tags.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/tags.js)
			users.js,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/users.js)
	tests,d(/mk)
		api-tests.postman.json,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/tests/api-tests.postman.json)
		env-api-tests.postman.json,f(e=utama=E:/desktop-laptop/_rwe/node-express-realworld-example-app/tests/env-api-tests.postman.json)
--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/.gitignore
# Logs
logs
*.log
.DS_Store

npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

.idea

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/.travis.yml
language: node_js
node_js: "8"

sudo: required
services: mongodb

install: yarn

before_script: yarn start & sleep 5
script: yarn test

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/app.js
var http = require('http'),
    path = require('path'),
    methods = require('methods'),
    express = require('express'),
    bodyParser = require('body-parser'),
    session = require('express-session'),
    cors = require('cors'),
    passport = require('passport'),
    errorhandler = require('errorhandler'),
    mongoose = require('mongoose');

var isProduction = process.env.NODE_ENV === 'production';

// Create global app object
var app = express();

app.use(cors());

// Normal express config defaults
app.use(require('morgan')('dev'));
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.use(require('method-override')());
app.use(express.static(__dirname + '/public'));

app.use(session({ secret: 'conduit', cookie: { maxAge: 60000 }, resave: false, saveUninitialized: false  }));

if (!isProduction) {
  app.use(errorhandler());
}

if(isProduction){
  mongoose.connect(process.env.MONGODB_URI);
} else {
  mongoose.connect('mongodb://localhost/conduit');
  mongoose.set('debug', true);
}

require('./models/User');
require('./models/Article');
require('./models/Comment');
require('./config/passport');

app.use(require('./routes'));

/// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

/// error handlers

// development error handler
// will print stacktrace
if (!isProduction) {
  app.use(function(err, req, res, next) {
    console.log(err.stack);

    res.status(err.status || 500);

    res.json({'errors': {
      message: err.message,
      error: err
    }});
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.json({'errors': {
    message: err.message,
    error: {}
  }});
});

// finally, let's start our server...
var server = app.listen( process.env.PORT || 3000, function(){
  console.log('Listening on port ' + server.address().port);
});

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/package.json
{
  "name": "conduit-node",
  "version": "1.0.0",
  "description": "conduit on node",
  "main": "app.js",
  "scripts": {
    "mongo:start": "docker run --name realworld-mongo -p 27017:27017 mongo & sleep 5",
    "start": "node ./app.js",
    "dev": "nodemon ./app.js",
    "test": "newman run ./tests/api-tests.postman.json -e ./tests/env-api-tests.postman.json",
    "stop": "lsof -ti :3000 | xargs kill",
    "mongo:stop": "docker stop realworld-mongo && docker rm realworld-mongo"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gothinkster/productionready-node-api.git"
  },
  "license": "ISC",
  "dependencies": {
    "body-parser": "1.15.0",
    "cors": "2.7.1",
    "ejs": "2.4.1",
    "errorhandler": "1.4.3",
    "express": "4.13.4",
    "express-jwt": "3.3.0",
    "express-session": "1.13.0",
    "jsonwebtoken": "7.1.9",
    "method-override": "2.3.5",
    "methods": "1.1.2",
    "mongoose": "4.4.10",
    "mongoose-unique-validator": "1.0.2",
    "morgan": "1.7.0",
    "passport": "0.3.2",
    "passport-local": "1.0.0",
    "request": "2.69.0",
    "slug": "0.9.1",
    "underscore": "1.8.3"
  },
  "devDependencies": {
    "newman": "^3.8.2",
    "nodemon": "^1.11.0"
  }
}

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/project-logo.png

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/README.md
# ![Node/Express/Mongoose Example App](project-logo.png)

[![Build Status](https://travis-ci.org/anishkny/node-express-realworld-example-app.svg?branch=master)](https://travis-ci.org/anishkny/node-express-realworld-example-app)

> ### Example Node (Express + Mongoose) codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the [RealWorld](https://github.com/gothinkster/realworld-example-apps) API spec.

<a href="https://thinkster.io/tutorials/node-json-api" target="_blank"><img width="454" src="https://raw.githubusercontent.com/gothinkster/realworld/master/media/learn-btn-hr.png" /></a>

This repo is functionality complete — PRs and issues welcome!

# Getting started

To get the Node server running locally:

- Clone this repo
- `npm install` to install all required dependencies
- Install MongoDB Community Edition ([instructions](https://docs.mongodb.com/manual/installation/#tutorials)) and run it by executing `mongod`
- `npm run dev` to start the local server

Alternately, to quickly try out this repo in the cloud, you can [![Remix on Glitch](https://cdn.glitch.com/2703baf2-b643-4da7-ab91-7ee2a2d00b5b%2Fremix-button.svg)](https://glitch.com/edit/#!/remix/realworld)

# Code Overview

## Dependencies

- [expressjs](https://github.com/expressjs/express) - The server for handling and routing HTTP requests
- [express-jwt](https://github.com/auth0/express-jwt) - Middleware for validating JWTs for authentication
- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) - For generating JWTs used by authentication
- [mongoose](https://github.com/Automattic/mongoose) - For modeling and mapping MongoDB data to javascript 
- [mongoose-unique-validator](https://github.com/blakehaswell/mongoose-unique-validator) - For handling unique validation errors in Mongoose. Mongoose only handles validation at the document level, so a unique index across a collection will throw an exception at the driver level. The `mongoose-unique-validator` plugin helps us by formatting the error like a normal mongoose `ValidationError`.
- [passport](https://github.com/jaredhanson/passport) - For handling user authentication
- [slug](https://github.com/dodo/node-slug) - For encoding titles into a URL-friendly format

## Application Structure

- `app.js` - The entry point to our application. This file defines our express server and connects it to MongoDB using mongoose. It also requires the routes and models we'll be using in the application.
- `config/` - This folder contains configuration for passport as well as a central location for configuration/environment variables.
- `routes/` - This folder contains the route definitions for our API.
- `models/` - This folder contains the schema definitions for our Mongoose models.

## Error Handling

In `routes/api/index.js`, we define a error-handling middleware for handling Mongoose's `ValidationError`. This middleware will respond with a 422 status code and format the response to have [error messages the clients can understand](https://github.com/gothinkster/realworld/blob/master/API.md#errors-and-status-codes)

## Authentication

Requests are authenticated using the `Authorization` header with a valid JWT. We define two express middlewares in `routes/auth.js` that can be used to authenticate requests. The `required` middleware configures the `express-jwt` middleware using our application's secret and will return a 401 status code if the request cannot be authenticated. The payload of the JWT can then be accessed from `req.payload` in the endpoint. The `optional` middleware configures the `express-jwt` in the same way as `required`, but will *not* return a 401 status code if the request cannot be authenticated.


<br />

[![Brought to you by Thinkster](https://raw.githubusercontent.com/gothinkster/realworld/master/media/end.png)](https://thinkster.io)

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/.circleci/config.yml
version: 2

jobs:
  build:
    docker:
      - image: circleci/node:8.5.0
      - image: circleci/mongo:3.4.9
    steps:
      - checkout
      - run:
          name: Start app and test
          command: |
            yarn
            yarn run start & sleep 5
            curl http://localhost:3000/api/tags
            yarn run test
      - run:
          name: Trigger integration tests
          command: curl -X POST "https://circleci.com/api/v1.1/project/github/anishkny/realworld-e2e-test?circle-token=$CIRCLE_CI_TOKEN"


--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/config/index.js
module.exports = {
  secret: process.env.NODE_ENV === 'production' ? process.env.SECRET : 'secret'
};

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/config/passport.js
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var mongoose = require('mongoose');
var User = mongoose.model('User');

passport.use(new LocalStrategy({
  usernameField: 'user[email]',
  passwordField: 'user[password]'
}, function(email, password, done) {
  User.findOne({email: email}).then(function(user){
    if(!user || !user.validPassword(password)){
      return done(null, false, {errors: {'email or password': 'is invalid'}});
    }

    return done(null, user);
  }).catch(done);
}));


--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/models/Article.js
var mongoose = require('mongoose');
var uniqueValidator = require('mongoose-unique-validator');
var slug = require('slug');
var User = mongoose.model('User');

var ArticleSchema = new mongoose.Schema({
  slug: {type: String, lowercase: true, unique: true},
  title: String,
  description: String,
  body: String,
  favoritesCount: {type: Number, default: 0},
  comments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Comment' }],
  tagList: [{ type: String }],
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
}, {timestamps: true});

ArticleSchema.plugin(uniqueValidator, {message: 'is already taken'});

ArticleSchema.pre('validate', function(next){
  if(!this.slug)  {
    this.slugify();
  }

  next();
});

ArticleSchema.methods.slugify = function() {
  this.slug = slug(this.title) + '-' + (Math.random() * Math.pow(36, 6) | 0).toString(36);
};

ArticleSchema.methods.updateFavoriteCount = function() {
  var article = this;

  return User.count({favorites: {$in: [article._id]}}).then(function(count){
    article.favoritesCount = count;

    return article.save();
  });
};

ArticleSchema.methods.toJSONFor = function(user){
  return {
    slug: this.slug,
    title: this.title,
    description: this.description,
    body: this.body,
    createdAt: this.createdAt,
    updatedAt: this.updatedAt,
    tagList: this.tagList,
    favorited: user ? user.isFavorite(this._id) : false,
    favoritesCount: this.favoritesCount,
    author: this.author.toProfileJSONFor(user)
  };
};

mongoose.model('Article', ArticleSchema);

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/models/Comment.js
var mongoose = require('mongoose');

var CommentSchema = new mongoose.Schema({
  body: String,
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  article: { type: mongoose.Schema.Types.ObjectId, ref: 'Article' }
}, {timestamps: true});

// Requires population of author
CommentSchema.methods.toJSONFor = function(user){
  return {
    id: this._id,
    body: this.body,
    createdAt: this.createdAt,
    author: this.author.toProfileJSONFor(user)
  };
};

mongoose.model('Comment', CommentSchema);

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/models/User.js
var mongoose = require('mongoose');
var uniqueValidator = require('mongoose-unique-validator');
var crypto = require('crypto');
var jwt = require('jsonwebtoken');
var secret = require('../config').secret;

var UserSchema = new mongoose.Schema({
  username: {type: String, lowercase: true, unique: true, required: [true, "can't be blank"], match: [/^[a-zA-Z0-9]+$/, 'is invalid'], index: true},
  email: {type: String, lowercase: true, unique: true, required: [true, "can't be blank"], match: [/\S+@\S+\.\S+/, 'is invalid'], index: true},
  bio: String,
  image: String,
  favorites: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Article' }],
  following: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  hash: String,
  salt: String
}, {timestamps: true});

UserSchema.plugin(uniqueValidator, {message: 'is already taken.'});

UserSchema.methods.validPassword = function(password) {
  var hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex');
  return this.hash === hash;
};

UserSchema.methods.setPassword = function(password){
  this.salt = crypto.randomBytes(16).toString('hex');
  this.hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex');
};

UserSchema.methods.generateJWT = function() {
  var today = new Date();
  var exp = new Date(today);
  exp.setDate(today.getDate() + 60);

  return jwt.sign({
    id: this._id,
    username: this.username,
    exp: parseInt(exp.getTime() / 1000),
  }, secret);
};

UserSchema.methods.toAuthJSON = function(){
  return {
    username: this.username,
    email: this.email,
    token: this.generateJWT(),
    bio: this.bio,
    image: this.image
  };
};

UserSchema.methods.toProfileJSONFor = function(user){
  return {
    username: this.username,
    bio: this.bio,
    image: this.image || 'https://static.productionready.io/images/smiley-cyrus.jpg',
    following: user ? user.isFollowing(this._id) : false
  };
};

UserSchema.methods.favorite = function(id){
  if(this.favorites.indexOf(id) === -1){
    this.favorites.push(id);
  }

  return this.save();
};

UserSchema.methods.unfavorite = function(id){
  this.favorites.remove(id);
  return this.save();
};

UserSchema.methods.isFavorite = function(id){
  return this.favorites.some(function(favoriteId){
    return favoriteId.toString() === id.toString();
  });
};

UserSchema.methods.follow = function(id){
  if(this.following.indexOf(id) === -1){
    this.following.push(id);
  }

  return this.save();
};

UserSchema.methods.unfollow = function(id){
  this.following.remove(id);
  return this.save();
};

UserSchema.methods.isFollowing = function(id){
  return this.following.some(function(followId){
    return followId.toString() === id.toString();
  });
};

mongoose.model('User', UserSchema);

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/public/.keep

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/auth.js
var jwt = require('express-jwt');
var secret = require('../config').secret;

function getTokenFromHeader(req){
  if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Token' ||
      req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {
    return req.headers.authorization.split(' ')[1];
  }

  return null;
}

var auth = {
  required: jwt({
    secret: secret,
    userProperty: 'payload',
    getToken: getTokenFromHeader
  }),
  optional: jwt({
    secret: secret,
    userProperty: 'payload',
    credentialsRequired: false,
    getToken: getTokenFromHeader
  })
};

module.exports = auth;

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/index.js
var router = require('express').Router();

router.use('/api', require('./api'));

module.exports = router;

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/articles.js
var router = require('express').Router();
var mongoose = require('mongoose');
var Article = mongoose.model('Article');
var Comment = mongoose.model('Comment');
var User = mongoose.model('User');
var auth = require('../auth');

// Preload article objects on routes with ':article'
router.param('article', function(req, res, next, slug) {
  Article.findOne({ slug: slug})
    .populate('author')
    .then(function (article) {
      if (!article) { return res.sendStatus(404); }

      req.article = article;

      return next();
    }).catch(next);
});

router.param('comment', function(req, res, next, id) {
  Comment.findById(id).then(function(comment){
    if(!comment) { return res.sendStatus(404); }

    req.comment = comment;

    return next();
  }).catch(next);
});

router.get('/', auth.optional, function(req, res, next) {
  var query = {};
  var limit = 20;
  var offset = 0;

  if(typeof req.query.limit !== 'undefined'){
    limit = req.query.limit;
  }

  if(typeof req.query.offset !== 'undefined'){
    offset = req.query.offset;
  }

  if( typeof req.query.tag !== 'undefined' ){
    query.tagList = {"$in" : [req.query.tag]};
  }

  Promise.all([
    req.query.author ? User.findOne({username: req.query.author}) : null,
    req.query.favorited ? User.findOne({username: req.query.favorited}) : null
  ]).then(function(results){
    var author = results[0];
    var favoriter = results[1];

    if(author){
      query.author = author._id;
    }

    if(favoriter){
      query._id = {$in: favoriter.favorites};
    } else if(req.query.favorited){
      query._id = {$in: []};
    }

    return Promise.all([
      Article.find(query)
        .limit(Number(limit))
        .skip(Number(offset))
        .sort({createdAt: 'desc'})
        .populate('author')
        .exec(),
      Article.count(query).exec(),
      req.payload ? User.findById(req.payload.id) : null,
    ]).then(function(results){
      var articles = results[0];
      var articlesCount = results[1];
      var user = results[2];

      return res.json({
        articles: articles.map(function(article){
          return article.toJSONFor(user);
        }),
        articlesCount: articlesCount
      });
    });
  }).catch(next);
});

router.get('/feed', auth.required, function(req, res, next) {
  var limit = 20;
  var offset = 0;

  if(typeof req.query.limit !== 'undefined'){
    limit = req.query.limit;
  }

  if(typeof req.query.offset !== 'undefined'){
    offset = req.query.offset;
  }

  User.findById(req.payload.id).then(function(user){
    if (!user) { return res.sendStatus(401); }

    Promise.all([
      Article.find({ author: {$in: user.following}})
        .limit(Number(limit))
        .skip(Number(offset))
        .populate('author')
        .exec(),
      Article.count({ author: {$in: user.following}})
    ]).then(function(results){
      var articles = results[0];
      var articlesCount = results[1];

      return res.json({
        articles: articles.map(function(article){
          return article.toJSONFor(user);
        }),
        articlesCount: articlesCount
      });
    }).catch(next);
  });
});

router.post('/', auth.required, function(req, res, next) {
  User.findById(req.payload.id).then(function(user){
    if (!user) { return res.sendStatus(401); }

    var article = new Article(req.body.article);

    article.author = user;

    return article.save().then(function(){
      console.log(article.author);
      return res.json({article: article.toJSONFor(user)});
    });
  }).catch(next);
});

// return a article
router.get('/:article', auth.optional, function(req, res, next) {
  Promise.all([
    req.payload ? User.findById(req.payload.id) : null,
    req.article.populate('author').execPopulate()
  ]).then(function(results){
    var user = results[0];

    return res.json({article: req.article.toJSONFor(user)});
  }).catch(next);
});

// update article
router.put('/:article', auth.required, function(req, res, next) {
  User.findById(req.payload.id).then(function(user){
    if(req.article.author._id.toString() === req.payload.id.toString()){
      if(typeof req.body.article.title !== 'undefined'){
        req.article.title = req.body.article.title;
      }

      if(typeof req.body.article.description !== 'undefined'){
        req.article.description = req.body.article.description;
      }

      if(typeof req.body.article.body !== 'undefined'){
        req.article.body = req.body.article.body;
      }

      if(typeof req.body.article.tagList !== 'undefined'){
        req.article.tagList = req.body.article.tagList
      }

      req.article.save().then(function(article){
        return res.json({article: article.toJSONFor(user)});
      }).catch(next);
    } else {
      return res.sendStatus(403);
    }
  });
});

// delete article
router.delete('/:article', auth.required, function(req, res, next) {
  User.findById(req.payload.id).then(function(user){
    if (!user) { return res.sendStatus(401); }

    if(req.article.author._id.toString() === req.payload.id.toString()){
      return req.article.remove().then(function(){
        return res.sendStatus(204);
      });
    } else {
      return res.sendStatus(403);
    }
  }).catch(next);
});

// Favorite an article
router.post('/:article/favorite', auth.required, function(req, res, next) {
  var articleId = req.article._id;

  User.findById(req.payload.id).then(function(user){
    if (!user) { return res.sendStatus(401); }

    return user.favorite(articleId).then(function(){
      return req.article.updateFavoriteCount().then(function(article){
        return res.json({article: article.toJSONFor(user)});
      });
    });
  }).catch(next);
});

// Unfavorite an article
router.delete('/:article/favorite', auth.required, function(req, res, next) {
  var articleId = req.article._id;

  User.findById(req.payload.id).then(function (user){
    if (!user) { return res.sendStatus(401); }

    return user.unfavorite(articleId).then(function(){
      return req.article.updateFavoriteCount().then(function(article){
        return res.json({article: article.toJSONFor(user)});
      });
    });
  }).catch(next);
});

// return an article's comments
router.get('/:article/comments', auth.optional, function(req, res, next){
  Promise.resolve(req.payload ? User.findById(req.payload.id) : null).then(function(user){
    return req.article.populate({
      path: 'comments',
      populate: {
        path: 'author'
      },
      options: {
        sort: {
          createdAt: 'desc'
        }
      }
    }).execPopulate().then(function(article) {
      return res.json({comments: req.article.comments.map(function(comment){
        return comment.toJSONFor(user);
      })});
    });
  }).catch(next);
});

// create a new comment
router.post('/:article/comments', auth.required, function(req, res, next) {
  User.findById(req.payload.id).then(function(user){
    if(!user){ return res.sendStatus(401); }

    var comment = new Comment(req.body.comment);
    comment.article = req.article;
    comment.author = user;

    return comment.save().then(function(){
      req.article.comments.push(comment);

      return req.article.save().then(function(article) {
        res.json({comment: comment.toJSONFor(user)});
      });
    });
  }).catch(next);
});

router.delete('/:article/comments/:comment', auth.required, function(req, res, next) {
  if(req.comment.author.toString() === req.payload.id.toString()){
    req.article.comments.remove(req.comment._id);
    req.article.save()
      .then(Comment.find({_id: req.comment._id}).remove().exec())
      .then(function(){
        res.sendStatus(204);
      });
  } else {
    res.sendStatus(403);
  }
});

module.exports = router;

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/index.js
var router = require('express').Router();

router.use('/', require('./users'));
router.use('/profiles', require('./profiles'));
router.use('/articles', require('./articles'));
router.use('/tags', require('./tags'));

router.use(function(err, req, res, next){
  if(err.name === 'ValidationError'){
    return res.status(422).json({
      errors: Object.keys(err.errors).reduce(function(errors, key){
        errors[key] = err.errors[key].message;

        return errors;
      }, {})
    });
  }

  return next(err);
});

module.exports = router;
--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/profiles.js
var router = require('express').Router();
var mongoose = require('mongoose');
var User = mongoose.model('User');
var auth = require('../auth');

// Preload user profile on routes with ':username'
router.param('username', function(req, res, next, username){
  User.findOne({username: username}).then(function(user){
    if (!user) { return res.sendStatus(404); }

    req.profile = user;

    return next();
  }).catch(next);
});

router.get('/:username', auth.optional, function(req, res, next){
  if(req.payload){
    User.findById(req.payload.id).then(function(user){
      if(!user){ return res.json({profile: req.profile.toProfileJSONFor(false)}); }

      return res.json({profile: req.profile.toProfileJSONFor(user)});
    });
  } else {
    return res.json({profile: req.profile.toProfileJSONFor(false)});
  }
});

router.post('/:username/follow', auth.required, function(req, res, next){
  var profileId = req.profile._id;

  User.findById(req.payload.id).then(function(user){
    if (!user) { return res.sendStatus(401); }

    return user.follow(profileId).then(function(){
      return res.json({profile: req.profile.toProfileJSONFor(user)});
    });
  }).catch(next);
});

router.delete('/:username/follow', auth.required, function(req, res, next){
  var profileId = req.profile._id;

  User.findById(req.payload.id).then(function(user){
    if (!user) { return res.sendStatus(401); }

    return user.unfollow(profileId).then(function(){
      return res.json({profile: req.profile.toProfileJSONFor(user)});
    });
  }).catch(next);
});

module.exports = router;

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/tags.js
var router = require('express').Router();
var mongoose = require('mongoose');
var Article = mongoose.model('Article');

// return a list of tags
router.get('/', function(req, res, next) {
  Article.find().distinct('tagList').then(function(tags){
    return res.json({tags: tags});
  }).catch(next);
});

module.exports = router;

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/routes/api/users.js
var mongoose = require('mongoose');
var router = require('express').Router();
var passport = require('passport');
var User = mongoose.model('User');
var auth = require('../auth');

router.get('/user', auth.required, function(req, res, next){
  User.findById(req.payload.id).then(function(user){
    if(!user){ return res.sendStatus(401); }

    return res.json({user: user.toAuthJSON()});
  }).catch(next);
});

router.put('/user', auth.required, function(req, res, next){
  User.findById(req.payload.id).then(function(user){
    if(!user){ return res.sendStatus(401); }

    // only update fields that were actually passed...
    if(typeof req.body.user.username !== 'undefined'){
      user.username = req.body.user.username;
    }
    if(typeof req.body.user.email !== 'undefined'){
      user.email = req.body.user.email;
    }
    if(typeof req.body.user.bio !== 'undefined'){
      user.bio = req.body.user.bio;
    }
    if(typeof req.body.user.image !== 'undefined'){
      user.image = req.body.user.image;
    }
    if(typeof req.body.user.password !== 'undefined'){
      user.setPassword(req.body.user.password);
    }

    return user.save().then(function(){
      return res.json({user: user.toAuthJSON()});
    });
  }).catch(next);
});

router.post('/users/login', function(req, res, next){
  if(!req.body.user.email){
    return res.status(422).json({errors: {email: "can't be blank"}});
  }

  if(!req.body.user.password){
    return res.status(422).json({errors: {password: "can't be blank"}});
  }

  passport.authenticate('local', {session: false}, function(err, user, info){
    if(err){ return next(err); }

    if(user){
      user.token = user.generateJWT();
      return res.json({user: user.toAuthJSON()});
    } else {
      return res.status(422).json(info);
    }
  })(req, res, next);
});

router.post('/users', function(req, res, next){
  var user = new User();

  user.username = req.body.user.username;
  user.email = req.body.user.email;
  user.setPassword(req.body.user.password);

  user.save().then(function(){
    return res.json({user: user.toAuthJSON()});
  }).catch(next);
});

module.exports = router;

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/tests/api-tests.postman.json
{
  "variables": [],
  "info": {
    "name": "Conduit API Tests",
    "_postman_id": "dda3e595-02d7-bf12-2a43-3daea0970192",
    "description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [{
      "name": "Auth",
      "description": "",
      "item": [{
          "name": "Register",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/users",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\", \"username\":\"johnjacob\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/users/login",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Login and Remember Token",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                "",
                "if(tests['User has \"token\" property']){",
                "    postman.setEnvironmentVariable('token', user.token);",
                "}",
                "",
                "tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/users/login",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Current User",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/user",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                "",
                "var user = responseJSON.user || {};",
                "",
                "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/user",
            "method": "PUT",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\"}}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles with authentication",
      "description": "",
      "item": [{
          "name": "Feed",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/feed",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "All Articles",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "All Articles with auth",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles by Author",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?author=johnjacob",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "author",
                "value": "johnjacob"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles by Author with auth",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?author=johnjacob",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "author",
                "value": "johnjacob",
                "equals": true,
                "description": ""
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "    ",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?favorited=jane",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "favorited",
                "value": "jane"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username with auth",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "    ",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?favorited=jane",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "favorited",
                "value": "jane"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles by Tag",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?tag=dragons",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "tag",
                "value": "dragons"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                "",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "if(tests['Article has \"slug\" property']){",
                "    postman.setEnvironmentVariable('slug', article.slug);",
                "}",
                "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"dragons\",\"training\"]}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Single Article by slug",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                "",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Update Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                "",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}",
            "method": "PUT",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"article\":{\"body\":\"With two hands\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Favorite Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                "",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "tests[\"Article's 'favorited' property is true\"] = article.favorited === true;",
                "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "tests[\"Article's 'favoritesCount' property is greater than 0\"] = article.favoritesCount > 0;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}/favorite",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Unfavorite Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                "",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "tests[\"Article's \\\"favorited\\\" property is true\"] = article.favorited === false;",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}/favorite",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles",
      "description": "",
      "item": [{
          "name": "All Articles",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles by Author",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?author=johnjacob",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "author",
                "value": "johnjacob"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles Favorited by Username",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "    ",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?favorited=jane",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "favorited",
                "value": "jane"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Articles by Tag",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
                "    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
                "    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
                "",
                "    if(responseJSON.articles.length){",
                "        var article = responseJSON.articles[0];",
                "",
                "        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                "    } else {",
                "        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": {
              "raw": "{{apiUrl}}/articles?tag=dragons",
              "host": [
                "{{apiUrl}}"
              ],
              "path": [
                "articles"
              ],
              "query": [{
                "key": "tag",
                "value": "dragons"
              }],
              "variable": []
            },
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Single Article by slug",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                "",
                "var article = responseJSON.article || {};",
                "",
                "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
                "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
                "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments",
      "description": "",
      "item": [{
          "name": "All Comments for Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var is200Response = responseCode.code === 200",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"comments\" property'] = responseJSON.hasOwnProperty('comments');",
                "",
                "    if(responseJSON.comments.length){",
                "        var comment = responseJSON.comments[0];",
                "",
                "        tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                "        tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                "        tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                "        tests['\"createdAt\" property is an ISO 8601 timestamp'] = new Date(comment.createdAt).toISOString() === comment.createdAt;",
                "        tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
                "        tests['\"updatedAt\" property is an ISO 8601 timestamp'] = new Date(comment.updatedAt).toISOString() === comment.updatedAt;",
                "        tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                "    }",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}/comments",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Comment for Article",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "var responseJSON = JSON.parse(responseBody);",
                "",
                "tests['Response contains \"comment\" property'] = responseJSON.hasOwnProperty('comment');",
                "",
                "var comment = responseJSON.comment || {};",
                "",
                "tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
                "tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
                "tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
                "tests['\"createdAt\" property is an ISO 8601 timestamp'] = new Date(comment.createdAt).toISOString() === comment.createdAt;",
                "tests['Comment has \"author\" property'] = comment.hasOwnProperty('author');",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}/comments",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"comment\":{\"body\":\"Thank you so much!\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Delete Comment for Article",
          "request": {
            "url": "{{apiUrl}}/articles/{{slug}}/comments/1",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Profiles",
      "description": "",
      "item": [{
          "name": "Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                "    ",
                "    var profile = responseJSON.profile || {};",
                "    ",
                "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                "}",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob",
            "method": "GET",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "name": "Follow Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                "    ",
                "    var profile = responseJSON.profile || {};",
                "    ",
                "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                "    tests['Profile\\'s \"following\" property is true'] = profile.following === true;",
                "}",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob/follow",
            "method": "POST",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user\":{\"email\":\"john@jacob.com\"}}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Unfollow Profile",
          "event": [{
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "if (!(environment.isIntegrationTest)) {",
                "var is200Response = responseCode.code === 200;",
                "",
                "tests['Response code is 200 OK'] = is200Response;",
                "",
                "if(is200Response){",
                "    var responseJSON = JSON.parse(responseBody);",
                "",
                "    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
                "    ",
                "    var profile = responseJSON.profile || {};",
                "    ",
                "    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
                "    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
                "    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
                "    tests['Profile\\'s \"following\" property is false'] = profile.following === false;",
                "}",
                "}",
                ""
              ]
            }
          }],
          "request": {
            "url": "{{apiUrl}}/profiles/johnjacob/follow",
            "method": "DELETE",
            "header": [{
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "X-Requested-With",
                "value": "XMLHttpRequest",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Token {{token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tags",
      "description": "",
      "item": [{
        "name": "All Tags",
        "event": [{
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var is200Response = responseCode.code === 200;",
              "",
              "tests['Response code is 200 OK'] = is200Response;",
              "",
              "if(is200Response){",
              "    var responseJSON = JSON.parse(responseBody);",
              "    ",
              "    tests['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
              "    tests['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
              "}",
              ""
            ]
          }
        }],
        "request": {
          "url": "{{apiUrl}}/tags",
          "method": "GET",
          "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            },
            {
              "key": "X-Requested-With",
              "value": "XMLHttpRequest",
              "description": ""
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": ""
        },
        "response": []
      }]
    },
    {
      "name": "Cleanup",
      "description": "",
      "item": [{
        "name": "Delete Article",
        "request": {
          "url": "{{apiUrl}}/articles/{{slug}}",
          "method": "DELETE",
          "header": [{
              "key": "Content-Type",
              "value": "application/json",
              "description": ""
            },
            {
              "key": "X-Requested-With",
              "value": "XMLHttpRequest",
              "description": ""
            },
            {
              "key": "Authorization",
              "value": "Token {{token}}",
              "description": ""
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": ""
        },
        "response": []
      }]
    }
  ]
}

--#

--% E:/desktop-laptop/_rwe/node-express-realworld-example-app/tests/env-api-tests.postman.json
{
  "id": "4aa60b52-97fc-456d-4d4f-14a350e95dff",
  "name": "Conduit API Tests - Environment",
  "values": [{
    "enabled": true,
    "key": "apiUrl",
    "value": "http://localhost:3000/api",
    "type": "text"
  }],
  "timestamp": 1505871382668,
  "_postman_variable_scope": "environment",
  "_postman_exported_at": "2017-09-20T01:36:34.835Z",
  "_postman_exported_using": "Postman/5.2.0"
}

--#

