--% index/fmus
__PWD,d
	?pick
		@create original rust edge grpc connector*
			.,d(/load=__FILE__=rust-edge-grpc-connector/fmus*)
--#

--% rust-edge-grpc-connector/fmus
.,d
	README.md,f(e=__FILE__=rust-edge-grpc-connector/readme)
	.gitignore,f(e=__FILE__=rust-edge-grpc-connector/gitignore)
	connector,d(/mk)
		proto,d(/mk)
			connector.proto,f(e=__FILE__=rust-edge-grpc-connector/proto)
		src,d(/mk)
			main.rs,f(e=__FILE__=rust-edge-grpc-connector/main)
		build.rs,f(e=__FILE__=rust-edge-grpc-connector/build)
		Cargo.toml,f(e=__FILE__=rust-edge-grpc-connector/toml)
		run.bat,f(e=__FILE__=rust-edge-grpc-connector/run)
--#

--% rust-edge-grpc-connector/main
use tonic::{transport::Server, Request, Response, Status};
use rand::Rng;
use chrono::prelude::*;

use edge_app::data_service_server::{DataService, DataServiceServer};
use edge_app::{DataReply, DataRequest};

pub mod edge_app {
    tonic::include_proto!("connector");
}

#[derive(Default)]
pub struct DataGenerator {}

#[tonic::async_trait]
impl DataService for DataGenerator {

    async fn generate_data(
        &self,
        request: Request<DataRequest>,
    ) -> Result<Response<DataReply>, Status> {
        
        let local: DateTime<Local> = Local::now();        
        println!("Got a request from {:?} pada {:?}", request.remote_addr(), local);
        
        let mut rng = rand::thread_rng();

        let daleman = request.into_inner();
        println!("daleman {:?}", daleman);

        let random_data = rng.gen_range(daleman.min_value as f32, daleman.max_value as f32);

        let reply = edge_app::DataReply {
            
            message: format!("Sensor {} berada dalam building {}.", daleman.sensor, daleman.smart_building),
            timestamp: local.to_string(),            
            value: random_data as i32,
            float_value: random_data,
        };

        Ok(Response::new(reply))
    }

}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {

    let addr = "[::1]:50051".parse().unwrap();
    let generator = DataGenerator::default();

    println!("DataService listening on {}", addr);

    Server::builder()
        .add_service(DataServiceServer::new(generator))
        .serve(addr)
        .await?;

    Ok(())
}
--#

--% rust-edge-grpc-connector/proto
syntax = "proto3";

option java_multiple_files = true;
option java_package = "id.qca.iot.edge.connector";
option java_outer_classname = "ConnectorProto";

package connector;

service DataService {  
  rpc GenerateData (DataRequest) returns (DataReply) {}  
  // rpc FetchData (DataRequest) returns (DataReply) {}
}

message DataRequest {
  string smart_building   = 1;
  string sensor           = 2;
  int32 min_value         = 3;
  int32 max_value         = 4;
  int32 yellow            = 5;
  int32 red               = 6;
  int32 interval          = 7;
  string stopper          = 8;
  int32 stop              = 9;
}

message DataReply {
  string message          = 1;
  string timestamp        = 2;
  int32 value             = 3;
  float float_value       = 4;
}
--#

--% rust-edge-grpc-connector/build
fn main() {
    tonic_build::compile_protos("proto/connector.proto").unwrap();
}
--#
--% rust-edge-grpc-connector/toml
[package]
name = "connector"
version = "0.0.1"
authors = ["yusef <yusef314159@gmail.com>"]
edition = "2018"

[[bin]]
name = "server"
path = "src/main.rs"

[dependencies]
async-stream = "0.2"
chrono = "0.4"
futures = { version = "0.3", default-features = false, features = ["alloc"] }
http = "0.2"
http-body = "0.3"
hyper = "0.13"
pin-project = "0.4.17"
prost = "0.6"
prost-types = "0.6"
rand = "0.7"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "0.2", features = ["rt-threaded", "time", "stream", "fs", "macros", "uds"] }
tonic = { git = "https://github.com/hyperium/tonic.git", features = ["tls"] }
tower = "0.3"
tracing = "0.1.16"
tracing-subscriber = { version = "0.2", features = ["tracing-log"] }
tracing-attributes = "0.1"
tracing-futures = "0.2"
warp = { version = "0.2", default-features = false }

[build-dependencies]
tonic-build = { git = "https://github.com/hyperium/tonic.git", features = ["prost"] }
--#

--% rust-edge-grpc-connector/run
cargo run --bin server
--#

--% rust-edge-grpc-connector/gitignore
# Generated by Cargo
# will have compiled files and executables
target/
build/
bin/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk
--#

--% rust-edge-grpc-connector/readme
# qca-edge
QCA Edge System

# Deskripsi
Terdiri dari 3 subsystem
- Connector
Berkomunikasi dengan app/cloud (grpc, mqtt)
- Internal
Internal EDGE System, RethinkDB, dll.
- Adapter
Berkomunikasi dengan sensor system/controller (modbus, bacnet)

# Progress
## Connector
- Mengirim data random

## Internal

## Adapter

# TODO
- Definisi protokol komunikasi antara EDGE<->Sensor dan EDGE<->App
- Definisi dan implementasi KPI utk level sensor, system (HVAC, electrical, lighting, plumbing, dll), serta building (agregat keseluruhan system dan sensor)

# Error

## desktop 32-bit
```
   Compiling tonic v0.7.1 (https://github.com/hyperium/tonic.git#03fb09cc)
error: failed to run custom build command for `prost-build v0.10.0`

Caused by:
  process didn't exit successfully: `C:\work\hapus\connector\target\debug\build\prost-build-f9b272c581e3de3b\build-script-build` (exit code: 101)
  --- stdout
  cargo:rerun-if-changed=C:\Users\user\.cargo\registry\src\github.com-1285ae84e5963aae\prost-build-0.10.0\third-party\protobuf\cmake
  CMAKE_TOOLCHAIN_FILE_i686-pc-windows-msvc = None
  CMAKE_TOOLCHAIN_FILE_i686_pc_windows_msvc = None
  HOST_CMAKE_TOOLCHAIN_FILE = None
  CMAKE_TOOLCHAIN_FILE = None
  CMAKE_GENERATOR_i686-pc-windows-msvc = None
  CMAKE_GENERATOR_i686_pc_windows_msvc = None
  HOST_CMAKE_GENERATOR = None
  CMAKE_GENERATOR = None
  CMAKE_PREFIX_PATH_i686-pc-windows-msvc = None
  CMAKE_PREFIX_PATH_i686_pc_windows_msvc = None
  HOST_CMAKE_PREFIX_PATH = None
  CMAKE_PREFIX_PATH = None
  CMAKE_i686-pc-windows-msvc = None
  CMAKE_i686_pc_windows_msvc = None
  HOST_CMAKE = None
  CMAKE = None
  running: "cmake" "C:\\Users\\user\\.cargo\\registry\\src\\github.com-1285ae84e5963aae\\prost-build-0.10.0\\third-party\\protobuf\\cmake" "-G" "Visual Studio 15 2017" "-DCMAKE_INSTALL_PREFIX=C:\\work\\hapus\\connector\\target\\debug\\build\\prost-build-2c71d9d6b36b67e5\\out" "-DCMAKE_C_FLAGS= -nologo -MD -Brepro" "-DCMAKE_C_FLAGS_DEBUG= -nologo -MD -Brepro" "-DCMAKE_CXX_FLAGS= -nologo -MD -Brepro" "-DCMAKE_CXX_FLAGS_DEBUG= -nologo -MD -Brepro" "-DCMAKE_ASM_FLAGS= -nologo -MD -Brepro" "-DCMAKE_ASM_FLAGS_DEBUG= -nologo -MD -Brepro" "-DCMAKE_BUILD_TYPE=Debug"
  -- Selecting Windows SDK version 10.0.17763.0 to target Windows 10.0.19044.
  -- The C compiler identification is MSVC 19.16.27045.0
  -- The CXX compiler identification is MSVC 19.16.27045.0
  -- Detecting C compiler ABI info
  -- Detecting C compiler ABI info - done
  -- Check for working C compiler: C:/Program Files/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x86/cl.exe - skipped
  -- Detecting C compile features
  -- Detecting C compile features - done
  -- Detecting CXX compiler ABI info
  -- Detecting CXX compiler ABI info - done
  -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x86/cl.exe - skipped
  -- Detecting CXX compile features
  -- Detecting CXX compile features - done
  --
  -- 3.19.4.0
  -- Looking for pthread.h
  -- Looking for pthread.h - not found
  -- Found Threads: TRUE
  -- Could NOT find ZLIB (missing: ZLIB_LIBRARY ZLIB_INCLUDE_DIR)
  -- Configuring done
  -- Generating done
  -- Build files have been written to: C:/work/hapus/connector/target/debug/build/prost-build-2c71d9d6b36b67e5/out/build
  running: "cmake" "--build" "." "--target" "install" "--config" "Debug" "--parallel" "4"
  Microsoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework
  Copyright (C) Microsoft Corporation. All rights reserved.

    Checking Build System
    Building Custom Rule C:/Users/user/.cargo/registry/src/github.com-1285ae84e5963aae/prost-build-0.10.0/third-party/protobuf/cmake/CMakeLists.txt
    Building Custom Rule C:/Users/user/.cargo/registry/src/github.com-1285ae84e5963aae/prost-build-0.10.0/third-party/protobuf/cmake/CMakeLists.txt
    Building Custom Rule C:/Users/user/.cargo/registry/src/github.com-1285ae84e5963aae/prost-build-0.10.0/third-party/protobuf/cmake/CMakeLists.txt
    gmock-all.cc
    any_lite.cc
    any_lite.cc
build\prost-build-2c71d9d6b36b67e5\out\build\tests.vcxproj]
    Generating Code...
    tests.vcxproj -> C:\work\hapus\connector\target\debug\build\prost-build-2c71d9d6b36b67e5\out\build\Debug\tests.exe

  --- stderr
  CMake Warning:
    Manually-specified variables were not used by the project:

      CMAKE_ASM_FLAGS
      CMAKE_ASM_FLAGS_DEBUG


  thread 'main' panicked at '
  command did not execute successfully, got: exit code: 1

  build script failed, must exit now', C:\Users\user\.cargo\registry\src\github.com-1285ae84e5963aae\cmake-0.1.48\src\lib.rs:975:5
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```
--#
