
--% appscript/simple1/us
.,d
	?pick
		main.py,f(e=__FILE=appscript/simple1/main.py)
	$* python main.py
--#

--% appscript/yt1/code
https://youtu.be/gk63zWqm6mw?t=110
Apps Script Lesson How to Create a Spreadsheet in Google Workspace Add Row Data with Code

function maker1() {
    //const gdrive_folder_id = '1235414612345';
    //const folder = DriveApp.getFolderById(gdrive_folder_id);
    const folder = DriveApp.createFolder('New One');
    const rows = 5;
    const cols = 3;
    let cell = 1;
    const sheet = SpreadsheetApp.create('new sheet', rows, cols);
    for (let row=0; row<5; row++) {
        const holder = [];
        for (let col=0; col<3; col++) {
            holder.push(`Cell ${cell} Col ${col+1} Row ${row+1}`);
            cell++;
        }
        sheet.appendRow(holder);
    }
    Logger.log(sheet.getUrl());
    const sheetid = sheet.getId();
    const file = DriveApp.getFileById(sheetid)
    file.moveTo(folder);
}

function maker2() {
    const sheet = SpreadsheetApp.create('data', 3, 2);
    sheet.appendRow(['one', 'two']);
    sheet.appendRow(['three', 'four']);
    sheet.appendRow(['five', 'six']);
}

coba search:
data visualization with google sheet
https://www.youtube.com/watch?v=3deomYqHKgA
Building a Charts Dashboard with Google Apps Script
(ini dari 2012)

https://www.youtube.com/watch?v=qRbR5HSZShA
Web App w/ Google Charts, Google Sheets & Apps Script
developers.google.com/chart/itneractive/docs/quick_start
https://www.gstatic.com/charts/loader.js
--#

--% appscript/simple1/main.py
"""
Shows basic usage of the Apps Script API.
Call the Apps Script API to create a new script project, upload a file to the
project, and log the script's URL to the user.

https://developers.google.com/apps-script/api/quickstart/python
https://github.com/googleworkspace/python-samples/blob/master/apps_script/quickstart/quickstart.py
https://github.com/googleworkspace/python-samples/blob/master/apps_script/execute/execute.py
"""
from __future__ import print_function

import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient import errors
from googleapiclient.discovery import build

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/script.projects']
#SCOPES = ['https://www.googleapis.com/auth/script.projects', 'https://www.googleapis.com/auth/spreadsheets']

SAMPLE_CODE = '''
function helloWorld() {
  console.log("Hello, world!");
}
'''.strip()

SAMPLE_MANIFEST = '''
{
  "timeZone": "America/New_York",
  "exceptionLogging": "CLOUD"
}
'''.strip()


def main():
	"""Calls the Apps Script API.
	"""
	creds = None
	# The file token.json stores the user's access and refresh tokens, and is
	# created automatically when the authorization flow completes for the first
	# time.
	if os.path.exists('token.json'):
		creds = Credentials.from_authorized_user_file('token.json', SCOPES)
	# If there are no (valid) credentials available, let the user log in.
	if not creds or not creds.valid:
		if creds and creds.expired and creds.refresh_token:
			creds.refresh(Request())
		else:
			flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
			creds = flow.run_local_server(port=0)
		# Save the credentials for the next run
		with open('token.json', 'w') as token:
			token.write(creds.to_json())

	try:
		service = build('script', 'v1', credentials=creds)

		# Call the Apps Script API
		# Create a new project
		request = {'title': 'My Script'}
		response = service.projects().create(body=request).execute()

		# Upload two files to the project
		request = {
			'files': [{
				'name': 'hello',
				'type': 'SERVER_JS',
				'source': SAMPLE_CODE
			}, {
				'name': 'appsscript',
				'type': 'JSON',
				'source': SAMPLE_MANIFEST
			}]
		}
		response = service.projects().updateContent(
			body=request,
			scriptId=response['scriptId']).execute()
		print('https://script.google.com/d/' + response['scriptId'] + '/edit')
	except errors.HttpError as error:
		# The API encountered a problem.
		#print(error.content)
		import json
		print(json.dumps(error.content.decode('utf8')))


if __name__ == '__main__':
	main()
--#
