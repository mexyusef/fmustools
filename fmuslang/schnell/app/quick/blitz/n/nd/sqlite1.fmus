--% index/fmus
__PWD,d
		%__TEMPLATE_BASEDIR=__INPUT__
		%__TEMPLATE_PORT=3000
		__TEMPLATE_BASEDIR,d(/mk)
			.gitignore,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/.gitignore)
			package.json,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/package.json)
			README.md,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/README.md)
			server.js,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/server.js)
			mig.bat,f(e=__FILE__=mig)
			seed.bat,f(e=__FILE__=seed)
			config,d(/mk)
				config.json,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/config/config.json)
			migrations,d(/mk)
				20180726180039-create-contact.js,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/migrations/20180726180039-create-contact.js)
			models,d(/mk)
				contact.js,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/models/contact.js)
				index.js,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/models/index.js)
			seeders,d(/mk)
				20180726182604-seed-contact.js,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/seeders/20180726182604-seed-contact.js)
			static,d(/mk)
				index.html,f(e=__FILE__=F:/__sido-sequelize/sequelize-sqlite-express-vue/static/index.html)
--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/.gitignore
node_modules/
database.sqlite3
--#

--% mig
node_modules\.bin\sequelize db:migrate
--#

--% seed
node_modules\.bin\sequelize db:seed:all
--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/package.json
{
	"name": "vue-sqlite-sequelize",
	"version": "1.0.0",
	"description": "",
	"main": "server.js",
	"scripts": {
		"test": "echo \"Error: no test specified\" && exit 1"
	},
	"author": "",
	"license": "ISC",
	"dependencies": {
		"body-parser": "^1.18.3",
		"express": "^4.16.3",
		"nodemon": "^1.18.3",
		"sequelize": "^4.38.0",
		"sequelize-cli": "^4.0.0",
		"sqlite3": "^5.0.2"
	}
}

--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/README.md
# sequelize-sqlite-express-vue

A silly toy contacts management application that I used in my [StackAbuse](stackabuse.com) blog article [Using Sequelize.js and SQLite in an Express.js App](http://stackabuse.com/using-sequelize-js-and-sqlite-in-an-express-js-app/) demonstrating how to use Vue.js, Node.js, Express.js and sequelize.js in combination with a SQLite database.

## Usage

1) Clone repo

```sh
git clone https://github.com/amcquistan/sequelize-sqlite-express-vue.git
```

2) install dependencies (Built with Node.js version 8.10)

```sh
cd sequelize-sqlite-express-vue/
npm install
```

3) run migrations and seeders

```sh
node_modules/.bin/sequelize db:migrate
node_modules/.bin/sequelize db:seed:all

git clone https://github.com/amcquistan/sequelize-sqlite-express-vue.git
node_modules\.bin\sequelize db:migrate
node_modules\.bin\sequelize db:seed:all
```

4) start express server

```sh
npm start
```

--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/server.js
// server.js

const express = require('express');
const bodyParser = require('body-parser');
const db = require('./models');

const app = express();

app.use(bodyParser.json());
app.use(express.static(__dirname + '/static'));

app.get('/api/contacts', (req, res) => {
	return db.Contact.findAll()
		.then((contacts) => res.send(contacts))
		.catch((err) => {
			console.log('There was an error querying contacts', JSON.stringify(err))
			return res.send(err)
		});
});

app.post('/api/contacts', (req, res) => {
	const { firstName, lastName, phone } = req.body
	return db.Contact.create({ firstName, lastName, phone })
		.then((contact) => res.send(contact))
		.catch((err) => {
			console.log('***There was an error creating a contact', JSON.stringify(contact))
			return res.status(400).send(err)
		})
});

app.delete('/api/contacts/:id', (req, res) => {
	const id = parseInt(req.params.id)
	return db.Contact.findById(id)
		.then((contact) => contact.destroy({ force: true }))
		.then(() => res.send({ id }))
		.catch((err) => {
			console.log('***Error deleting contact', JSON.stringify(err))
			res.status(400).send(err)
		})
});

app.put('/api/contacts/:id', (req, res) => {
	const id = parseInt(req.params.id)
	return db.Contact.findById(id)
	.then((contact) => {
		const { firstName, lastName, phone } = req.body
		return contact.update({ firstName, lastName, phone })
			.then(() => res.send(contact))
			.catch((err) => {
				console.log('***Error updating contact', JSON.stringify(err))
				res.status(400).send(err)
			})
	})
});

app.listen(__TEMPLATE_PORT, () => {
	console.log('Server is up on port __TEMPLATE_PORT');
});

--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/config/config.json
{
	"development": {
		"dialect": "sqlite",
		"storage": "./database.sqlite3"
	},
	"test": {
		"dialect": "sqlite",
		"storage": ":memory"
	},
	"production": {
		"dialect": "sqlite",
		"storage": "./database.sqlite3"
	}
}

--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/migrations/20180726180039-create-contact.js
'use strict';
module.exports = {
	up: (queryInterface, Sequelize) => {
		return queryInterface.createTable('Contacts', {
			id: {
				allowNull: false,
				autoIncrement: true,
				primaryKey: true,
				type: Sequelize.INTEGER
			},
			firstName: {
				type: Sequelize.STRING
			},
			lastName: {
				type: Sequelize.STRING
			},
			phone: {
				type: Sequelize.STRING
			},
			email: {
				type: Sequelize.STRING
			},
			createdAt: {
				allowNull: false,
				type: Sequelize.DATE
			},
			updatedAt: {
				allowNull: false,
				type: Sequelize.DATE
			}
		});
	},
	down: (queryInterface, Sequelize) => {
		return queryInterface.dropTable('Contacts');
	}
};
--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/models/contact.js
'use strict';
module.exports = (sequelize, DataTypes) => {
	var Contact = sequelize.define('Contact', {
		firstName: DataTypes.STRING,
		lastName: DataTypes.STRING,
		phone: DataTypes.STRING,
		email: DataTypes.STRING
	}, {});
	Contact.associate = function(models) {
		// associations can be defined here
	};
	return Contact;
};
--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/models/index.js
'use strict';

var fs        = require('fs');
var path      = require('path');
var Sequelize = require('sequelize');
var basename  = path.basename(__filename);
var env       = process.env.NODE_ENV || 'development';
var config    = require(__dirname + '/../config/config.json')[env];
var db        = {};

if (config.use_env_variable) {
	var sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
	var sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
	.readdirSync(__dirname)
	.filter(file => {
		return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');
	})
	.forEach(file => {
		var model = sequelize['import'](path.join(__dirname, file));
		db[model.name] = model;
	});

Object.keys(db).forEach(modelName => {
	if (db[modelName].associate) {
		db[modelName].associate(db);
	}
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;

--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/seeders/20180726182604-seed-contact.js
'use strict';

module.exports = {
	up: (queryInterface, Sequelize) => {
		/*
			Add altering commands here.
			Return a promise to correctly handle asynchronicity.

			Example:
			return queryInterface.bulkInsert('Person', [{
				name: 'John Doe',
				isBetaMember: false
			}], {});
		*/
	 return queryInterface.bulkInsert('Contacts', [{
			firstName: 'Snoop',
			lastName: 'Dog',
			phone: '111-222-3333',
			email: 'snoopydog@dogpound.com',
			createdAt: new Date().toDateString(),
			updatedAt: new Date().toDateString()
		}, {
			firstName: 'Scooby',
			lastName: 'Doo',
			phone: '444-555-6666',
			email: 'scooby.doo@misterymachine.com',
			createdAt: new Date().toDateString(),
			updatedAt: new Date().toDateString()
		}, {
			firstName: 'Herbie',
			lastName: 'Husker',
			phone: '402-437-0001',
			email: 'herbie.husker@unl.edu',
			createdAt: new Date().toDateString(),
			updatedAt: new Date().toDateString()
		}], {});
	},

	down: (queryInterface, Sequelize) => {
		/*
			Add reverting commands here.
			Return a promise to correctly handle asynchronicity.

			Example:
			return queryInterface.bulkDelete('Person', null, {});
		*/
	 return queryInterface.bulkDelete('Contacts', null, {});
	}
};

--#

--% F:/__sido-sequelize/sequelize-sqlite-express-vue/static/index.html
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>Contacts</title>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.css">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17-beta.0/vue.js"></script>
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
	<style>
		.section-container {
			max-width: 800px;
			margin-right: auto;
			margin-left: auto;
		}
	</style>
</head>
<body>
	<div id="app" class="container">
		<section class="section section-container" style="padding-top: 24px; padding-bottom: 5px;">
				<h2 class="title">Contacts</h2>
				<contact v-for="contact in contacts"
						:key="contact.name"
						:contact="contact"
						@save-contact="onAddOrUpdateContact" 
						@delete-contact="deleteContact" />
		</section>
		<section class="section section-container" style="padding-bottom: 10px;">
			<div class="box">
				<add-update-contact title="Add Contact" @save-contact="onAddOrUpdateContact" />
			</div>
		</section>
	</div>
	<script>
	const AddUpdateContact = {
		props: ['contact', 'title'],
		data () {
			return {
				id: this.contact ? this.contact.id : null,
				firstName: this.contact ? this.contact.firstName : '',
				lastName: this.contact ? this.contact.lastName : '',
				phone: this.contact ? this.contact.phone : ''
			}
		},
		methods: {
			save() {
				this.$emit('save-contact', { id: this.id, firstName: this.firstName, lastName: this.lastName, phone: this.phone })
				if (!this.id) {
					this.firstName = ''
					this.lastName = ''
					this.phone = ''
				}
			}
		},
		template: `
			<form class="form" @submit.prevent="save">
				<h3 class='subtitle'>{{ title }}</h3>
				<div class="field">
						<label>First Name</label>
						<div class="control">
							<input class="input" type="text" v-model="firstName">
						</div> 
				</div>
				<div class="field">
						<label>Last Name</label>
						<div class="control">
							<input class="input" type="text" v-model="lastName">
						</div> 
				</div>
				<div class="field">
						<label>Phone</label>
						<div class="control">
							<input class="input" type="text" v-model="phone">
						</div> 
				</div>
				<div class="field">
						<div class="control">
							<button class="button is-success">Save</button>
						</div> 
				</div>
			</form>
		`
	}

	const Contact = {
		props: ['contact'],
		components: { 'add-update-contact': AddUpdateContact },
		data () {
			return {
				showDetail: false
			}
		},
		methods: {
			onAddOrUpdateContact(contact) {
				this.$emit('save-contact', contact)
			},
			deleteContact (contact) {
				this.$emit('delete-contact', contact)
			}
		},
		template: `
			<div class="card">
				<header class="card-header">
					<p @click="showDetail = !showDetail" class="card-header-title">
						{{ contact.firstName }} {{ contact.lastName }}
					</p>
					<a class="card-header-icon" @click.stop="deleteContact(contact)">
						<span class="icon">
							<i class="fa fa-trash"></i>
						</span>
					</a>
				</header>
				<div v-show="showDetail" class="card-content">
						<add-update-contact title="Details" :contact="contact" @save-contact="onAddOrUpdateContact" />
				</div>
			</div>
		`
	}

	new Vue({
		el: '#app',
		components: { contact: Contact, 'add-update-contact': AddUpdateContact },
		data: {
			contacts: [],
			apiURL: 'http://localhost:__TEMPLATE_PORT/api/contacts'
		},
		methods: {
			onAddOrUpdateContact (contact) {
				if (contact.id) {
					this.updateContact(contact)
				} else {
					this.addContact(contact)
				}
			},
			addContact (contact) {
				return axios.post(this.apiURL, contact)
					.then((response) => {
						const copy = this.contacts.slice()
						copy.push(response.data)
						this.contacts = copy
					})
			},
			updateContact (contact) {
				return axios.put(`${this.apiURL}/${contact.id}`, contact)
					.then((response) => {
						const copy = this.contacts.slice()
						const idx = copy.findIndex((c) => c.id === response.data.id)
						copy[idx] = response.data
						this.contacts = copy
					})
			},
			deleteContact (contact) {
				console.log('deleting', contact)
				return axios.delete(`${this.apiURL}/${contact.id}`)
					.then((response) => {
						let copy = this.contacts.slice()
						const idx = copy.findIndex((c) => c.id === response.data.id)
						copy.splice(idx, 1)
						this.contacts = copy
					})
			}
		},
		beforeMount () {
			axios.get(this.apiURL)
				.then((response) => {
					this.contacts = response.data
				})
		}
	})

	</script>
</body>
</html>
--#

