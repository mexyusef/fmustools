--% index/fmus
__PWD,d
	CMakeLists.txt,f(e=__FILE__=cmakelists)
	?pick
		utama.cpp,f(e=__FILE__=template1)
		utama.cpp,f(e=__FILE__=template2)
		utama.cpp,f(e=__FILE__=template3)
		utama.cpp,f(e=__FILE__=template4)
        utama.cpp,f(e=__FILE__=template5)


	inc.hpp,f(e=__FILE__=inc.hpp)
	build,d(/mk)
		$* cmake ..
		$* make
		#$* ls -al
		$* __PWD/build/hasil01
--#

--% README.md
include_directories(common)
masukkan inc.hpp ke common
utk bisa #include<inc.hpp>

1:

2:

3:

4:

5:

--#

--% template1
#include <memory>
#include <thread>
#include <atomic>
#include <iostream>

int main()
{
    std::atomic<std::shared_ptr<int>> ptr = std::make_shared<int>(4);
    std::jthread threadA([&ptr]() mutable
    {
        ptr = std::make_shared<int>(10);
    });
    std::jthread threadB([&ptr]() mutable
    {
        ptr = std::make_shared<int>(20);
    });
}
--#
--% template2
#include <memory>
#include <thread>
#include <atomic>
#include <iostream>

int main()
{
    std::atomic<bool> lock{false};
    std::jthread threadA([&lock]()
    {
        std::cout << "A+\n";
        lock.wait(false);
        std::cout << "A-\n";
    });
    std::jthread threadB([&lock]()
    {
        std::cout << "B+\n";
        lock.wait(false);
        std::cout << "B-\n";
    });

    std::cout << "unlock\n";
    lock = true;
    lock.notify_all();
}
--#
--% template3
#include <memory>
#include <thread>
#include <atomic>
#include <chrono>
#include <iostream>

int main()
{
    std::counting_semaphore sem{0};
    std::jthread threadA([&sem]()
    {
        for(;;)
        {
            std::cout << "A+\n";
            sem.acquire();
            std::cout << "A unblocked\n";
            std::this_thread::sleep_for(std::chrono::seconds(1));
            sem.release();
            std::cout << "A-\n";
        }
    });
    std::jthread threadB([&sem]()
    {
        for(;;)
        {
            std::cout << "B+\n";
            sem.acquire();
            std::cout << "B unblocked\n";
            std::this_thread::sleep_for(std::chrono::seconds(1));
            sem.release();
            std::cout << "B-\n";
        }
    });

    std::cout << "starting threads";
    sem.release();
}
--#
--% template4
#include <memory>
#include <thread>
#include <atomic>
#include <chrono>
#include <iostream>

int main()
{
    std::latch latch{2};
    std::atomic<int> counter;
    std::jthread threadA([&]()
    {
        for(int i = 0; i < 10; ++i)
        {
            ++counter;
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
        latch.count_down_and_wait();
        std::cout << "final counter from A: " << counter << std::endl;
    });
    std::jthread threadB([&]()
    {
        for(int i = 0; i < 10; ++i)
        {
            ++counter;
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
        latch.count_down_and_wait();
        std::cout << "final counter from B: " << counter << std::endl;
    });
}
--#
--% template5
#include <memory>
#include <thread>
#include <atomic>
#include <chrono>
#include <iostream>

int main()
{
    std::flex_barrier barrier{2};
    std::atomic<int> counter;

    for(;;)
    {
        std::jthread threadA([&]()
        {
            for(int i = 0; i < 5; ++i)
            {
                ++counter;
                std::this_thread::sleep_for(std::chrono::milliseconds(200));
            }
            barrier.arrive_and_wait();
            std::cout << "final counter from A: " << counter << std::endl;
        });
        std::jthread threadB([&]()
        {
            for(int i = 0; i < 10; ++i)
            {
                ++counter;
                std::this_thread::sleep_for(std::chrono::milliseconds(100));
            }
            barrier.arrive_and_wait();
            std::cout << "final counter from B: " << counter << std::endl;
        });
    }
}
--#

--% inc.hpp
#pragma once

#include <fmt/format.h>
#include <fmt/ostream.h>
#include <range/v3/all.hpp>
#include <cstdio>
#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <cxxabi.h>
#include <typeinfo>
#include <math.h>
#include <utility>

using namespace fmt;
using std::cout;
using std::endl;
using namespace std::string_literals;

template<typename T>
struct ShowType;

inline std::string demangle(const std::string& name)
{
    int status;
    auto ptr = abi::__cxa_demangle(name.c_str(), nullptr, nullptr, &status);
    std::string str(ptr);
    free(ptr);
    return str;
}

template<typename T>
inline std::string typeName()
{
    return demangle(typeid(T).name());
}

template<typename T>
inline std::string typeName(T&& obj)
{
    return demangle(typeid(obj).name());
}
--#

--% cmakelists
cmake_minimum_required (VERSION 3.11.0)
project (latihan)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)


#cmake_minimum_required(VERSION 3.6)
#project(latihan)
#set(CMAKE_CXX_STANDARD 17)


include(FetchContent)
FetchContent_Declare(
    fmt
    GIT_REPOSITORY "https://github.com/fmtlib/fmt.git"
    GIT_TAG 0889856d6160775462e9e0722d121aab0e75e873
)
FetchContent_GetProperties(fmt)
if(NOT fmt_POPULATED)
    FetchContent_Populate(fmt)
endif()
set(FMT_PATH ${fmt_SOURCE_DIR})



FetchContent_Declare(
    ranges
    GIT_REPOSITORY "https://github.com/ericniebler/range-v3.git"
    GIT_TAG 50ef05324f880569436c424d0c33ba4de36fb6d9
)
FetchContent_GetProperties(ranges)
if(NOT ranges_POPULATED)
    FetchContent_Populate(ranges)
endif()
set(RANGES_PATH ${ranges_SOURCE_DIR})



FetchContent_Declare(
    cppcoro
    GIT_REPOSITORY "https://github.com/lewissbaker/cppcoro.git"
    GIT_TAG 00b34af58e8e74e0ca1739967ce410792e024964
)
FetchContent_GetProperties(cppcoro)
if(NOT cppcoro_POPULATED)
    FetchContent_Populate(cppcoro)
endif()
set(CPPCORO_PATH ${cppcoro_SOURCE_DIR})



add_subdirectory(${FMT_PATH} ${CMAKE_CURRENT_BINARY_DIR}/fmt EXCLUDE_FROM_ALL)
include_directories(${FMT_PATH}/include)
include_directories(${RANGES_PATH}/include)
include_directories(${CPPCORO_PATH}/include)



#add_custom_target(hasil)

# sblm exec?
add_compile_options(-fsanitize=thread)
add_executable(hasil01 utama.cpp)
# stlh exec?
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

#target_compile_definitions(hasil01 PRIVATE EXAMPLE01 BOOST_LOG_DYN_LINK)
#add_dependencies(hasil hasil01)

target_link_libraries(hasil01 Threads::Threads tsan)
#target_link_libraries(hasil01 PRIVATE fmt::fmt-header-only)
--#
