--% index/fmus
__PWD,d
    $* rm -rf build
	CMakeLists.txt,f(e=__FILE__=cmakelists)
	utama.cpp,f(e=__FILE__=template1)
	build,d(/mk)
		$* cmake ..
		$* make
		#$* ls -al
		$* __PWD/build/hasil01
--#

--% README.md
include_directories(common)
masukkan inc.hpp ke common
utk bisa #include<inc.hpp>

--#

--% template1

#include <string>
#include <iostream>
#include <cassert>

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
constexpr double harmonic_mean(int a, int b)
{
    double ret_val = 0.0;
    ret_val = 2.0 * a * b / (a + b);

    return ret_val;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void harmonic_mean_compile_time()
{
    std::cout << "*** harmonic mean of two numbers at compile time ***" << std::endl;

    const int a = 3;
    constexpr int b = 5;

    constexpr double hm = harmonic_mean(a, b);
    static_assert(hm == 3.75);

    std::cout << "Value computed at compile time: " << hm << std::endl;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void harmonic_mean_run_time()
{
    std::cout << "*** harmonic mean of two numbers at run time ***" << std::endl;

    int a = 3;
    const int b = 5;

    const double hm = harmonic_mean(a, b);
    assert(hm == 3.75);

    std::cout << "Value computed at run time: " << hm << std::endl;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
int main (int argc, char *argv[])
{

    harmonic_mean_compile_time();
    harmonic_mean_run_time();

    return 0;
}



--#


--% cmakelists
cmake_minimum_required (VERSION 3.11.0)
project (latihan)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

#add_custom_target(hasil)
add_executable(hasil01 utama.cpp)
#target_compile_definitions(hasil01 PRIVATE EXAMPLE01 BOOST_LOG_DYN_LINK)
#add_dependencies(hasil hasil01)
#target_link_libraries(hasil01 PRIVATE fmt::fmt-header-only)
--#
