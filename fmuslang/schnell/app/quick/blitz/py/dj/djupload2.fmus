--% index/fmus
__PWD,d
    %TEMPLATE_BASEDIR=__INPUT__
    TEMPLATE_BASEDIR,d(/mk)
        mig1.bat,f(n=python manage.py makemigrations)
        mig2.bat,f(n=python manage.py makemigrations item)
        seed.bat,f(n=python manage.py migrate)
        manage.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/manage.py)
        drop,d(/mk)
            asgi.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/drop/asgi.py)
            settings.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/drop/settings.py)
            urls.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/drop/urls.py)
            wsgi.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/drop/wsgi.py)
            __init__.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/drop/__init__.py)
        item,d(/mk)
            admin.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/admin.py)
            apps.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/apps.py)
            models.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/models.py)
            tests.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/tests.py)
            views.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/views.py)
            __init__.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/__init__.py)
            migrations,d(/mk)
                0001_initial.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/migrations/0001_initial.py)
                __init__.py,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/migrations/__init__.py)
            templates,d(/mk)
                docs,d(/mk)
                    main.html,f(e=__FILE__=C:/Users/usef/work/hapus/drop/item/templates/docs/main.html)
        media,d(/mk)
            images,d(/mk)
        static,d(/mk)
            main.js,f(e=__FILE__=C:/Users/usef/work/hapus/drop/static/main.js)
            style.css,f(e=__FILE__=C:/Users/usef/work/hapus/drop/static/style.css)
        templates,d(/mk)
            base.html,f(e=__FILE__=C:/Users/usef/work/hapus/drop/templates/base.html)
--#

--% C:/Users/usef/work/hapus/drop/manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'drop.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

--#

--% C:/Users/usef/work/hapus/drop/drop/asgi.py
"""
ASGI config for drop project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'drop.settings')

application = get_asgi_application()

--#

--% C:/Users/usef/work/hapus/drop/drop/settings.py
"""
Django settings for drop project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7f^80a&$0v5bn-o4^m8dq%z9r*#1xfyd$tzfw#e__3uh@btoe+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'item',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'drop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / 'static']
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
--#

--% C:/Users/usef/work/hapus/drop/drop/urls.py
"""drop URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from item.views import MainView, file_upload_view
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', MainView.as_view(), name='main-view'),
    path('upload/', file_upload_view, name='upload-view'),
]
from django.conf import settings
from django.conf.urls.static import static
urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_URL)
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
--#

--% C:/Users/usef/work/hapus/drop/drop/wsgi.py
"""
WSGI config for drop project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'drop.settings')

application = get_wsgi_application()

--#

--% C:/Users/usef/work/hapus/drop/drop/__init__.py

--#

--% C:/Users/usef/work/hapus/drop/item/admin.py
from django.contrib import admin

from .models import Item
admin.site.register(Item)
--#

--% C:/Users/usef/work/hapus/drop/item/apps.py
from django.apps import AppConfig


class ItemConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'item'

--#

--% C:/Users/usef/work/hapus/drop/item/models.py
from django.db import models

# Create your models here.
class Item(models.Model):
    upload = models.ImageField(upload_to='images/')
    def __str__(self):
        return str(self.pk)
--#

--% C:/Users/usef/work/hapus/drop/item/tests.py
from django.test import TestCase

# Create your tests here.

--#

--% C:/Users/usef/work/hapus/drop/item/views.py
from django.shortcuts import render
from django.views.generic import TemplateView
from django.http import HttpResponse, JsonResponse
from pydantic import Json

from .models import Item

class MainView(TemplateView):
    template_name = 'docs/main.html'
    
def file_upload_view(request):
    # print(request.FILES)
    if request.method == 'POST':
        myfile = request.FILES.get('file')
        Item.objects.create(upload=myfile)
        return HttpResponse('uploaded')
    return JsonResponse({'status': 'nok'})


--#

--% C:/Users/usef/work/hapus/drop/item/__init__.py

--#

--% C:/Users/usef/work/hapus/drop/item/migrations/0001_initial.py
# Generated by Django 3.2.12 on 2022-04-12 14:38

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload', models.ImageField(upload_to='images/')),
            ],
        ),
    ]

--#

--% C:/Users/usef/work/hapus/drop/item/migrations/__init__.py

--#

--% C:/Users/usef/work/hapus/drop/item/templates/docs/main.html
{% extends "base.html" %}

{% block title %}
Upload
{% endblock title %}

{% block content %}
<form action="/upload" method="POST" class="dropzone dz" id="my-dz">
    {% csrf_token %}
    <div class="fallback">
        <input type="file" name="file" multiple>
    </div>
</form>
{% endblock content %}
--#

--% C:/Users/usef/work/hapus/drop/static/main.js
Dropzone.autoDiscover = false;
const myDropzone = new Dropzone('#my-dz', {
    url: 'upload/',
    maxFiles: 10,
    maxFilesize: 5,
    aceptedFiles: '.png, .txt, .jpg, .jpeg, .gif, .pdf'
})
--#

--% C:/Users/usef/work/hapus/drop/static/style.css
body {
    background-color: #f8f8f8;
}
.dz {
    border: dashed;
    border-color: #ccc;
    border-radius: 10px;
}

.dz:hover {
    background-color: alicebluefff;
}
--#

--% C:/Users/usef/work/hapus/drop/templates/base.html
{% load static %}

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Font awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- custom css & js -->
    <link rel="stylesheet" href="{% static 'style.css' %}">
    <script src="{% static 'main.js' %}" defer></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.0/min/dropzone.min.js" integrity="sha512-0dP3byusnGZjuR0DyxXM3gOsedQYHaOJGJBurP20HvRryYqn/VMbejpANORATjh+yKNsVbIpxm06mbbbImVBFw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.0/min/dropzone.min.css" integrity="sha512-WvVX1YO12zmsvTpUQV8s7ZU98DnkaAokcciMZJfnNWyNzm7//QRV61t4aEr0WdIa4pe854QHLTV302vH92FSMw==" crossorigin="anonymous" referrerpolicy="no-referrer" />


    <title>DZ Upload | {% block title %}{% endblock title %}</title>
  </head>
  <body>
    <div class="container mt-3">
        {% block content %}
        {% endblock content %}
    </div>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  </body>
</html>

--#

