--% index/fmus
__PWD,d
    .,d(/load=__FILE__=index_under_pwd*)
--#

--% index_under_pwd
.,d(/mk)
    server.go,f(e=__FILE__=server.go)
    client.go,f(e=__FILE__=client.go)
	gqlintro,d(/load=__FILE__=gqlintro*)
--#

--% server.go
package main

import (
	"net/http"

	"github.com/graphql-go/graphql"
	"github.com/graphql-go/handler"
)

// Player holds player response
type Player struct {
	ID             int      `json:"int"`
	Name           string   `json:"name"`
	HighScore      int      `json:"highScore"`
	IsOnline       bool     `json:"isOnline"`
	Location       string   `json:"location"`
	LevelsUnlocked []string `json:"levelsUnlocked"`
}

var players = []Player{
	Player{ID: 123, Name: "Pablo", HighScore: 1100, IsOnline: true, Location: "Italy"},
	Player{ID: 230, Name: "Dora", HighScore: 2100, IsOnline: false, Location: "Germany"},
}

var playerObject = graphql.NewObject(
	graphql.ObjectConfig{
		Name: "Player",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.Int,
			},
			"name": &graphql.Field{
				Type: graphql.String,
			},
			"highScore": &graphql.Field{
				Type: graphql.String,
			},
			"isOnline": &graphql.Field{
				Type: graphql.Boolean,
			},
			"location": &graphql.Field{
				Type: graphql.String,
			},
			"levelsUnlocked": &graphql.Field{
				Type: graphql.NewList(graphql.String),
			},
		},
	},
)

func main() {
	// Schema
	fields := graphql.Fields{
		"players": &graphql.Field{
			Type:        graphql.NewList(playerObject),
			Description: "All players",
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return players, nil
			},
		},
	}
	rootQuery := graphql.ObjectConfig{Name: "RootQuery", Fields: fields}
	schemaConfig := graphql.SchemaConfig{Query: graphql.NewObject(rootQuery)}
	schema, _ := graphql.NewSchema(schemaConfig)

	h := handler.New(&handler.Config{
		Schema:   &schema,
		Pretty:   true,
		GraphiQL: true,
	})

	http.Handle("/graphql", h)
	http.ListenAndServe(":8080", nil)
}
--#

--% client.go
package main

import (
	"context"
	"log"
	"os"

	"github.com/machinebox/graphql"
)

// Response of APi
type Response struct {
	License struct {
		Name        string `json:"name"`
		Description string `json:"description"`
	} `json:"license"`
}

func main() {
	// create a client (safe to share across requests)
	client := graphql.NewClient("https://api.github.com/graphql")

	// make a request to GitHub API
	req := graphql.NewRequest(`
		query {
			license(key: "apache-2.0") {
				name
				description
			}
		}
`)

	var GithubToken = os.Getenv("GITHUB_TOKEN")
	req.Header.Add("Authorization", "bearer "+GithubToken)

	// define a Context for the request
	ctx := context.Background()

	// run it and capture the response
	var respData Response
	if err := client.Run(ctx, req, &respData); err != nil {
		log.Fatal(err)
	}
	log.Println(respData.License.Description)
}
--#

--% gqlintro
.,d(/mk)
	%utama=__FILE__
	client_query.txt,f(e=utama=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/client_query.txt)
	counter.graphql,f(e=utama=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/counter.graphql)
	counter_client_query.txt,f(e=utama=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/counter_client_query.txt)
	enums.graphql,f(e=utama=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/enums.graphql)
	octocat.json,f(e=utama=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/octocat.json)
	server_response.txt,f(e=utama=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/server_response.txt)
	user.graphql,f(e=utama=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/user.graphql)
--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/client_query.txt
{
  user {
    name
    address
  }
}
--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/counter.graphql

input CounterInput {
  value: Int
}

type Query {
  getCounter(id: Int!): Count
}

type Count {
  id: Int
  value: Int
}

type Mutation {
  updateCounter(id: Int!, input: CounterInput)
}
--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/counter_client_query.txt
mutation {
  updateCounter(CounterInput: {value: 2}) {
    value
  }
}

--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/enums.graphql
type Query {
  vehilce: Vehicle
}

enum Vehicle {
  Car
  Bus
}

type Car {
  name: String,
  wheels: Int
}

type Bus {
  name: String,
  wheels: Int
}

--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/octocat.json
{
  "login": "octocat",
  "id": 1,
  "node_id": "MDQ6VXNlcjE=",
  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
  "gravatar_id": "",
  "url": "https://api.github.com/users/octocat",
  "html_url": "https://github.com/octocat",
  "followers_url": "https://api.github.com/users/octocat/followers",
  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
  "organizations_url": "https://api.github.com/users/octocat/orgs",
  "repos_url": "https://api.github.com/users/octocat/repos",
  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
  "received_events_url": "https://api.github.com/users/octocat/received_events",
  "type": "User",
  "site_admin": false,
  "name": "monalisa octocat",
  "company": "GitHub",
  "blog": "https://github.com/blog",
  "location": "San Francisco",
  "email": "octocat@github.com",
  "hireable": false,
  "bio": "There once was...",
  "public_repos": 2,
  "public_gists": 1,
  "followers": 20,
  "following": 0,
  "created_at": "2008-01-14T04:33:35Z",
  "updated_at": "2008-01-14T04:33:35Z",
  "private_gists": 81,
  "total_private_repos": 100,
  "owned_private_repos": 100,
  "disk_usage": 10000,
  "collaborators": 8,
  "two_factor_authentication": true,
  "plan": {
    "name": "Medium",
    "space": 400,
    "private_repos": 20,
    "collaborators": 0
  }
}
--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/server_response.txt
{
  "data": {
    "user": {
      "name": "alice",
      "address": [{
        "city": "Munich",
        "street": "Marianplatz",
        "postalCode": "80331"
      }]
    }
  }
}
--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter10/intro/user.graphql
type Query {
  user: Person
}

type Person {
  name: String,
  address: []
}

type Address {
  city: String,
  street: String,
  postalCode: Float
}
--#

