--% index/fmus
__PWD,d
    .,d(/load=__FILE__=index_under_pwd*)
--#

--% index_under_pwd
.,d(/mk)
	%__TEMPLATE_NAMA_GO_MOD_INIT=github.com/mexyusef/palsu
	$* go mod init __TEMPLATE_NAMA_GO_MOD_INIT
    server.go,f(e=__FILE__=server.go)
    client.go,f(e=__FILE__=client.go)
	proto,d(/mk)
		weather.pb.go,f(e=__FILE__=weather1)
		weather.pb.micro.go,f(e=__FILE__=weather2)
		weather.proto,f(e=__FILE__=weather3)
--#

--% weather1
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/weather.proto

/*
Package weather is a generated protocol buffer package.

It is generated from these files:
	proto/weather.proto

It has these top-level messages:
	Event
*/
package weather

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Example message
type Event struct {
	// city name
	City string `protobuf:"bytes,1,opt,name=city" json:"city,omitempty"`
	// unix timestamp
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// temperaure in Celcius
	Temperature int64 `protobuf:"varint,3,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetTemperature() int64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
}

func init() { proto.RegisterFile("proto/weather.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4f, 0x4d, 0x2c, 0xc9, 0x48, 0x2d, 0xd2, 0x03, 0xf3, 0x94, 0xa2, 0xb9, 0x58,
	0x5d, 0xcb, 0x52, 0xf3, 0x4a, 0x84, 0x84, 0xb8, 0x58, 0x92, 0x33, 0x4b, 0x2a, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x19, 0x2e, 0xce, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92,
	0xc4, 0xdc, 0x02, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x84, 0x80, 0x90, 0x02, 0x17, 0x77,
	0x49, 0x6a, 0x6e, 0x41, 0x6a, 0x51, 0x62, 0x49, 0x69, 0x51, 0xaa, 0x04, 0x33, 0x58, 0x1e, 0x59,
	0x28, 0x89, 0x0d, 0x6c, 0x87, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x0a, 0x47, 0xc3, 0x7a,
	0x00, 0x00, 0x00,
}
--#

--% weather2
// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/weather.proto

package weather

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package
--#

--% weather3
syntax = "proto3";

// Example message
message Event {
	// city name
	string city = 1;
	// unix timestamp
	int64 timestamp = 2;
	// temperaure in Celcius
	int64 temperature = 3;
}
--#

--% server.go
package main

import (
	"context"
	"log"
	"time"

	proto "__TEMPLATE_NAMA_GO_MOD_INIT/proto"
	micro "github.com/micro/go-micro"
)

func main() {
	// Create a new service. Optionally include some options here.
	service := micro.NewService(
		micro.Name("weather"),
	)
	p := micro.NewPublisher("alerts", service.Client())

	go func() {
		for now := range time.Tick(15 * time.Second) {
			log.Println("Publishing weather alert to Topic: alerts")
			p.Publish(context.TODO(), &proto.Event{
				City:        "Munich",
				Timestamp:   now.UTC().Unix(),
				Temperature: 2,
			})
		}
	}()
	// Init will parse the command line flags.
	service.Init()

	// Run the server
	if err := service.Run(); err != nil {
		log.Println(err)
	}
}
--#

--% client.go
package main

import (
	"context"
	"log"

	proto "__TEMPLATE_NAMA_GO_MOD_INIT/proto"
	micro "github.com/micro/go-micro"
)

// ProcessEvent processes a weather alert
func ProcessEvent(ctx context.Context, event *proto.Event) error {
	log.Println("Got alert:", event)
	return nil
}

func main() {
	// Create a new service
	service := micro.NewService(micro.Name("weather_client"))
	// Initialise the client and parse command line flags
	service.Init()
	micro.RegisterSubscriber("alerts", service.Server(), ProcessEvent)

	if err := service.Run(); err != nil {
		log.Fatal(err)
	}
}
--#
