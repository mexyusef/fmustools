--% index/fmus
__PWD,d
    .,d(/load=__FILE__=index_under_pwd*)
--#

--% index_under_pwd
.,d(/mk)
	%__TEMPLATE_NAMA_GO_MOD_INIT=github.com/mexyusef/palsu
	$* go mod init __TEMPLATE_NAMA_GO_MOD_INIT
	helper,d(/mk)
		models.go,f(e=__FILE__=models.go)
	utils,d(/mk)
		encodeutils.go,f(e=__FILE__=encodeutils.go)
    main.go,f(e=__FILE__=main.go)
	main_test.go,f(e=__FILE__=main_test.go)
    run.sh,f(n=go run main.go)
    run.bat,f(n=go run main.go)
    info.txt,f(e=__FILE__=info.txt)
    $* more info.txt
    $* go run main.go
--#

--% encodeutils.go
package base62

import (
	"math"
	"strings"
)

const base = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
const b = 62

// Function encodes the given database ID to a base62 string
func ToBase62(num int) string {
	r := num % b
	res := string(base[r])
	div := num / b
	q := int(math.Floor(float64(div)))

	for q != 0 {
		r = q % b
		temp := q / b
		q = int(math.Floor(float64(temp)))
		res = string(base[int(r)]) + res
	}

	return string(res)
}

// Function decodes a given base62 string to datbase ID
func ToBase10(str string) int {
	res := 0
	for _, r := range str {
		res = (b * res) + strings.Index(base, string(r))
	}
	return res
}
--#

--% models.go
package helper

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq" // sql behavior modified
)

const (
	host     = "127.0.0.1"
	port     = 5432
	user     = "gituser"
	password = "passme"
	dbname   = "mydb"
)

// InitDB initializes database table
func InitDB() (*sql.DB, error) {
	var connectionString = fmt.Sprintf("host=%s port=%d user=%s "+
		"password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)

	var err error
	db, err := sql.Open("postgres", connectionString)

	if err != nil {
		return nil, err
	}

	stmt, err := db.Prepare("CREATE TABLE IF NOT EXISTS web_url(ID SERIAL PRIMARY KEY, URL TEXT NOT NULL);")

	if err != nil {
		return nil, err
	}

	_, err = stmt.Exec()

	if err != nil {
		return nil, err
	}

	return db, nil
}
--#

--% main_test.go
package main_test

import (
	"testing"
	"net/http"
)

func TestGetOriginalURL(t *testing.T) {
	// make a dummy reques
	response, err := http.Get("http://localhost:8000/v1/short/1")
 
    if http.StatusOK != response.StatusCode {
    	t.Errorf("Expected response code %d. Got %d\n", http.StatusOK, response.StatusCode)
    }

    if err != nil {
    	t.Errorf("Encountered an error:", err)
    }
}
--#

--% main.go
package main

import (
	"database/sql"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	"__TEMPLATE_NAMA_GO_MOD_INIT/helper"
	base62 "__TEMPLATE_NAMA_GO_MOD_INIT/utils"
	"github.com/gorilla/mux"
	_ "github.com/lib/pq"
)

// DBClient stores the database session information. Needs to be initialized once
type DBClient struct {
	db *sql.DB
}

// Record Model is a HTTP response
type Record struct {
	ID  int    `json:"id"`
	URL string `json:"url"`
}

// GetOriginalURL fetches the original URL for the given encoded(short) string
func (driver *DBClient) GetOriginalURL(w http.ResponseWriter, r *http.Request) {
	var url string
	vars := mux.Vars(r)
	// Get ID from base62 string
	id := base62.ToBase10(vars["encoded_string"])
	err := driver.db.QueryRow("SELECT url FROM web_url WHERE id = $1", id).Scan(&url)
	// Handle response details
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "application/json")
		responseMap := map[string]interface{}{"url": url}
		response, _ := json.Marshal(responseMap)
		w.Write(response)
	}
}

// GenerateShortURL adds URL to DB and gives back shortened string
func (driver *DBClient) GenerateShortURL(w http.ResponseWriter, r *http.Request) {
	var id int
	var record Record
	postBody, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(postBody, &record)
	err = driver.db.QueryRow("INSERT INTO web_url(url) VALUES($1) RETURNING id", record.URL).Scan(&id)
	responseMap := map[string]string{"encoded_string": base62.ToBase62(id)}

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "application/json")
		response, _ := json.Marshal(responseMap)
		w.Write(response)
	}
}

func main() {
	db, err := helper.InitDB()
	if err != nil {
		panic(err)
	}
	dbclient := &DBClient{db: db}
	if err != nil {
		panic(err)
	}
	defer db.Close()
	// Create a new router
	r := mux.NewRouter()
	// Attach an elegant path with handler
	r.HandleFunc("/v1/short/{encoded_string:[a-zA-Z0-9]*}", dbclient.GetOriginalURL).Methods("GET")
	r.HandleFunc("/v1/short", dbclient.GenerateShortURL).Methods("POST")
	srv := &http.Server{
		Handler: r,
		Addr:    "127.0.0.1:8000",
		// Good practice: enforce timeouts for servers you create!
		WriteTimeout: 15 * time.Second,
		ReadTimeout:  15 * time.Second,
	}
	log.Fatal(srv.ListenAndServe())
}
--#

--% info.txt
localhost:8000/
	Executing middleware before request phase!
	Executing mainHandler...
	Executing middleware after response phase!
todo:
bikin bbrp middleware...chaining gitu deh
--#
