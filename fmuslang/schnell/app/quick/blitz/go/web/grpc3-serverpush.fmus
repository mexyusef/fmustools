--% index/fmus
__PWD,d
  .,d(/load=__FILE__=index/fmus/under_pwd*)
--#
--% index/fmus/under_pwd
.,d(/mk)
	%__TEMPLATE_NAMA_GO_MOD_INIT=github.com/mexyusef/palsu
	$* go mod init __TEMPLATE_NAMA_GO_MOD_INIT
	grpcClient,d(/mk)
		client.go,f(e=__FILE__=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/grpcClient/client.go)
	grpcServer,d(/mk)
		server.go,f(e=__FILE__=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/grpcServer/server.go)
	protofiles,d(/mk)
		transaction.pb.go,f(e=__FILE__=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/protofiles/transaction.pb.go)
		transaction.proto,f(e=__FILE__=C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/protofiles/transaction.proto)
--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/grpcClient/client.go
package main

import (
	"io"
	"log"

	pb "__TEMPLATE_NAMA_GO_MOD_INIT/protofiles"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

const (
	address = "localhost:50051"
)

// ReceiveStream listens to the stream contents and use them
func ReceiveStream(client pb.MoneyTransactionClient, request *pb.TransactionRequest) {
	log.Println("Started listening to the server stream!")
	stream, err := client.MakeTransaction(context.Background(), request)
	if err != nil {
		log.Fatalf("%v.MakeTransaction(_) = _, %v", client, err)
	}
	// Listen to the stream of messages
	for {
		response, err := stream.Recv()
		if err == io.EOF {
			// If there are no more messages, get out of loop
			break
		}
		if err != nil {
			log.Fatalf("%v.MakeTransaction(_) = _, %v", client, err)
		}
		log.Printf("Status: %v, Operation: %v", response.Status, response.Description)
	}
}

func main() {
	// Set up a connection to the server.
	conn, err := grpc.Dial(address, grpc.WithInsecure())
	if err != nil {
		log.Fatalf("Did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewMoneyTransactionClient(conn)

	// Prepare data. Get this from clients like Front-end or Android App
	from := "1234"
	to := "5678"
	amount := float32(1250.75)

	// Contact the server and print out its response.
	ReceiveStream(client, &pb.TransactionRequest{From: from,
		To: to, Amount: amount})
}

--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/grpcServer/server.go
package main

import (
	"fmt"
	"log"
	"net"
	"time"

	pb "__TEMPLATE_NAMA_GO_MOD_INIT/protofiles"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	port      = ":50051"
	noOfSteps = 3
)

// server is used to create MoneyTransactionServer.
type server struct{}

// MakeTransaction implements MoneyTransactionServer.MakeTransaction
func (s *server) MakeTransaction(in *pb.TransactionRequest, stream pb.MoneyTransaction_MakeTransactionServer) error {
	log.Printf("Got request for money transfer....")
	log.Printf("Amount: $%f, From A/c:%s, To A/c:%s", in.Amount, in.From, in.To)
	// Send streams here
	for i := 0; i < noOfSteps; i++ {
		time.Sleep(time.Second * 2)
		// Once task is done, send the successful message back to the client
		if err := stream.Send(&pb.TransactionResponse{Status: "good",
			Step:        int32(i),
			Description: fmt.Sprintf("Performing step %d", int32(i))}); err != nil {
			log.Fatalf("%v.Send(%v) = %v", stream, "status", err)
		}
	}
	log.Printf("Successfully transfered amount $%v from %v to %v", in.Amount, in.From, in.To)
	return nil
}

func main() {
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}
	// Create a new GRPC Server and register
	s := grpc.NewServer()
	pb.RegisterMoneyTransactionServer(s, &server{})
	reflection.Register(s)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("Failed to serve: %v", err)
	}
}

--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/protofiles/transaction.pb.go
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

/*
Package datafiles is a generated protocol buffer package.

It is generated from these files:
	transaction.proto

It has these top-level messages:
	TransactionRequest
	TransactionResponse
*/
package datafiles

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransactionRequest struct {
	From   string  `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To     string  `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Amount float32 `protobuf:"fixed32,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionRequest) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type TransactionResponse struct {
	Status      string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Step        int32  `protobuf:"varint,2,opt,name=step" json:"step,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *TransactionResponse) Reset()                    { *m = TransactionResponse{} }
func (m *TransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*TransactionResponse) ProtoMessage()               {}
func (*TransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransactionResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TransactionResponse) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *TransactionResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*TransactionRequest)(nil), "datafiles.TransactionRequest")
	proto.RegisterType((*TransactionResponse)(nil), "datafiles.TransactionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MoneyTransaction service

type MoneyTransactionClient interface {
	MakeTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (MoneyTransaction_MakeTransactionClient, error)
}

type moneyTransactionClient struct {
	cc *grpc.ClientConn
}

func NewMoneyTransactionClient(cc *grpc.ClientConn) MoneyTransactionClient {
	return &moneyTransactionClient{cc}
}

func (c *moneyTransactionClient) MakeTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (MoneyTransaction_MakeTransactionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MoneyTransaction_serviceDesc.Streams[0], c.cc, "/datafiles.MoneyTransaction/MakeTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &moneyTransactionMakeTransactionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MoneyTransaction_MakeTransactionClient interface {
	Recv() (*TransactionResponse, error)
	grpc.ClientStream
}

type moneyTransactionMakeTransactionClient struct {
	grpc.ClientStream
}

func (x *moneyTransactionMakeTransactionClient) Recv() (*TransactionResponse, error) {
	m := new(TransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MoneyTransaction service

type MoneyTransactionServer interface {
	MakeTransaction(*TransactionRequest, MoneyTransaction_MakeTransactionServer) error
}

func RegisterMoneyTransactionServer(s *grpc.Server, srv MoneyTransactionServer) {
	s.RegisterService(&_MoneyTransaction_serviceDesc, srv)
}

func _MoneyTransaction_MakeTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MoneyTransactionServer).MakeTransaction(m, &moneyTransactionMakeTransactionServer{stream})
}

type MoneyTransaction_MakeTransactionServer interface {
	Send(*TransactionResponse) error
	grpc.ServerStream
}

type moneyTransactionMakeTransactionServer struct {
	grpc.ServerStream
}

func (x *moneyTransactionMakeTransactionServer) Send(m *TransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MoneyTransaction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datafiles.MoneyTransaction",
	HandlerType: (*MoneyTransactionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MakeTransaction",
			Handler:       _MoneyTransaction_MakeTransaction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction.proto",
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xdd, 0x4a, 0xc4, 0x30,
	0x10, 0x85, 0x4d, 0xd4, 0x85, 0x8e, 0xe0, 0xcf, 0x08, 0x52, 0x04, 0xa5, 0xf4, 0x6a, 0xaf, 0x8a,
	0xe8, 0x73, 0x2c, 0x48, 0xd8, 0x17, 0x88, 0xed, 0x14, 0x8b, 0x36, 0x13, 0x33, 0xd3, 0x0b, 0xdf,
	0x5e, 0x1a, 0x8b, 0x56, 0x64, 0xef, 0x66, 0xce, 0x09, 0xdf, 0xc9, 0x19, 0xb8, 0xd2, 0xe4, 0x83,
	0xf8, 0x56, 0x07, 0x0e, 0x4d, 0x4c, 0xac, 0x8c, 0x45, 0xe7, 0xd5, 0xf7, 0xc3, 0x3b, 0x49, 0xfd,
	0x0c, 0xb8, 0xff, 0xf5, 0x1d, 0x7d, 0x4c, 0x24, 0x8a, 0x08, 0x27, 0x7d, 0xe2, 0xb1, 0x34, 0x95,
	0xd9, 0x16, 0x2e, 0xcf, 0x78, 0x0e, 0x56, 0xb9, 0xb4, 0x59, 0xb1, 0xca, 0x78, 0x03, 0x1b, 0x3f,
	0xf2, 0x14, 0xb4, 0x3c, 0xae, 0xcc, 0xd6, 0xba, 0x65, 0xab, 0x5b, 0xb8, 0xfe, 0x43, 0x94, 0xc8,
	0x41, 0x68, 0x7e, 0x2e, 0xea, 0x75, 0x92, 0x05, 0xba, 0x6c, 0x73, 0x94, 0x28, 0xc5, 0x0c, 0x3e,
	0x75, 0x79, 0xc6, 0x0a, 0xce, 0x3a, 0x92, 0x36, 0x0d, 0x71, 0x46, 0x64, 0x7e, 0xe1, 0xd6, 0xd2,
	0xe3, 0x2b, 0x5c, 0xee, 0x38, 0xd0, 0xe7, 0x2a, 0x09, 0xf7, 0x70, 0xb1, 0xf3, 0x6f, 0xb4, 0x96,
	0xee, 0x9a, 0x9f, 0xa6, 0xcd, 0xff, 0x9a, 0xb7, 0xf7, 0x87, 0xec, 0xef, 0x3f, 0xd7, 0x47, 0x0f,
	0xe6, 0x65, 0x93, 0x4f, 0xf6, 0xf4, 0x15, 0x00, 0x00, 0xff, 0xff, 0x49, 0xf1, 0xd5, 0xc0, 0x47,
	0x01, 0x00, 0x00,
}

--#

--% C:/work/github/go/Hands-On-Restful-Web-services-with-Go/chapter6/serverPush/protofiles/transaction.proto
syntax = "proto3";
package protofiles;

message TransactionRequest {
   string from = 1;
   string to = 2;
   float amount = 3;
}

message TransactionResponse {
  string status = 1;
  int32 step = 2;
  string description = 3;
}

service MoneyTransaction {
    rpc MakeTransaction(TransactionRequest) returns (stream TransactionResponse) {}
}

--#

